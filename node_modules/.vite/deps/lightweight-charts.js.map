{
  "version": 3,
  "sources": ["../../fancy-canvas/size.mjs", "../../fancy-canvas/device-pixel-ratio.mjs", "../../fancy-canvas/canvas-element-bitmap-size.mjs", "../../fancy-canvas/canvas-rendering-target.mjs", "../../lightweight-charts/dist/lightweight-charts.development.mjs"],
  "sourcesContent": ["export function size(_a) {\r\n    var width = _a.width, height = _a.height;\r\n    if (width < 0) {\r\n        throw new Error('Negative width is not allowed for Size');\r\n    }\r\n    if (height < 0) {\r\n        throw new Error('Negative height is not allowed for Size');\r\n    }\r\n    return {\r\n        width: width,\r\n        height: height,\r\n    };\r\n}\r\nexport function equalSizes(first, second) {\r\n    return (first.width === second.width) &&\r\n        (first.height === second.height);\r\n}\r\n", "var Observable = /** @class */ (function () {\r\n    function Observable(win) {\r\n        var _this = this;\r\n        this._resolutionListener = function () { return _this._onResolutionChanged(); };\r\n        this._resolutionMediaQueryList = null;\r\n        this._observers = [];\r\n        this._window = win;\r\n        this._installResolutionListener();\r\n    }\r\n    Observable.prototype.dispose = function () {\r\n        this._uninstallResolutionListener();\r\n        this._window = null;\r\n    };\r\n    Object.defineProperty(Observable.prototype, \"value\", {\r\n        get: function () {\r\n            return this._window.devicePixelRatio;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Observable.prototype.subscribe = function (next) {\r\n        var _this = this;\r\n        var observer = { next: next };\r\n        this._observers.push(observer);\r\n        return {\r\n            unsubscribe: function () {\r\n                _this._observers = _this._observers.filter(function (o) { return o !== observer; });\r\n            },\r\n        };\r\n    };\r\n    Observable.prototype._installResolutionListener = function () {\r\n        if (this._resolutionMediaQueryList !== null) {\r\n            throw new Error('Resolution listener is already installed');\r\n        }\r\n        var dppx = this._window.devicePixelRatio;\r\n        this._resolutionMediaQueryList = this._window.matchMedia(\"all and (resolution: \".concat(dppx, \"dppx)\"));\r\n        // IE and some versions of Edge do not support addEventListener/removeEventListener, and we are going to use the deprecated addListener/removeListener\r\n        this._resolutionMediaQueryList.addListener(this._resolutionListener);\r\n    };\r\n    Observable.prototype._uninstallResolutionListener = function () {\r\n        if (this._resolutionMediaQueryList !== null) {\r\n            // IE and some versions of Edge do not support addEventListener/removeEventListener, and we are going to use the deprecated addListener/removeListener\r\n            this._resolutionMediaQueryList.removeListener(this._resolutionListener);\r\n            this._resolutionMediaQueryList = null;\r\n        }\r\n    };\r\n    Observable.prototype._reinstallResolutionListener = function () {\r\n        this._uninstallResolutionListener();\r\n        this._installResolutionListener();\r\n    };\r\n    Observable.prototype._onResolutionChanged = function () {\r\n        var _this = this;\r\n        this._observers.forEach(function (observer) { return observer.next(_this._window.devicePixelRatio); });\r\n        this._reinstallResolutionListener();\r\n    };\r\n    return Observable;\r\n}());\r\nexport function createObservable(win) {\r\n    return new Observable(win);\r\n}\r\n", "import { equalSizes, size } from \"./size.mjs\";\r\nimport { createObservable as createDevicePixelRatioObservable } from \"./device-pixel-ratio.mjs\";\r\nvar DevicePixelContentBoxBinding = /** @class */ (function () {\r\n    function DevicePixelContentBoxBinding(canvasElement, transformBitmapSize, options) {\r\n        var _a;\r\n        this._canvasElement = null;\r\n        this._bitmapSizeChangedListeners = [];\r\n        this._suggestedBitmapSize = null;\r\n        this._suggestedBitmapSizeChangedListeners = [];\r\n        // devicePixelRatio approach\r\n        this._devicePixelRatioObservable = null;\r\n        // ResizeObserver approach\r\n        this._canvasElementResizeObserver = null;\r\n        this._canvasElement = canvasElement;\r\n        this._canvasElementClientSize = size({\r\n            width: this._canvasElement.clientWidth,\r\n            height: this._canvasElement.clientHeight,\r\n        });\r\n        this._transformBitmapSize = transformBitmapSize !== null && transformBitmapSize !== void 0 ? transformBitmapSize : (function (size) { return size; });\r\n        this._allowResizeObserver = (_a = options === null || options === void 0 ? void 0 : options.allowResizeObserver) !== null && _a !== void 0 ? _a : true;\r\n        this._chooseAndInitObserver();\r\n        // we MAY leave the constuctor without any bitmap size observation mechanics initialized\r\n    }\r\n    DevicePixelContentBoxBinding.prototype.dispose = function () {\r\n        var _a, _b;\r\n        if (this._canvasElement === null) {\r\n            throw new Error('Object is disposed');\r\n        }\r\n        (_a = this._canvasElementResizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n        this._canvasElementResizeObserver = null;\r\n        (_b = this._devicePixelRatioObservable) === null || _b === void 0 ? void 0 : _b.dispose();\r\n        this._devicePixelRatioObservable = null;\r\n        this._suggestedBitmapSizeChangedListeners.length = 0;\r\n        this._bitmapSizeChangedListeners.length = 0;\r\n        this._canvasElement = null;\r\n    };\r\n    Object.defineProperty(DevicePixelContentBoxBinding.prototype, \"canvasElement\", {\r\n        get: function () {\r\n            if (this._canvasElement === null) {\r\n                throw new Error('Object is disposed');\r\n            }\r\n            return this._canvasElement;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DevicePixelContentBoxBinding.prototype, \"canvasElementClientSize\", {\r\n        get: function () {\r\n            return this._canvasElementClientSize;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DevicePixelContentBoxBinding.prototype, \"bitmapSize\", {\r\n        get: function () {\r\n            return size({\r\n                width: this.canvasElement.width,\r\n                height: this.canvasElement.height,\r\n            });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Use this function to change canvas element client size until binding is disposed\r\n     * @param clientSize New client size for bound HTMLCanvasElement\r\n     */\r\n    DevicePixelContentBoxBinding.prototype.resizeCanvasElement = function (clientSize) {\r\n        this._canvasElementClientSize = size(clientSize);\r\n        this.canvasElement.style.width = \"\".concat(this._canvasElementClientSize.width, \"px\");\r\n        this.canvasElement.style.height = \"\".concat(this._canvasElementClientSize.height, \"px\");\r\n        this._invalidateBitmapSize();\r\n    };\r\n    DevicePixelContentBoxBinding.prototype.subscribeBitmapSizeChanged = function (listener) {\r\n        this._bitmapSizeChangedListeners.push(listener);\r\n    };\r\n    DevicePixelContentBoxBinding.prototype.unsubscribeBitmapSizeChanged = function (listener) {\r\n        this._bitmapSizeChangedListeners = this._bitmapSizeChangedListeners.filter(function (l) { return l !== listener; });\r\n    };\r\n    Object.defineProperty(DevicePixelContentBoxBinding.prototype, \"suggestedBitmapSize\", {\r\n        get: function () {\r\n            return this._suggestedBitmapSize;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DevicePixelContentBoxBinding.prototype.subscribeSuggestedBitmapSizeChanged = function (listener) {\r\n        this._suggestedBitmapSizeChangedListeners.push(listener);\r\n    };\r\n    DevicePixelContentBoxBinding.prototype.unsubscribeSuggestedBitmapSizeChanged = function (listener) {\r\n        this._suggestedBitmapSizeChangedListeners = this._suggestedBitmapSizeChangedListeners.filter(function (l) { return l !== listener; });\r\n    };\r\n    DevicePixelContentBoxBinding.prototype.applySuggestedBitmapSize = function () {\r\n        if (this._suggestedBitmapSize === null) {\r\n            // nothing to apply\r\n            return;\r\n        }\r\n        var oldSuggestedSize = this._suggestedBitmapSize;\r\n        this._suggestedBitmapSize = null;\r\n        this._resizeBitmap(oldSuggestedSize);\r\n        this._emitSuggestedBitmapSizeChanged(oldSuggestedSize, this._suggestedBitmapSize);\r\n    };\r\n    DevicePixelContentBoxBinding.prototype._resizeBitmap = function (newSize) {\r\n        var oldSize = this.bitmapSize;\r\n        if (equalSizes(oldSize, newSize)) {\r\n            return;\r\n        }\r\n        this.canvasElement.width = newSize.width;\r\n        this.canvasElement.height = newSize.height;\r\n        this._emitBitmapSizeChanged(oldSize, newSize);\r\n    };\r\n    DevicePixelContentBoxBinding.prototype._emitBitmapSizeChanged = function (oldSize, newSize) {\r\n        var _this = this;\r\n        this._bitmapSizeChangedListeners.forEach(function (listener) { return listener.call(_this, oldSize, newSize); });\r\n    };\r\n    DevicePixelContentBoxBinding.prototype._suggestNewBitmapSize = function (newSize) {\r\n        var oldSuggestedSize = this._suggestedBitmapSize;\r\n        var finalNewSize = size(this._transformBitmapSize(newSize, this._canvasElementClientSize));\r\n        var newSuggestedSize = equalSizes(this.bitmapSize, finalNewSize) ? null : finalNewSize;\r\n        if (oldSuggestedSize === null && newSuggestedSize === null) {\r\n            return;\r\n        }\r\n        if (oldSuggestedSize !== null && newSuggestedSize !== null\r\n            && equalSizes(oldSuggestedSize, newSuggestedSize)) {\r\n            return;\r\n        }\r\n        this._suggestedBitmapSize = newSuggestedSize;\r\n        this._emitSuggestedBitmapSizeChanged(oldSuggestedSize, newSuggestedSize);\r\n    };\r\n    DevicePixelContentBoxBinding.prototype._emitSuggestedBitmapSizeChanged = function (oldSize, newSize) {\r\n        var _this = this;\r\n        this._suggestedBitmapSizeChangedListeners.forEach(function (listener) { return listener.call(_this, oldSize, newSize); });\r\n    };\r\n    DevicePixelContentBoxBinding.prototype._chooseAndInitObserver = function () {\r\n        var _this = this;\r\n        if (!this._allowResizeObserver) {\r\n            this._initDevicePixelRatioObservable();\r\n            return;\r\n        }\r\n        isDevicePixelContentBoxSupported()\r\n            .then(function (isSupported) {\r\n            return isSupported ?\r\n                _this._initResizeObserver() :\r\n                _this._initDevicePixelRatioObservable();\r\n        });\r\n    };\r\n    // devicePixelRatio approach\r\n    DevicePixelContentBoxBinding.prototype._initDevicePixelRatioObservable = function () {\r\n        var _this = this;\r\n        if (this._canvasElement === null) {\r\n            // it looks like we are already dead\r\n            return;\r\n        }\r\n        var win = canvasElementWindow(this._canvasElement);\r\n        if (win === null) {\r\n            throw new Error('No window is associated with the canvas');\r\n        }\r\n        this._devicePixelRatioObservable = createDevicePixelRatioObservable(win);\r\n        this._devicePixelRatioObservable.subscribe(function () { return _this._invalidateBitmapSize(); });\r\n        this._invalidateBitmapSize();\r\n    };\r\n    DevicePixelContentBoxBinding.prototype._invalidateBitmapSize = function () {\r\n        var _a, _b;\r\n        if (this._canvasElement === null) {\r\n            // it looks like we are already dead\r\n            return;\r\n        }\r\n        var win = canvasElementWindow(this._canvasElement);\r\n        if (win === null) {\r\n            return;\r\n        }\r\n        var ratio = (_b = (_a = this._devicePixelRatioObservable) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : win.devicePixelRatio;\r\n        var canvasRects = this._canvasElement.getClientRects();\r\n        var newSize = \r\n        // eslint-disable-next-line no-negated-condition\r\n        canvasRects[0] !== undefined ?\r\n            predictedBitmapSize(canvasRects[0], ratio) :\r\n            size({\r\n                width: this._canvasElementClientSize.width * ratio,\r\n                height: this._canvasElementClientSize.height * ratio,\r\n            });\r\n        this._suggestNewBitmapSize(newSize);\r\n    };\r\n    // ResizeObserver approach\r\n    DevicePixelContentBoxBinding.prototype._initResizeObserver = function () {\r\n        var _this = this;\r\n        if (this._canvasElement === null) {\r\n            // it looks like we are already dead\r\n            return;\r\n        }\r\n        this._canvasElementResizeObserver = new ResizeObserver(function (entries) {\r\n            var entry = entries.find(function (entry) { return entry.target === _this._canvasElement; });\r\n            if (!entry || !entry.devicePixelContentBoxSize || !entry.devicePixelContentBoxSize[0]) {\r\n                return;\r\n            }\r\n            var entrySize = entry.devicePixelContentBoxSize[0];\r\n            var newSize = size({\r\n                width: entrySize.inlineSize,\r\n                height: entrySize.blockSize,\r\n            });\r\n            _this._suggestNewBitmapSize(newSize);\r\n        });\r\n        this._canvasElementResizeObserver.observe(this._canvasElement, { box: 'device-pixel-content-box' });\r\n    };\r\n    return DevicePixelContentBoxBinding;\r\n}());\r\nexport function bindTo(canvasElement, target) {\r\n    if (target.type === 'device-pixel-content-box') {\r\n        return new DevicePixelContentBoxBinding(canvasElement, target.transform, target.options);\r\n    }\r\n    throw new Error('Unsupported binding target');\r\n}\r\nfunction canvasElementWindow(canvasElement) {\r\n    // According to DOM Level 2 Core specification, ownerDocument should never be null for HTMLCanvasElement\r\n    // see https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#node-ownerDoc\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    return canvasElement.ownerDocument.defaultView;\r\n}\r\nfunction isDevicePixelContentBoxSupported() {\r\n    return new Promise(function (resolve) {\r\n        var ro = new ResizeObserver(function (entries) {\r\n            resolve(entries.every(function (entry) { return 'devicePixelContentBoxSize' in entry; }));\r\n            ro.disconnect();\r\n        });\r\n        ro.observe(document.body, { box: 'device-pixel-content-box' });\r\n    })\r\n        .catch(function () { return false; });\r\n}\r\nfunction predictedBitmapSize(canvasRect, ratio) {\r\n    return size({\r\n        width: Math.round(canvasRect.left * ratio + canvasRect.width * ratio) -\r\n            Math.round(canvasRect.left * ratio),\r\n        height: Math.round(canvasRect.top * ratio + canvasRect.height * ratio) -\r\n            Math.round(canvasRect.top * ratio),\r\n    });\r\n}\r\n", "/**\r\n * @experimental\r\n */\r\nvar CanvasRenderingTarget2D = /** @class */ (function () {\r\n    function CanvasRenderingTarget2D(context, mediaSize, bitmapSize) {\r\n        if (mediaSize.width === 0 || mediaSize.height === 0) {\r\n            throw new TypeError('Rendering target could only be created on a media with positive width and height');\r\n        }\r\n        this._mediaSize = mediaSize;\r\n        // !Number.isInteger(bitmapSize.width) || !Number.isInteger(bitmapSize.height)\r\n        if (bitmapSize.width === 0 || bitmapSize.height === 0) {\r\n            throw new TypeError('Rendering target could only be created using a bitmap with positive integer width and height');\r\n        }\r\n        this._bitmapSize = bitmapSize;\r\n        this._context = context;\r\n    }\r\n    CanvasRenderingTarget2D.prototype.useMediaCoordinateSpace = function (f) {\r\n        try {\r\n            this._context.save();\r\n            // do not use resetTransform to support old versions of Edge\r\n            this._context.setTransform(1, 0, 0, 1, 0, 0);\r\n            this._context.scale(this._horizontalPixelRatio, this._verticalPixelRatio);\r\n            return f({\r\n                context: this._context,\r\n                mediaSize: this._mediaSize,\r\n            });\r\n        }\r\n        finally {\r\n            this._context.restore();\r\n        }\r\n    };\r\n    CanvasRenderingTarget2D.prototype.useBitmapCoordinateSpace = function (f) {\r\n        try {\r\n            this._context.save();\r\n            // do not use resetTransform to support old versions of Edge\r\n            this._context.setTransform(1, 0, 0, 1, 0, 0);\r\n            return f({\r\n                context: this._context,\r\n                mediaSize: this._mediaSize,\r\n                bitmapSize: this._bitmapSize,\r\n                horizontalPixelRatio: this._horizontalPixelRatio,\r\n                verticalPixelRatio: this._verticalPixelRatio,\r\n            });\r\n        }\r\n        finally {\r\n            this._context.restore();\r\n        }\r\n    };\r\n    Object.defineProperty(CanvasRenderingTarget2D.prototype, \"_horizontalPixelRatio\", {\r\n        get: function () {\r\n            return this._bitmapSize.width / this._mediaSize.width;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CanvasRenderingTarget2D.prototype, \"_verticalPixelRatio\", {\r\n        get: function () {\r\n            return this._bitmapSize.height / this._mediaSize.height;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return CanvasRenderingTarget2D;\r\n}());\r\nexport { CanvasRenderingTarget2D };\r\n/**\r\n * @experimental\r\n */\r\nexport function createCanvasRenderingTarget2D(binding, contextOptions) {\r\n    var mediaSize = binding.canvasElementClientSize;\r\n    var bitmapSize = binding.bitmapSize;\r\n    var context = binding.canvasElement.getContext('2d', contextOptions);\r\n    if (context === null) {\r\n        throw new Error('Could not get 2d drawing context from bound canvas element. Has the canvas already been set to a different context mode?');\r\n    }\r\n    return new CanvasRenderingTarget2D(context, mediaSize, bitmapSize);\r\n}\r\n/**\r\n * @experimental\r\n */\r\nexport function tryCreateCanvasRenderingTarget2D(binding, contextOptions) {\r\n    var mediaSize = binding.canvasElementClientSize;\r\n    if (mediaSize.width === 0 || mediaSize.height === 0) {\r\n        return null;\r\n    }\r\n    var bitmapSize = binding.bitmapSize;\r\n    if (bitmapSize.width === 0 || bitmapSize.height === 0) {\r\n        return null;\r\n    }\r\n    var context = binding.canvasElement.getContext('2d', contextOptions);\r\n    if (context === null) {\r\n        return null;\r\n    }\r\n    return new CanvasRenderingTarget2D(context, mediaSize, bitmapSize);\r\n}\r\n", "/*!\r\n * @license\r\n * TradingView Lightweight Charts™ v5.0.8\r\n * Copyright (c) 2025 TradingView, Inc.\r\n * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0\r\n */\r\nimport { size as size$1, bindCanvasElementBitmapSizeTo, equalSizes, tryCreateCanvasRenderingTarget2D } from 'fancy-canvas';\r\n\r\nconst customStyleDefaults$1 = {\r\n    color: '#2196f3',\r\n};\r\nconst seriesOptionsDefaults = {\r\n    title: '',\r\n    visible: true,\r\n    lastValueVisible: true,\r\n    priceLineVisible: true,\r\n    priceLineSource: 0 /* PriceLineSource.LastBar */,\r\n    priceLineWidth: 1,\r\n    priceLineColor: '',\r\n    priceLineStyle: 2 /* LineStyle.Dashed */,\r\n    baseLineVisible: true,\r\n    baseLineWidth: 1,\r\n    baseLineColor: '#B2B5BE',\r\n    baseLineStyle: 0 /* LineStyle.Solid */,\r\n    priceFormat: {\r\n        type: 'price',\r\n        precision: 2,\r\n        minMove: 0.01,\r\n    },\r\n};\r\n\r\n/**\r\n * Represents the possible line types.\r\n */\r\nvar LineType;\r\n(function (LineType) {\r\n    /**\r\n     * A line.\r\n     */\r\n    LineType[LineType[\"Simple\"] = 0] = \"Simple\";\r\n    /**\r\n     * A stepped line.\r\n     */\r\n    LineType[LineType[\"WithSteps\"] = 1] = \"WithSteps\";\r\n    /**\r\n     * A curved line.\r\n     */\r\n    LineType[LineType[\"Curved\"] = 2] = \"Curved\";\r\n})(LineType || (LineType = {}));\r\n/**\r\n * Represents the possible line styles.\r\n */\r\nvar LineStyle;\r\n(function (LineStyle) {\r\n    /**\r\n     * A solid line.\r\n     */\r\n    LineStyle[LineStyle[\"Solid\"] = 0] = \"Solid\";\r\n    /**\r\n     * A dotted line.\r\n     */\r\n    LineStyle[LineStyle[\"Dotted\"] = 1] = \"Dotted\";\r\n    /**\r\n     * A dashed line.\r\n     */\r\n    LineStyle[LineStyle[\"Dashed\"] = 2] = \"Dashed\";\r\n    /**\r\n     * A dashed line with bigger dashes.\r\n     */\r\n    LineStyle[LineStyle[\"LargeDashed\"] = 3] = \"LargeDashed\";\r\n    /**\r\n     * A dotted line with more space between dots.\r\n     */\r\n    LineStyle[LineStyle[\"SparseDotted\"] = 4] = \"SparseDotted\";\r\n})(LineStyle || (LineStyle = {}));\r\nfunction setLineStyle(ctx, style) {\r\n    const dashPatterns = {\r\n        [0 /* LineStyle.Solid */]: [],\r\n        [1 /* LineStyle.Dotted */]: [ctx.lineWidth, ctx.lineWidth],\r\n        [2 /* LineStyle.Dashed */]: [2 * ctx.lineWidth, 2 * ctx.lineWidth],\r\n        [3 /* LineStyle.LargeDashed */]: [6 * ctx.lineWidth, 6 * ctx.lineWidth],\r\n        [4 /* LineStyle.SparseDotted */]: [ctx.lineWidth, 4 * ctx.lineWidth],\r\n    };\r\n    const dashPattern = dashPatterns[style];\r\n    ctx.setLineDash(dashPattern);\r\n}\r\nfunction drawHorizontalLine(ctx, y, left, right) {\r\n    ctx.beginPath();\r\n    const correction = (ctx.lineWidth % 2) ? 0.5 : 0;\r\n    ctx.moveTo(left, y + correction);\r\n    ctx.lineTo(right, y + correction);\r\n    ctx.stroke();\r\n}\r\nfunction drawVerticalLine(ctx, x, top, bottom) {\r\n    ctx.beginPath();\r\n    const correction = (ctx.lineWidth % 2) ? 0.5 : 0;\r\n    ctx.moveTo(x + correction, top);\r\n    ctx.lineTo(x + correction, bottom);\r\n    ctx.stroke();\r\n}\r\nfunction strokeInPixel(ctx, drawFunction) {\r\n    ctx.save();\r\n    if (ctx.lineWidth % 2) {\r\n        ctx.translate(0.5, 0.5);\r\n    }\r\n    drawFunction();\r\n    ctx.restore();\r\n}\r\n\r\n/**\r\n * Checks an assertion. Throws if the assertion is failed.\r\n *\r\n * @param condition - Result of the assertion evaluation\r\n * @param message - Text to include in the exception message\r\n */\r\nfunction assert(condition, message) {\r\n    if (!condition) {\r\n        throw new Error('Assertion failed' + (message ? ': ' + message : ''));\r\n    }\r\n}\r\nfunction ensureDefined(value) {\r\n    if (value === undefined) {\r\n        throw new Error('Value is undefined');\r\n    }\r\n    return value;\r\n}\r\nfunction ensureNotNull(value) {\r\n    if (value === null) {\r\n        throw new Error('Value is null');\r\n    }\r\n    return value;\r\n}\r\nfunction ensure(value) {\r\n    return ensureNotNull(ensureDefined(value));\r\n}\r\n/**\r\n * Compile time check for never\r\n */\r\nfunction ensureNever(value) { }\r\n\r\nclass Delegate {\r\n    constructor() {\r\n        this._private__listeners = [];\r\n    }\r\n    _internal_subscribe(callback, linkedObject, singleshot) {\r\n        const listener = {\r\n            _internal_callback: callback,\r\n            _internal_linkedObject: linkedObject,\r\n            _internal_singleshot: singleshot === true,\r\n        };\r\n        this._private__listeners.push(listener);\r\n    }\r\n    _internal_unsubscribe(callback) {\r\n        const index = this._private__listeners.findIndex((listener) => callback === listener._internal_callback);\r\n        if (index > -1) {\r\n            this._private__listeners.splice(index, 1);\r\n        }\r\n    }\r\n    _internal_unsubscribeAll(linkedObject) {\r\n        this._private__listeners = this._private__listeners.filter((listener) => listener._internal_linkedObject !== linkedObject);\r\n    }\r\n    _internal_fire(param1, param2, param3) {\r\n        const listenersSnapshot = [...this._private__listeners];\r\n        this._private__listeners = this._private__listeners.filter((listener) => !listener._internal_singleshot);\r\n        listenersSnapshot.forEach((listener) => listener._internal_callback(param1, param2, param3));\r\n    }\r\n    _internal_hasListeners() {\r\n        return this._private__listeners.length > 0;\r\n    }\r\n    _internal_destroy() {\r\n        this._private__listeners = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction merge(dst, ...sources) {\r\n    for (const src of sources) {\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        for (const i in src) {\r\n            if (src[i] === undefined ||\r\n                !Object.prototype.hasOwnProperty.call(src, i) ||\r\n                ['__proto__', 'constructor', 'prototype'].includes(i)) {\r\n                continue;\r\n            }\r\n            if ('object' !== typeof src[i] || dst[i] === undefined || Array.isArray(src[i])) {\r\n                dst[i] = src[i];\r\n            }\r\n            else {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                merge(dst[i], src[i]);\r\n            }\r\n        }\r\n    }\r\n    return dst;\r\n}\r\nfunction isNumber(value) {\r\n    return (typeof value === 'number') && (isFinite(value));\r\n}\r\nfunction isInteger(value) {\r\n    return (typeof value === 'number') && ((value % 1) === 0);\r\n}\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nfunction isBoolean(value) {\r\n    return typeof value === 'boolean';\r\n}\r\nfunction clone(object) {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const o = object;\r\n    if (!o || 'object' !== typeof o) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return o;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let c;\r\n    if (Array.isArray(o)) {\r\n        c = [];\r\n    }\r\n    else {\r\n        c = {};\r\n    }\r\n    let p;\r\n    let v;\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (p in o) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,no-prototype-builtins\r\n        if (o.hasOwnProperty(p)) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n            v = o[p];\r\n            if (v && 'object' === typeof v) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                c[p] = clone(v);\r\n            }\r\n            else {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                c[p] = v;\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return c;\r\n}\r\nfunction notNull(t) {\r\n    return t !== null;\r\n}\r\nfunction undefinedIfNull(t) {\r\n    return (t === null) ? undefined : t;\r\n}\r\n\r\n/**\r\n * Default font family.\r\n * Must be used to generate font string when font is not specified.\r\n */\r\nconst defaultFontFamily = `-apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif`;\r\n/**\r\n * Generates a font string, which can be used to set in canvas' font property.\r\n * If no family provided, {@link defaultFontFamily} will be used.\r\n *\r\n * @param size - Font size in pixels.\r\n * @param family - Optional font family.\r\n * @param style - Optional font style.\r\n * @returns The font string.\r\n */\r\nfunction makeFont(size, family, style) {\r\n    if (style !== undefined) {\r\n        style = `${style} `;\r\n    }\r\n    else {\r\n        style = '';\r\n    }\r\n    if (family === undefined) {\r\n        family = defaultFontFamily;\r\n    }\r\n    return `${style}${size}px ${family}`;\r\n}\r\n\r\nclass PriceAxisRendererOptionsProvider {\r\n    constructor(chartModel) {\r\n        this._private__rendererOptions = {\r\n            _internal_borderSize: 1 /* RendererConstants.BorderSize */,\r\n            _internal_tickLength: 5 /* RendererConstants.TickLength */,\r\n            _internal_fontSize: NaN,\r\n            _internal_font: '',\r\n            _internal_fontFamily: '',\r\n            _internal_color: '',\r\n            _internal_paneBackgroundColor: '',\r\n            _internal_paddingBottom: 0,\r\n            _internal_paddingInner: 0,\r\n            _internal_paddingOuter: 0,\r\n            _internal_paddingTop: 0,\r\n            _internal_baselineOffset: 0,\r\n        };\r\n        this._private__chartModel = chartModel;\r\n    }\r\n    _internal_options() {\r\n        const rendererOptions = this._private__rendererOptions;\r\n        const currentFontSize = this._private__fontSize();\r\n        const currentFontFamily = this._private__fontFamily();\r\n        if (rendererOptions._internal_fontSize !== currentFontSize || rendererOptions._internal_fontFamily !== currentFontFamily) {\r\n            rendererOptions._internal_fontSize = currentFontSize;\r\n            rendererOptions._internal_fontFamily = currentFontFamily;\r\n            rendererOptions._internal_font = makeFont(currentFontSize, currentFontFamily);\r\n            rendererOptions._internal_paddingTop = 2.5 / 12 * currentFontSize; // 2.5 px for 12px font\r\n            rendererOptions._internal_paddingBottom = rendererOptions._internal_paddingTop;\r\n            rendererOptions._internal_paddingInner = currentFontSize / 12 * rendererOptions._internal_tickLength;\r\n            rendererOptions._internal_paddingOuter = currentFontSize / 12 * rendererOptions._internal_tickLength;\r\n            rendererOptions._internal_baselineOffset = 0;\r\n        }\r\n        rendererOptions._internal_color = this._private__textColor();\r\n        rendererOptions._internal_paneBackgroundColor = this._private__paneBackgroundColor();\r\n        return this._private__rendererOptions;\r\n    }\r\n    _private__textColor() {\r\n        return this._private__chartModel._internal_options()['layout'].textColor;\r\n    }\r\n    _private__paneBackgroundColor() {\r\n        return this._private__chartModel._internal_backgroundTopColor();\r\n    }\r\n    _private__fontSize() {\r\n        return this._private__chartModel._internal_options()['layout'].fontSize;\r\n    }\r\n    _private__fontFamily() {\r\n        return this._private__chartModel._internal_options()['layout'].fontFamily;\r\n    }\r\n}\r\n\r\nfunction normalizeRgbComponent(component) {\r\n    if (component < 0) {\r\n        return 0;\r\n    }\r\n    if (component > 255) {\r\n        return 255;\r\n    }\r\n    // NaN values are treated as 0\r\n    return (Math.round(component) || 0);\r\n}\r\nfunction normalizeAlphaComponent(component) {\r\n    if (component <= 0 || component > 1) {\r\n        return Math.min(Math.max(component, 0), 1);\r\n    }\r\n    // limit the precision of all numbers to at most 4 digits in fractional part\r\n    return (Math.round(component * 10000) / 10000);\r\n}\r\nfunction rgbaToGrayscale(rgbValue) {\r\n    // Originally, the NTSC RGB to YUV formula\r\n    // perfected by @eugene-korobko's black magic\r\n    const redComponentGrayscaleWeight = 0.199;\r\n    const greenComponentGrayscaleWeight = 0.687;\r\n    const blueComponentGrayscaleWeight = 0.114;\r\n    return (redComponentGrayscaleWeight * rgbValue[0] +\r\n        greenComponentGrayscaleWeight * rgbValue[1] +\r\n        blueComponentGrayscaleWeight * rgbValue[2]);\r\n}\r\n/**\r\n * For colors which fall within the sRGB space, the browser can\r\n * be used to convert the color string into a rgb /rgba string.\r\n *\r\n * For other colors, it will be returned as specified (i.e. for\r\n * newer formats like display-p3)\r\n *\r\n * See: https://www.w3.org/TR/css-color-4/#serializing-sRGB-values\r\n */\r\nfunction getRgbStringViaBrowser(color) {\r\n    const element = document.createElement('div');\r\n    element.style.display = 'none';\r\n    // We append to the body as it is the most reliable way to get a color reading\r\n    // appending to the chart container or similar element can result in the following\r\n    // getComputedStyle returning empty strings on each check.\r\n    document.body.appendChild(element);\r\n    element.style.color = color;\r\n    const computed = window.getComputedStyle(element).color;\r\n    document.body.removeChild(element);\r\n    return computed;\r\n}\r\nclass ColorParser {\r\n    constructor(customParsers, initialCache) {\r\n        this._private__rgbaCache = new Map();\r\n        this._private__customParsers = customParsers;\r\n        if (initialCache) {\r\n            this._private__rgbaCache = initialCache;\r\n        }\r\n    }\r\n    /**\r\n     * We fallback to RGBA here since supporting alpha transformations\r\n     * on wider color gamuts would currently be a lot of extra code\r\n     * for very little benefit due to actual usage.\r\n     */\r\n    _internal_applyAlpha(color, alpha) {\r\n        // special case optimization\r\n        if (color === 'transparent') {\r\n            return color;\r\n        }\r\n        const originRgba = this._private__parseColor(color);\r\n        const originAlpha = originRgba[3];\r\n        return `rgba(${originRgba[0]}, ${originRgba[1]}, ${originRgba[2]}, ${alpha * originAlpha})`;\r\n    }\r\n    _internal_generateContrastColors(background) {\r\n        const rgba = this._private__parseColor(background);\r\n        return {\r\n            _internal_background: `rgb(${rgba[0]}, ${rgba[1]}, ${rgba[2]})`, // no alpha\r\n            _internal_foreground: rgbaToGrayscale(rgba) > 160 ? 'black' : 'white',\r\n        };\r\n    }\r\n    _internal_colorStringToGrayscale(background) {\r\n        return rgbaToGrayscale(this._private__parseColor(background));\r\n    }\r\n    _internal_gradientColorAtPercent(topColor, bottomColor, percent) {\r\n        const [topR, topG, topB, topA] = this._private__parseColor(topColor);\r\n        const [bottomR, bottomG, bottomB, bottomA] = this._private__parseColor(bottomColor);\r\n        const resultRgba = [\r\n            normalizeRgbComponent((topR + percent * (bottomR - topR))),\r\n            normalizeRgbComponent((topG + percent * (bottomG - topG))),\r\n            normalizeRgbComponent((topB + percent * (bottomB - topB))),\r\n            normalizeAlphaComponent((topA + percent * (bottomA - topA))),\r\n        ];\r\n        return `rgba(${resultRgba[0]}, ${resultRgba[1]}, ${resultRgba[2]}, ${resultRgba[3]})`;\r\n    }\r\n    _private__parseColor(color) {\r\n        const cached = this._private__rgbaCache.get(color);\r\n        if (cached) {\r\n            return cached;\r\n        }\r\n        const computed = getRgbStringViaBrowser(color);\r\n        const match = computed.match(/^rgba?\\s*\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d*\\.?\\d+))?\\)$/);\r\n        if (!match) {\r\n            if (this._private__customParsers.length) {\r\n                for (const parser of this._private__customParsers) {\r\n                    const result = parser(color);\r\n                    if (result) {\r\n                        this._private__rgbaCache.set(color, result);\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n            throw new Error(`Failed to parse color: ${color}`);\r\n        }\r\n        const rgba = [\r\n            parseInt(match[1], 10),\r\n            parseInt(match[2], 10),\r\n            parseInt(match[3], 10),\r\n            (match[4] ? parseFloat(match[4]) : 1),\r\n        ];\r\n        this._private__rgbaCache.set(color, rgba);\r\n        return rgba;\r\n    }\r\n}\r\n\r\nclass CompositeRenderer {\r\n    constructor() {\r\n        this._private__renderers = [];\r\n    }\r\n    _internal_setRenderers(renderers) {\r\n        this._private__renderers = renderers;\r\n    }\r\n    _internal_draw(target, isHovered, hitTestData) {\r\n        this._private__renderers.forEach((r) => {\r\n            r._internal_draw(target, isHovered, hitTestData);\r\n        });\r\n    }\r\n}\r\n\r\nclass BitmapCoordinatesPaneRenderer {\r\n    _internal_draw(target, isHovered, hitTestData) {\r\n        target.useBitmapCoordinateSpace((scope) => this._internal__drawImpl(scope, isHovered, hitTestData));\r\n    }\r\n}\r\n\r\nclass PaneRendererMarks extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._internal__data = null;\r\n    }\r\n    _internal_setData(data) {\r\n        this._internal__data = data;\r\n    }\r\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\r\n        if (this._internal__data === null || this._internal__data._internal_visibleRange === null) {\r\n            return;\r\n        }\r\n        const visibleRange = this._internal__data._internal_visibleRange;\r\n        const data = this._internal__data;\r\n        const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\r\n        const correction = (tickWidth % 2) / 2;\r\n        const draw = (radiusMedia) => {\r\n            ctx.beginPath();\r\n            for (let i = visibleRange.to - 1; i >= visibleRange.from; --i) {\r\n                const point = data._internal_items[i];\r\n                const centerX = Math.round(point._internal_x * horizontalPixelRatio) + correction; // correct x coordinate only\r\n                const centerY = point._internal_y * verticalPixelRatio;\r\n                const radius = radiusMedia * verticalPixelRatio + correction;\r\n                ctx.moveTo(centerX, centerY);\r\n                ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n            }\r\n            ctx.fill();\r\n        };\r\n        if (data._internal_lineWidth > 0) {\r\n            ctx.fillStyle = data._internal_backColor;\r\n            draw(data._internal_radius + data._internal_lineWidth);\r\n        }\r\n        ctx.fillStyle = data._internal_lineColor;\r\n        draw(data._internal_radius);\r\n    }\r\n}\r\n\r\nfunction createEmptyMarkerData() {\r\n    return {\r\n        _internal_items: [{\r\n                _internal_x: 0,\r\n                _internal_y: 0,\r\n                _internal_time: 0,\r\n                _internal_price: 0,\r\n            }],\r\n        _internal_lineColor: '',\r\n        _internal_backColor: '',\r\n        _internal_radius: 0,\r\n        _internal_lineWidth: 0,\r\n        _internal_visibleRange: null,\r\n    };\r\n}\r\nconst rangeForSinglePoint = { from: 0, to: 1 };\r\nclass CrosshairMarksPaneView {\r\n    constructor(chartModel, crosshair, pane) {\r\n        this._private__compositeRenderer = new CompositeRenderer();\r\n        this._private__markersRenderers = [];\r\n        this._private__markersData = [];\r\n        this._private__invalidated = true;\r\n        this._private__chartModel = chartModel;\r\n        this._private__crosshair = crosshair;\r\n        this._private__pane = pane;\r\n        this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);\r\n    }\r\n    _internal_update(updateType) {\r\n        this._private__createMarkerRenderersIfNeeded();\r\n        this._private__invalidated = true;\r\n    }\r\n    _internal_renderer() {\r\n        if (this._private__invalidated) {\r\n            this._private__updateImpl();\r\n            this._private__invalidated = false;\r\n        }\r\n        return this._private__compositeRenderer;\r\n    }\r\n    _private__createMarkerRenderersIfNeeded() {\r\n        const serieses = this._private__pane._internal_orderedSources();\r\n        if (serieses.length !== this._private__markersRenderers.length) {\r\n            this._private__markersData = serieses.map(createEmptyMarkerData);\r\n            this._private__markersRenderers = this._private__markersData.map((data) => {\r\n                const res = new PaneRendererMarks();\r\n                res._internal_setData(data);\r\n                return res;\r\n            });\r\n            this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);\r\n        }\r\n    }\r\n    _private__updateImpl() {\r\n        const forceHidden = this._private__crosshair._internal_options().mode === 2 /* CrosshairMode.Hidden */ || !this._private__crosshair._internal_visible();\r\n        const serieses = this._private__pane._internal_orderedSeries();\r\n        const timePointIndex = this._private__crosshair._internal_appliedIndex();\r\n        const timeScale = this._private__chartModel._internal_timeScale();\r\n        this._private__createMarkerRenderersIfNeeded();\r\n        serieses.forEach((s, index) => {\r\n            const data = this._private__markersData[index];\r\n            const seriesData = s._internal_markerDataAtIndex(timePointIndex);\r\n            const firstValue = s._internal_firstValue();\r\n            if (forceHidden || seriesData === null || !s._internal_visible() || firstValue === null) {\r\n                data._internal_visibleRange = null;\r\n                return;\r\n            }\r\n            data._internal_lineColor = seriesData._internal_backgroundColor;\r\n            data._internal_radius = seriesData._internal_radius;\r\n            data._internal_lineWidth = seriesData._internal_borderWidth;\r\n            data._internal_items[0]._internal_price = seriesData._internal_price;\r\n            data._internal_items[0]._internal_y = s._internal_priceScale()._internal_priceToCoordinate(seriesData._internal_price, firstValue._internal_value);\r\n            data._internal_backColor = seriesData._internal_borderColor ?? this._private__chartModel._internal_backgroundColorAtYPercentFromTop(data._internal_items[0]._internal_y / s._internal_priceScale()._internal_height());\r\n            data._internal_items[0]._internal_time = timePointIndex;\r\n            data._internal_items[0]._internal_x = timeScale._internal_indexToCoordinate(timePointIndex);\r\n            data._internal_visibleRange = rangeForSinglePoint;\r\n        });\r\n    }\r\n}\r\n\r\nclass CrosshairRenderer extends BitmapCoordinatesPaneRenderer {\r\n    constructor(data) {\r\n        super();\r\n        this._private__data = data;\r\n    }\r\n    _internal__drawImpl({ context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio }) {\r\n        if (this._private__data === null) {\r\n            return;\r\n        }\r\n        const vertLinesVisible = this._private__data._internal_vertLine._internal_visible;\r\n        const horzLinesVisible = this._private__data._internal_horzLine._internal_visible;\r\n        if (!vertLinesVisible && !horzLinesVisible) {\r\n            return;\r\n        }\r\n        const x = Math.round(this._private__data._internal_x * horizontalPixelRatio);\r\n        const y = Math.round(this._private__data._internal_y * verticalPixelRatio);\r\n        ctx.lineCap = 'butt';\r\n        if (vertLinesVisible && x >= 0) {\r\n            ctx.lineWidth = Math.floor(this._private__data._internal_vertLine._internal_lineWidth * horizontalPixelRatio);\r\n            ctx.strokeStyle = this._private__data._internal_vertLine._internal_color;\r\n            ctx.fillStyle = this._private__data._internal_vertLine._internal_color;\r\n            setLineStyle(ctx, this._private__data._internal_vertLine._internal_lineStyle);\r\n            drawVerticalLine(ctx, x, 0, bitmapSize.height);\r\n        }\r\n        if (horzLinesVisible && y >= 0) {\r\n            ctx.lineWidth = Math.floor(this._private__data._internal_horzLine._internal_lineWidth * verticalPixelRatio);\r\n            ctx.strokeStyle = this._private__data._internal_horzLine._internal_color;\r\n            ctx.fillStyle = this._private__data._internal_horzLine._internal_color;\r\n            setLineStyle(ctx, this._private__data._internal_horzLine._internal_lineStyle);\r\n            drawHorizontalLine(ctx, y, 0, bitmapSize.width);\r\n        }\r\n    }\r\n}\r\n\r\nclass CrosshairPaneView {\r\n    constructor(source, pane) {\r\n        this._private__invalidated = true;\r\n        this._private__rendererData = {\r\n            _internal_vertLine: {\r\n                _internal_lineWidth: 1,\r\n                _internal_lineStyle: 0,\r\n                _internal_color: '',\r\n                _internal_visible: false,\r\n            },\r\n            _internal_horzLine: {\r\n                _internal_lineWidth: 1,\r\n                _internal_lineStyle: 0,\r\n                _internal_color: '',\r\n                _internal_visible: false,\r\n            },\r\n            _internal_x: 0,\r\n            _internal_y: 0,\r\n        };\r\n        this._private__renderer = new CrosshairRenderer(this._private__rendererData);\r\n        this._private__source = source;\r\n        this._private__pane = pane;\r\n    }\r\n    _internal_update() {\r\n        this._private__invalidated = true;\r\n    }\r\n    _internal_renderer(pane) {\r\n        if (this._private__invalidated) {\r\n            this._private__updateImpl();\r\n            this._private__invalidated = false;\r\n        }\r\n        return this._private__renderer;\r\n    }\r\n    _private__updateImpl() {\r\n        const visible = this._private__source._internal_visible();\r\n        const crosshairOptions = this._private__pane._internal_model()._internal_options().crosshair;\r\n        const data = this._private__rendererData;\r\n        if (crosshairOptions.mode === 2 /* CrosshairMode.Hidden */) {\r\n            data._internal_horzLine._internal_visible = false;\r\n            data._internal_vertLine._internal_visible = false;\r\n            return;\r\n        }\r\n        data._internal_horzLine._internal_visible = visible && this._private__source._internal_horzLineVisible(this._private__pane);\r\n        data._internal_vertLine._internal_visible = visible && this._private__source._internal_vertLineVisible();\r\n        data._internal_horzLine._internal_lineWidth = crosshairOptions.horzLine.width;\r\n        data._internal_horzLine._internal_lineStyle = crosshairOptions.horzLine.style;\r\n        data._internal_horzLine._internal_color = crosshairOptions.horzLine.color;\r\n        data._internal_vertLine._internal_lineWidth = crosshairOptions.vertLine.width;\r\n        data._internal_vertLine._internal_lineStyle = crosshairOptions.vertLine.style;\r\n        data._internal_vertLine._internal_color = crosshairOptions.vertLine.color;\r\n        data._internal_x = this._private__source._internal_appliedX();\r\n        data._internal_y = this._private__source._internal_appliedY();\r\n    }\r\n}\r\n\r\n/**\r\n * Fills rectangle's inner border (so, all the filled area is limited by the [x, x + width]*[y, y + height] region)\r\n * ```\r\n * (x, y)\r\n * O***********************|*****\r\n * |        border         |  ^\r\n * |   *****************   |  |\r\n * |   |               |   |  |\r\n * | b |               | b |  h\r\n * | o |               | o |  e\r\n * | r |               | r |  i\r\n * | d |               | d |  g\r\n * | e |               | e |  h\r\n * | r |               | r |  t\r\n * |   |               |   |  |\r\n * |   *****************   |  |\r\n * |        border         |  v\r\n * |***********************|*****\r\n * |                       |\r\n * |<------- width ------->|\r\n * ```\r\n *\r\n * @param ctx - Context to draw on\r\n * @param x - Left side of the target rectangle\r\n * @param y - Top side of the target rectangle\r\n * @param width - Width of the target rectangle\r\n * @param height - Height of the target rectangle\r\n * @param borderWidth - Width of border to fill, must be less than width and height of the target rectangle\r\n */\r\nfunction fillRectInnerBorder(ctx, x, y, width, height, borderWidth) {\r\n    // horizontal (top and bottom) edges\r\n    ctx.fillRect(x + borderWidth, y, width - borderWidth * 2, borderWidth);\r\n    ctx.fillRect(x + borderWidth, y + height - borderWidth, width - borderWidth * 2, borderWidth);\r\n    // vertical (left and right) edges\r\n    ctx.fillRect(x, y, borderWidth, height);\r\n    ctx.fillRect(x + width - borderWidth, y, borderWidth, height);\r\n}\r\nfunction clearRect(ctx, x, y, w, h, clearColor) {\r\n    ctx.save();\r\n    ctx.globalCompositeOperation = 'copy';\r\n    ctx.fillStyle = clearColor;\r\n    ctx.fillRect(x, y, w, h);\r\n    ctx.restore();\r\n}\r\nfunction changeBorderRadius(borderRadius, offset) {\r\n    return borderRadius.map((x) => x === 0 ? x : x + offset);\r\n}\r\nfunction drawRoundRect(\r\n// eslint:disable-next-line:max-params\r\nctx, x, y, w, h, radii) {\r\n    /**\r\n     * As of May 2023, all of the major browsers now support ctx.roundRect() so we should\r\n     * be able to switch to the native version soon.\r\n     */\r\n    ctx.beginPath();\r\n    if (ctx.roundRect) {\r\n        ctx.roundRect(x, y, w, h, radii);\r\n        return;\r\n    }\r\n    /*\r\n     * Deprecate the rest in v5.\r\n     */\r\n    ctx.lineTo(x + w - radii[1], y);\r\n    if (radii[1] !== 0) {\r\n        ctx.arcTo(x + w, y, x + w, y + radii[1], radii[1]);\r\n    }\r\n    ctx.lineTo(x + w, y + h - radii[2]);\r\n    if (radii[2] !== 0) {\r\n        ctx.arcTo(x + w, y + h, x + w - radii[2], y + h, radii[2]);\r\n    }\r\n    ctx.lineTo(x + radii[3], y + h);\r\n    if (radii[3] !== 0) {\r\n        ctx.arcTo(x, y + h, x, y + h - radii[3], radii[3]);\r\n    }\r\n    ctx.lineTo(x, y + radii[0]);\r\n    if (radii[0] !== 0) {\r\n        ctx.arcTo(x, y, x + radii[0], y, radii[0]);\r\n    }\r\n}\r\n/**\r\n * Draws a rounded rect with a border.\r\n *\r\n * This function assumes that the colors will be solid, without\r\n * any alpha. (This allows us to fix a rendering artefact.)\r\n *\r\n * @param outerBorderRadius - The radius of the border (outer edge)\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction drawRoundRectWithBorder(ctx, left, top, width, height, backgroundColor, borderWidth = 0, outerBorderRadius = [0, 0, 0, 0], borderColor = '') {\r\n    ctx.save();\r\n    if (!borderWidth || !borderColor || borderColor === backgroundColor) {\r\n        drawRoundRect(ctx, left, top, width, height, outerBorderRadius);\r\n        ctx.fillStyle = backgroundColor;\r\n        ctx.fill();\r\n        ctx.restore();\r\n        return;\r\n    }\r\n    const halfBorderWidth = borderWidth / 2;\r\n    const radii = changeBorderRadius(outerBorderRadius, -halfBorderWidth);\r\n    drawRoundRect(ctx, left + halfBorderWidth, top + halfBorderWidth, width - borderWidth, height - borderWidth, radii);\r\n    if (backgroundColor !== 'transparent') {\r\n        ctx.fillStyle = backgroundColor;\r\n        ctx.fill();\r\n    }\r\n    if (borderColor !== 'transparent') {\r\n        ctx.lineWidth = borderWidth;\r\n        ctx.strokeStyle = borderColor;\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n    ctx.restore();\r\n}\r\n// eslint-disable-next-line max-params\r\nfunction clearRectWithGradient(ctx, x, y, w, h, topColor, bottomColor) {\r\n    ctx.save();\r\n    ctx.globalCompositeOperation = 'copy';\r\n    const gradient = ctx.createLinearGradient(0, 0, 0, h);\r\n    gradient.addColorStop(0, topColor);\r\n    gradient.addColorStop(1, bottomColor);\r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(x, y, w, h);\r\n    ctx.restore();\r\n}\r\n\r\nclass PriceAxisViewRenderer {\r\n    constructor(data, commonData) {\r\n        this._internal_setData(data, commonData);\r\n    }\r\n    _internal_setData(data, commonData) {\r\n        this._private__data = data;\r\n        this._private__commonData = commonData;\r\n    }\r\n    _internal_height(rendererOptions, useSecondLine) {\r\n        if (!this._private__data._internal_visible) {\r\n            return 0;\r\n        }\r\n        return rendererOptions._internal_fontSize + rendererOptions._internal_paddingTop + rendererOptions._internal_paddingBottom;\r\n    }\r\n    _internal_draw(target, rendererOptions, textWidthCache, align) {\r\n        if (!this._private__data._internal_visible || this._private__data._internal_text.length === 0) {\r\n            return;\r\n        }\r\n        const textColor = this._private__data._internal_color;\r\n        const backgroundColor = this._private__commonData._internal_background;\r\n        const geometry = target.useBitmapCoordinateSpace((scope) => {\r\n            const ctx = scope.context;\r\n            ctx.font = rendererOptions._internal_font;\r\n            const geom = this._private__calculateGeometry(scope, rendererOptions, textWidthCache, align);\r\n            const gb = geom._internal_bitmap;\r\n            /*\r\n             draw label. backgroundColor will always be a solid color (no alpha) [see generateContrastColors in color.ts].\r\n             Therefore we can draw the rounded label using simplified code (drawRoundRectWithBorder) that doesn't need to ensure the background and the border don't overlap.\r\n            */\r\n            if (geom._internal_alignRight) {\r\n                drawRoundRectWithBorder(ctx, gb._internal_xOutside, gb._internal_yTop, gb._internal_totalWidth, gb._internal_totalHeight, backgroundColor, gb._internal_horzBorder, [gb._internal_radius, 0, 0, gb._internal_radius], backgroundColor);\r\n            }\r\n            else {\r\n                drawRoundRectWithBorder(ctx, gb._internal_xInside, gb._internal_yTop, gb._internal_totalWidth, gb._internal_totalHeight, backgroundColor, gb._internal_horzBorder, [0, gb._internal_radius, gb._internal_radius, 0], backgroundColor);\r\n            }\r\n            // draw tick\r\n            if (this._private__data._internal_tickVisible) {\r\n                ctx.fillStyle = textColor;\r\n                ctx.fillRect(gb._internal_xInside, gb._internal_yMid, gb._internal_xTick - gb._internal_xInside, gb._internal_tickHeight);\r\n            }\r\n            // draw separator\r\n            if (this._private__data._internal_borderVisible) {\r\n                ctx.fillStyle = rendererOptions._internal_paneBackgroundColor;\r\n                ctx.fillRect(geom._internal_alignRight ? gb._internal_right - gb._internal_horzBorder : 0, gb._internal_yTop, gb._internal_horzBorder, gb._internal_yBottom - gb._internal_yTop);\r\n            }\r\n            return geom;\r\n        });\r\n        target.useMediaCoordinateSpace(({ context: ctx }) => {\r\n            const gm = geometry._internal_media;\r\n            ctx.font = rendererOptions._internal_font;\r\n            ctx.textAlign = geometry._internal_alignRight ? 'right' : 'left';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillStyle = textColor;\r\n            ctx.fillText(this._private__data._internal_text, gm._internal_xText, (gm._internal_yTop + gm._internal_yBottom) / 2 + gm._internal_textMidCorrection);\r\n        });\r\n    }\r\n    _private__calculateGeometry(scope, rendererOptions, textWidthCache, align) {\r\n        const { context: ctx, bitmapSize, mediaSize, horizontalPixelRatio, verticalPixelRatio } = scope;\r\n        const tickSize = (this._private__data._internal_tickVisible || !this._private__data._internal_moveTextToInvisibleTick) ? rendererOptions._internal_tickLength : 0;\r\n        const horzBorder = this._private__data._internal_separatorVisible ? rendererOptions._internal_borderSize : 0;\r\n        const paddingTop = rendererOptions._internal_paddingTop + this._private__commonData._internal_additionalPaddingTop;\r\n        const paddingBottom = rendererOptions._internal_paddingBottom + this._private__commonData._internal_additionalPaddingBottom;\r\n        const paddingInner = rendererOptions._internal_paddingInner;\r\n        const paddingOuter = rendererOptions._internal_paddingOuter;\r\n        const text = this._private__data._internal_text;\r\n        const actualTextHeight = rendererOptions._internal_fontSize;\r\n        const textMidCorrection = textWidthCache._internal_yMidCorrection(ctx, text);\r\n        const textWidth = Math.ceil(textWidthCache._internal_measureText(ctx, text));\r\n        const totalHeight = actualTextHeight + paddingTop + paddingBottom;\r\n        const totalWidth = rendererOptions._internal_borderSize + paddingInner + paddingOuter + textWidth + tickSize;\r\n        const tickHeightBitmap = Math.max(1, Math.floor(verticalPixelRatio));\r\n        let totalHeightBitmap = Math.round(totalHeight * verticalPixelRatio);\r\n        if (totalHeightBitmap % 2 !== tickHeightBitmap % 2) {\r\n            totalHeightBitmap += 1;\r\n        }\r\n        const horzBorderBitmap = horzBorder > 0 ? Math.max(1, Math.floor(horzBorder * horizontalPixelRatio)) : 0;\r\n        const totalWidthBitmap = Math.round(totalWidth * horizontalPixelRatio);\r\n        // tick overlaps scale border\r\n        const tickSizeBitmap = Math.round(tickSize * horizontalPixelRatio);\r\n        const yMid = this._private__commonData._internal_fixedCoordinate ?? this._private__commonData._internal_coordinate;\r\n        const yMidBitmap = Math.round(yMid * verticalPixelRatio) - Math.floor(verticalPixelRatio * 0.5);\r\n        const yTopBitmap = Math.floor(yMidBitmap + tickHeightBitmap / 2 - totalHeightBitmap / 2);\r\n        const yBottomBitmap = yTopBitmap + totalHeightBitmap;\r\n        const alignRight = align === 'right';\r\n        const xInside = alignRight ? mediaSize.width - horzBorder : horzBorder;\r\n        const xInsideBitmap = alignRight ? bitmapSize.width - horzBorderBitmap : horzBorderBitmap;\r\n        let xOutsideBitmap;\r\n        let xTickBitmap;\r\n        let xText;\r\n        if (alignRight) {\r\n            // 2               1\r\n            //\r\n            //              6  5\r\n            //\r\n            // 3               4\r\n            xOutsideBitmap = xInsideBitmap - totalWidthBitmap;\r\n            xTickBitmap = xInsideBitmap - tickSizeBitmap;\r\n            xText = xInside - tickSize - paddingInner - horzBorder;\r\n        }\r\n        else {\r\n            // 1               2\r\n            //\r\n            // 6  5\r\n            //\r\n            // 4               3\r\n            xOutsideBitmap = xInsideBitmap + totalWidthBitmap;\r\n            xTickBitmap = xInsideBitmap + tickSizeBitmap;\r\n            xText = xInside + tickSize + paddingInner;\r\n        }\r\n        return {\r\n            _internal_alignRight: alignRight,\r\n            _internal_bitmap: {\r\n                _internal_yTop: yTopBitmap,\r\n                _internal_yMid: yMidBitmap,\r\n                _internal_yBottom: yBottomBitmap,\r\n                _internal_totalWidth: totalWidthBitmap,\r\n                _internal_totalHeight: totalHeightBitmap,\r\n                // TODO: it is better to have different horizontal and vertical radii\r\n                _internal_radius: 2 * horizontalPixelRatio,\r\n                _internal_horzBorder: horzBorderBitmap,\r\n                _internal_xOutside: xOutsideBitmap,\r\n                _internal_xInside: xInsideBitmap,\r\n                _internal_xTick: xTickBitmap,\r\n                _internal_tickHeight: tickHeightBitmap,\r\n                _internal_right: bitmapSize.width,\r\n            },\r\n            _internal_media: {\r\n                _internal_yTop: yTopBitmap / verticalPixelRatio,\r\n                _internal_yBottom: yBottomBitmap / verticalPixelRatio,\r\n                _internal_xText: xText,\r\n                _internal_textMidCorrection: textMidCorrection,\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\nclass PriceAxisView {\r\n    constructor(ctor) {\r\n        this._private__commonRendererData = {\r\n            _internal_coordinate: 0,\r\n            _internal_background: '#000',\r\n            _internal_additionalPaddingBottom: 0,\r\n            _internal_additionalPaddingTop: 0,\r\n        };\r\n        this._private__axisRendererData = {\r\n            _internal_text: '',\r\n            _internal_visible: false,\r\n            _internal_tickVisible: true,\r\n            _internal_moveTextToInvisibleTick: false,\r\n            _internal_borderColor: '',\r\n            _internal_color: '#FFF',\r\n            _internal_borderVisible: false,\r\n            _internal_separatorVisible: false,\r\n        };\r\n        this._private__paneRendererData = {\r\n            _internal_text: '',\r\n            _internal_visible: false,\r\n            _internal_tickVisible: false,\r\n            _internal_moveTextToInvisibleTick: true,\r\n            _internal_borderColor: '',\r\n            _internal_color: '#FFF',\r\n            _internal_borderVisible: true,\r\n            _internal_separatorVisible: true,\r\n        };\r\n        this._private__invalidated = true;\r\n        this._private__axisRenderer = new (ctor || PriceAxisViewRenderer)(this._private__axisRendererData, this._private__commonRendererData);\r\n        this._private__paneRenderer = new (ctor || PriceAxisViewRenderer)(this._private__paneRendererData, this._private__commonRendererData);\r\n    }\r\n    _internal_text() {\r\n        this._private__updateRendererDataIfNeeded();\r\n        return this._private__axisRendererData._internal_text;\r\n    }\r\n    _internal_coordinate() {\r\n        this._private__updateRendererDataIfNeeded();\r\n        return this._private__commonRendererData._internal_coordinate;\r\n    }\r\n    _internal_update() {\r\n        this._private__invalidated = true;\r\n    }\r\n    _internal_height(rendererOptions, useSecondLine = false) {\r\n        return Math.max(this._private__axisRenderer._internal_height(rendererOptions, useSecondLine), this._private__paneRenderer._internal_height(rendererOptions, useSecondLine));\r\n    }\r\n    _internal_getFixedCoordinate() {\r\n        return this._private__commonRendererData._internal_fixedCoordinate || 0;\r\n    }\r\n    _internal_setFixedCoordinate(value) {\r\n        this._private__commonRendererData._internal_fixedCoordinate = value;\r\n    }\r\n    _internal_isVisible() {\r\n        this._private__updateRendererDataIfNeeded();\r\n        return this._private__axisRendererData._internal_visible || this._private__paneRendererData._internal_visible;\r\n    }\r\n    _internal_isAxisLabelVisible() {\r\n        this._private__updateRendererDataIfNeeded();\r\n        return this._private__axisRendererData._internal_visible;\r\n    }\r\n    _internal_renderer(priceScale) {\r\n        this._private__updateRendererDataIfNeeded();\r\n        // force update tickVisible state from price scale options\r\n        // because we don't have and we can't have price axis in other methods\r\n        // (like paneRenderer or any other who call _updateRendererDataIfNeeded)\r\n        this._private__axisRendererData._internal_tickVisible = this._private__axisRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;\r\n        this._private__paneRendererData._internal_tickVisible = this._private__paneRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;\r\n        this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);\r\n        this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);\r\n        return this._private__axisRenderer;\r\n    }\r\n    _internal_paneRenderer() {\r\n        this._private__updateRendererDataIfNeeded();\r\n        this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);\r\n        this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);\r\n        return this._private__paneRenderer;\r\n    }\r\n    _private__updateRendererDataIfNeeded() {\r\n        if (this._private__invalidated) {\r\n            this._private__axisRendererData._internal_tickVisible = true;\r\n            this._private__paneRendererData._internal_tickVisible = false;\r\n            this._internal__updateRendererData(this._private__axisRendererData, this._private__paneRendererData, this._private__commonRendererData);\r\n        }\r\n    }\r\n}\r\n\r\nclass CrosshairPriceAxisView extends PriceAxisView {\r\n    constructor(source, priceScale, valueProvider) {\r\n        super();\r\n        this._private__source = source;\r\n        this._private__priceScale = priceScale;\r\n        this._private__valueProvider = valueProvider;\r\n    }\r\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\r\n        axisRendererData._internal_visible = false;\r\n        if (this._private__source._internal_options().mode === 2 /* CrosshairMode.Hidden */) {\r\n            return;\r\n        }\r\n        const options = this._private__source._internal_options().horzLine;\r\n        if (!options.labelVisible) {\r\n            return;\r\n        }\r\n        const firstValue = this._private__priceScale._internal_firstValue();\r\n        if (!this._private__source._internal_visible() || this._private__priceScale._internal_isEmpty() || (firstValue === null)) {\r\n            return;\r\n        }\r\n        const colors = this._private__priceScale._internal_colorParser()._internal_generateContrastColors(options.labelBackgroundColor);\r\n        commonRendererData._internal_background = colors._internal_background;\r\n        axisRendererData._internal_color = colors._internal_foreground;\r\n        const additionalPadding = 2 / 12 * this._private__priceScale._internal_fontSize();\r\n        commonRendererData._internal_additionalPaddingTop = additionalPadding;\r\n        commonRendererData._internal_additionalPaddingBottom = additionalPadding;\r\n        const value = this._private__valueProvider(this._private__priceScale);\r\n        commonRendererData._internal_coordinate = value._internal_coordinate;\r\n        axisRendererData._internal_text = this._private__priceScale._internal_formatPrice(value._internal_price, firstValue);\r\n        axisRendererData._internal_visible = true;\r\n    }\r\n}\r\n\r\nconst optimizationReplacementRe = /[1-9]/g;\r\nconst radius$1 = 2;\r\nclass TimeAxisViewRenderer {\r\n    constructor() {\r\n        this._private__data = null;\r\n    }\r\n    _internal_setData(data) {\r\n        this._private__data = data;\r\n    }\r\n    _internal_draw(target, rendererOptions) {\r\n        if (this._private__data === null || this._private__data._internal_visible === false || this._private__data._internal_text.length === 0) {\r\n            return;\r\n        }\r\n        const textWidth = target.useMediaCoordinateSpace(({ context: ctx }) => {\r\n            ctx.font = rendererOptions._internal_font;\r\n            return Math.round(rendererOptions._internal_widthCache._internal_measureText(ctx, ensureNotNull(this._private__data)._internal_text, optimizationReplacementRe));\r\n        });\r\n        if (textWidth <= 0) {\r\n            return;\r\n        }\r\n        const horzMargin = rendererOptions._internal_paddingHorizontal;\r\n        const labelWidth = textWidth + 2 * horzMargin;\r\n        const labelWidthHalf = labelWidth / 2;\r\n        const timeScaleWidth = this._private__data._internal_width;\r\n        let coordinate = this._private__data._internal_coordinate;\r\n        let x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\r\n        if (x1 < 0) {\r\n            coordinate = coordinate + Math.abs(0 - x1);\r\n            x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\r\n        }\r\n        else if (x1 + labelWidth > timeScaleWidth) {\r\n            coordinate = coordinate - Math.abs(timeScaleWidth - (x1 + labelWidth));\r\n            x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\r\n        }\r\n        const x2 = x1 + labelWidth;\r\n        const y1 = 0;\r\n        const y2 = Math.ceil(y1 +\r\n            rendererOptions._internal_borderSize +\r\n            rendererOptions._internal_tickLength +\r\n            rendererOptions._internal_paddingTop +\r\n            rendererOptions._internal_fontSize +\r\n            rendererOptions._internal_paddingBottom);\r\n        target.useBitmapCoordinateSpace(({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) => {\r\n            const data = ensureNotNull(this._private__data);\r\n            ctx.fillStyle = data._internal_background;\r\n            const x1scaled = Math.round(x1 * horizontalPixelRatio);\r\n            const y1scaled = Math.round(y1 * verticalPixelRatio);\r\n            const x2scaled = Math.round(x2 * horizontalPixelRatio);\r\n            const y2scaled = Math.round(y2 * verticalPixelRatio);\r\n            const radiusScaled = Math.round(radius$1 * horizontalPixelRatio);\r\n            ctx.beginPath();\r\n            ctx.moveTo(x1scaled, y1scaled);\r\n            ctx.lineTo(x1scaled, y2scaled - radiusScaled);\r\n            ctx.arcTo(x1scaled, y2scaled, x1scaled + radiusScaled, y2scaled, radiusScaled);\r\n            ctx.lineTo(x2scaled - radiusScaled, y2scaled);\r\n            ctx.arcTo(x2scaled, y2scaled, x2scaled, y2scaled - radiusScaled, radiusScaled);\r\n            ctx.lineTo(x2scaled, y1scaled);\r\n            ctx.fill();\r\n            if (data._internal_tickVisible) {\r\n                const tickX = Math.round(data._internal_coordinate * horizontalPixelRatio);\r\n                const tickTop = y1scaled;\r\n                const tickBottom = Math.round((tickTop + rendererOptions._internal_tickLength) * verticalPixelRatio);\r\n                ctx.fillStyle = data._internal_color;\r\n                const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\r\n                const tickOffset = Math.floor(horizontalPixelRatio * 0.5);\r\n                ctx.fillRect(tickX - tickOffset, tickTop, tickWidth, tickBottom - tickTop);\r\n            }\r\n        });\r\n        target.useMediaCoordinateSpace(({ context: ctx }) => {\r\n            const data = ensureNotNull(this._private__data);\r\n            const yText = y1 +\r\n                rendererOptions._internal_borderSize +\r\n                rendererOptions._internal_tickLength +\r\n                rendererOptions._internal_paddingTop +\r\n                rendererOptions._internal_fontSize / 2;\r\n            ctx.font = rendererOptions._internal_font;\r\n            ctx.textAlign = 'left';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillStyle = data._internal_color;\r\n            const textYCorrection = rendererOptions._internal_widthCache._internal_yMidCorrection(ctx, 'Apr0');\r\n            ctx.translate(x1 + horzMargin, yText + textYCorrection);\r\n            ctx.fillText(data._internal_text, 0, 0);\r\n        });\r\n    }\r\n}\r\n\r\nclass CrosshairTimeAxisView {\r\n    constructor(crosshair, model, valueProvider) {\r\n        this._private__invalidated = true;\r\n        this._private__renderer = new TimeAxisViewRenderer();\r\n        this._private__rendererData = {\r\n            _internal_visible: false,\r\n            _internal_background: '#4c525e',\r\n            _internal_color: 'white',\r\n            _internal_text: '',\r\n            _internal_width: 0,\r\n            _internal_coordinate: NaN,\r\n            _internal_tickVisible: true,\r\n        };\r\n        this._private__crosshair = crosshair;\r\n        this._private__model = model;\r\n        this._private__valueProvider = valueProvider;\r\n    }\r\n    _internal_update() {\r\n        this._private__invalidated = true;\r\n    }\r\n    _internal_renderer() {\r\n        if (this._private__invalidated) {\r\n            this._private__updateImpl();\r\n            this._private__invalidated = false;\r\n        }\r\n        this._private__renderer._internal_setData(this._private__rendererData);\r\n        return this._private__renderer;\r\n    }\r\n    _private__updateImpl() {\r\n        const data = this._private__rendererData;\r\n        data._internal_visible = false;\r\n        if (this._private__crosshair._internal_options().mode === 2 /* CrosshairMode.Hidden */) {\r\n            return;\r\n        }\r\n        const options = this._private__crosshair._internal_options().vertLine;\r\n        if (!options.labelVisible) {\r\n            return;\r\n        }\r\n        const timeScale = this._private__model._internal_timeScale();\r\n        if (timeScale._internal_isEmpty()) {\r\n            return;\r\n        }\r\n        data._internal_width = timeScale._internal_width();\r\n        const value = this._private__valueProvider();\r\n        if (value === null) {\r\n            return;\r\n        }\r\n        data._internal_coordinate = value._internal_coordinate;\r\n        const currentTime = timeScale._internal_indexToTimeScalePoint(this._private__crosshair._internal_appliedIndex());\r\n        data._internal_text = timeScale._internal_formatDateTime(ensureNotNull(currentTime));\r\n        data._internal_visible = true;\r\n        const colors = this._private__model._internal_colorParser()._internal_generateContrastColors(options.labelBackgroundColor);\r\n        data._internal_background = colors._internal_background;\r\n        data._internal_color = colors._internal_foreground;\r\n        data._internal_tickVisible = timeScale._internal_options().ticksVisible;\r\n    }\r\n}\r\n\r\nclass DataSource {\r\n    constructor() {\r\n        this._internal__priceScale = null;\r\n        this._private__zorder = 0;\r\n    }\r\n    _internal_zorder() {\r\n        return this._private__zorder;\r\n    }\r\n    _internal_setZorder(zorder) {\r\n        this._private__zorder = zorder;\r\n    }\r\n    _internal_priceScale() {\r\n        return this._internal__priceScale;\r\n    }\r\n    _internal_setPriceScale(priceScale) {\r\n        this._internal__priceScale = priceScale;\r\n    }\r\n    _internal_labelPaneViews(pane) {\r\n        return [];\r\n    }\r\n    _internal_timeAxisViews() {\r\n        return [];\r\n    }\r\n    _internal_visible() {\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the crosshair mode.\r\n */\r\nvar CrosshairMode;\r\n(function (CrosshairMode) {\r\n    /**\r\n     * This mode allows crosshair to move freely on the chart.\r\n     */\r\n    CrosshairMode[CrosshairMode[\"Normal\"] = 0] = \"Normal\";\r\n    /**\r\n     * This mode sticks crosshair's horizontal line to the price value of a single-value series or to the close price of OHLC-based series.\r\n     */\r\n    CrosshairMode[CrosshairMode[\"Magnet\"] = 1] = \"Magnet\";\r\n    /**\r\n     * This mode disables rendering of the crosshair.\r\n     */\r\n    CrosshairMode[CrosshairMode[\"Hidden\"] = 2] = \"Hidden\";\r\n    /**\r\n     * This mode sticks crosshair's horizontal line to the price value of a single-value series or to the open/high/low/close price of OHLC-based series.\r\n     */\r\n    CrosshairMode[CrosshairMode[\"MagnetOHLC\"] = 3] = \"MagnetOHLC\";\r\n})(CrosshairMode || (CrosshairMode = {}));\r\nclass Crosshair extends DataSource {\r\n    constructor(model, options) {\r\n        super();\r\n        this._private__pane = null;\r\n        this._private__price = NaN;\r\n        this._private__index = 0;\r\n        this._private__visible = false; // initially the crosshair should not be visible, until the user interacts.\r\n        this._private__priceAxisViews = new Map();\r\n        this._private__subscribed = false;\r\n        this._private__crosshairPaneViewCache = new WeakMap();\r\n        this._private__markersPaneViewCache = new WeakMap();\r\n        this._private__x = NaN;\r\n        this._private__y = NaN;\r\n        this._private__originX = NaN;\r\n        this._private__originY = NaN;\r\n        this._private__model = model;\r\n        this._private__options = options;\r\n        const valuePriceProvider = (rawPriceProvider, rawCoordinateProvider) => {\r\n            return (priceScale) => {\r\n                const coordinate = rawCoordinateProvider();\r\n                const rawPrice = rawPriceProvider();\r\n                if (priceScale === ensureNotNull(this._private__pane)._internal_defaultPriceScale()) {\r\n                    // price must be defined\r\n                    return { _internal_price: rawPrice, _internal_coordinate: coordinate };\r\n                }\r\n                else {\r\n                    // always convert from coordinate\r\n                    const firstValue = ensureNotNull(priceScale._internal_firstValue());\r\n                    const price = priceScale._internal_coordinateToPrice(coordinate, firstValue);\r\n                    return { _internal_price: price, _internal_coordinate: coordinate };\r\n                }\r\n            };\r\n        };\r\n        const valueTimeProvider = (rawIndexProvider, rawCoordinateProvider) => {\r\n            return () => {\r\n                const time = this._private__model._internal_timeScale()._internal_indexToTime(rawIndexProvider());\r\n                const coordinate = rawCoordinateProvider();\r\n                if (!time || !Number.isFinite(coordinate)) {\r\n                    return null;\r\n                }\r\n                return {\r\n                    _internal_time: time,\r\n                    _internal_coordinate: coordinate,\r\n                };\r\n            };\r\n        };\r\n        // for current position always return both price and coordinate\r\n        this._private__currentPosPriceProvider = valuePriceProvider(() => this._private__price, () => this._private__y);\r\n        const currentPosTimeProvider = valueTimeProvider(() => this._private__index, () => this._internal_appliedX());\r\n        this._private__timeAxisView = new CrosshairTimeAxisView(this, model, currentPosTimeProvider);\r\n    }\r\n    _internal_options() {\r\n        return this._private__options;\r\n    }\r\n    _internal_saveOriginCoord(x, y) {\r\n        this._private__originX = x;\r\n        this._private__originY = y;\r\n    }\r\n    _internal_clearOriginCoord() {\r\n        this._private__originX = NaN;\r\n        this._private__originY = NaN;\r\n    }\r\n    _internal_originCoordX() {\r\n        return this._private__originX;\r\n    }\r\n    _internal_originCoordY() {\r\n        return this._private__originY;\r\n    }\r\n    _internal_setPosition(index, price, pane) {\r\n        if (!this._private__subscribed) {\r\n            this._private__subscribed = true;\r\n        }\r\n        this._private__visible = true;\r\n        this._private__tryToUpdateViews(index, price, pane);\r\n    }\r\n    _internal_appliedIndex() {\r\n        return this._private__index;\r\n    }\r\n    _internal_appliedX() {\r\n        return this._private__x;\r\n    }\r\n    _internal_appliedY() {\r\n        return this._private__y;\r\n    }\r\n    _internal_visible() {\r\n        return this._private__visible;\r\n    }\r\n    _internal_clearPosition() {\r\n        this._private__visible = false;\r\n        this._private__setIndexToLastSeriesBarIndex();\r\n        this._private__price = NaN;\r\n        this._private__x = NaN;\r\n        this._private__y = NaN;\r\n        this._private__pane = null;\r\n        this._internal_clearOriginCoord();\r\n        this._internal_updateAllViews();\r\n    }\r\n    _internal_paneViews(pane) {\r\n        let crosshairPaneView = this._private__crosshairPaneViewCache.get(pane);\r\n        if (!crosshairPaneView) {\r\n            crosshairPaneView = new CrosshairPaneView(this, pane);\r\n            this._private__crosshairPaneViewCache.set(pane, crosshairPaneView);\r\n        }\r\n        let markersPaneView = this._private__markersPaneViewCache.get(pane);\r\n        if (!markersPaneView) {\r\n            markersPaneView = new CrosshairMarksPaneView(this._private__model, this, pane);\r\n            this._private__markersPaneViewCache.set(pane, markersPaneView);\r\n        }\r\n        return [crosshairPaneView, markersPaneView];\r\n    }\r\n    _internal_horzLineVisible(pane) {\r\n        return pane === this._private__pane && this._private__options.horzLine.visible;\r\n    }\r\n    _internal_vertLineVisible() {\r\n        return this._private__options.vertLine.visible;\r\n    }\r\n    _internal_priceAxisViews(pane, priceScale) {\r\n        if (!this._private__visible || this._private__pane !== pane) {\r\n            this._private__priceAxisViews.clear();\r\n        }\r\n        const views = [];\r\n        if (this._private__pane === pane) {\r\n            views.push(this._private__createPriceAxisViewOnDemand(this._private__priceAxisViews, priceScale, this._private__currentPosPriceProvider));\r\n        }\r\n        return views;\r\n    }\r\n    _internal_timeAxisViews() {\r\n        return this._private__visible ? [this._private__timeAxisView] : [];\r\n    }\r\n    _internal_pane() {\r\n        return this._private__pane;\r\n    }\r\n    _internal_updateAllViews() {\r\n        this._private__model._internal_panes().forEach((pane) => {\r\n            this._private__crosshairPaneViewCache.get(pane)?._internal_update();\r\n            this._private__markersPaneViewCache.get(pane)?._internal_update();\r\n        });\r\n        this._private__priceAxisViews.forEach((value) => value._internal_update());\r\n        this._private__timeAxisView._internal_update();\r\n    }\r\n    _private__priceScaleByPane(pane) {\r\n        if (pane && !pane._internal_defaultPriceScale()._internal_isEmpty()) {\r\n            return pane._internal_defaultPriceScale();\r\n        }\r\n        return null;\r\n    }\r\n    _private__tryToUpdateViews(index, price, pane) {\r\n        if (this._private__tryToUpdateData(index, price, pane)) {\r\n            this._internal_updateAllViews();\r\n        }\r\n    }\r\n    _private__tryToUpdateData(newIndex, newPrice, newPane) {\r\n        const oldX = this._private__x;\r\n        const oldY = this._private__y;\r\n        const oldPrice = this._private__price;\r\n        const oldIndex = this._private__index;\r\n        const oldPane = this._private__pane;\r\n        const priceScale = this._private__priceScaleByPane(newPane);\r\n        this._private__index = newIndex;\r\n        this._private__x = isNaN(newIndex) ? NaN : this._private__model._internal_timeScale()._internal_indexToCoordinate(newIndex);\r\n        this._private__pane = newPane;\r\n        const firstValue = priceScale !== null ? priceScale._internal_firstValue() : null;\r\n        if (priceScale !== null && firstValue !== null) {\r\n            this._private__price = newPrice;\r\n            this._private__y = priceScale._internal_priceToCoordinate(newPrice, firstValue);\r\n        }\r\n        else {\r\n            this._private__price = NaN;\r\n            this._private__y = NaN;\r\n        }\r\n        return (oldX !== this._private__x || oldY !== this._private__y || oldIndex !== this._private__index ||\r\n            oldPrice !== this._private__price || oldPane !== this._private__pane);\r\n    }\r\n    _private__setIndexToLastSeriesBarIndex() {\r\n        const lastIndexes = this._private__model._internal_serieses()\r\n            .map((s) => s._internal_bars()._internal_lastIndex())\r\n            .filter(notNull);\r\n        const lastBarIndex = (lastIndexes.length === 0) ? null : Math.max(...lastIndexes);\r\n        this._private__index = lastBarIndex !== null ? lastBarIndex : NaN;\r\n    }\r\n    _private__createPriceAxisViewOnDemand(map, priceScale, valueProvider) {\r\n        let view = map.get(priceScale);\r\n        if (view === undefined) {\r\n            view = new CrosshairPriceAxisView(this, priceScale, valueProvider);\r\n            map.set(priceScale, view);\r\n        }\r\n        return view;\r\n    }\r\n}\r\n\r\nfunction isDefaultPriceScale(priceScaleId) {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n    return priceScaleId === \"left\" /* DefaultPriceScaleId.Left */ || priceScaleId === \"right\" /* DefaultPriceScaleId.Right */;\r\n}\r\n\r\nfunction mergePaneInvalidation(beforeValue, newValue) {\r\n    if (beforeValue === undefined) {\r\n        return newValue;\r\n    }\r\n    const level = Math.max(beforeValue._internal_level, newValue._internal_level);\r\n    const autoScale = beforeValue._internal_autoScale || newValue._internal_autoScale;\r\n    return { _internal_level: level, _internal_autoScale: autoScale };\r\n}\r\nclass InvalidateMask {\r\n    constructor(globalLevel) {\r\n        this._private__invalidatedPanes = new Map();\r\n        this._private__timeScaleInvalidations = [];\r\n        this._private__globalLevel = globalLevel;\r\n    }\r\n    _internal_invalidatePane(paneIndex, invalidation) {\r\n        const prevValue = this._private__invalidatedPanes.get(paneIndex);\r\n        const newValue = mergePaneInvalidation(prevValue, invalidation);\r\n        this._private__invalidatedPanes.set(paneIndex, newValue);\r\n    }\r\n    _internal_fullInvalidation() {\r\n        return this._private__globalLevel;\r\n    }\r\n    _internal_invalidateForPane(paneIndex) {\r\n        const paneInvalidation = this._private__invalidatedPanes.get(paneIndex);\r\n        if (paneInvalidation === undefined) {\r\n            return {\r\n                _internal_level: this._private__globalLevel,\r\n            };\r\n        }\r\n        return {\r\n            _internal_level: Math.max(this._private__globalLevel, paneInvalidation._internal_level),\r\n            _internal_autoScale: paneInvalidation._internal_autoScale,\r\n        };\r\n    }\r\n    _internal_setFitContent() {\r\n        this._internal_stopTimeScaleAnimation();\r\n        // modifies both bar spacing and right offset\r\n        this._private__timeScaleInvalidations = [{ _internal_type: 0 /* TimeScaleInvalidationType.FitContent */ }];\r\n    }\r\n    _internal_applyRange(range) {\r\n        this._internal_stopTimeScaleAnimation();\r\n        // modifies both bar spacing and right offset\r\n        this._private__timeScaleInvalidations = [{ _internal_type: 1 /* TimeScaleInvalidationType.ApplyRange */, _internal_value: range }];\r\n    }\r\n    _internal_setTimeScaleAnimation(animation) {\r\n        this._private__removeTimeScaleAnimation();\r\n        this._private__timeScaleInvalidations.push({ _internal_type: 5 /* TimeScaleInvalidationType.Animation */, _internal_value: animation });\r\n    }\r\n    _internal_stopTimeScaleAnimation() {\r\n        this._private__removeTimeScaleAnimation();\r\n        this._private__timeScaleInvalidations.push({ _internal_type: 6 /* TimeScaleInvalidationType.StopAnimation */ });\r\n    }\r\n    _internal_resetTimeScale() {\r\n        this._internal_stopTimeScaleAnimation();\r\n        // modifies both bar spacing and right offset\r\n        this._private__timeScaleInvalidations = [{ _internal_type: 4 /* TimeScaleInvalidationType.Reset */ }];\r\n    }\r\n    _internal_setBarSpacing(barSpacing) {\r\n        this._internal_stopTimeScaleAnimation();\r\n        this._private__timeScaleInvalidations.push({ _internal_type: 2 /* TimeScaleInvalidationType.ApplyBarSpacing */, _internal_value: barSpacing });\r\n    }\r\n    _internal_setRightOffset(offset) {\r\n        this._internal_stopTimeScaleAnimation();\r\n        this._private__timeScaleInvalidations.push({ _internal_type: 3 /* TimeScaleInvalidationType.ApplyRightOffset */, _internal_value: offset });\r\n    }\r\n    _internal_timeScaleInvalidations() {\r\n        return this._private__timeScaleInvalidations;\r\n    }\r\n    _internal_merge(other) {\r\n        for (const tsInvalidation of other._private__timeScaleInvalidations) {\r\n            this._private__applyTimeScaleInvalidation(tsInvalidation);\r\n        }\r\n        this._private__globalLevel = Math.max(this._private__globalLevel, other._private__globalLevel);\r\n        other._private__invalidatedPanes.forEach((invalidation, index) => {\r\n            this._internal_invalidatePane(index, invalidation);\r\n        });\r\n    }\r\n    static _internal_light() {\r\n        return new InvalidateMask(2 /* InvalidationLevel.Light */);\r\n    }\r\n    static _internal_full() {\r\n        return new InvalidateMask(3 /* InvalidationLevel.Full */);\r\n    }\r\n    _private__applyTimeScaleInvalidation(invalidation) {\r\n        switch (invalidation._internal_type) {\r\n            case 0 /* TimeScaleInvalidationType.FitContent */:\r\n                this._internal_setFitContent();\r\n                break;\r\n            case 1 /* TimeScaleInvalidationType.ApplyRange */:\r\n                this._internal_applyRange(invalidation._internal_value);\r\n                break;\r\n            case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */:\r\n                this._internal_setBarSpacing(invalidation._internal_value);\r\n                break;\r\n            case 3 /* TimeScaleInvalidationType.ApplyRightOffset */:\r\n                this._internal_setRightOffset(invalidation._internal_value);\r\n                break;\r\n            case 4 /* TimeScaleInvalidationType.Reset */:\r\n                this._internal_resetTimeScale();\r\n                break;\r\n            case 5 /* TimeScaleInvalidationType.Animation */:\r\n                this._internal_setTimeScaleAnimation(invalidation._internal_value);\r\n                break;\r\n            case 6 /* TimeScaleInvalidationType.StopAnimation */:\r\n                this._private__removeTimeScaleAnimation();\r\n        }\r\n    }\r\n    _private__removeTimeScaleAnimation() {\r\n        const index = this._private__timeScaleInvalidations.findIndex((inv) => inv._internal_type === 5 /* TimeScaleInvalidationType.Animation */);\r\n        if (index !== -1) {\r\n            this._private__timeScaleInvalidations.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n\r\nclass FormatterBase {\r\n    formatTickmarks(prices) {\r\n        return prices.map((price) => this.format(price));\r\n    }\r\n}\r\n\r\nconst formatterOptions = {\r\n    _internal_decimalSign: '.'};\r\n/**\r\n * @param value - The number of convert.\r\n * @param length - The length. Must be between 0 and 16 inclusive.\r\n */\r\nfunction numberToStringWithLeadingZero(value, length) {\r\n    if (!isNumber(value)) {\r\n        return 'n/a';\r\n    }\r\n    if (!isInteger(length)) {\r\n        throw new TypeError('invalid length');\r\n    }\r\n    if (length < 0 || length > 16) {\r\n        throw new TypeError('invalid length');\r\n    }\r\n    if (length === 0) {\r\n        return value.toString();\r\n    }\r\n    const dummyString = '0000000000000000';\r\n    return (dummyString + value.toString()).slice(-length);\r\n}\r\nclass PriceFormatter extends FormatterBase {\r\n    constructor(priceScale, minMove) {\r\n        super();\r\n        if (!minMove) {\r\n            minMove = 1;\r\n        }\r\n        if (!isNumber(priceScale) || !isInteger(priceScale)) {\r\n            priceScale = 100;\r\n        }\r\n        if (priceScale < 0) {\r\n            throw new TypeError('invalid base');\r\n        }\r\n        this._private__priceScale = priceScale;\r\n        this._private__minMove = minMove;\r\n        this._private__calculateDecimal();\r\n    }\r\n    format(price) {\r\n        // \\u2212 is unicode's minus sign https://www.fileformat.info/info/unicode/char/2212/index.htm\r\n        // we should use it because it has the same width as plus sign +\r\n        const sign = price < 0 ? '\\u2212' : '';\r\n        price = Math.abs(price);\r\n        return sign + this._private__formatAsDecimal(price);\r\n    }\r\n    _private__calculateDecimal() {\r\n        // check if this._base is power of 10\r\n        // for double fractional _fractionalLength if for the main fractional only\r\n        this._internal__fractionalLength = 0;\r\n        if (this._private__priceScale > 0 && this._private__minMove > 0) {\r\n            let base = this._private__priceScale;\r\n            while (base > 1) {\r\n                base /= 10;\r\n                this._internal__fractionalLength++;\r\n            }\r\n        }\r\n    }\r\n    _private__formatAsDecimal(price) {\r\n        const base = this._private__priceScale / this._private__minMove;\r\n        let intPart = Math.floor(price);\r\n        let fracString = '';\r\n        const fracLength = this._internal__fractionalLength !== undefined ? this._internal__fractionalLength : NaN;\r\n        if (base > 1) {\r\n            let fracPart = +(Math.round(price * base) - intPart * base).toFixed(this._internal__fractionalLength);\r\n            if (fracPart >= base) {\r\n                fracPart -= base;\r\n                intPart += 1;\r\n            }\r\n            fracString = formatterOptions._internal_decimalSign + numberToStringWithLeadingZero(+fracPart.toFixed(this._internal__fractionalLength) * this._private__minMove, fracLength);\r\n        }\r\n        else {\r\n            // should round int part to min move\r\n            intPart = Math.round(intPart * base) / base;\r\n            // if min move > 1, fractional part is always = 0\r\n            if (fracLength > 0) {\r\n                fracString = formatterOptions._internal_decimalSign + numberToStringWithLeadingZero(0, fracLength);\r\n            }\r\n        }\r\n        return intPart.toFixed(0) + fracString;\r\n    }\r\n}\r\n\r\nclass PercentageFormatter extends PriceFormatter {\r\n    constructor(priceScale = 100) {\r\n        super(priceScale);\r\n    }\r\n    format(price) {\r\n        return `${super.format(price)}%`;\r\n    }\r\n}\r\n\r\nclass VolumeFormatter extends FormatterBase {\r\n    constructor(precision) {\r\n        super();\r\n        this._private__precision = precision;\r\n    }\r\n    format(vol) {\r\n        let sign = '';\r\n        if (vol < 0) {\r\n            sign = '-';\r\n            vol = -vol;\r\n        }\r\n        if (vol < 995) {\r\n            return sign + this._private__formatNumber(vol);\r\n        }\r\n        else if (vol < 999995) {\r\n            return sign + this._private__formatNumber(vol / 1000) + 'K';\r\n        }\r\n        else if (vol < 999999995) {\r\n            vol = 1000 * Math.round(vol / 1000);\r\n            return sign + this._private__formatNumber(vol / 1000000) + 'M';\r\n        }\r\n        else {\r\n            vol = 1000000 * Math.round(vol / 1000000);\r\n            return sign + this._private__formatNumber(vol / 1000000000) + 'B';\r\n        }\r\n    }\r\n    _private__formatNumber(value) {\r\n        let res;\r\n        const priceScale = Math.pow(10, this._private__precision);\r\n        value = Math.round(value * priceScale) / priceScale;\r\n        if (value >= 1e-15 && value < 1) {\r\n            res = value.toFixed(this._private__precision).replace(/\\.?0+$/, ''); // regex removes trailing zeroes\r\n        }\r\n        else {\r\n            res = String(value);\r\n        }\r\n        return res.replace(/(\\.[1-9]*)0+$/, (e, p1) => p1);\r\n    }\r\n}\r\n\r\nconst defaultReplacementRe = /[2-9]/g;\r\nclass TextWidthCache {\r\n    constructor(size = 50) {\r\n        this._private__actualSize = 0;\r\n        this._private__usageTick = 1;\r\n        this._private__oldestTick = 1;\r\n        this._private__tick2Labels = {};\r\n        this._private__cache = new Map();\r\n        this._private__maxSize = size;\r\n    }\r\n    _internal_reset() {\r\n        this._private__actualSize = 0;\r\n        this._private__cache.clear();\r\n        this._private__usageTick = 1;\r\n        this._private__oldestTick = 1;\r\n        this._private__tick2Labels = {};\r\n    }\r\n    _internal_measureText(ctx, text, optimizationReplacementRe) {\r\n        return this._private__getMetrics(ctx, text, optimizationReplacementRe).width;\r\n    }\r\n    _internal_yMidCorrection(ctx, text, optimizationReplacementRe) {\r\n        const metrics = this._private__getMetrics(ctx, text, optimizationReplacementRe);\r\n        // if actualBoundingBoxAscent/actualBoundingBoxDescent are not supported we use 0 as a fallback\r\n        return ((metrics.actualBoundingBoxAscent || 0) - (metrics.actualBoundingBoxDescent || 0)) / 2;\r\n    }\r\n    _private__getMetrics(ctx, text, optimizationReplacementRe) {\r\n        const re = optimizationReplacementRe || defaultReplacementRe;\r\n        const cacheString = String(text).replace(re, '0');\r\n        if (this._private__cache.has(cacheString)) {\r\n            return ensureDefined(this._private__cache.get(cacheString))._internal_metrics;\r\n        }\r\n        if (this._private__actualSize === this._private__maxSize) {\r\n            const oldestValue = this._private__tick2Labels[this._private__oldestTick];\r\n            delete this._private__tick2Labels[this._private__oldestTick];\r\n            this._private__cache.delete(oldestValue);\r\n            this._private__oldestTick++;\r\n            this._private__actualSize--;\r\n        }\r\n        ctx.save();\r\n        ctx.textBaseline = 'middle';\r\n        const metrics = ctx.measureText(cacheString);\r\n        ctx.restore();\r\n        if (metrics.width === 0 && !!text.length) {\r\n            // measureText can return 0 in FF depending on a canvas size, don't cache it\r\n            return metrics;\r\n        }\r\n        this._private__cache.set(cacheString, { _internal_metrics: metrics, _internal_tick: this._private__usageTick });\r\n        this._private__tick2Labels[this._private__usageTick] = cacheString;\r\n        this._private__actualSize++;\r\n        this._private__usageTick++;\r\n        return metrics;\r\n    }\r\n}\r\n\r\nclass PanePriceAxisViewRenderer {\r\n    constructor(textWidthCache) {\r\n        this._private__priceAxisViewRenderer = null;\r\n        this._private__rendererOptions = null;\r\n        this._private__align = 'right';\r\n        this._private__textWidthCache = textWidthCache;\r\n    }\r\n    _internal_setParams(priceAxisViewRenderer, rendererOptions, align) {\r\n        this._private__priceAxisViewRenderer = priceAxisViewRenderer;\r\n        this._private__rendererOptions = rendererOptions;\r\n        this._private__align = align;\r\n    }\r\n    _internal_draw(target) {\r\n        if (this._private__rendererOptions === null || this._private__priceAxisViewRenderer === null) {\r\n            return;\r\n        }\r\n        this._private__priceAxisViewRenderer._internal_draw(target, this._private__rendererOptions, this._private__textWidthCache, this._private__align);\r\n    }\r\n}\r\nclass PanePriceAxisView {\r\n    constructor(priceAxisView, dataSource, chartModel) {\r\n        this._private__priceAxisView = priceAxisView;\r\n        this._private__textWidthCache = new TextWidthCache(50); // when should we clear cache?\r\n        this._private__dataSource = dataSource;\r\n        this._private__chartModel = chartModel;\r\n        this._private__fontSize = -1;\r\n        this._private__renderer = new PanePriceAxisViewRenderer(this._private__textWidthCache);\r\n    }\r\n    _internal_renderer() {\r\n        const pane = this._private__chartModel._internal_paneForSource(this._private__dataSource);\r\n        if (pane === null) {\r\n            return null;\r\n        }\r\n        // this price scale will be used to find label placement only (left, right, none)\r\n        const priceScale = pane._internal_isOverlay(this._private__dataSource) ? pane._internal_defaultVisiblePriceScale() : this._private__dataSource._internal_priceScale();\r\n        if (priceScale === null) {\r\n            return null;\r\n        }\r\n        const position = pane._internal_priceScalePosition(priceScale);\r\n        if (position === 'overlay') {\r\n            return null;\r\n        }\r\n        const options = this._private__chartModel._internal_priceAxisRendererOptions();\r\n        if (options._internal_fontSize !== this._private__fontSize) {\r\n            this._private__fontSize = options._internal_fontSize;\r\n            this._private__textWidthCache._internal_reset();\r\n        }\r\n        this._private__renderer._internal_setParams(this._private__priceAxisView._internal_paneRenderer(), options, position);\r\n        return this._private__renderer;\r\n    }\r\n}\r\n\r\nclass HorizontalLineRenderer extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__data = null;\r\n    }\r\n    _internal_setData(data) {\r\n        this._private__data = data;\r\n    }\r\n    _internal_hitTest(x, y) {\r\n        if (!this._private__data?._internal_visible) {\r\n            return null;\r\n        }\r\n        const { _internal_y: itemY, _internal_lineWidth: lineWidth, _internal_externalId: externalId } = this._private__data;\r\n        // add a fixed area threshold around line (Y + width) for hit test\r\n        if (y >= itemY - lineWidth - 7 /* Constants.HitTestThreshold */ && y <= itemY + lineWidth + 7 /* Constants.HitTestThreshold */) {\r\n            return {\r\n                _internal_hitTestData: this._private__data,\r\n                _internal_externalId: externalId,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    _internal__drawImpl({ context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio }) {\r\n        if (this._private__data === null) {\r\n            return;\r\n        }\r\n        if (this._private__data._internal_visible === false) {\r\n            return;\r\n        }\r\n        const y = Math.round(this._private__data._internal_y * verticalPixelRatio);\r\n        if (y < 0 || y > bitmapSize.height) {\r\n            return;\r\n        }\r\n        ctx.lineCap = 'butt';\r\n        ctx.strokeStyle = this._private__data._internal_color;\r\n        ctx.lineWidth = Math.floor(this._private__data._internal_lineWidth * horizontalPixelRatio);\r\n        setLineStyle(ctx, this._private__data._internal_lineStyle);\r\n        drawHorizontalLine(ctx, y, 0, bitmapSize.width);\r\n    }\r\n}\r\n\r\nclass SeriesHorizontalLinePaneView {\r\n    constructor(series) {\r\n        this._internal__lineRendererData = {\r\n            _internal_y: 0,\r\n            _internal_color: 'rgba(0, 0, 0, 0)',\r\n            _internal_lineWidth: 1,\r\n            _internal_lineStyle: 0 /* LineStyle.Solid */,\r\n            _internal_visible: false,\r\n        };\r\n        this._internal__lineRenderer = new HorizontalLineRenderer();\r\n        this._private__invalidated = true;\r\n        this._internal__series = series;\r\n        this._internal__model = series._internal_model();\r\n        this._internal__lineRenderer._internal_setData(this._internal__lineRendererData);\r\n    }\r\n    _internal_update() {\r\n        this._private__invalidated = true;\r\n    }\r\n    _internal_renderer() {\r\n        if (!this._internal__series._internal_visible()) {\r\n            return null;\r\n        }\r\n        if (this._private__invalidated) {\r\n            this._internal__updateImpl();\r\n            this._private__invalidated = false;\r\n        }\r\n        return this._internal__lineRenderer;\r\n    }\r\n}\r\n\r\nclass SeriesHorizontalBaseLinePaneView extends SeriesHorizontalLinePaneView {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(series) {\r\n        super(series);\r\n    }\r\n    _internal__updateImpl() {\r\n        this._internal__lineRendererData._internal_visible = false;\r\n        const priceScale = this._internal__series._internal_priceScale();\r\n        const mode = priceScale._internal_mode()._internal_mode;\r\n        if (mode !== 2 /* PriceScaleMode.Percentage */ && mode !== 3 /* PriceScaleMode.IndexedTo100 */) {\r\n            return;\r\n        }\r\n        const seriesOptions = this._internal__series._internal_options();\r\n        if (!seriesOptions.baseLineVisible || !this._internal__series._internal_visible()) {\r\n            return;\r\n        }\r\n        const firstValue = this._internal__series._internal_firstValue();\r\n        if (firstValue === null) {\r\n            return;\r\n        }\r\n        this._internal__lineRendererData._internal_visible = true;\r\n        this._internal__lineRendererData._internal_y = priceScale._internal_priceToCoordinate(firstValue._internal_value, firstValue._internal_value);\r\n        this._internal__lineRendererData._internal_color = seriesOptions.baseLineColor;\r\n        this._internal__lineRendererData._internal_lineWidth = seriesOptions.baseLineWidth;\r\n        this._internal__lineRendererData._internal_lineStyle = seriesOptions.baseLineStyle;\r\n    }\r\n}\r\n\r\nclass SeriesLastPriceAnimationRenderer extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__data = null;\r\n    }\r\n    _internal_setData(data) {\r\n        this._private__data = data;\r\n    }\r\n    _internal_data() {\r\n        return this._private__data;\r\n    }\r\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\r\n        const data = this._private__data;\r\n        if (data === null) {\r\n            return;\r\n        }\r\n        const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\r\n        const correction = (tickWidth % 2) / 2;\r\n        const centerX = Math.round(data._internal_center.x * horizontalPixelRatio) + correction; // correct x coordinate only\r\n        const centerY = data._internal_center.y * verticalPixelRatio;\r\n        ctx.fillStyle = data._internal_seriesLineColor;\r\n        ctx.beginPath();\r\n        // TODO: it is better to have different horizontal and vertical radii\r\n        const centerPointRadius = Math.max(2, data._internal_seriesLineWidth * 1.5) * horizontalPixelRatio;\r\n        ctx.arc(centerX, centerY, centerPointRadius, 0, 2 * Math.PI, false);\r\n        ctx.fill();\r\n        ctx.fillStyle = data._internal_fillColor;\r\n        ctx.beginPath();\r\n        ctx.arc(centerX, centerY, data._internal_radius * horizontalPixelRatio, 0, 2 * Math.PI, false);\r\n        ctx.fill();\r\n        ctx.lineWidth = tickWidth;\r\n        ctx.strokeStyle = data._internal_strokeColor;\r\n        ctx.beginPath();\r\n        ctx.arc(centerX, centerY, data._internal_radius * horizontalPixelRatio + tickWidth / 2, 0, 2 * Math.PI, false);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nconst animationStagesData = [\r\n    {\r\n        _internal_start: 0,\r\n        _internal_end: 0.25 /* Constants.Stage1Period */,\r\n        _internal_startRadius: 4 /* Constants.Stage1StartCircleRadius */,\r\n        _internal_endRadius: 10 /* Constants.Stage1EndCircleRadius */,\r\n        _internal_startFillAlpha: 0.25 /* Constants.Stage1StartFillAlpha */,\r\n        _internal_endFillAlpha: 0 /* Constants.Stage1EndFillAlpha */,\r\n        _internal_startStrokeAlpha: 0.4 /* Constants.Stage1StartStrokeAlpha */,\r\n        _internal_endStrokeAlpha: 0.8 /* Constants.Stage1EndStrokeAlpha */,\r\n    },\r\n    {\r\n        _internal_start: 0.25 /* Constants.Stage1Period */,\r\n        _internal_end: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */,\r\n        _internal_startRadius: 10 /* Constants.Stage2StartCircleRadius */,\r\n        _internal_endRadius: 14 /* Constants.Stage2EndCircleRadius */,\r\n        _internal_startFillAlpha: 0 /* Constants.Stage2StartFillAlpha */,\r\n        _internal_endFillAlpha: 0 /* Constants.Stage2EndFillAlpha */,\r\n        _internal_startStrokeAlpha: 0.8 /* Constants.Stage2StartStrokeAlpha */,\r\n        _internal_endStrokeAlpha: 0 /* Constants.Stage2EndStrokeAlpha */,\r\n    },\r\n    {\r\n        _internal_start: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */,\r\n        _internal_end: 0.25 /* Constants.Stage1Period */ + 0.275 /* Constants.Stage2Period */ + 0.475 /* Constants.Stage3Period */,\r\n        _internal_startRadius: 14 /* Constants.Stage3StartCircleRadius */,\r\n        _internal_endRadius: 14 /* Constants.Stage3EndCircleRadius */,\r\n        _internal_startFillAlpha: 0 /* Constants.Stage3StartFillAlpha */,\r\n        _internal_endFillAlpha: 0 /* Constants.Stage3EndFillAlpha */,\r\n        _internal_startStrokeAlpha: 0 /* Constants.Stage3StartStrokeAlpha */,\r\n        _internal_endStrokeAlpha: 0 /* Constants.Stage3EndStrokeAlpha */,\r\n    },\r\n];\r\nfunction radius(stage, startRadius, endRadius) {\r\n    return startRadius + (endRadius - startRadius) * stage;\r\n}\r\nclass SeriesLastPriceAnimationPaneView {\r\n    constructor(series) {\r\n        this._private__renderer = new SeriesLastPriceAnimationRenderer();\r\n        this._private__invalidated = true;\r\n        this._private__stageInvalidated = true;\r\n        this._private__startTime = performance.now();\r\n        this._private__endTime = this._private__startTime - 1;\r\n        this._private__series = series;\r\n    }\r\n    _internal_onDataCleared() {\r\n        this._private__endTime = this._private__startTime - 1;\r\n        this._internal_update();\r\n    }\r\n    _internal_onNewRealtimeDataReceived() {\r\n        this._internal_update();\r\n        if (this._private__series._internal_options().lastPriceAnimation === 2 /* LastPriceAnimationMode.OnDataUpdate */) {\r\n            const now = performance.now();\r\n            const timeToAnimationEnd = this._private__endTime - now;\r\n            if (timeToAnimationEnd > 0) {\r\n                if (timeToAnimationEnd < 2600 /* Constants.AnimationPeriod */ / 4) {\r\n                    this._private__endTime += 2600 /* Constants.AnimationPeriod */;\r\n                }\r\n                return;\r\n            }\r\n            this._private__startTime = now;\r\n            this._private__endTime = now + 2600 /* Constants.AnimationPeriod */;\r\n        }\r\n    }\r\n    _internal_update() {\r\n        this._private__invalidated = true;\r\n    }\r\n    _internal_invalidateStage() {\r\n        this._private__stageInvalidated = true;\r\n    }\r\n    _internal_visible() {\r\n        // center point is always visible if lastPriceAnimation is not LastPriceAnimationMode.Disabled\r\n        return this._private__series._internal_options().lastPriceAnimation !== 0 /* LastPriceAnimationMode.Disabled */;\r\n    }\r\n    _internal_animationActive() {\r\n        switch (this._private__series._internal_options().lastPriceAnimation) {\r\n            case 0 /* LastPriceAnimationMode.Disabled */:\r\n                return false;\r\n            case 1 /* LastPriceAnimationMode.Continuous */:\r\n                return true;\r\n            case 2 /* LastPriceAnimationMode.OnDataUpdate */:\r\n                return performance.now() <= this._private__endTime;\r\n        }\r\n    }\r\n    _internal_renderer() {\r\n        if (this._private__invalidated) {\r\n            this._private__updateImpl();\r\n            this._private__invalidated = false;\r\n            this._private__stageInvalidated = false;\r\n        }\r\n        else if (this._private__stageInvalidated) {\r\n            this._private__updateRendererDataStage();\r\n            this._private__stageInvalidated = false;\r\n        }\r\n        return this._private__renderer;\r\n    }\r\n    _private__updateImpl() {\r\n        this._private__renderer._internal_setData(null);\r\n        const timeScale = this._private__series._internal_model()._internal_timeScale();\r\n        const visibleRange = timeScale._internal_visibleStrictRange();\r\n        const firstValue = this._private__series._internal_firstValue();\r\n        if (visibleRange === null || firstValue === null) {\r\n            return;\r\n        }\r\n        const lastValue = this._private__series._internal_lastValueData(true);\r\n        if (lastValue._internal_noData || !visibleRange._internal_contains(lastValue._internal_index)) {\r\n            return;\r\n        }\r\n        const lastValuePoint = {\r\n            x: timeScale._internal_indexToCoordinate(lastValue._internal_index),\r\n            y: this._private__series._internal_priceScale()._internal_priceToCoordinate(lastValue._internal_price, firstValue._internal_value),\r\n        };\r\n        const seriesLineColor = lastValue._internal_color;\r\n        const seriesLineWidth = this._private__series._internal_options().lineWidth;\r\n        const data = this._private__animationData(this._private__duration(), seriesLineColor);\r\n        this._private__renderer._internal_setData({\r\n            _internal_seriesLineColor: seriesLineColor,\r\n            _internal_seriesLineWidth: seriesLineWidth,\r\n            _internal_fillColor: data._internal_fillColor,\r\n            _internal_strokeColor: data._internal_strokeColor,\r\n            _internal_radius: data._internal_radius,\r\n            _internal_center: lastValuePoint,\r\n        });\r\n    }\r\n    _private__updateRendererDataStage() {\r\n        const rendererData = this._private__renderer._internal_data();\r\n        if (rendererData !== null) {\r\n            const data = this._private__animationData(this._private__duration(), rendererData._internal_seriesLineColor);\r\n            rendererData._internal_fillColor = data._internal_fillColor;\r\n            rendererData._internal_strokeColor = data._internal_strokeColor;\r\n            rendererData._internal_radius = data._internal_radius;\r\n        }\r\n    }\r\n    _private__duration() {\r\n        return this._internal_animationActive() ? performance.now() - this._private__startTime : 2600 /* Constants.AnimationPeriod */ - 1;\r\n    }\r\n    _private__color(seriesLineColor, stage, startAlpha, endAlpha) {\r\n        const alpha = startAlpha + (endAlpha - startAlpha) * stage;\r\n        return this._private__series._internal_model()._internal_colorParser()._internal_applyAlpha(seriesLineColor, alpha);\r\n    }\r\n    _private__animationData(durationSinceStart, lineColor) {\r\n        const globalStage = (durationSinceStart % 2600 /* Constants.AnimationPeriod */) / 2600 /* Constants.AnimationPeriod */;\r\n        let currentStageData;\r\n        for (const stageData of animationStagesData) {\r\n            if (globalStage >= stageData._internal_start && globalStage <= stageData._internal_end) {\r\n                currentStageData = stageData;\r\n                break;\r\n            }\r\n        }\r\n        assert(currentStageData !== undefined, 'Last price animation internal logic error');\r\n        const subStage = (globalStage - currentStageData._internal_start) / (currentStageData._internal_end - currentStageData._internal_start);\r\n        return {\r\n            _internal_fillColor: this._private__color(lineColor, subStage, currentStageData._internal_startFillAlpha, currentStageData._internal_endFillAlpha),\r\n            _internal_strokeColor: this._private__color(lineColor, subStage, currentStageData._internal_startStrokeAlpha, currentStageData._internal_endStrokeAlpha),\r\n            _internal_radius: radius(subStage, currentStageData._internal_startRadius, currentStageData._internal_endRadius),\r\n        };\r\n    }\r\n}\r\n\r\nclass SeriesPriceLinePaneView extends SeriesHorizontalLinePaneView {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(series) {\r\n        super(series);\r\n    }\r\n    _internal__updateImpl() {\r\n        const data = this._internal__lineRendererData;\r\n        data._internal_visible = false;\r\n        const seriesOptions = this._internal__series._internal_options();\r\n        if (!seriesOptions.priceLineVisible || !this._internal__series._internal_visible()) {\r\n            return;\r\n        }\r\n        const lastValueData = this._internal__series._internal_lastValueData(seriesOptions.priceLineSource === 0 /* PriceLineSource.LastBar */);\r\n        if (lastValueData._internal_noData) {\r\n            return;\r\n        }\r\n        data._internal_visible = true;\r\n        data._internal_y = lastValueData._internal_coordinate;\r\n        data._internal_color = this._internal__series._internal_priceLineColor(lastValueData._internal_color);\r\n        data._internal_lineWidth = seriesOptions.priceLineWidth;\r\n        data._internal_lineStyle = seriesOptions.priceLineStyle;\r\n    }\r\n}\r\n\r\nclass SeriesPriceAxisView extends PriceAxisView {\r\n    constructor(source) {\r\n        super();\r\n        this._private__source = source;\r\n    }\r\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\r\n        axisRendererData._internal_visible = false;\r\n        paneRendererData._internal_visible = false;\r\n        const source = this._private__source;\r\n        if (!source._internal_visible()) {\r\n            return;\r\n        }\r\n        const seriesOptions = source._internal_options();\r\n        const showSeriesLastValue = seriesOptions.lastValueVisible;\r\n        const showSymbolLabel = source._internal_title() !== '';\r\n        const showPriceAndPercentage = seriesOptions.seriesLastValueMode === 0 /* PriceAxisLastValueMode.LastPriceAndPercentageValue */;\r\n        const lastValueData = source._internal_lastValueData(false);\r\n        if (lastValueData._internal_noData) {\r\n            return;\r\n        }\r\n        if (showSeriesLastValue) {\r\n            axisRendererData._internal_text = this._internal__axisText(lastValueData, showSeriesLastValue, showPriceAndPercentage);\r\n            axisRendererData._internal_visible = axisRendererData._internal_text.length !== 0;\r\n        }\r\n        if (showSymbolLabel || showPriceAndPercentage) {\r\n            paneRendererData._internal_text = this._internal__paneText(lastValueData, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage);\r\n            paneRendererData._internal_visible = paneRendererData._internal_text.length > 0;\r\n        }\r\n        const lastValueColor = source._internal_priceLineColor(lastValueData._internal_color);\r\n        const colors = this._private__source._internal_model()._internal_colorParser()._internal_generateContrastColors(lastValueColor);\r\n        commonRendererData._internal_background = colors._internal_background;\r\n        commonRendererData._internal_coordinate = lastValueData._internal_coordinate;\r\n        paneRendererData._internal_borderColor = source._internal_model()._internal_backgroundColorAtYPercentFromTop(lastValueData._internal_coordinate / source._internal_priceScale()._internal_height());\r\n        axisRendererData._internal_borderColor = lastValueColor;\r\n        axisRendererData._internal_color = colors._internal_foreground;\r\n        paneRendererData._internal_color = colors._internal_foreground;\r\n    }\r\n    _internal__paneText(lastValue, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage) {\r\n        let result = '';\r\n        const title = this._private__source._internal_title();\r\n        if (showSymbolLabel && title.length !== 0) {\r\n            result += `${title} `;\r\n        }\r\n        if (showSeriesLastValue && showPriceAndPercentage) {\r\n            result += this._private__source._internal_priceScale()._internal_isPercentage() ?\r\n                lastValue._internal_formattedPriceAbsolute : lastValue._internal_formattedPricePercentage;\r\n        }\r\n        return result.trim();\r\n    }\r\n    _internal__axisText(lastValueData, showSeriesLastValue, showPriceAndPercentage) {\r\n        if (!showSeriesLastValue) {\r\n            return '';\r\n        }\r\n        if (!showPriceAndPercentage) {\r\n            return lastValueData._internal_text;\r\n        }\r\n        return this._private__source._internal_priceScale()._internal_isPercentage() ?\r\n            lastValueData._internal_formattedPricePercentage : lastValueData._internal_formattedPriceAbsolute;\r\n    }\r\n}\r\n\r\nfunction computeFiniteResult(method, valueOne, valueTwo, fallback) {\r\n    const firstFinite = Number.isFinite(valueOne);\r\n    const secondFinite = Number.isFinite(valueTwo);\r\n    if (firstFinite && secondFinite) {\r\n        return method(valueOne, valueTwo);\r\n    }\r\n    return !firstFinite && !secondFinite ? fallback : (firstFinite ? valueOne : valueTwo);\r\n}\r\nclass PriceRangeImpl {\r\n    constructor(minValue, maxValue) {\r\n        this._private__minValue = minValue;\r\n        this._private__maxValue = maxValue;\r\n    }\r\n    _internal_equals(pr) {\r\n        if (pr === null) {\r\n            return false;\r\n        }\r\n        return this._private__minValue === pr._private__minValue && this._private__maxValue === pr._private__maxValue;\r\n    }\r\n    _internal_clone() {\r\n        return new PriceRangeImpl(this._private__minValue, this._private__maxValue);\r\n    }\r\n    _internal_minValue() {\r\n        return this._private__minValue;\r\n    }\r\n    _internal_maxValue() {\r\n        return this._private__maxValue;\r\n    }\r\n    _internal_length() {\r\n        return this._private__maxValue - this._private__minValue;\r\n    }\r\n    _internal_isEmpty() {\r\n        return this._private__maxValue === this._private__minValue || Number.isNaN(this._private__maxValue) || Number.isNaN(this._private__minValue);\r\n    }\r\n    _internal_merge(anotherRange) {\r\n        if (anotherRange === null) {\r\n            return this;\r\n        }\r\n        return new PriceRangeImpl(computeFiniteResult(Math.min, this._internal_minValue(), anotherRange._internal_minValue(), -Infinity), computeFiniteResult(Math.max, this._internal_maxValue(), anotherRange._internal_maxValue(), Infinity));\r\n    }\r\n    _internal_scaleAroundCenter(coeff) {\r\n        if (!isNumber(coeff)) {\r\n            return;\r\n        }\r\n        const delta = this._private__maxValue - this._private__minValue;\r\n        if (delta === 0) {\r\n            return;\r\n        }\r\n        const center = (this._private__maxValue + this._private__minValue) * 0.5;\r\n        let maxDelta = this._private__maxValue - center;\r\n        let minDelta = this._private__minValue - center;\r\n        maxDelta *= coeff;\r\n        minDelta *= coeff;\r\n        this._private__maxValue = center + maxDelta;\r\n        this._private__minValue = center + minDelta;\r\n    }\r\n    _internal_shift(delta) {\r\n        if (!isNumber(delta)) {\r\n            return;\r\n        }\r\n        this._private__maxValue += delta;\r\n        this._private__minValue += delta;\r\n    }\r\n    _internal_toRaw() {\r\n        return {\r\n            minValue: this._private__minValue,\r\n            maxValue: this._private__maxValue,\r\n        };\r\n    }\r\n    static _internal_fromRaw(raw) {\r\n        return (raw === null) ? null : new PriceRangeImpl(raw.minValue, raw.maxValue);\r\n    }\r\n}\r\n\r\nclass AutoscaleInfoImpl {\r\n    constructor(priceRange, margins) {\r\n        this._private__priceRange = priceRange;\r\n        this._private__margins = margins || null;\r\n    }\r\n    _internal_priceRange() {\r\n        return this._private__priceRange;\r\n    }\r\n    _internal_margins() {\r\n        return this._private__margins;\r\n    }\r\n    _internal_toRaw() {\r\n        return {\r\n            priceRange: this._private__priceRange === null ? null : this._private__priceRange._internal_toRaw(),\r\n            margins: this._private__margins || undefined,\r\n        };\r\n    }\r\n    static _internal_fromRaw(raw) {\r\n        return (raw === null) ? null : new AutoscaleInfoImpl(PriceRangeImpl._internal_fromRaw(raw.priceRange), raw.margins);\r\n    }\r\n}\r\n\r\nclass CustomPriceLinePaneView extends SeriesHorizontalLinePaneView {\r\n    constructor(series, priceLine) {\r\n        super(series);\r\n        this._private__priceLine = priceLine;\r\n    }\r\n    _internal__updateImpl() {\r\n        const data = this._internal__lineRendererData;\r\n        data._internal_visible = false;\r\n        const lineOptions = this._private__priceLine._internal_options();\r\n        if (!this._internal__series._internal_visible() || !lineOptions.lineVisible) {\r\n            return;\r\n        }\r\n        const y = this._private__priceLine._internal_yCoord();\r\n        if (y === null) {\r\n            return;\r\n        }\r\n        data._internal_visible = true;\r\n        data._internal_y = y;\r\n        data._internal_color = lineOptions.color;\r\n        data._internal_lineWidth = lineOptions.lineWidth;\r\n        data._internal_lineStyle = lineOptions.lineStyle;\r\n        data._internal_externalId = this._private__priceLine._internal_options().id;\r\n    }\r\n}\r\n\r\nclass CustomPriceLinePriceAxisView extends PriceAxisView {\r\n    constructor(series, priceLine) {\r\n        super();\r\n        this._private__series = series;\r\n        this._private__priceLine = priceLine;\r\n    }\r\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonData) {\r\n        axisRendererData._internal_visible = false;\r\n        paneRendererData._internal_visible = false;\r\n        const options = this._private__priceLine._internal_options();\r\n        const labelVisible = options.axisLabelVisible;\r\n        const showPaneLabel = options.title !== '';\r\n        const series = this._private__series;\r\n        if (!labelVisible || !series._internal_visible()) {\r\n            return;\r\n        }\r\n        const y = this._private__priceLine._internal_yCoord();\r\n        if (y === null) {\r\n            return;\r\n        }\r\n        if (showPaneLabel) {\r\n            paneRendererData._internal_text = options.title;\r\n            paneRendererData._internal_visible = true;\r\n        }\r\n        paneRendererData._internal_borderColor = series._internal_model()._internal_backgroundColorAtYPercentFromTop(y / series._internal_priceScale()._internal_height());\r\n        axisRendererData._internal_text = this._private__formatPrice(options.price);\r\n        axisRendererData._internal_visible = true;\r\n        const colors = this._private__series._internal_model()._internal_colorParser()._internal_generateContrastColors(options.axisLabelColor || options.color);\r\n        commonData._internal_background = colors._internal_background;\r\n        const textColor = options.axisLabelTextColor || colors._internal_foreground;\r\n        axisRendererData._internal_color = textColor; // price text\r\n        paneRendererData._internal_color = textColor; // title text\r\n        commonData._internal_coordinate = y;\r\n    }\r\n    _private__formatPrice(price) {\r\n        const firstValue = this._private__series._internal_firstValue();\r\n        if (firstValue === null) {\r\n            return '';\r\n        }\r\n        return this._private__series._internal_priceScale()._internal_formatPrice(price, firstValue._internal_value);\r\n    }\r\n}\r\n\r\nclass CustomPriceLine {\r\n    constructor(series, options) {\r\n        this._private__series = series;\r\n        this._private__options = options;\r\n        this._private__priceLineView = new CustomPriceLinePaneView(series, this);\r\n        this._private__priceAxisView = new CustomPriceLinePriceAxisView(series, this);\r\n        this._private__panePriceAxisView = new PanePriceAxisView(this._private__priceAxisView, series, series._internal_model());\r\n    }\r\n    _internal_applyOptions(options) {\r\n        merge(this._private__options, options);\r\n        this._internal_update();\r\n        this._private__series._internal_model()._internal_lightUpdate();\r\n    }\r\n    _internal_options() {\r\n        return this._private__options;\r\n    }\r\n    _internal_paneView() {\r\n        return this._private__priceLineView;\r\n    }\r\n    _internal_labelPaneView() {\r\n        return this._private__panePriceAxisView;\r\n    }\r\n    _internal_priceAxisView() {\r\n        return this._private__priceAxisView;\r\n    }\r\n    _internal_update() {\r\n        this._private__priceLineView._internal_update();\r\n        this._private__priceAxisView._internal_update();\r\n    }\r\n    _internal_yCoord() {\r\n        const series = this._private__series;\r\n        const priceScale = series._internal_priceScale();\r\n        const timeScale = series._internal_model()._internal_timeScale();\r\n        if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {\r\n            return null;\r\n        }\r\n        const firstValue = series._internal_firstValue();\r\n        if (firstValue === null) {\r\n            return null;\r\n        }\r\n        return priceScale._internal_priceToCoordinate(this._private__options.price, firstValue._internal_value);\r\n    }\r\n}\r\n\r\nclass PriceDataSource extends DataSource {\r\n    constructor(model) {\r\n        super();\r\n        this._private__model = model;\r\n    }\r\n    _internal_model() {\r\n        return this._private__model;\r\n    }\r\n}\r\n\r\nconst barStyleFnMap = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    Bar: (findBar, barStyle, barIndex, precomputedBars) => {\r\n        const upColor = barStyle.upColor;\r\n        const downColor = barStyle.downColor;\r\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\r\n        const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */]);\r\n        return {\r\n            _internal_barColor: currentBar._internal_color ?? (isUp ? upColor : downColor),\r\n        };\r\n    },\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    Candlestick: (findBar, candlestickStyle, barIndex, precomputedBars) => {\r\n        const upColor = candlestickStyle.upColor;\r\n        const downColor = candlestickStyle.downColor;\r\n        const borderUpColor = candlestickStyle.borderUpColor;\r\n        const borderDownColor = candlestickStyle.borderDownColor;\r\n        const wickUpColor = candlestickStyle.wickUpColor;\r\n        const wickDownColor = candlestickStyle.wickDownColor;\r\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\r\n        const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */]);\r\n        return {\r\n            _internal_barColor: currentBar._internal_color ?? (isUp ? upColor : downColor),\r\n            _internal_barBorderColor: currentBar._internal_borderColor ?? (isUp ? borderUpColor : borderDownColor),\r\n            _internal_barWickColor: currentBar._internal_wickColor ?? (isUp ? wickUpColor : wickDownColor),\r\n        };\r\n    },\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    Custom: (findBar, customStyle, barIndex, precomputedBars) => {\r\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\r\n        return {\r\n            _internal_barColor: currentBar._internal_color ?? customStyle.color,\r\n        };\r\n    },\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    Area: (findBar, areaStyle, barIndex, precomputedBars) => {\r\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\r\n        return {\r\n            _internal_barColor: currentBar._internal_lineColor ?? areaStyle.lineColor,\r\n            _internal_lineColor: currentBar._internal_lineColor ?? areaStyle.lineColor,\r\n            _internal_topColor: currentBar._internal_topColor ?? areaStyle.topColor,\r\n            _internal_bottomColor: currentBar._internal_bottomColor ?? areaStyle.bottomColor,\r\n        };\r\n    },\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    Baseline: (findBar, baselineStyle, barIndex, precomputedBars) => {\r\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\r\n        const isAboveBaseline = currentBar._internal_value[3 /* PlotRowValueIndex.Close */] >= baselineStyle.baseValue.price;\r\n        return {\r\n            _internal_barColor: isAboveBaseline ? baselineStyle.topLineColor : baselineStyle.bottomLineColor,\r\n            _internal_topLineColor: currentBar._internal_topLineColor ?? baselineStyle.topLineColor,\r\n            _internal_bottomLineColor: currentBar._internal_bottomLineColor ?? baselineStyle.bottomLineColor,\r\n            _internal_topFillColor1: currentBar._internal_topFillColor1 ?? baselineStyle.topFillColor1,\r\n            _internal_topFillColor2: currentBar._internal_topFillColor2 ?? baselineStyle.topFillColor2,\r\n            _internal_bottomFillColor1: currentBar._internal_bottomFillColor1 ?? baselineStyle.bottomFillColor1,\r\n            _internal_bottomFillColor2: currentBar._internal_bottomFillColor2 ?? baselineStyle.bottomFillColor2,\r\n        };\r\n    },\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    Line: (findBar, lineStyle, barIndex, precomputedBars) => {\r\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\r\n        return {\r\n            _internal_barColor: currentBar._internal_color ?? lineStyle.color,\r\n            _internal_lineColor: currentBar._internal_color ?? lineStyle.color,\r\n        };\r\n    },\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    Histogram: (findBar, histogramStyle, barIndex, precomputedBars) => {\r\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\r\n        return {\r\n            _internal_barColor: currentBar._internal_color ?? histogramStyle.color,\r\n        };\r\n    },\r\n};\r\nclass SeriesBarColorer {\r\n    constructor(series) {\r\n        this._private__findBar = (barIndex, precomputedBars) => {\r\n            if (precomputedBars !== undefined) {\r\n                return precomputedBars._internal_value;\r\n            }\r\n            return this._private__series._internal_bars()._internal_valueAt(barIndex);\r\n        };\r\n        this._private__series = series;\r\n        this._private__styleGetter = barStyleFnMap[series._internal_seriesType()];\r\n    }\r\n    _internal_barStyle(barIndex, precomputedBars) {\r\n        // precomputedBars: {value: [Array BarValues], previousValue: [Array BarValues] | undefined}\r\n        // Used to avoid binary search if bars are already known\r\n        return this._private__styleGetter(this._private__findBar, this._private__series._internal_options(), barIndex, precomputedBars);\r\n    }\r\n}\r\n\r\n/**\r\n * Binary function that accepts two arguments (the first of the type of array elements, and the second is always val), and returns a value convertible to bool.\r\n * The value returned indicates whether the first argument is considered to go before the second.\r\n * The function shall not modify any of its arguments.\r\n */\r\nfunction boundCompare(lower, arr, value, compare, start = 0, to = arr.length) {\r\n    let count = to - start;\r\n    while (0 < count) {\r\n        const count2 = (count >> 1);\r\n        const mid = start + count2;\r\n        if (compare(arr[mid], value) === lower) {\r\n            start = mid + 1;\r\n            count -= count2 + 1;\r\n        }\r\n        else {\r\n            count = count2;\r\n        }\r\n    }\r\n    return start;\r\n}\r\nconst lowerBound = boundCompare.bind(null, true);\r\nconst upperBound = boundCompare.bind(null, false);\r\n\r\n/**\r\n * Search direction if no data found at provided index\r\n */\r\nvar MismatchDirection;\r\n(function (MismatchDirection) {\r\n    /**\r\n     * Search the nearest left item\r\n     */\r\n    MismatchDirection[MismatchDirection[\"NearestLeft\"] = -1] = \"NearestLeft\";\r\n    /**\r\n     * Do not search\r\n     */\r\n    MismatchDirection[MismatchDirection[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Search the nearest right item\r\n     */\r\n    MismatchDirection[MismatchDirection[\"NearestRight\"] = 1] = \"NearestRight\";\r\n})(MismatchDirection || (MismatchDirection = {}));\r\n// TODO: think about changing it dynamically\r\nconst CHUNK_SIZE = 30;\r\n/**\r\n * PlotList is an array of plot rows\r\n * each plot row consists of key (index in timescale) and plot value map\r\n */\r\nclass PlotList {\r\n    constructor() {\r\n        this._private__items = [];\r\n        this._private__minMaxCache = new Map();\r\n        this._private__rowSearchCache = new Map();\r\n        this._private__indices = [];\r\n    }\r\n    // @returns Last row\r\n    _internal_last() {\r\n        return this._internal_size() > 0 ? this._private__items[this._private__items.length - 1] : null;\r\n    }\r\n    _internal_firstIndex() {\r\n        return this._internal_size() > 0 ? this._private__indexAt(0) : null;\r\n    }\r\n    _internal_lastIndex() {\r\n        return this._internal_size() > 0 ? this._private__indexAt((this._private__items.length - 1)) : null;\r\n    }\r\n    _internal_size() {\r\n        return this._private__items.length;\r\n    }\r\n    _internal_isEmpty() {\r\n        return this._internal_size() === 0;\r\n    }\r\n    _internal_contains(index) {\r\n        return this._private__search(index, 0 /* MismatchDirection.None */) !== null;\r\n    }\r\n    _internal_valueAt(index) {\r\n        return this._internal_search(index);\r\n    }\r\n    _internal_search(index, searchMode = 0 /* MismatchDirection.None */) {\r\n        const pos = this._private__search(index, searchMode);\r\n        if (pos === null) {\r\n            return null;\r\n        }\r\n        return {\r\n            ...this._private__valueAt(pos),\r\n            _internal_index: this._private__indexAt(pos),\r\n        };\r\n    }\r\n    _internal_rows() {\r\n        return this._private__items;\r\n    }\r\n    _internal_minMaxOnRangeCached(start, end, plots) {\r\n        // this code works for single series only\r\n        // could fail after whitespaces implementation\r\n        if (this._internal_isEmpty()) {\r\n            return null;\r\n        }\r\n        let result = null;\r\n        for (const plot of plots) {\r\n            const plotMinMax = this._private__minMaxOnRangeCachedImpl(start, end, plot);\r\n            result = mergeMinMax(result, plotMinMax);\r\n        }\r\n        return result;\r\n    }\r\n    _internal_setData(plotRows) {\r\n        this._private__rowSearchCache.clear();\r\n        this._private__minMaxCache.clear();\r\n        this._private__items = plotRows;\r\n        this._private__indices = plotRows.map((plotRow) => plotRow._internal_index);\r\n    }\r\n    // TimePointIndex values for fulfilled data points\r\n    _internal_indices() {\r\n        return this._private__indices;\r\n    }\r\n    _private__indexAt(offset) {\r\n        return this._private__items[offset]._internal_index;\r\n    }\r\n    _private__valueAt(offset) {\r\n        return this._private__items[offset];\r\n    }\r\n    _private__search(index, searchMode) {\r\n        const exactPos = this._private__bsearch(index);\r\n        if (exactPos === null && searchMode !== 0 /* MismatchDirection.None */) {\r\n            switch (searchMode) {\r\n                case -1 /* MismatchDirection.NearestLeft */:\r\n                    return this._private__searchNearestLeft(index);\r\n                case 1 /* MismatchDirection.NearestRight */:\r\n                    return this._private__searchNearestRight(index);\r\n                default:\r\n                    throw new TypeError('Unknown search mode');\r\n            }\r\n        }\r\n        return exactPos;\r\n    }\r\n    _private__searchNearestLeft(index) {\r\n        let nearestLeftPos = this._private__lowerbound(index);\r\n        if (nearestLeftPos > 0) {\r\n            nearestLeftPos = nearestLeftPos - 1;\r\n        }\r\n        return (nearestLeftPos !== this._private__items.length && this._private__indexAt(nearestLeftPos) < index) ? nearestLeftPos : null;\r\n    }\r\n    _private__searchNearestRight(index) {\r\n        const nearestRightPos = this._private__upperbound(index);\r\n        return (nearestRightPos !== this._private__items.length && index < this._private__indexAt(nearestRightPos)) ? nearestRightPos : null;\r\n    }\r\n    _private__bsearch(index) {\r\n        const start = this._private__lowerbound(index);\r\n        if (start !== this._private__items.length && !(index < this._private__items[start]._internal_index)) {\r\n            return start;\r\n        }\r\n        return null;\r\n    }\r\n    _private__lowerbound(index) {\r\n        return lowerBound(this._private__items, index, (a, b) => a._internal_index < b);\r\n    }\r\n    _private__upperbound(index) {\r\n        return upperBound(this._private__items, index, (a, b) => a._internal_index > b);\r\n    }\r\n    _private__plotMinMax(startIndex, endIndexExclusive, plotIndex) {\r\n        let result = null;\r\n        for (let i = startIndex; i < endIndexExclusive; i++) {\r\n            const values = this._private__items[i]._internal_value;\r\n            const v = values[plotIndex];\r\n            if (Number.isNaN(v)) {\r\n                continue;\r\n            }\r\n            if (result === null) {\r\n                result = { _internal_min: v, _internal_max: v };\r\n            }\r\n            else {\r\n                if (v < result._internal_min) {\r\n                    result._internal_min = v;\r\n                }\r\n                if (v > result._internal_max) {\r\n                    result._internal_max = v;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _private__minMaxOnRangeCachedImpl(start, end, plotIndex) {\r\n        // this code works for single series only\r\n        // could fail after whitespaces implementation\r\n        if (this._internal_isEmpty()) {\r\n            return null;\r\n        }\r\n        let result = null;\r\n        // assume that bar indexes only increase\r\n        const firstIndex = ensureNotNull(this._internal_firstIndex());\r\n        const lastIndex = ensureNotNull(this._internal_lastIndex());\r\n        const s = Math.max(start, firstIndex);\r\n        const e = Math.min(end, lastIndex);\r\n        const cachedLow = Math.ceil(s / CHUNK_SIZE) * CHUNK_SIZE;\r\n        const cachedHigh = Math.max(cachedLow, Math.floor(e / CHUNK_SIZE) * CHUNK_SIZE);\r\n        {\r\n            const startIndex = this._private__lowerbound(s);\r\n            const endIndex = this._private__upperbound(Math.min(e, cachedLow, end)); // non-inclusive end\r\n            const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);\r\n            result = mergeMinMax(result, plotMinMax);\r\n        }\r\n        let minMaxCache = this._private__minMaxCache.get(plotIndex);\r\n        if (minMaxCache === undefined) {\r\n            minMaxCache = new Map();\r\n            this._private__minMaxCache.set(plotIndex, minMaxCache);\r\n        }\r\n        // now go cached\r\n        for (let c = Math.max(cachedLow + 1, s); c < cachedHigh; c += CHUNK_SIZE) {\r\n            const chunkIndex = Math.floor(c / CHUNK_SIZE);\r\n            let chunkMinMax = minMaxCache.get(chunkIndex);\r\n            if (chunkMinMax === undefined) {\r\n                const chunkStart = this._private__lowerbound(chunkIndex * CHUNK_SIZE);\r\n                const chunkEnd = this._private__upperbound((chunkIndex + 1) * CHUNK_SIZE - 1);\r\n                chunkMinMax = this._private__plotMinMax(chunkStart, chunkEnd, plotIndex);\r\n                minMaxCache.set(chunkIndex, chunkMinMax);\r\n            }\r\n            result = mergeMinMax(result, chunkMinMax);\r\n        }\r\n        // tail\r\n        {\r\n            const startIndex = this._private__lowerbound(cachedHigh);\r\n            const endIndex = this._private__upperbound(e); // non-inclusive end\r\n            const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);\r\n            result = mergeMinMax(result, plotMinMax);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nfunction mergeMinMax(first, second) {\r\n    if (first === null) {\r\n        return second;\r\n    }\r\n    else {\r\n        if (second === null) {\r\n            return first;\r\n        }\r\n        else {\r\n            // merge MinMax values\r\n            const min = Math.min(first._internal_min, second._internal_min);\r\n            const max = Math.max(first._internal_max, second._internal_max);\r\n            return { _internal_min: min, _internal_max: max };\r\n        }\r\n    }\r\n}\r\n\r\nfunction createSeriesPlotList() {\r\n    return new PlotList();\r\n}\r\n\r\nclass PrimitiveRendererWrapper {\r\n    constructor(baseRenderer) {\r\n        this._private__baseRenderer = baseRenderer;\r\n    }\r\n    _internal_draw(target, isHovered, hitTestData) {\r\n        this._private__baseRenderer.draw(target);\r\n    }\r\n    _internal_drawBackground(target, isHovered, hitTestData) {\r\n        this._private__baseRenderer.drawBackground?.(target);\r\n    }\r\n}\r\nclass PrimitivePaneViewWrapper {\r\n    constructor(paneView) {\r\n        this._private__cache = null;\r\n        this._private__paneView = paneView;\r\n    }\r\n    _internal_renderer() {\r\n        const baseRenderer = this._private__paneView.renderer();\r\n        if (baseRenderer === null) {\r\n            return null;\r\n        }\r\n        if (this._private__cache?._internal_base === baseRenderer) {\r\n            return this._private__cache._internal_wrapper;\r\n        }\r\n        const wrapper = new PrimitiveRendererWrapper(baseRenderer);\r\n        this._private__cache = {\r\n            _internal_base: baseRenderer,\r\n            _internal_wrapper: wrapper,\r\n        };\r\n        return wrapper;\r\n    }\r\n    _internal_zOrder() {\r\n        return this._private__paneView.zOrder?.() ?? 'normal';\r\n    }\r\n}\r\nclass PrimitiveWrapper {\r\n    constructor(primitive) {\r\n        this._private__paneViewsCache = null;\r\n        this._internal__primitive = primitive;\r\n    }\r\n    _internal_primitive() {\r\n        return this._internal__primitive;\r\n    }\r\n    _internal_updateAllViews() {\r\n        this._internal__primitive.updateAllViews?.();\r\n    }\r\n    _internal_paneViews() {\r\n        const base = this._internal__primitive.paneViews?.() ?? [];\r\n        if (this._private__paneViewsCache?._internal_base === base) {\r\n            return this._private__paneViewsCache._internal_wrapper;\r\n        }\r\n        const wrapper = base.map((pw) => new PrimitivePaneViewWrapper(pw));\r\n        this._private__paneViewsCache = {\r\n            _internal_base: base,\r\n            _internal_wrapper: wrapper,\r\n        };\r\n        return wrapper;\r\n    }\r\n    _internal_hitTest(x, y) {\r\n        return this._internal__primitive.hitTest?.(x, y) ?? null;\r\n    }\r\n}\r\nlet PanePrimitiveWrapper$1 = class PanePrimitiveWrapper extends PrimitiveWrapper {\r\n    _internal_labelPaneViews() {\r\n        return [];\r\n    }\r\n};\r\n\r\nclass SeriesPrimitiveRendererWrapper {\r\n    constructor(baseRenderer) {\r\n        this._private__baseRenderer = baseRenderer;\r\n    }\r\n    _internal_draw(target, isHovered, hitTestData) {\r\n        this._private__baseRenderer.draw(target);\r\n    }\r\n    _internal_drawBackground(target, isHovered, hitTestData) {\r\n        this._private__baseRenderer.drawBackground?.(target);\r\n    }\r\n}\r\nclass SeriesPrimitivePaneViewWrapper {\r\n    constructor(paneView) {\r\n        this._private__cache = null;\r\n        this._private__paneView = paneView;\r\n    }\r\n    _internal_renderer() {\r\n        const baseRenderer = this._private__paneView.renderer();\r\n        if (baseRenderer === null) {\r\n            return null;\r\n        }\r\n        if (this._private__cache?._internal_base === baseRenderer) {\r\n            return this._private__cache._internal_wrapper;\r\n        }\r\n        const wrapper = new SeriesPrimitiveRendererWrapper(baseRenderer);\r\n        this._private__cache = {\r\n            _internal_base: baseRenderer,\r\n            _internal_wrapper: wrapper,\r\n        };\r\n        return wrapper;\r\n    }\r\n    _internal_zOrder() {\r\n        return this._private__paneView.zOrder?.() ?? 'normal';\r\n    }\r\n}\r\nfunction getAxisViewData(baseView) {\r\n    return {\r\n        _internal_text: baseView.text(),\r\n        _internal_coordinate: baseView.coordinate(),\r\n        _internal_fixedCoordinate: baseView.fixedCoordinate?.(),\r\n        _internal_color: baseView.textColor(),\r\n        _internal_background: baseView.backColor(),\r\n        _internal_visible: baseView.visible?.() ?? true,\r\n        _internal_tickVisible: baseView.tickVisible?.() ?? true,\r\n    };\r\n}\r\nclass SeriesPrimitiveTimeAxisViewWrapper {\r\n    constructor(baseView, timeScale) {\r\n        this._private__renderer = new TimeAxisViewRenderer();\r\n        this._private__baseView = baseView;\r\n        this._private__timeScale = timeScale;\r\n    }\r\n    _internal_renderer() {\r\n        this._private__renderer._internal_setData({\r\n            _internal_width: this._private__timeScale._internal_width(),\r\n            ...getAxisViewData(this._private__baseView),\r\n        });\r\n        return this._private__renderer;\r\n    }\r\n}\r\nclass SeriesPrimitivePriceAxisViewWrapper extends PriceAxisView {\r\n    constructor(baseView, priceScale) {\r\n        super();\r\n        this._private__baseView = baseView;\r\n        this._private__priceScale = priceScale;\r\n    }\r\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\r\n        const data = getAxisViewData(this._private__baseView);\r\n        commonRendererData._internal_background = data._internal_background;\r\n        axisRendererData._internal_color = data._internal_color;\r\n        const additionalPadding = 2 / 12 * this._private__priceScale._internal_fontSize();\r\n        commonRendererData._internal_additionalPaddingTop = additionalPadding;\r\n        commonRendererData._internal_additionalPaddingBottom = additionalPadding;\r\n        commonRendererData._internal_coordinate = data._internal_coordinate;\r\n        commonRendererData._internal_fixedCoordinate = data._internal_fixedCoordinate;\r\n        axisRendererData._internal_text = data._internal_text;\r\n        axisRendererData._internal_visible = data._internal_visible;\r\n        axisRendererData._internal_tickVisible = data._internal_tickVisible;\r\n    }\r\n}\r\nclass SeriesPrimitiveWrapper extends PrimitiveWrapper {\r\n    constructor(primitive, series) {\r\n        super(primitive);\r\n        this._private__timeAxisViewsCache = null;\r\n        this._private__priceAxisViewsCache = null;\r\n        this._private__priceAxisPaneViewsCache = null;\r\n        this._private__timeAxisPaneViewsCache = null;\r\n        this._private__series = series;\r\n    }\r\n    _internal_timeAxisViews() {\r\n        const base = this._internal__primitive.timeAxisViews?.() ?? [];\r\n        if (this._private__timeAxisViewsCache?._internal_base === base) {\r\n            return this._private__timeAxisViewsCache._internal_wrapper;\r\n        }\r\n        const timeScale = this._private__series._internal_model()._internal_timeScale();\r\n        const wrapper = base.map((aw) => new SeriesPrimitiveTimeAxisViewWrapper(aw, timeScale));\r\n        this._private__timeAxisViewsCache = {\r\n            _internal_base: base,\r\n            _internal_wrapper: wrapper,\r\n        };\r\n        return wrapper;\r\n    }\r\n    _internal_priceAxisViews() {\r\n        const base = this._internal__primitive.priceAxisViews?.() ?? [];\r\n        if (this._private__priceAxisViewsCache?._internal_base === base) {\r\n            return this._private__priceAxisViewsCache._internal_wrapper;\r\n        }\r\n        const priceScale = this._private__series._internal_priceScale();\r\n        const wrapper = base.map((aw) => new SeriesPrimitivePriceAxisViewWrapper(aw, priceScale));\r\n        this._private__priceAxisViewsCache = {\r\n            _internal_base: base,\r\n            _internal_wrapper: wrapper,\r\n        };\r\n        return wrapper;\r\n    }\r\n    _internal_priceAxisPaneViews() {\r\n        const base = this._internal__primitive.priceAxisPaneViews?.() ?? [];\r\n        if (this._private__priceAxisPaneViewsCache?._internal_base === base) {\r\n            return this._private__priceAxisPaneViewsCache._internal_wrapper;\r\n        }\r\n        const wrapper = base.map((pw) => new SeriesPrimitivePaneViewWrapper(pw));\r\n        this._private__priceAxisPaneViewsCache = {\r\n            _internal_base: base,\r\n            _internal_wrapper: wrapper,\r\n        };\r\n        return wrapper;\r\n    }\r\n    _internal_timeAxisPaneViews() {\r\n        const base = this._internal__primitive.timeAxisPaneViews?.() ?? [];\r\n        if (this._private__timeAxisPaneViewsCache?._internal_base === base) {\r\n            return this._private__timeAxisPaneViewsCache._internal_wrapper;\r\n        }\r\n        const wrapper = base.map((pw) => new SeriesPrimitivePaneViewWrapper(pw));\r\n        this._private__timeAxisPaneViewsCache = {\r\n            _internal_base: base,\r\n            _internal_wrapper: wrapper,\r\n        };\r\n        return wrapper;\r\n    }\r\n    _internal_autoscaleInfo(startTimePoint, endTimePoint) {\r\n        return (this._internal__primitive.autoscaleInfo?.(startTimePoint, endTimePoint) ?? null);\r\n    }\r\n}\r\n\r\nfunction extractPrimitivePaneViews(primitives, extractor, zOrder, destination) {\r\n    primitives.forEach((wrapper) => {\r\n        extractor(wrapper).forEach((paneView) => {\r\n            if (paneView._internal_zOrder() !== zOrder) {\r\n                return;\r\n            }\r\n            destination.push(paneView);\r\n        });\r\n    });\r\n}\r\nfunction primitivePaneViewsExtractor(wrapper) {\r\n    return wrapper._internal_paneViews();\r\n}\r\nfunction primitivePricePaneViewsExtractor(wrapper) {\r\n    return wrapper._internal_priceAxisPaneViews();\r\n}\r\nfunction primitiveTimePaneViewsExtractor(wrapper) {\r\n    return wrapper._internal_timeAxisPaneViews();\r\n}\r\nconst lineBasedSeries = ['Area', 'Line', 'Baseline'];\r\nclass Series extends PriceDataSource {\r\n    constructor(model, seriesType, options, createPaneView, customPaneView) {\r\n        super(model);\r\n        this._private__data = createSeriesPlotList();\r\n        this._private__priceLineView = new SeriesPriceLinePaneView(this);\r\n        this._private__customPriceLines = [];\r\n        this._private__baseHorizontalLineView = new SeriesHorizontalBaseLinePaneView(this);\r\n        this._private__lastPriceAnimationPaneView = null;\r\n        this._private__barColorerCache = null;\r\n        this._private__animationTimeoutId = null;\r\n        this._private__primitives = [];\r\n        this._private__options = options;\r\n        this._private__seriesType = seriesType;\r\n        const priceAxisView = new SeriesPriceAxisView(this);\r\n        this._private__priceAxisViews = [priceAxisView];\r\n        this._private__panePriceAxisView = new PanePriceAxisView(priceAxisView, this, model);\r\n        if (lineBasedSeries.includes(this._private__seriesType)) {\r\n            this._private__lastPriceAnimationPaneView = new SeriesLastPriceAnimationPaneView(this);\r\n        }\r\n        this._private__recreateFormatter();\r\n        this._private__paneView = createPaneView(this, this._internal_model(), customPaneView);\r\n    }\r\n    _internal_destroy() {\r\n        if (this._private__animationTimeoutId !== null) {\r\n            clearTimeout(this._private__animationTimeoutId);\r\n        }\r\n    }\r\n    _internal_priceLineColor(lastBarColor) {\r\n        return this._private__options.priceLineColor || lastBarColor;\r\n    }\r\n    _internal_lastValueData(globalLast) {\r\n        const noDataRes = { _internal_noData: true };\r\n        const priceScale = this._internal_priceScale();\r\n        if (this._internal_model()._internal_timeScale()._internal_isEmpty() || priceScale._internal_isEmpty() || this._private__data._internal_isEmpty()) {\r\n            return noDataRes;\r\n        }\r\n        const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();\r\n        const firstValue = this._internal_firstValue();\r\n        if (visibleBars === null || firstValue === null) {\r\n            return noDataRes;\r\n        }\r\n        // find range of bars inside range\r\n        // TODO: make it more optimal\r\n        let bar;\r\n        let lastIndex;\r\n        if (globalLast) {\r\n            const lastBar = this._private__data._internal_last();\r\n            if (lastBar === null) {\r\n                return noDataRes;\r\n            }\r\n            bar = lastBar;\r\n            lastIndex = lastBar._internal_index;\r\n        }\r\n        else {\r\n            const endBar = this._private__data._internal_search(visibleBars._internal_right(), -1 /* MismatchDirection.NearestLeft */);\r\n            if (endBar === null) {\r\n                return noDataRes;\r\n            }\r\n            bar = this._private__data._internal_valueAt(endBar._internal_index);\r\n            if (bar === null) {\r\n                return noDataRes;\r\n            }\r\n            lastIndex = endBar._internal_index;\r\n        }\r\n        const price = bar._internal_value[3 /* PlotRowValueIndex.Close */];\r\n        const barColorer = this._internal_barColorer();\r\n        const style = barColorer._internal_barStyle(lastIndex, { _internal_value: bar });\r\n        const coordinate = priceScale._internal_priceToCoordinate(price, firstValue._internal_value);\r\n        return {\r\n            _internal_noData: false,\r\n            _internal_price: price,\r\n            _internal_text: priceScale._internal_formatPrice(price, firstValue._internal_value),\r\n            _internal_formattedPriceAbsolute: priceScale._internal_formatPriceAbsolute(price),\r\n            _internal_formattedPricePercentage: priceScale._internal_formatPricePercentage(price, firstValue._internal_value),\r\n            _internal_color: style._internal_barColor,\r\n            _internal_coordinate: coordinate,\r\n            _internal_index: lastIndex,\r\n        };\r\n    }\r\n    _internal_barColorer() {\r\n        if (this._private__barColorerCache !== null) {\r\n            return this._private__barColorerCache;\r\n        }\r\n        this._private__barColorerCache = new SeriesBarColorer(this);\r\n        return this._private__barColorerCache;\r\n    }\r\n    _internal_options() {\r\n        return this._private__options;\r\n    }\r\n    _internal_applyOptions(options) {\r\n        const targetPriceScaleId = options.priceScaleId;\r\n        if (targetPriceScaleId !== undefined && targetPriceScaleId !== this._private__options.priceScaleId) {\r\n            // series cannot do it itself, ask model\r\n            this._internal_model()._internal_moveSeriesToScale(this, targetPriceScaleId);\r\n        }\r\n        merge(this._private__options, options);\r\n        if (options.priceFormat !== undefined) {\r\n            this._private__recreateFormatter();\r\n            // updated formatter might affect rendering  and as a consequence of this the width of price axis might be changed\r\n            // thus we need to force the chart to do a full update to apply changes correctly\r\n            // full update is quite heavy operation in terms of performance\r\n            // but updating formatter looks like quite rare so forcing a full update here shouldn't affect the performance a lot\r\n            this._internal_model()._internal_fullUpdate();\r\n        }\r\n        this._internal_model()._internal_updateSource(this);\r\n        // a series might affect crosshair by some options (like crosshair markers)\r\n        // that's why we need to update crosshair as well\r\n        this._internal_model()._internal_updateCrosshair();\r\n        this._private__paneView._internal_update('options');\r\n    }\r\n    _internal_setData(data, updateInfo) {\r\n        this._private__data._internal_setData(data);\r\n        this._private__paneView._internal_update('data');\r\n        if (this._private__lastPriceAnimationPaneView !== null) {\r\n            if (updateInfo && updateInfo._internal_lastBarUpdatedOrNewBarsAddedToTheRight) {\r\n                this._private__lastPriceAnimationPaneView._internal_onNewRealtimeDataReceived();\r\n            }\r\n            else if (data.length === 0) {\r\n                this._private__lastPriceAnimationPaneView._internal_onDataCleared();\r\n            }\r\n        }\r\n        const sourcePane = this._internal_model()._internal_paneForSource(this);\r\n        this._internal_model()._internal_recalculatePane(sourcePane);\r\n        this._internal_model()._internal_updateSource(this);\r\n        this._internal_model()._internal_updateCrosshair();\r\n        this._internal_model()._internal_lightUpdate();\r\n    }\r\n    _internal_createPriceLine(options) {\r\n        const result = new CustomPriceLine(this, options);\r\n        this._private__customPriceLines.push(result);\r\n        this._internal_model()._internal_updateSource(this);\r\n        return result;\r\n    }\r\n    _internal_removePriceLine(line) {\r\n        const index = this._private__customPriceLines.indexOf(line);\r\n        if (index !== -1) {\r\n            this._private__customPriceLines.splice(index, 1);\r\n        }\r\n        this._internal_model()._internal_updateSource(this);\r\n    }\r\n    _internal_priceLines() {\r\n        return this._private__customPriceLines;\r\n    }\r\n    _internal_seriesType() {\r\n        return this._private__seriesType;\r\n    }\r\n    _internal_firstValue() {\r\n        const bar = this._internal_firstBar();\r\n        if (bar === null) {\r\n            return null;\r\n        }\r\n        return {\r\n            _internal_value: bar._internal_value[3 /* PlotRowValueIndex.Close */],\r\n            _internal_timePoint: bar._internal_time,\r\n        };\r\n    }\r\n    _internal_firstBar() {\r\n        const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();\r\n        if (visibleBars === null) {\r\n            return null;\r\n        }\r\n        const startTimePoint = visibleBars._internal_left();\r\n        return this._private__data._internal_search(startTimePoint, 1 /* MismatchDirection.NearestRight */);\r\n    }\r\n    _internal_bars() {\r\n        return this._private__data;\r\n    }\r\n    _internal_dataAt(time) {\r\n        const prices = this._private__data._internal_valueAt(time);\r\n        if (prices === null) {\r\n            return null;\r\n        }\r\n        if (this._private__seriesType === 'Bar' || this._private__seriesType === 'Candlestick' || this._private__seriesType === 'Custom') {\r\n            return {\r\n                _internal_open: prices._internal_value[0 /* PlotRowValueIndex.Open */],\r\n                _internal_high: prices._internal_value[1 /* PlotRowValueIndex.High */],\r\n                _internal_low: prices._internal_value[2 /* PlotRowValueIndex.Low */],\r\n                _internal_close: prices._internal_value[3 /* PlotRowValueIndex.Close */],\r\n            };\r\n        }\r\n        else {\r\n            return prices._internal_value[3 /* PlotRowValueIndex.Close */];\r\n        }\r\n    }\r\n    _internal_topPaneViews(pane) {\r\n        const res = [];\r\n        extractPrimitivePaneViews(this._private__primitives, primitivePaneViewsExtractor, 'top', res);\r\n        const animationPaneView = this._private__lastPriceAnimationPaneView;\r\n        if (animationPaneView === null || !animationPaneView._internal_visible()) {\r\n            return res;\r\n        }\r\n        if (this._private__animationTimeoutId === null && animationPaneView._internal_animationActive()) {\r\n            this._private__animationTimeoutId = setTimeout(() => {\r\n                this._private__animationTimeoutId = null;\r\n                this._internal_model()._internal_cursorUpdate();\r\n            }, 0);\r\n        }\r\n        animationPaneView._internal_invalidateStage();\r\n        res.unshift(animationPaneView);\r\n        return res;\r\n    }\r\n    _internal_paneViews() {\r\n        const res = [];\r\n        if (!this._private__isOverlay()) {\r\n            res.push(this._private__baseHorizontalLineView);\r\n        }\r\n        res.push(this._private__paneView, this._private__priceLineView);\r\n        const priceLineViews = this._private__customPriceLines.map((line) => line._internal_paneView());\r\n        res.push(...priceLineViews);\r\n        extractPrimitivePaneViews(this._private__primitives, primitivePaneViewsExtractor, 'normal', res);\r\n        return res;\r\n    }\r\n    _internal_bottomPaneViews() {\r\n        return this._private__extractPaneViews(primitivePaneViewsExtractor, 'bottom');\r\n    }\r\n    _internal_pricePaneViews(zOrder) {\r\n        return this._private__extractPaneViews(primitivePricePaneViewsExtractor, zOrder);\r\n    }\r\n    _internal_timePaneViews(zOrder) {\r\n        return this._private__extractPaneViews(primitiveTimePaneViewsExtractor, zOrder);\r\n    }\r\n    _internal_primitiveHitTest(x, y) {\r\n        return this._private__primitives\r\n            .map((primitive) => primitive._internal_hitTest(x, y))\r\n            .filter((result) => result !== null);\r\n    }\r\n    _internal_labelPaneViews() {\r\n        return [\r\n            this._private__panePriceAxisView,\r\n            ...this._private__customPriceLines.map((line) => line._internal_labelPaneView()),\r\n        ];\r\n    }\r\n    _internal_priceAxisViews(pane, priceScale) {\r\n        if (priceScale !== this._internal__priceScale && !this._private__isOverlay()) {\r\n            return [];\r\n        }\r\n        const result = [...this._private__priceAxisViews];\r\n        for (const customPriceLine of this._private__customPriceLines) {\r\n            result.push(customPriceLine._internal_priceAxisView());\r\n        }\r\n        this._private__primitives.forEach((wrapper) => {\r\n            result.push(...wrapper._internal_priceAxisViews());\r\n        });\r\n        return result;\r\n    }\r\n    _internal_timeAxisViews() {\r\n        const res = [];\r\n        this._private__primitives.forEach((wrapper) => {\r\n            res.push(...wrapper._internal_timeAxisViews());\r\n        });\r\n        return res;\r\n    }\r\n    _internal_autoscaleInfo(startTimePoint, endTimePoint) {\r\n        if (this._private__options.autoscaleInfoProvider !== undefined) {\r\n            const autoscaleInfo = this._private__options.autoscaleInfoProvider(() => {\r\n                const res = this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);\r\n                return (res === null) ? null : res._internal_toRaw();\r\n            });\r\n            return AutoscaleInfoImpl._internal_fromRaw(autoscaleInfo);\r\n        }\r\n        return this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);\r\n    }\r\n    _internal_minMove() {\r\n        return this._private__options.priceFormat.minMove;\r\n    }\r\n    _internal_formatter() {\r\n        return this._private__formatter;\r\n    }\r\n    _internal_updateAllViews() {\r\n        this._private__paneView._internal_update();\r\n        for (const priceAxisView of this._private__priceAxisViews) {\r\n            priceAxisView._internal_update();\r\n        }\r\n        for (const customPriceLine of this._private__customPriceLines) {\r\n            customPriceLine._internal_update();\r\n        }\r\n        this._private__priceLineView._internal_update();\r\n        this._private__baseHorizontalLineView._internal_update();\r\n        this._private__lastPriceAnimationPaneView?._internal_update();\r\n        this._private__primitives.forEach((wrapper) => wrapper._internal_updateAllViews());\r\n    }\r\n    _internal_priceScale() {\r\n        return ensureNotNull(super._internal_priceScale());\r\n    }\r\n    _internal_markerDataAtIndex(index) {\r\n        const getValue = (this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline') &&\r\n            this._private__options.crosshairMarkerVisible;\r\n        if (!getValue) {\r\n            return null;\r\n        }\r\n        const bar = this._private__data._internal_valueAt(index);\r\n        if (bar === null) {\r\n            return null;\r\n        }\r\n        const price = bar._internal_value[3 /* PlotRowValueIndex.Close */];\r\n        const radius = this._private__markerRadius();\r\n        const borderColor = this._private__markerBorderColor();\r\n        const borderWidth = this._private__markerBorderWidth();\r\n        const backgroundColor = this._private__markerBackgroundColor(index);\r\n        return { _internal_price: price, _internal_radius: radius, _internal_borderColor: borderColor, _internal_borderWidth: borderWidth, _internal_backgroundColor: backgroundColor };\r\n    }\r\n    _internal_title() {\r\n        return this._private__options.title;\r\n    }\r\n    _internal_visible() {\r\n        return this._private__options.visible;\r\n    }\r\n    _internal_attachPrimitive(primitive) {\r\n        this._private__primitives.push(new SeriesPrimitiveWrapper(primitive, this));\r\n    }\r\n    _internal_detachPrimitive(source) {\r\n        this._private__primitives = this._private__primitives.filter((wrapper) => wrapper._internal_primitive() !== source);\r\n    }\r\n    _internal_customSeriesPlotValuesBuilder() {\r\n        if (this._private__seriesType !== 'Custom') {\r\n            return undefined;\r\n        }\r\n        return (data) => {\r\n            return this._private__paneView._internal_priceValueBuilder(data);\r\n        };\r\n    }\r\n    _internal_customSeriesWhitespaceCheck() {\r\n        if (this._private__seriesType !== 'Custom') {\r\n            return undefined;\r\n        }\r\n        return (data) => {\r\n            return this._private__paneView._internal_isWhitespace(data);\r\n        };\r\n    }\r\n    _internal_fulfilledIndices() {\r\n        return this._private__data._internal_indices();\r\n    }\r\n    _private__isOverlay() {\r\n        const priceScale = this._internal_priceScale();\r\n        return !isDefaultPriceScale(priceScale._internal_id());\r\n    }\r\n    _private__autoscaleInfoImpl(startTimePoint, endTimePoint) {\r\n        if (!isInteger(startTimePoint) || !isInteger(endTimePoint) || this._private__data._internal_isEmpty()) {\r\n            return null;\r\n        }\r\n        // TODO: refactor this\r\n        // series data is strongly hardcoded to keep bars\r\n        const plots = this._private__seriesType === 'Line' || this._private__seriesType === 'Area' || this._private__seriesType === 'Baseline' || this._private__seriesType === 'Histogram'\r\n            ? [3 /* PlotRowValueIndex.Close */]\r\n            : [2 /* PlotRowValueIndex.Low */, 1 /* PlotRowValueIndex.High */];\r\n        const barsMinMax = this._private__data._internal_minMaxOnRangeCached(startTimePoint, endTimePoint, plots);\r\n        let range = barsMinMax !== null ? new PriceRangeImpl(barsMinMax._internal_min, barsMinMax._internal_max) : null;\r\n        let margins = null;\r\n        if (this._internal_seriesType() === 'Histogram') {\r\n            const base = this._private__options.base;\r\n            const rangeWithBase = new PriceRangeImpl(base, base);\r\n            range = range !== null ? range._internal_merge(rangeWithBase) : rangeWithBase;\r\n        }\r\n        this._private__primitives.forEach((primitive) => {\r\n            const primitiveAutoscale = primitive._internal_autoscaleInfo(startTimePoint, endTimePoint);\r\n            if (primitiveAutoscale?.priceRange) {\r\n                const primitiveRange = new PriceRangeImpl(primitiveAutoscale.priceRange.minValue, primitiveAutoscale.priceRange.maxValue);\r\n                range = range !== null ? range._internal_merge(primitiveRange) : primitiveRange;\r\n            }\r\n            if (primitiveAutoscale?.margins) {\r\n                margins = primitiveAutoscale.margins;\r\n            }\r\n        });\r\n        return new AutoscaleInfoImpl(range, margins);\r\n    }\r\n    _private__markerRadius() {\r\n        switch (this._private__seriesType) {\r\n            case 'Line':\r\n            case 'Area':\r\n            case 'Baseline':\r\n                return this._private__options.crosshairMarkerRadius;\r\n        }\r\n        return 0;\r\n    }\r\n    _private__markerBorderColor() {\r\n        switch (this._private__seriesType) {\r\n            case 'Line':\r\n            case 'Area':\r\n            case 'Baseline': {\r\n                const crosshairMarkerBorderColor = this._private__options.crosshairMarkerBorderColor;\r\n                if (crosshairMarkerBorderColor.length !== 0) {\r\n                    return crosshairMarkerBorderColor;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    _private__markerBorderWidth() {\r\n        switch (this._private__seriesType) {\r\n            case 'Line':\r\n            case 'Area':\r\n            case 'Baseline':\r\n                return this._private__options.crosshairMarkerBorderWidth;\r\n        }\r\n        return 0;\r\n    }\r\n    _private__markerBackgroundColor(index) {\r\n        switch (this._private__seriesType) {\r\n            case 'Line':\r\n            case 'Area':\r\n            case 'Baseline': {\r\n                const crosshairMarkerBackgroundColor = this._private__options.crosshairMarkerBackgroundColor;\r\n                if (crosshairMarkerBackgroundColor.length !== 0) {\r\n                    return crosshairMarkerBackgroundColor;\r\n                }\r\n            }\r\n        }\r\n        return this._internal_barColorer()._internal_barStyle(index)._internal_barColor;\r\n    }\r\n    _private__recreateFormatter() {\r\n        switch (this._private__options.priceFormat.type) {\r\n            case 'custom': {\r\n                const formatter = this._private__options.priceFormat.formatter;\r\n                this._private__formatter = {\r\n                    format: formatter,\r\n                    formatTickmarks: this._private__options.priceFormat.tickmarksFormatter ?? ((prices) => prices.map(formatter)),\r\n                };\r\n                break;\r\n            }\r\n            case 'volume': {\r\n                this._private__formatter = new VolumeFormatter(this._private__options.priceFormat.precision);\r\n                break;\r\n            }\r\n            case 'percent': {\r\n                this._private__formatter = new PercentageFormatter(this._private__options.priceFormat.precision);\r\n                break;\r\n            }\r\n            default: {\r\n                const priceScale = Math.pow(10, this._private__options.priceFormat.precision);\r\n                this._private__formatter = new PriceFormatter(priceScale, this._private__options.priceFormat.minMove * priceScale);\r\n            }\r\n        }\r\n        if (this._internal__priceScale !== null) {\r\n            this._internal__priceScale._internal_updateFormatter();\r\n        }\r\n    }\r\n    _private__extractPaneViews(extractor, zOrder) {\r\n        const res = [];\r\n        extractPrimitivePaneViews(this._private__primitives, extractor, zOrder, res);\r\n        return res;\r\n    }\r\n}\r\n\r\nconst magnetPlotRowKeys = [\r\n    3 /* PlotRowValueIndex.Close */,\r\n];\r\nconst magnetOHLCPlotRowKeys = [\r\n    0 /* PlotRowValueIndex.Open */,\r\n    1 /* PlotRowValueIndex.High */,\r\n    2 /* PlotRowValueIndex.Low */,\r\n    3 /* PlotRowValueIndex.Close */,\r\n];\r\nclass Magnet {\r\n    constructor(options) {\r\n        this._private__options = options;\r\n    }\r\n    _internal_align(price, index, pane) {\r\n        let res = price;\r\n        if (this._private__options.mode === 0 /* CrosshairMode.Normal */) {\r\n            return res;\r\n        }\r\n        const defaultPriceScale = pane._internal_defaultPriceScale();\r\n        const firstValue = defaultPriceScale._internal_firstValue();\r\n        if (firstValue === null) {\r\n            return res;\r\n        }\r\n        const y = defaultPriceScale._internal_priceToCoordinate(price, firstValue);\r\n        // get all serieses from the pane\r\n        const serieses = pane._internal_dataSources().filter(((ds) => (ds instanceof Series)));\r\n        const candidates = serieses.reduce((acc, series) => {\r\n            if (pane._internal_isOverlay(series) || !series._internal_visible()) {\r\n                return acc;\r\n            }\r\n            const ps = series._internal_priceScale();\r\n            const bars = series._internal_bars();\r\n            if (ps._internal_isEmpty() || !bars._internal_contains(index)) {\r\n                return acc;\r\n            }\r\n            const bar = bars._internal_valueAt(index);\r\n            if (bar === null) {\r\n                return acc;\r\n            }\r\n            // convert bar to pixels\r\n            const firstPrice = ensure(series._internal_firstValue());\r\n            const plotRowKeys = this._private__options.mode === 3 /* CrosshairMode.MagnetOHLC */\r\n                ? magnetOHLCPlotRowKeys\r\n                : magnetPlotRowKeys;\r\n            return acc.concat(plotRowKeys.map((key) => ps._internal_priceToCoordinate(bar._internal_value[key], firstPrice._internal_value)));\r\n        }, []);\r\n        if (candidates.length === 0) {\r\n            return res;\r\n        }\r\n        candidates.sort((y1, y2) => Math.abs(y1 - y) - Math.abs(y2 - y));\r\n        const nearest = candidates[0];\r\n        res = defaultPriceScale._internal_coordinateToPrice(nearest, firstValue);\r\n        return res;\r\n    }\r\n}\r\n\r\nfunction clamp(value, minVal, maxVal) {\r\n    return Math.min(Math.max(value, minVal), maxVal);\r\n}\r\nfunction isBaseDecimal(value) {\r\n    if (value < 0) {\r\n        return false;\r\n    }\r\n    for (let current = value; current > 1; current /= 10) {\r\n        if ((current % 10) !== 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction greaterOrEqual(x1, x2, epsilon) {\r\n    return (x2 - x1) <= epsilon;\r\n}\r\nfunction equal(x1, x2, epsilon) {\r\n    return Math.abs(x1 - x2) < epsilon;\r\n}\r\n// We can't use Math.min(...arr) because that would only support arrays shorter than 65536 items.\r\nfunction min(arr) {\r\n    if (arr.length < 1) {\r\n        throw Error('array is empty');\r\n    }\r\n    let minVal = arr[0];\r\n    for (let i = 1; i < arr.length; ++i) {\r\n        if (arr[i] < minVal) {\r\n            minVal = arr[i];\r\n        }\r\n    }\r\n    return minVal;\r\n}\r\nfunction ceiledEven(x) {\r\n    const ceiled = Math.ceil(x);\r\n    return (ceiled % 2 !== 0) ? ceiled - 1 : ceiled;\r\n}\r\nfunction ceiledOdd(x) {\r\n    const ceiled = Math.ceil(x);\r\n    return (ceiled % 2 === 0) ? ceiled - 1 : ceiled;\r\n}\r\n\r\nclass GridRenderer extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__data = null;\r\n    }\r\n    _internal_setData(data) {\r\n        this._private__data = data;\r\n    }\r\n    _internal__drawImpl({ context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio }) {\r\n        if (this._private__data === null) {\r\n            return;\r\n        }\r\n        const lineWidth = Math.max(1, Math.floor(horizontalPixelRatio));\r\n        ctx.lineWidth = lineWidth;\r\n        strokeInPixel(ctx, () => {\r\n            const data = ensureNotNull(this._private__data);\r\n            if (data._internal_vertLinesVisible) {\r\n                ctx.strokeStyle = data._internal_vertLinesColor;\r\n                setLineStyle(ctx, data._internal_vertLineStyle);\r\n                ctx.beginPath();\r\n                for (const timeMark of data._internal_timeMarks) {\r\n                    const x = Math.round(timeMark._internal_coord * horizontalPixelRatio);\r\n                    ctx.moveTo(x, -lineWidth);\r\n                    ctx.lineTo(x, bitmapSize.height + lineWidth);\r\n                }\r\n                ctx.stroke();\r\n            }\r\n            if (data._internal_horzLinesVisible) {\r\n                ctx.strokeStyle = data._internal_horzLinesColor;\r\n                setLineStyle(ctx, data._internal_horzLineStyle);\r\n                ctx.beginPath();\r\n                for (const priceMark of data._internal_priceMarks) {\r\n                    const y = Math.round(priceMark._internal_coord * verticalPixelRatio);\r\n                    ctx.moveTo(-lineWidth, y);\r\n                    ctx.lineTo(bitmapSize.width + lineWidth, y);\r\n                }\r\n                ctx.stroke();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nclass GridPaneView {\r\n    constructor(pane) {\r\n        this._private__renderer = new GridRenderer();\r\n        this._private__invalidated = true;\r\n        this._private__pane = pane;\r\n    }\r\n    _internal_update() {\r\n        this._private__invalidated = true;\r\n    }\r\n    _internal_renderer() {\r\n        if (this._private__invalidated) {\r\n            const gridOptions = this._private__pane._internal_model()._internal_options().grid;\r\n            const data = {\r\n                _internal_horzLinesVisible: gridOptions.horzLines.visible,\r\n                _internal_vertLinesVisible: gridOptions.vertLines.visible,\r\n                _internal_horzLinesColor: gridOptions.horzLines.color,\r\n                _internal_vertLinesColor: gridOptions.vertLines.color,\r\n                _internal_horzLineStyle: gridOptions.horzLines.style,\r\n                _internal_vertLineStyle: gridOptions.vertLines.style,\r\n                _internal_priceMarks: this._private__pane._internal_defaultPriceScale()._internal_marks(),\r\n                // need this conversiom because TimeMark is a part of external interface\r\n                // and fields inside TimeMark are not minified\r\n                _internal_timeMarks: (this._private__pane._internal_model()._internal_timeScale()._internal_marks() || []).map((tm) => {\r\n                    return { _internal_coord: tm.coord };\r\n                }),\r\n            };\r\n            this._private__renderer._internal_setData(data);\r\n            this._private__invalidated = false;\r\n        }\r\n        return this._private__renderer;\r\n    }\r\n}\r\n\r\nclass Grid {\r\n    constructor(pane) {\r\n        this._private__paneView = new GridPaneView(pane);\r\n    }\r\n    _internal_paneView() {\r\n        return this._private__paneView;\r\n    }\r\n}\r\n\r\nconst defLogFormula = {\r\n    _internal_logicalOffset: 4,\r\n    _internal_coordOffset: 0.0001,\r\n};\r\nfunction fromPercent(value, baseValue) {\r\n    if (baseValue < 0) {\r\n        value = -value;\r\n    }\r\n    return (value / 100) * baseValue + baseValue;\r\n}\r\nfunction toPercent(value, baseValue) {\r\n    const result = 100 * (value - baseValue) / baseValue;\r\n    return (baseValue < 0 ? -result : result);\r\n}\r\nfunction toPercentRange(priceRange, baseValue) {\r\n    const minPercent = toPercent(priceRange._internal_minValue(), baseValue);\r\n    const maxPercent = toPercent(priceRange._internal_maxValue(), baseValue);\r\n    return new PriceRangeImpl(minPercent, maxPercent);\r\n}\r\nfunction fromIndexedTo100(value, baseValue) {\r\n    value -= 100;\r\n    if (baseValue < 0) {\r\n        value = -value;\r\n    }\r\n    return (value / 100) * baseValue + baseValue;\r\n}\r\nfunction toIndexedTo100(value, baseValue) {\r\n    const result = 100 * (value - baseValue) / baseValue + 100;\r\n    return (baseValue < 0 ? -result : result);\r\n}\r\nfunction toIndexedTo100Range(priceRange, baseValue) {\r\n    const minPercent = toIndexedTo100(priceRange._internal_minValue(), baseValue);\r\n    const maxPercent = toIndexedTo100(priceRange._internal_maxValue(), baseValue);\r\n    return new PriceRangeImpl(minPercent, maxPercent);\r\n}\r\nfunction toLog(price, logFormula) {\r\n    const m = Math.abs(price);\r\n    if (m < 1e-15) {\r\n        return 0;\r\n    }\r\n    const res = Math.log10(m + logFormula._internal_coordOffset) + logFormula._internal_logicalOffset;\r\n    return ((price < 0) ? -res : res);\r\n}\r\nfunction fromLog(logical, logFormula) {\r\n    const m = Math.abs(logical);\r\n    if (m < 1e-15) {\r\n        return 0;\r\n    }\r\n    const res = Math.pow(10, m - logFormula._internal_logicalOffset) - logFormula._internal_coordOffset;\r\n    return (logical < 0) ? -res : res;\r\n}\r\nfunction convertPriceRangeToLog(priceRange, logFormula) {\r\n    if (priceRange === null) {\r\n        return null;\r\n    }\r\n    const min = toLog(priceRange._internal_minValue(), logFormula);\r\n    const max = toLog(priceRange._internal_maxValue(), logFormula);\r\n    return new PriceRangeImpl(min, max);\r\n}\r\nfunction canConvertPriceRangeFromLog(priceRange, logFormula) {\r\n    if (priceRange === null) {\r\n        return false;\r\n    }\r\n    const min = fromLog(priceRange._internal_minValue(), logFormula);\r\n    const max = fromLog(priceRange._internal_maxValue(), logFormula);\r\n    return isFinite(min) && isFinite(max);\r\n}\r\nfunction convertPriceRangeFromLog(priceRange, logFormula) {\r\n    if (priceRange === null) {\r\n        return null;\r\n    }\r\n    const min = fromLog(priceRange._internal_minValue(), logFormula);\r\n    const max = fromLog(priceRange._internal_maxValue(), logFormula);\r\n    return new PriceRangeImpl(min, max);\r\n}\r\nfunction logFormulaForPriceRange(range) {\r\n    if (range === null) {\r\n        return defLogFormula;\r\n    }\r\n    const diff = Math.abs(range._internal_maxValue() - range._internal_minValue());\r\n    if (diff >= 1 || diff < 1e-15) {\r\n        return defLogFormula;\r\n    }\r\n    const digits = Math.ceil(Math.abs(Math.log10(diff)));\r\n    const logicalOffset = defLogFormula._internal_logicalOffset + digits;\r\n    const coordOffset = 1 / Math.pow(10, logicalOffset);\r\n    return {\r\n        _internal_logicalOffset: logicalOffset,\r\n        _internal_coordOffset: coordOffset,\r\n    };\r\n}\r\nfunction logFormulasAreSame(f1, f2) {\r\n    return f1._internal_logicalOffset === f2._internal_logicalOffset && f1._internal_coordOffset === f2._internal_coordOffset;\r\n}\r\n\r\nclass PriceTickSpanCalculator {\r\n    constructor(base, integralDividers) {\r\n        this._private__base = base;\r\n        this._private__integralDividers = integralDividers;\r\n        if (isBaseDecimal(this._private__base)) {\r\n            this._private__fractionalDividers = [2, 2.5, 2];\r\n        }\r\n        else {\r\n            this._private__fractionalDividers = [];\r\n            for (let baseRest = this._private__base; baseRest !== 1;) {\r\n                if ((baseRest % 2) === 0) {\r\n                    this._private__fractionalDividers.push(2);\r\n                    baseRest /= 2;\r\n                }\r\n                else if ((baseRest % 5) === 0) {\r\n                    this._private__fractionalDividers.push(2, 2.5);\r\n                    baseRest /= 5;\r\n                }\r\n                else {\r\n                    throw new Error('unexpected base');\r\n                }\r\n                if (this._private__fractionalDividers.length > 100) {\r\n                    throw new Error('something wrong with base');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _internal_tickSpan(high, low, maxTickSpan) {\r\n        const minMovement = (this._private__base === 0) ? (0) : (1 / this._private__base);\r\n        let resultTickSpan = Math.pow(10, Math.max(0, Math.ceil(Math.log10(high - low))));\r\n        let index = 0;\r\n        let c = this._private__integralDividers[0];\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            // the second part is actual for small with very small values like 1e-10\r\n            // greaterOrEqual fails for such values\r\n            const resultTickSpanLargerMinMovement = greaterOrEqual(resultTickSpan, minMovement, 1e-14 /* Constants.TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* Constants.TickSpanEpsilon */);\r\n            const resultTickSpanLargerMaxTickSpan = greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */);\r\n            const resultTickSpanLarger1 = greaterOrEqual(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */);\r\n            const haveToContinue = resultTickSpanLargerMinMovement && resultTickSpanLargerMaxTickSpan && resultTickSpanLarger1;\r\n            if (!haveToContinue) {\r\n                break;\r\n            }\r\n            resultTickSpan /= c;\r\n            c = this._private__integralDividers[++index % this._private__integralDividers.length];\r\n        }\r\n        if (resultTickSpan <= (minMovement + 1e-14 /* Constants.TickSpanEpsilon */)) {\r\n            resultTickSpan = minMovement;\r\n        }\r\n        resultTickSpan = Math.max(1, resultTickSpan);\r\n        if ((this._private__fractionalDividers.length > 0) && equal(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */)) {\r\n            index = 0;\r\n            c = this._private__fractionalDividers[0];\r\n            while (greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */) && resultTickSpan > (minMovement + 1e-14 /* Constants.TickSpanEpsilon */)) {\r\n                resultTickSpan /= c;\r\n                c = this._private__fractionalDividers[++index % this._private__fractionalDividers.length];\r\n            }\r\n        }\r\n        return resultTickSpan;\r\n    }\r\n}\r\n\r\nconst TICK_DENSITY = 2.5;\r\nclass PriceTickMarkBuilder {\r\n    constructor(priceScale, base, coordinateToLogicalFunc, logicalToCoordinateFunc) {\r\n        this._private__marks = [];\r\n        this._private__priceScale = priceScale;\r\n        this._private__base = base;\r\n        this._private__coordinateToLogicalFunc = coordinateToLogicalFunc;\r\n        this._private__logicalToCoordinateFunc = logicalToCoordinateFunc;\r\n    }\r\n    _internal_tickSpan(high, low) {\r\n        if (high < low) {\r\n            throw new Error('high < low');\r\n        }\r\n        const scaleHeight = this._private__priceScale._internal_height();\r\n        const markHeight = this._private__tickMarkHeight();\r\n        const maxTickSpan = (high - low) * markHeight / scaleHeight;\r\n        const spanCalculator1 = new PriceTickSpanCalculator(this._private__base, [2, 2.5, 2]);\r\n        const spanCalculator2 = new PriceTickSpanCalculator(this._private__base, [2, 2, 2.5]);\r\n        const spanCalculator3 = new PriceTickSpanCalculator(this._private__base, [2.5, 2, 2]);\r\n        const spans = [];\r\n        spans.push(spanCalculator1._internal_tickSpan(high, low, maxTickSpan), spanCalculator2._internal_tickSpan(high, low, maxTickSpan), spanCalculator3._internal_tickSpan(high, low, maxTickSpan));\r\n        return min(spans);\r\n    }\r\n    _internal_rebuildTickMarks() {\r\n        const priceScale = this._private__priceScale;\r\n        const firstValue = priceScale._internal_firstValue();\r\n        if (firstValue === null) {\r\n            this._private__marks = [];\r\n            return;\r\n        }\r\n        const scaleHeight = priceScale._internal_height();\r\n        const bottom = this._private__coordinateToLogicalFunc(scaleHeight - 1, firstValue);\r\n        const top = this._private__coordinateToLogicalFunc(0, firstValue);\r\n        const extraTopBottomMargin = this._private__priceScale._internal_options().entireTextOnly ? this._private__fontHeight() / 2 : 0;\r\n        const minCoord = extraTopBottomMargin;\r\n        const maxCoord = scaleHeight - 1 - extraTopBottomMargin;\r\n        const high = Math.max(bottom, top);\r\n        const low = Math.min(bottom, top);\r\n        if (high === low) {\r\n            this._private__marks = [];\r\n            return;\r\n        }\r\n        const span = this._internal_tickSpan(high, low);\r\n        this._private__updateMarks(firstValue, span, high, low, minCoord, maxCoord);\r\n        if (priceScale._internal_hasVisibleEdgeMarks() && this._private__shouldApplyEdgeMarks(span, low, high)) {\r\n            const padding = this._private__priceScale._internal_getEdgeMarksPadding();\r\n            this._private__applyEdgeMarks(firstValue, span, minCoord, maxCoord, padding, padding * 2);\r\n        }\r\n        const logicals = this._private__marks.map((mark) => mark._internal_logical);\r\n        const labels = this._private__priceScale._internal_formatLogicalTickmarks(logicals);\r\n        for (let i = 0; i < this._private__marks.length; i++) {\r\n            this._private__marks[i]._internal_label = labels[i];\r\n        }\r\n    }\r\n    _internal_marks() {\r\n        return this._private__marks;\r\n    }\r\n    _private__fontHeight() {\r\n        return this._private__priceScale._internal_fontSize();\r\n    }\r\n    _private__tickMarkHeight() {\r\n        return Math.ceil(this._private__fontHeight() * TICK_DENSITY);\r\n    }\r\n    _private__updateMarks(firstValue, span, high, low, minCoord, maxCoord) {\r\n        const marks = this._private__marks;\r\n        const priceScale = this._private__priceScale;\r\n        let mod = high % span;\r\n        mod += mod < 0 ? span : 0;\r\n        const sign = (high >= low) ? 1 : -1;\r\n        let prevCoord = null;\r\n        let targetIndex = 0;\r\n        for (let logical = high - mod; logical > low; logical -= span) {\r\n            const coord = this._private__logicalToCoordinateFunc(logical, firstValue, true);\r\n            // check if there is place for it\r\n            // this is required for log scale\r\n            if (prevCoord !== null && Math.abs(coord - prevCoord) < this._private__tickMarkHeight()) {\r\n                continue;\r\n            }\r\n            // check if a tick mark is partially visible and skip it if entireTextOnly is true\r\n            if (coord < minCoord || coord > maxCoord) {\r\n                continue;\r\n            }\r\n            if (targetIndex < marks.length) {\r\n                marks[targetIndex]._internal_coord = coord;\r\n                marks[targetIndex]._internal_label = priceScale._internal_formatLogical(logical);\r\n                marks[targetIndex]._internal_logical = logical;\r\n            }\r\n            else {\r\n                marks.push({\r\n                    _internal_coord: coord,\r\n                    _internal_label: priceScale._internal_formatLogical(logical),\r\n                    _internal_logical: logical,\r\n                });\r\n            }\r\n            targetIndex++;\r\n            prevCoord = coord;\r\n            if (priceScale._internal_isLog()) {\r\n                // recalc span\r\n                span = this._internal_tickSpan(logical * sign, low);\r\n            }\r\n        }\r\n        marks.length = targetIndex;\r\n    }\r\n    _private__applyEdgeMarks(firstValue, span, minCoord, maxCoord, minPadding, maxPadding) {\r\n        const marks = this._private__marks;\r\n        // top boundary\r\n        const topMark = this._private__computeBoundaryPriceMark(firstValue, minCoord, minPadding, maxPadding);\r\n        // bottom boundary\r\n        const bottomMark = this._private__computeBoundaryPriceMark(firstValue, maxCoord, -maxPadding, -minPadding);\r\n        const spanPx = this._private__logicalToCoordinateFunc(0, firstValue, true)\r\n            - this._private__logicalToCoordinateFunc(span, firstValue, true);\r\n        if (marks.length > 0 && marks[0]._internal_coord - topMark._internal_coord < spanPx / 2) {\r\n            marks.shift();\r\n        }\r\n        if (marks.length > 0 && bottomMark._internal_coord - marks[marks.length - 1]._internal_coord < spanPx / 2) {\r\n            marks.pop();\r\n        }\r\n        marks.unshift(topMark);\r\n        marks.push(bottomMark);\r\n    }\r\n    _private__computeBoundaryPriceMark(firstValue, coord, minPadding, maxPadding) {\r\n        const avgPadding = (minPadding + maxPadding) / 2;\r\n        const value1 = this._private__coordinateToLogicalFunc(coord + minPadding, firstValue);\r\n        const value2 = this._private__coordinateToLogicalFunc(coord + maxPadding, firstValue);\r\n        const minValue = Math.min(value1, value2);\r\n        const maxValue = Math.max(value1, value2);\r\n        const valueSpan = Math.max(0.1, this._internal_tickSpan(maxValue, minValue));\r\n        const value = this._private__coordinateToLogicalFunc(coord + avgPadding, firstValue);\r\n        const roundedValue = value - (value % valueSpan);\r\n        const roundedCoord = this._private__logicalToCoordinateFunc(roundedValue, firstValue, true);\r\n        return { _internal_label: this._private__priceScale._internal_formatLogical(roundedValue), _internal_coord: roundedCoord, _internal_logical: roundedValue };\r\n    }\r\n    _private__shouldApplyEdgeMarks(span, low, high) {\r\n        let range = ensure(this._private__priceScale._internal_priceRange());\r\n        if (this._private__priceScale._internal_isLog()) {\r\n            range = convertPriceRangeFromLog(range, this._private__priceScale._internal_getLogFormula());\r\n        }\r\n        return (range._internal_minValue() - low < span) && (high - range._internal_maxValue() < span);\r\n    }\r\n}\r\n\r\nfunction sortSources(sources) {\r\n    return sources.slice().sort((s1, s2) => {\r\n        return (ensureNotNull(s1._internal_zorder()) - ensureNotNull(s2._internal_zorder()));\r\n    });\r\n}\r\n\r\n/**\r\n * Represents the price scale mode.\r\n */\r\nvar PriceScaleMode;\r\n(function (PriceScaleMode) {\r\n    /**\r\n     * Price scale shows prices. Price range changes linearly.\r\n     */\r\n    PriceScaleMode[PriceScaleMode[\"Normal\"] = 0] = \"Normal\";\r\n    /**\r\n     * Price scale shows prices. Price range changes logarithmically.\r\n     */\r\n    PriceScaleMode[PriceScaleMode[\"Logarithmic\"] = 1] = \"Logarithmic\";\r\n    /**\r\n     * Price scale shows percentage values according the first visible value of the price scale.\r\n     * The first visible value is 0% in this mode.\r\n     */\r\n    PriceScaleMode[PriceScaleMode[\"Percentage\"] = 2] = \"Percentage\";\r\n    /**\r\n     * The same as percentage mode, but the first value is moved to 100.\r\n     */\r\n    PriceScaleMode[PriceScaleMode[\"IndexedTo100\"] = 3] = \"IndexedTo100\";\r\n})(PriceScaleMode || (PriceScaleMode = {}));\r\nconst percentageFormatter = new PercentageFormatter();\r\nconst defaultPriceFormatter = new PriceFormatter(100, 1);\r\nclass PriceScale {\r\n    constructor(id, options, layoutOptions, localizationOptions, colorParser) {\r\n        this._private__height = 0;\r\n        this._private__internalHeightCache = null;\r\n        this._private__priceRange = null;\r\n        this._private__priceRangeSnapshot = null;\r\n        this._private__invalidatedForRange = { _internal_isValid: false, _internal_visibleBars: null };\r\n        this._private__isCustomPriceRange = false;\r\n        this._private__marginAbove = 0;\r\n        this._private__marginBelow = 0;\r\n        this._private__onMarksChanged = new Delegate();\r\n        this._private__modeChanged = new Delegate();\r\n        this._private__dataSources = [];\r\n        this._private__formatterSource = null;\r\n        this._private__cachedOrderedSources = null;\r\n        this._private__marksCache = null;\r\n        this._private__scaleStartPoint = null;\r\n        this._private__scrollStartPoint = null;\r\n        this._private__formatter = defaultPriceFormatter;\r\n        this._private__logFormula = logFormulaForPriceRange(null);\r\n        this._private__id = id;\r\n        this._private__options = options;\r\n        this._private__layoutOptions = layoutOptions;\r\n        this._private__localizationOptions = localizationOptions;\r\n        this._private__colorParser = colorParser;\r\n        this._private__markBuilder = new PriceTickMarkBuilder(this, 100, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));\r\n    }\r\n    _internal_id() {\r\n        return this._private__id;\r\n    }\r\n    _internal_options() {\r\n        return this._private__options;\r\n    }\r\n    _internal_applyOptions(options) {\r\n        merge(this._private__options, options);\r\n        this._internal_updateFormatter();\r\n        if (options.mode !== undefined) {\r\n            this._internal_setMode({ _internal_mode: options.mode });\r\n        }\r\n        if (options.scaleMargins !== undefined) {\r\n            const top = ensureDefined(options.scaleMargins.top);\r\n            const bottom = ensureDefined(options.scaleMargins.bottom);\r\n            if (top < 0 || top > 1) {\r\n                throw new Error(`Invalid top margin - expect value between 0 and 1, given=${top}`);\r\n            }\r\n            if (bottom < 0 || bottom > 1) {\r\n                throw new Error(`Invalid bottom margin - expect value between 0 and 1, given=${bottom}`);\r\n            }\r\n            if (top + bottom > 1) {\r\n                throw new Error(`Invalid margins - sum of margins must be less than 1, given=${top + bottom}`);\r\n            }\r\n            this._private__invalidateInternalHeightCache();\r\n            this._private__marksCache = null;\r\n        }\r\n    }\r\n    _internal_isAutoScale() {\r\n        return this._private__options.autoScale;\r\n    }\r\n    _internal_isCustomPriceRange() {\r\n        return this._private__isCustomPriceRange;\r\n    }\r\n    _internal_isLog() {\r\n        return this._private__options.mode === 1 /* PriceScaleMode.Logarithmic */;\r\n    }\r\n    _internal_isPercentage() {\r\n        return this._private__options.mode === 2 /* PriceScaleMode.Percentage */;\r\n    }\r\n    _internal_isIndexedTo100() {\r\n        return this._private__options.mode === 3 /* PriceScaleMode.IndexedTo100 */;\r\n    }\r\n    _internal_getLogFormula() {\r\n        return this._private__logFormula;\r\n    }\r\n    _internal_mode() {\r\n        return {\r\n            _internal_autoScale: this._private__options.autoScale,\r\n            _internal_isInverted: this._private__options.invertScale,\r\n            _internal_mode: this._private__options.mode,\r\n        };\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _internal_setMode(newMode) {\r\n        const oldMode = this._internal_mode();\r\n        let priceRange = null;\r\n        if (newMode._internal_autoScale !== undefined) {\r\n            this._private__options.autoScale = newMode._internal_autoScale;\r\n        }\r\n        if (newMode._internal_mode !== undefined) {\r\n            this._private__options.mode = newMode._internal_mode;\r\n            if (newMode._internal_mode === 2 /* PriceScaleMode.Percentage */ || newMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */) {\r\n                this._private__options.autoScale = true;\r\n            }\r\n            // TODO: Remove after making rebuildTickMarks lazy\r\n            this._private__invalidatedForRange._internal_isValid = false;\r\n        }\r\n        // define which scale converted from\r\n        if (oldMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {\r\n            if (canConvertPriceRangeFromLog(this._private__priceRange, this._private__logFormula)) {\r\n                priceRange = convertPriceRangeFromLog(this._private__priceRange, this._private__logFormula);\r\n                if (priceRange !== null) {\r\n                    this._internal_setPriceRange(priceRange);\r\n                }\r\n            }\r\n            else {\r\n                this._private__options.autoScale = true;\r\n            }\r\n        }\r\n        // define which scale converted to\r\n        if (newMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */ && newMode._internal_mode !== oldMode._internal_mode) {\r\n            priceRange = convertPriceRangeToLog(this._private__priceRange, this._private__logFormula);\r\n            if (priceRange !== null) {\r\n                this._internal_setPriceRange(priceRange);\r\n            }\r\n        }\r\n        const modeChanged = oldMode._internal_mode !== this._private__options.mode;\r\n        if (modeChanged && (oldMode._internal_mode === 2 /* PriceScaleMode.Percentage */ || this._internal_isPercentage())) {\r\n            this._internal_updateFormatter();\r\n        }\r\n        if (modeChanged && (oldMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */ || this._internal_isIndexedTo100())) {\r\n            this._internal_updateFormatter();\r\n        }\r\n        if (newMode._internal_isInverted !== undefined && oldMode._internal_isInverted !== newMode._internal_isInverted) {\r\n            this._private__options.invertScale = newMode._internal_isInverted;\r\n            this._private__onIsInvertedChanged();\r\n        }\r\n        this._private__modeChanged._internal_fire(oldMode, this._internal_mode());\r\n    }\r\n    _internal_modeChanged() {\r\n        return this._private__modeChanged;\r\n    }\r\n    _internal_fontSize() {\r\n        return this._private__layoutOptions.fontSize;\r\n    }\r\n    _internal_height() {\r\n        return this._private__height;\r\n    }\r\n    _internal_setHeight(value) {\r\n        if (this._private__height === value) {\r\n            return;\r\n        }\r\n        this._private__height = value;\r\n        this._private__invalidateInternalHeightCache();\r\n        this._private__marksCache = null;\r\n    }\r\n    _internal_internalHeight() {\r\n        if (this._private__internalHeightCache) {\r\n            return this._private__internalHeightCache;\r\n        }\r\n        const res = this._internal_height() - this._private__topMarginPx() - this._private__bottomMarginPx();\r\n        this._private__internalHeightCache = res;\r\n        return res;\r\n    }\r\n    _internal_priceRange() {\r\n        this._private__makeSureItIsValid();\r\n        return this._private__priceRange;\r\n    }\r\n    _internal_setPriceRange(newPriceRange, isForceSetValue) {\r\n        const oldPriceRange = this._private__priceRange;\r\n        if (!isForceSetValue &&\r\n            !(oldPriceRange === null && newPriceRange !== null) &&\r\n            (oldPriceRange === null || oldPriceRange._internal_equals(newPriceRange))) {\r\n            return;\r\n        }\r\n        this._private__marksCache = null;\r\n        this._private__priceRange = newPriceRange;\r\n    }\r\n    _internal_setCustomPriceRange(newPriceRange) {\r\n        this._internal_setPriceRange(newPriceRange);\r\n        this._private__toggleCustomPriceRange(newPriceRange !== null);\r\n    }\r\n    _internal_isEmpty() {\r\n        this._private__makeSureItIsValid();\r\n        return this._private__height === 0 || !this._private__priceRange || this._private__priceRange._internal_isEmpty();\r\n    }\r\n    _internal_invertedCoordinate(coordinate) {\r\n        return this._internal_isInverted() ? coordinate : this._internal_height() - 1 - coordinate;\r\n    }\r\n    _internal_priceToCoordinate(price, baseValue) {\r\n        if (this._internal_isPercentage()) {\r\n            price = toPercent(price, baseValue);\r\n        }\r\n        else if (this._internal_isIndexedTo100()) {\r\n            price = toIndexedTo100(price, baseValue);\r\n        }\r\n        return this._private__logicalToCoordinate(price, baseValue);\r\n    }\r\n    _internal_pointsArrayToCoordinates(points, baseValue, visibleRange) {\r\n        this._private__makeSureItIsValid();\r\n        const bh = this._private__bottomMarginPx();\r\n        const range = ensureNotNull(this._internal_priceRange());\r\n        const min = range._internal_minValue();\r\n        const max = range._internal_maxValue();\r\n        const ih = (this._internal_internalHeight() - 1);\r\n        const isInverted = this._internal_isInverted();\r\n        const hmm = ih / (max - min);\r\n        const fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;\r\n        const toIndex = (visibleRange === undefined) ? points.length : visibleRange.to;\r\n        const transformFn = this._private__getCoordinateTransformer();\r\n        for (let i = fromIndex; i < toIndex; i++) {\r\n            const point = points[i];\r\n            const price = point._internal_price;\r\n            if (isNaN(price)) {\r\n                continue;\r\n            }\r\n            let logical = price;\r\n            if (transformFn !== null) {\r\n                logical = transformFn(point._internal_price, baseValue);\r\n            }\r\n            const invCoordinate = bh + hmm * (logical - min);\r\n            const coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\r\n            point._internal_y = coordinate;\r\n        }\r\n    }\r\n    _internal_barPricesToCoordinates(pricesList, baseValue, visibleRange) {\r\n        this._private__makeSureItIsValid();\r\n        const bh = this._private__bottomMarginPx();\r\n        const range = ensureNotNull(this._internal_priceRange());\r\n        const min = range._internal_minValue();\r\n        const max = range._internal_maxValue();\r\n        const ih = (this._internal_internalHeight() - 1);\r\n        const isInverted = this._internal_isInverted();\r\n        const hmm = ih / (max - min);\r\n        const fromIndex = (visibleRange === undefined) ? 0 : visibleRange.from;\r\n        const toIndex = (visibleRange === undefined) ? pricesList.length : visibleRange.to;\r\n        const transformFn = this._private__getCoordinateTransformer();\r\n        for (let i = fromIndex; i < toIndex; i++) {\r\n            const bar = pricesList[i];\r\n            let openLogical = bar._internal_open;\r\n            let highLogical = bar._internal_high;\r\n            let lowLogical = bar._internal_low;\r\n            let closeLogical = bar._internal_close;\r\n            if (transformFn !== null) {\r\n                openLogical = transformFn(bar._internal_open, baseValue);\r\n                highLogical = transformFn(bar._internal_high, baseValue);\r\n                lowLogical = transformFn(bar._internal_low, baseValue);\r\n                closeLogical = transformFn(bar._internal_close, baseValue);\r\n            }\r\n            let invCoordinate = bh + hmm * (openLogical - min);\r\n            let coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\r\n            bar._internal_openY = coordinate;\r\n            invCoordinate = bh + hmm * (highLogical - min);\r\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\r\n            bar._internal_highY = coordinate;\r\n            invCoordinate = bh + hmm * (lowLogical - min);\r\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\r\n            bar._internal_lowY = coordinate;\r\n            invCoordinate = bh + hmm * (closeLogical - min);\r\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\r\n            bar._internal_closeY = coordinate;\r\n        }\r\n    }\r\n    _internal_coordinateToPrice(coordinate, baseValue) {\r\n        const logical = this._private__coordinateToLogical(coordinate, baseValue);\r\n        return this._internal_logicalToPrice(logical, baseValue);\r\n    }\r\n    _internal_logicalToPrice(logical, baseValue) {\r\n        let value = logical;\r\n        if (this._internal_isPercentage()) {\r\n            value = fromPercent(value, baseValue);\r\n        }\r\n        else if (this._internal_isIndexedTo100()) {\r\n            value = fromIndexedTo100(value, baseValue);\r\n        }\r\n        return value;\r\n    }\r\n    _internal_dataSources() {\r\n        return this._private__dataSources;\r\n    }\r\n    _internal_orderedSources() {\r\n        if (!this._private__cachedOrderedSources) {\r\n            this._private__cachedOrderedSources = sortSources(this._private__dataSources);\r\n        }\r\n        return this._private__cachedOrderedSources;\r\n    }\r\n    _internal_addDataSource(source) {\r\n        if (this._private__dataSources.indexOf(source) !== -1) {\r\n            return;\r\n        }\r\n        this._private__dataSources.push(source);\r\n        this._internal_updateFormatter();\r\n        this._internal_invalidateSourcesCache();\r\n    }\r\n    _internal_removeDataSource(source) {\r\n        const index = this._private__dataSources.indexOf(source);\r\n        if (index === -1) {\r\n            throw new Error('source is not attached to scale');\r\n        }\r\n        this._private__dataSources.splice(index, 1);\r\n        if (this._private__dataSources.length === 0) {\r\n            this._internal_setMode({\r\n                _internal_autoScale: true,\r\n            });\r\n            // if no sources on price scale let's clear price range cache as well as enabling auto scale\r\n            this._internal_setPriceRange(null);\r\n        }\r\n        this._internal_updateFormatter();\r\n        this._internal_invalidateSourcesCache();\r\n    }\r\n    _internal_firstValue() {\r\n        // TODO: cache the result\r\n        let result = null;\r\n        for (const source of this._private__dataSources) {\r\n            const firstValue = source._internal_firstValue();\r\n            if (firstValue === null) {\r\n                continue;\r\n            }\r\n            if (result === null || firstValue._internal_timePoint < result._internal_timePoint) {\r\n                result = firstValue;\r\n            }\r\n        }\r\n        return result === null ? null : result._internal_value;\r\n    }\r\n    _internal_isInverted() {\r\n        return this._private__options.invertScale;\r\n    }\r\n    _internal_marks() {\r\n        const firstValueIsNull = this._internal_firstValue() === null;\r\n        // do not recalculate marks if firstValueIsNull is true because in this case we'll always get empty result\r\n        // this could happen in case when a series had some data and then you set empty data to it (in a simplified case)\r\n        // we could display an empty price scale, but this is not good from UX\r\n        // so in this case we need to keep an previous marks to display them on the scale\r\n        // as one of possible examples for this situation could be the following:\r\n        // let's say you have a study/indicator attached to a price scale and then you decide to stop it, i.e. remove its data because of its visibility\r\n        // a user will see the previous marks on the scale until you turn on your study back or remove it from the chart completely\r\n        if (this._private__marksCache !== null && (firstValueIsNull || this._private__marksCache._internal_firstValueIsNull === firstValueIsNull)) {\r\n            return this._private__marksCache._internal_marks;\r\n        }\r\n        this._private__markBuilder._internal_rebuildTickMarks();\r\n        const marks = this._private__markBuilder._internal_marks();\r\n        this._private__marksCache = { _internal_marks: marks, _internal_firstValueIsNull: firstValueIsNull };\r\n        this._private__onMarksChanged._internal_fire();\r\n        return marks;\r\n    }\r\n    _internal_onMarksChanged() {\r\n        return this._private__onMarksChanged;\r\n    }\r\n    _internal_startScale(x) {\r\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\r\n            return;\r\n        }\r\n        if (this._private__scaleStartPoint !== null || this._private__priceRangeSnapshot !== null) {\r\n            return;\r\n        }\r\n        if (this._internal_isEmpty()) {\r\n            return;\r\n        }\r\n        // invert x\r\n        this._private__scaleStartPoint = this._private__height - x;\r\n        this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();\r\n    }\r\n    _internal_scaleTo(x) {\r\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\r\n            return;\r\n        }\r\n        if (this._private__scaleStartPoint === null) {\r\n            return;\r\n        }\r\n        this._internal_setMode({\r\n            _internal_autoScale: false,\r\n        });\r\n        // invert x\r\n        x = this._private__height - x;\r\n        if (x < 0) {\r\n            x = 0;\r\n        }\r\n        let scaleCoeff = (this._private__scaleStartPoint + (this._private__height - 1) * 0.2) / (x + (this._private__height - 1) * 0.2);\r\n        const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();\r\n        scaleCoeff = Math.max(scaleCoeff, 0.1);\r\n        newPriceRange._internal_scaleAroundCenter(scaleCoeff);\r\n        this._internal_setPriceRange(newPriceRange);\r\n    }\r\n    _internal_endScale() {\r\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\r\n            return;\r\n        }\r\n        this._private__scaleStartPoint = null;\r\n        this._private__priceRangeSnapshot = null;\r\n    }\r\n    _internal_startScroll(x) {\r\n        if (this._internal_isAutoScale()) {\r\n            return;\r\n        }\r\n        if (this._private__scrollStartPoint !== null || this._private__priceRangeSnapshot !== null) {\r\n            return;\r\n        }\r\n        if (this._internal_isEmpty()) {\r\n            return;\r\n        }\r\n        this._private__scrollStartPoint = x;\r\n        this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();\r\n    }\r\n    _internal_scrollTo(x) {\r\n        if (this._internal_isAutoScale()) {\r\n            return;\r\n        }\r\n        if (this._private__scrollStartPoint === null) {\r\n            return;\r\n        }\r\n        const priceUnitsPerPixel = ensureNotNull(this._internal_priceRange())._internal_length() / (this._internal_internalHeight() - 1);\r\n        let pixelDelta = x - this._private__scrollStartPoint;\r\n        if (this._internal_isInverted()) {\r\n            pixelDelta *= -1;\r\n        }\r\n        const priceDelta = pixelDelta * priceUnitsPerPixel;\r\n        const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();\r\n        newPriceRange._internal_shift(priceDelta);\r\n        this._internal_setPriceRange(newPriceRange, true);\r\n        this._private__marksCache = null;\r\n    }\r\n    _internal_endScroll() {\r\n        if (this._internal_isAutoScale()) {\r\n            return;\r\n        }\r\n        if (this._private__scrollStartPoint === null) {\r\n            return;\r\n        }\r\n        this._private__scrollStartPoint = null;\r\n        this._private__priceRangeSnapshot = null;\r\n    }\r\n    _internal_formatter() {\r\n        if (!this._private__formatter) {\r\n            this._internal_updateFormatter();\r\n        }\r\n        return this._private__formatter;\r\n    }\r\n    _internal_formatPrice(price, firstValue) {\r\n        switch (this._private__options.mode) {\r\n            case 2 /* PriceScaleMode.Percentage */:\r\n                return this._private__formatPercentage(toPercent(price, firstValue));\r\n            case 3 /* PriceScaleMode.IndexedTo100 */:\r\n                return this._internal_formatter().format(toIndexedTo100(price, firstValue));\r\n            default:\r\n                return this._private__formatPrice(price);\r\n        }\r\n    }\r\n    _internal_formatLogical(logical) {\r\n        switch (this._private__options.mode) {\r\n            case 2 /* PriceScaleMode.Percentage */:\r\n                return this._private__formatPercentage(logical);\r\n            case 3 /* PriceScaleMode.IndexedTo100 */:\r\n                return this._internal_formatter().format(logical);\r\n            default:\r\n                return this._private__formatPrice(logical);\r\n        }\r\n    }\r\n    _internal_formatLogicalTickmarks(logicals) {\r\n        switch (this._private__options.mode) {\r\n            case 2 /* PriceScaleMode.Percentage */:\r\n                return this._private__formatPercentageTickmarks(logicals);\r\n            case 3 /* PriceScaleMode.IndexedTo100 */:\r\n                return this._internal_formatter().formatTickmarks(logicals);\r\n            default:\r\n                return this._private__formatTickmarks(logicals);\r\n        }\r\n    }\r\n    _internal_formatPriceAbsolute(price) {\r\n        return this._private__formatPrice(price, ensureNotNull(this._private__formatterSource)._internal_formatter());\r\n    }\r\n    _internal_formatPricePercentage(price, baseValue) {\r\n        price = toPercent(price, baseValue);\r\n        return this._private__formatPercentage(price, percentageFormatter);\r\n    }\r\n    _internal_sourcesForAutoScale() {\r\n        return this._private__dataSources;\r\n    }\r\n    _internal_recalculatePriceRange(visibleBars) {\r\n        this._private__invalidatedForRange = {\r\n            _internal_visibleBars: visibleBars,\r\n            _internal_isValid: false,\r\n        };\r\n    }\r\n    _internal_updateAllViews() {\r\n        this._private__dataSources.forEach((s) => s._internal_updateAllViews());\r\n    }\r\n    _internal_hasVisibleEdgeMarks() {\r\n        return this._private__options.ensureEdgeTickMarksVisible && this._internal_isAutoScale();\r\n    }\r\n    _internal_getEdgeMarksPadding() {\r\n        return this._internal_fontSize() / 2;\r\n    }\r\n    _internal_updateFormatter() {\r\n        this._private__marksCache = null;\r\n        let zOrder = Infinity;\r\n        this._private__formatterSource = null;\r\n        // choose source with the lowest zorder\r\n        for (const source of this._private__dataSources) {\r\n            if (source._internal_zorder() < zOrder) {\r\n                zOrder = source._internal_zorder();\r\n                this._private__formatterSource = source;\r\n            }\r\n        }\r\n        let base = 100;\r\n        if (this._private__formatterSource !== null) {\r\n            base = Math.round(1 / this._private__formatterSource._internal_minMove());\r\n        }\r\n        this._private__formatter = defaultPriceFormatter;\r\n        if (this._internal_isPercentage()) {\r\n            this._private__formatter = percentageFormatter;\r\n            base = 100;\r\n        }\r\n        else if (this._internal_isIndexedTo100()) {\r\n            this._private__formatter = new PriceFormatter(100, 1);\r\n            base = 100;\r\n        }\r\n        else {\r\n            if (this._private__formatterSource !== null) {\r\n                // user\r\n                this._private__formatter = this._private__formatterSource._internal_formatter();\r\n            }\r\n        }\r\n        this._private__markBuilder = new PriceTickMarkBuilder(this, base, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));\r\n        this._private__markBuilder._internal_rebuildTickMarks();\r\n    }\r\n    _internal_invalidateSourcesCache() {\r\n        this._private__cachedOrderedSources = null;\r\n    }\r\n    _internal_colorParser() {\r\n        return this._private__colorParser;\r\n    }\r\n    _private__toggleCustomPriceRange(v) {\r\n        this._private__isCustomPriceRange = v;\r\n    }\r\n    _private__topMarginPx() {\r\n        return this._internal_isInverted()\r\n            ? this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow\r\n            : this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove;\r\n    }\r\n    _private__bottomMarginPx() {\r\n        return this._internal_isInverted()\r\n            ? this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove\r\n            : this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow;\r\n    }\r\n    _private__makeSureItIsValid() {\r\n        if (!this._private__invalidatedForRange._internal_isValid) {\r\n            this._private__invalidatedForRange._internal_isValid = true;\r\n            this._private__recalculatePriceRangeImpl();\r\n        }\r\n    }\r\n    _private__invalidateInternalHeightCache() {\r\n        this._private__internalHeightCache = null;\r\n    }\r\n    _private__logicalToCoordinate(logical, baseValue) {\r\n        this._private__makeSureItIsValid();\r\n        if (this._internal_isEmpty()) {\r\n            return 0;\r\n        }\r\n        logical = this._internal_isLog() && logical ? toLog(logical, this._private__logFormula) : logical;\r\n        const range = ensureNotNull(this._internal_priceRange());\r\n        const invCoordinate = this._private__bottomMarginPx() +\r\n            (this._internal_internalHeight() - 1) * (logical - range._internal_minValue()) / range._internal_length();\r\n        const coordinate = this._internal_invertedCoordinate(invCoordinate);\r\n        return coordinate;\r\n    }\r\n    _private__coordinateToLogical(coordinate, baseValue) {\r\n        this._private__makeSureItIsValid();\r\n        if (this._internal_isEmpty()) {\r\n            return 0;\r\n        }\r\n        const invCoordinate = this._internal_invertedCoordinate(coordinate);\r\n        const range = ensureNotNull(this._internal_priceRange());\r\n        const logical = range._internal_minValue() + range._internal_length() *\r\n            ((invCoordinate - this._private__bottomMarginPx()) / (this._internal_internalHeight() - 1));\r\n        return this._internal_isLog() ? fromLog(logical, this._private__logFormula) : logical;\r\n    }\r\n    _private__onIsInvertedChanged() {\r\n        this._private__marksCache = null;\r\n        this._private__markBuilder._internal_rebuildTickMarks();\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _private__recalculatePriceRangeImpl() {\r\n        if (this._internal_isCustomPriceRange() && !this._internal_isAutoScale()) {\r\n            return;\r\n        }\r\n        const visibleBars = this._private__invalidatedForRange._internal_visibleBars;\r\n        if (visibleBars === null) {\r\n            return;\r\n        }\r\n        let priceRange = null;\r\n        const sources = this._internal_sourcesForAutoScale();\r\n        let marginAbove = 0;\r\n        let marginBelow = 0;\r\n        for (const source of sources) {\r\n            if (!source._internal_visible()) {\r\n                continue;\r\n            }\r\n            const firstValue = source._internal_firstValue();\r\n            if (firstValue === null) {\r\n                continue;\r\n            }\r\n            const autoScaleInfo = source._internal_autoscaleInfo(visibleBars._internal_left(), visibleBars._internal_right());\r\n            let sourceRange = autoScaleInfo && autoScaleInfo._internal_priceRange();\r\n            if (sourceRange !== null) {\r\n                switch (this._private__options.mode) {\r\n                    case 1 /* PriceScaleMode.Logarithmic */:\r\n                        sourceRange = convertPriceRangeToLog(sourceRange, this._private__logFormula);\r\n                        break;\r\n                    case 2 /* PriceScaleMode.Percentage */:\r\n                        sourceRange = toPercentRange(sourceRange, firstValue._internal_value);\r\n                        break;\r\n                    case 3 /* PriceScaleMode.IndexedTo100 */:\r\n                        sourceRange = toIndexedTo100Range(sourceRange, firstValue._internal_value);\r\n                        break;\r\n                }\r\n                if (priceRange === null) {\r\n                    priceRange = sourceRange;\r\n                }\r\n                else {\r\n                    priceRange = priceRange._internal_merge(ensureNotNull(sourceRange));\r\n                }\r\n                if (autoScaleInfo !== null) {\r\n                    const margins = autoScaleInfo._internal_margins();\r\n                    if (margins !== null) {\r\n                        marginAbove = Math.max(marginAbove, margins.above);\r\n                        marginBelow = Math.max(marginBelow, margins.below);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this._internal_hasVisibleEdgeMarks()) {\r\n            marginAbove = Math.max(marginAbove, this._internal_getEdgeMarksPadding());\r\n            marginBelow = Math.max(marginBelow, this._internal_getEdgeMarksPadding());\r\n        }\r\n        if (marginAbove !== this._private__marginAbove || marginBelow !== this._private__marginBelow) {\r\n            this._private__marginAbove = marginAbove;\r\n            this._private__marginBelow = marginBelow;\r\n            this._private__marksCache = null;\r\n            this._private__invalidateInternalHeightCache();\r\n        }\r\n        if (priceRange !== null) {\r\n            // keep current range is new is empty\r\n            if (priceRange._internal_minValue() === priceRange._internal_maxValue()) {\r\n                const formatterSource = this._private__formatterSource;\r\n                const minMove = formatterSource === null || this._internal_isPercentage() || this._internal_isIndexedTo100() ? 1 : formatterSource._internal_minMove();\r\n                // if price range is degenerated to 1 point let's extend it by 10 min move values\r\n                // to avoid incorrect range and empty (blank) scale (in case of min tick much greater than 1)\r\n                const extendValue = 5 * minMove;\r\n                if (this._internal_isLog()) {\r\n                    priceRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);\r\n                }\r\n                priceRange = new PriceRangeImpl(priceRange._internal_minValue() - extendValue, priceRange._internal_maxValue() + extendValue);\r\n                if (this._internal_isLog()) {\r\n                    priceRange = convertPriceRangeToLog(priceRange, this._private__logFormula);\r\n                }\r\n            }\r\n            if (this._internal_isLog()) {\r\n                const rawRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);\r\n                const newLogFormula = logFormulaForPriceRange(rawRange);\r\n                if (!logFormulasAreSame(newLogFormula, this._private__logFormula)) {\r\n                    const rawSnapshot = this._private__priceRangeSnapshot !== null ? convertPriceRangeFromLog(this._private__priceRangeSnapshot, this._private__logFormula) : null;\r\n                    this._private__logFormula = newLogFormula;\r\n                    priceRange = convertPriceRangeToLog(rawRange, newLogFormula);\r\n                    if (rawSnapshot !== null) {\r\n                        this._private__priceRangeSnapshot = convertPriceRangeToLog(rawSnapshot, newLogFormula);\r\n                    }\r\n                }\r\n            }\r\n            this._internal_setPriceRange(priceRange);\r\n        }\r\n        else {\r\n            // reset empty to default\r\n            if (this._private__priceRange === null) {\r\n                this._internal_setPriceRange(new PriceRangeImpl(-0.5, 0.5));\r\n                this._private__logFormula = logFormulaForPriceRange(null);\r\n            }\r\n        }\r\n    }\r\n    _private__getCoordinateTransformer() {\r\n        if (this._internal_isPercentage()) {\r\n            return toPercent;\r\n        }\r\n        else if (this._internal_isIndexedTo100()) {\r\n            return toIndexedTo100;\r\n        }\r\n        else if (this._internal_isLog()) {\r\n            return (price) => toLog(price, this._private__logFormula);\r\n        }\r\n        return null;\r\n    }\r\n    _private__formatValue(value, formatter, fallbackFormatter) {\r\n        if (formatter === undefined) {\r\n            if (fallbackFormatter === undefined) {\r\n                fallbackFormatter = this._internal_formatter();\r\n            }\r\n            return fallbackFormatter.format(value);\r\n        }\r\n        return formatter(value);\r\n    }\r\n    _private__formatValues(values, formatter, fallbackFormatter) {\r\n        if (formatter === undefined) {\r\n            if (fallbackFormatter === undefined) {\r\n                fallbackFormatter = this._internal_formatter();\r\n            }\r\n            return fallbackFormatter.formatTickmarks(values);\r\n        }\r\n        return formatter(values);\r\n    }\r\n    _private__formatPrice(price, fallbackFormatter) {\r\n        return this._private__formatValue(price, this._private__localizationOptions.priceFormatter, fallbackFormatter);\r\n    }\r\n    _private__formatTickmarks(prices, fallbackFormatter) {\r\n        const priceFormatter = this._private__localizationOptions.priceFormatter;\r\n        return this._private__formatValues(prices, this._private__localizationOptions.tickmarksPriceFormatter ?? (priceFormatter ? (values) => values.map(priceFormatter) : undefined), fallbackFormatter);\r\n    }\r\n    _private__formatPercentage(percentage, fallbackFormatter) {\r\n        return this._private__formatValue(percentage, this._private__localizationOptions.percentageFormatter, fallbackFormatter);\r\n    }\r\n    _private__formatPercentageTickmarks(percentages, fallbackFormatter) {\r\n        const tickmarksPercentageFormatter = this._private__localizationOptions.percentageFormatter;\r\n        return this._private__formatValues(percentages, this._private__localizationOptions.tickmarksPercentageFormatter ?? (tickmarksPercentageFormatter ? (values) => values.map(tickmarksPercentageFormatter) : undefined), fallbackFormatter);\r\n    }\r\n}\r\n\r\nfunction isSeries(source) {\r\n    return source instanceof Series;\r\n}\r\nconst DEFAULT_STRETCH_FACTOR = 1;\r\nconst MIN_PANE_HEIGHT = 30;\r\nclass Pane {\r\n    constructor(timeScale, model) {\r\n        this._private__dataSources = [];\r\n        this._private__overlaySourcesByScaleId = new Map();\r\n        this._private__height = 0;\r\n        this._private__width = 0;\r\n        this._private__stretchFactor = DEFAULT_STRETCH_FACTOR;\r\n        this._private__cachedOrderedSources = null;\r\n        this._private__preserveEmptyPane = false;\r\n        this._private__destroyed = new Delegate();\r\n        this._private__primitives = [];\r\n        this._private__timeScale = timeScale;\r\n        this._private__model = model;\r\n        this._private__grid = new Grid(this);\r\n        const options = model._internal_options();\r\n        this._private__leftPriceScale = this._private__createPriceScale(\"left\" /* DefaultPriceScaleId.Left */, options.leftPriceScale);\r\n        this._private__rightPriceScale = this._private__createPriceScale(\"right\" /* DefaultPriceScaleId.Right */, options.rightPriceScale);\r\n        this._private__leftPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__leftPriceScale), this);\r\n        this._private__rightPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__rightPriceScale), this);\r\n        this._internal_applyScaleOptions(options);\r\n    }\r\n    _internal_applyScaleOptions(options) {\r\n        if (options.leftPriceScale) {\r\n            this._private__leftPriceScale._internal_applyOptions(options.leftPriceScale);\r\n        }\r\n        if (options.rightPriceScale) {\r\n            this._private__rightPriceScale._internal_applyOptions(options.rightPriceScale);\r\n        }\r\n        if (options.localization) {\r\n            this._private__leftPriceScale._internal_updateFormatter();\r\n            this._private__rightPriceScale._internal_updateFormatter();\r\n        }\r\n        if (options.overlayPriceScales) {\r\n            const sourceArrays = Array.from(this._private__overlaySourcesByScaleId.values());\r\n            for (const arr of sourceArrays) {\r\n                const priceScale = ensureNotNull(arr[0]._internal_priceScale());\r\n                priceScale._internal_applyOptions(options.overlayPriceScales);\r\n                if (options.localization) {\r\n                    priceScale._internal_updateFormatter();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _internal_priceScaleById(id) {\r\n        switch (id) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n            case \"left\" /* DefaultPriceScaleId.Left */: {\r\n                return this._private__leftPriceScale;\r\n            }\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n            case \"right\" /* DefaultPriceScaleId.Right */: {\r\n                return this._private__rightPriceScale;\r\n            }\r\n        }\r\n        if (this._private__overlaySourcesByScaleId.has(id)) {\r\n            return ensureDefined(this._private__overlaySourcesByScaleId.get(id))[0]._internal_priceScale();\r\n        }\r\n        return null;\r\n    }\r\n    _internal_destroy() {\r\n        this._internal_model()._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);\r\n        this._private__leftPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);\r\n        this._private__rightPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);\r\n        this._private__dataSources.forEach((source) => {\r\n            if (source._internal_destroy) {\r\n                source._internal_destroy();\r\n            }\r\n        });\r\n        this._private__primitives = this._private__primitives.filter((primitive) => {\r\n            const p = primitive._internal_primitive();\r\n            if (p.detached) {\r\n                p.detached();\r\n            }\r\n            return false;\r\n        });\r\n        this._private__destroyed._internal_fire();\r\n    }\r\n    _internal_stretchFactor() {\r\n        return this._private__stretchFactor;\r\n    }\r\n    _internal_setStretchFactor(factor) {\r\n        this._private__stretchFactor = factor;\r\n    }\r\n    _internal_model() {\r\n        return this._private__model;\r\n    }\r\n    _internal_width() {\r\n        return this._private__width;\r\n    }\r\n    _internal_height() {\r\n        return this._private__height;\r\n    }\r\n    _internal_setWidth(width) {\r\n        this._private__width = width;\r\n        this._internal_updateAllSources();\r\n    }\r\n    _internal_setHeight(height) {\r\n        this._private__height = height;\r\n        this._private__leftPriceScale._internal_setHeight(height);\r\n        this._private__rightPriceScale._internal_setHeight(height);\r\n        // process overlays\r\n        this._private__dataSources.forEach((ds) => {\r\n            if (this._internal_isOverlay(ds)) {\r\n                const priceScale = ds._internal_priceScale();\r\n                if (priceScale !== null) {\r\n                    priceScale._internal_setHeight(height);\r\n                }\r\n            }\r\n        });\r\n        this._internal_updateAllSources();\r\n    }\r\n    _internal_setPreserveEmptyPane(preserve) {\r\n        this._private__preserveEmptyPane = preserve;\r\n    }\r\n    _internal_preserveEmptyPane() {\r\n        return this._private__preserveEmptyPane;\r\n    }\r\n    _internal_series() {\r\n        return this._private__dataSources.filter(isSeries);\r\n    }\r\n    _internal_dataSources() {\r\n        return this._private__dataSources;\r\n    }\r\n    _internal_isOverlay(source) {\r\n        const priceScale = source._internal_priceScale();\r\n        if (priceScale === null) {\r\n            return true;\r\n        }\r\n        return this._private__leftPriceScale !== priceScale && this._private__rightPriceScale !== priceScale;\r\n    }\r\n    _internal_addDataSource(source, targetScaleId, keepSourcesOrder) {\r\n        this._private__insertDataSource(source, targetScaleId, keepSourcesOrder ? source._internal_zorder() : this._private__dataSources.length);\r\n    }\r\n    _internal_removeDataSource(source, keepSourceOrder) {\r\n        const index = this._private__dataSources.indexOf(source);\r\n        assert(index !== -1, 'removeDataSource: invalid data source');\r\n        this._private__dataSources.splice(index, 1);\r\n        if (!keepSourceOrder) {\r\n            this._private__dataSources.forEach((ds, i) => ds._internal_setZorder(i));\r\n        }\r\n        const priceScaleId = ensureNotNull(source._internal_priceScale())._internal_id();\r\n        if (this._private__overlaySourcesByScaleId.has(priceScaleId)) {\r\n            const overlaySources = ensureDefined(this._private__overlaySourcesByScaleId.get(priceScaleId));\r\n            const overlayIndex = overlaySources.indexOf(source);\r\n            if (overlayIndex !== -1) {\r\n                overlaySources.splice(overlayIndex, 1);\r\n                if (overlaySources.length === 0) {\r\n                    this._private__overlaySourcesByScaleId.delete(priceScaleId);\r\n                }\r\n            }\r\n        }\r\n        const priceScale = source._internal_priceScale();\r\n        // if source has owner, it returns owner's price scale\r\n        // and it does not have source in their list\r\n        if (priceScale && priceScale._internal_dataSources().indexOf(source) >= 0) {\r\n            priceScale._internal_removeDataSource(source);\r\n            this._internal_recalculatePriceScale(priceScale);\r\n        }\r\n        this._private__cachedOrderedSources = null;\r\n    }\r\n    _internal_priceScalePosition(priceScale) {\r\n        if (priceScale === this._private__leftPriceScale) {\r\n            return 'left';\r\n        }\r\n        if (priceScale === this._private__rightPriceScale) {\r\n            return 'right';\r\n        }\r\n        return 'overlay';\r\n    }\r\n    _internal_leftPriceScale() {\r\n        return this._private__leftPriceScale;\r\n    }\r\n    _internal_rightPriceScale() {\r\n        return this._private__rightPriceScale;\r\n    }\r\n    _internal_startScalePrice(priceScale, x) {\r\n        priceScale._internal_startScale(x);\r\n    }\r\n    _internal_scalePriceTo(priceScale, x) {\r\n        priceScale._internal_scaleTo(x);\r\n        // TODO: be more smart and update only affected views\r\n        this._internal_updateAllSources();\r\n    }\r\n    _internal_endScalePrice(priceScale) {\r\n        priceScale._internal_endScale();\r\n    }\r\n    _internal_startScrollPrice(priceScale, x) {\r\n        priceScale._internal_startScroll(x);\r\n    }\r\n    _internal_scrollPriceTo(priceScale, x) {\r\n        priceScale._internal_scrollTo(x);\r\n        this._internal_updateAllSources();\r\n    }\r\n    _internal_endScrollPrice(priceScale) {\r\n        priceScale._internal_endScroll();\r\n    }\r\n    _internal_updateAllSources() {\r\n        this._private__dataSources.forEach((source) => {\r\n            source._internal_updateAllViews();\r\n        });\r\n    }\r\n    _internal_defaultPriceScale() {\r\n        let priceScale = null;\r\n        if (this._private__model._internal_options().rightPriceScale.visible && this._private__rightPriceScale._internal_dataSources().length !== 0) {\r\n            priceScale = this._private__rightPriceScale;\r\n        }\r\n        else if (this._private__model._internal_options().leftPriceScale.visible && this._private__leftPriceScale._internal_dataSources().length !== 0) {\r\n            priceScale = this._private__leftPriceScale;\r\n        }\r\n        else if (this._private__dataSources.length !== 0) {\r\n            priceScale = this._private__dataSources[0]._internal_priceScale();\r\n        }\r\n        if (priceScale === null) {\r\n            priceScale = this._private__rightPriceScale;\r\n        }\r\n        return priceScale;\r\n    }\r\n    _internal_defaultVisiblePriceScale() {\r\n        let priceScale = null;\r\n        if (this._private__model._internal_options().rightPriceScale.visible) {\r\n            priceScale = this._private__rightPriceScale;\r\n        }\r\n        else if (this._private__model._internal_options().leftPriceScale.visible) {\r\n            priceScale = this._private__leftPriceScale;\r\n        }\r\n        return priceScale;\r\n    }\r\n    _internal_recalculatePriceScale(priceScale) {\r\n        if (priceScale === null || !priceScale._internal_isAutoScale()) {\r\n            return;\r\n        }\r\n        this._private__recalculatePriceScaleImpl(priceScale);\r\n    }\r\n    _internal_resetPriceScale(priceScale) {\r\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\r\n        priceScale._internal_setMode({ _internal_autoScale: true });\r\n        if (visibleBars !== null) {\r\n            priceScale._internal_recalculatePriceRange(visibleBars);\r\n        }\r\n        this._internal_updateAllSources();\r\n    }\r\n    _internal_momentaryAutoScale() {\r\n        this._private__recalculatePriceScaleImpl(this._private__leftPriceScale);\r\n        this._private__recalculatePriceScaleImpl(this._private__rightPriceScale);\r\n    }\r\n    _internal_recalculate() {\r\n        this._internal_recalculatePriceScale(this._private__leftPriceScale);\r\n        this._internal_recalculatePriceScale(this._private__rightPriceScale);\r\n        this._private__dataSources.forEach((ds) => {\r\n            if (this._internal_isOverlay(ds)) {\r\n                this._internal_recalculatePriceScale(ds._internal_priceScale());\r\n            }\r\n        });\r\n        this._internal_updateAllSources();\r\n        this._private__model._internal_lightUpdate();\r\n    }\r\n    _internal_orderedSources() {\r\n        if (this._private__cachedOrderedSources === null) {\r\n            this._private__cachedOrderedSources = sortSources(this._private__dataSources);\r\n        }\r\n        return this._private__cachedOrderedSources;\r\n    }\r\n    _internal_setSeriesOrder(series, order) {\r\n        order = clamp(order, 0, this._private__dataSources.length - 1);\r\n        const index = this._private__dataSources.indexOf(series);\r\n        assert(index !== -1, 'setSeriesOrder: invalid data source');\r\n        this._private__dataSources.splice(index, 1);\r\n        this._private__dataSources.splice(order, 0, series);\r\n        this._private__dataSources.forEach((ps, i) => ps._internal_setZorder(i));\r\n        this._private__cachedOrderedSources = null;\r\n        for (const ps of [this._private__leftPriceScale, this._private__rightPriceScale]) {\r\n            ps._internal_invalidateSourcesCache();\r\n            ps._internal_updateFormatter();\r\n        }\r\n        this._private__model._internal_lightUpdate();\r\n    }\r\n    _internal_orderedSeries() {\r\n        return this._internal_orderedSources().filter(isSeries);\r\n    }\r\n    _internal_onDestroyed() {\r\n        return this._private__destroyed;\r\n    }\r\n    _internal_grid() {\r\n        return this._private__grid;\r\n    }\r\n    _internal_attachPrimitive(primitive) {\r\n        this._private__primitives.push(new PanePrimitiveWrapper$1(primitive));\r\n    }\r\n    _internal_detachPrimitive(source) {\r\n        this._private__primitives = this._private__primitives.filter((wrapper) => wrapper._internal_primitive() !== source);\r\n        if (source.detached) {\r\n            source.detached();\r\n        }\r\n        this._private__model._internal_lightUpdate();\r\n    }\r\n    _internal_primitives() {\r\n        return this._private__primitives;\r\n    }\r\n    _internal_primitiveHitTest(x, y) {\r\n        return this._private__primitives\r\n            .map((primitive) => primitive._internal_hitTest(x, y))\r\n            .filter((result) => result !== null);\r\n    }\r\n    _private__recalculatePriceScaleImpl(priceScale) {\r\n        // TODO: can use this checks\r\n        const sourceForAutoScale = priceScale._internal_sourcesForAutoScale();\r\n        if (sourceForAutoScale && sourceForAutoScale.length > 0 && !this._private__timeScale._internal_isEmpty()) {\r\n            const visibleBars = this._private__timeScale._internal_visibleStrictRange();\r\n            if (visibleBars !== null) {\r\n                priceScale._internal_recalculatePriceRange(visibleBars);\r\n            }\r\n        }\r\n        priceScale._internal_updateAllViews();\r\n    }\r\n    _private__insertDataSource(source, priceScaleId, order) {\r\n        let priceScale = this._internal_priceScaleById(priceScaleId);\r\n        if (priceScale === null) {\r\n            priceScale = this._private__createPriceScale(priceScaleId, this._private__model._internal_options().overlayPriceScales);\r\n        }\r\n        this._private__dataSources.splice(order, 0, source);\r\n        if (!isDefaultPriceScale(priceScaleId)) {\r\n            const overlaySources = this._private__overlaySourcesByScaleId.get(priceScaleId) || [];\r\n            overlaySources.push(source);\r\n            this._private__overlaySourcesByScaleId.set(priceScaleId, overlaySources);\r\n        }\r\n        source._internal_setZorder(order);\r\n        priceScale._internal_addDataSource(source);\r\n        source._internal_setPriceScale(priceScale);\r\n        this._internal_recalculatePriceScale(priceScale);\r\n        this._private__cachedOrderedSources = null;\r\n    }\r\n    _private__onPriceScaleModeChanged(priceScale, oldMode, newMode) {\r\n        if (oldMode._internal_mode === newMode._internal_mode) {\r\n            return;\r\n        }\r\n        // momentary auto scale if we toggle percentage/indexedTo100 mode\r\n        this._private__recalculatePriceScaleImpl(priceScale);\r\n    }\r\n    _private__createPriceScale(id, options) {\r\n        const actualOptions = { visible: true, autoScale: true, ...clone(options) };\r\n        const priceScale = new PriceScale(id, actualOptions, this._private__model._internal_options()['layout'], this._private__model._internal_options().localization, this._private__model._internal_colorParser());\r\n        priceScale._internal_setHeight(this._internal_height());\r\n        return priceScale;\r\n    }\r\n}\r\n\r\n// returns true if item is above reference\r\nfunction comparePrimitiveZOrder(item, reference) {\r\n    return (!reference ||\r\n        (item === 'top' && reference !== 'top') ||\r\n        (item === 'normal' && reference === 'bottom'));\r\n}\r\nfunction findBestPrimitiveHitTest(sources, x, y) {\r\n    let bestPrimitiveHit;\r\n    let bestHitSource;\r\n    for (const source of sources) {\r\n        const primitiveHitResults = source._internal_primitiveHitTest?.(x, y) ?? [];\r\n        for (const hitResult of primitiveHitResults) {\r\n            if (comparePrimitiveZOrder(hitResult.zOrder, bestPrimitiveHit?.zOrder)) {\r\n                bestPrimitiveHit = hitResult;\r\n                bestHitSource = source;\r\n            }\r\n        }\r\n    }\r\n    if (!bestPrimitiveHit || !bestHitSource) {\r\n        return null;\r\n    }\r\n    return {\r\n        _internal_hit: bestPrimitiveHit,\r\n        _internal_source: bestHitSource,\r\n    };\r\n}\r\nfunction convertPrimitiveHitResult(primitiveHit) {\r\n    return {\r\n        _internal_source: primitiveHit._internal_source,\r\n        _internal_object: {\r\n            _internal_externalId: primitiveHit._internal_hit.externalId,\r\n        },\r\n        _internal_cursorStyle: primitiveHit._internal_hit.cursorStyle,\r\n    };\r\n}\r\n/**\r\n * Performs a hit test on a collection of pane views to determine which view and object\r\n * is located at a given coordinate (x, y) and returns the matching pane view and\r\n * hit-tested result object, or null if no match is found.\r\n */\r\nfunction hitTestPaneView(paneViews, x, y, pane) {\r\n    for (const paneView of paneViews) {\r\n        const renderer = paneView._internal_renderer(pane);\r\n        if (renderer !== null && renderer._internal_hitTest) {\r\n            const result = renderer._internal_hitTest(x, y);\r\n            if (result !== null) {\r\n                return {\r\n                    _internal_view: paneView,\r\n                    _internal_object: result,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction isDataSource(source) {\r\n    return source._internal_paneViews !== undefined;\r\n}\r\n// eslint-disable-next-line complexity\r\nfunction hitTestPane(pane, x, y) {\r\n    const sources = [pane, ...pane._internal_orderedSources()];\r\n    const bestPrimitiveHit = findBestPrimitiveHitTest(sources, x, y);\r\n    if (bestPrimitiveHit?._internal_hit.zOrder === 'top') {\r\n        // a primitive hit on the 'top' layer will always beat the built-in hit tests\r\n        // (on normal layer) so we can return early here.\r\n        return convertPrimitiveHitResult(bestPrimitiveHit);\r\n    }\r\n    for (const source of sources) {\r\n        if (bestPrimitiveHit && bestPrimitiveHit._internal_source === source && bestPrimitiveHit._internal_hit.zOrder !== 'bottom' && !bestPrimitiveHit._internal_hit.isBackground) {\r\n            // a primitive will be drawn above a built-in item like a series marker\r\n            // therefore it takes precedence here.\r\n            return convertPrimitiveHitResult(bestPrimitiveHit);\r\n        }\r\n        if (isDataSource(source)) {\r\n            const sourceResult = hitTestPaneView(source._internal_paneViews(pane), x, y, pane);\r\n            if (sourceResult !== null) {\r\n                return {\r\n                    _internal_source: source,\r\n                    _internal_view: sourceResult._internal_view,\r\n                    _internal_object: sourceResult._internal_object,\r\n                };\r\n            }\r\n        }\r\n        if (bestPrimitiveHit && bestPrimitiveHit._internal_source === source && bestPrimitiveHit._internal_hit.zOrder !== 'bottom' && bestPrimitiveHit._internal_hit.isBackground) {\r\n            return convertPrimitiveHitResult(bestPrimitiveHit);\r\n        }\r\n    }\r\n    if (bestPrimitiveHit?._internal_hit) {\r\n        // return primitive hits for the 'bottom' layer\r\n        return convertPrimitiveHitResult(bestPrimitiveHit);\r\n    }\r\n    return null;\r\n}\r\n\r\nclass FormattedLabelsCache {\r\n    constructor(format, horzScaleBehavior, size = 50) {\r\n        this._private__actualSize = 0;\r\n        this._private__usageTick = 1;\r\n        this._private__oldestTick = 1;\r\n        this._private__cache = new Map();\r\n        this._private__tick2Labels = new Map();\r\n        this._private__format = format;\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n        this._private__maxSize = size;\r\n    }\r\n    _internal_format(tickMark) {\r\n        const time = tickMark.time;\r\n        const cacheKey = this._private__horzScaleBehavior.cacheKey(time);\r\n        const tick = this._private__cache.get(cacheKey);\r\n        if (tick !== undefined) {\r\n            return tick._internal_string;\r\n        }\r\n        if (this._private__actualSize === this._private__maxSize) {\r\n            const oldestValue = this._private__tick2Labels.get(this._private__oldestTick);\r\n            this._private__tick2Labels.delete(this._private__oldestTick);\r\n            this._private__cache.delete(ensureDefined(oldestValue));\r\n            this._private__oldestTick++;\r\n            this._private__actualSize--;\r\n        }\r\n        const str = this._private__format(tickMark);\r\n        this._private__cache.set(cacheKey, { _internal_string: str, _internal_tick: this._private__usageTick });\r\n        this._private__tick2Labels.set(this._private__usageTick, cacheKey);\r\n        this._private__actualSize++;\r\n        this._private__usageTick++;\r\n        return str;\r\n    }\r\n}\r\n\r\nclass RangeImpl {\r\n    constructor(left, right) {\r\n        assert(left <= right, 'right should be >= left');\r\n        this._private__left = left;\r\n        this._private__right = right;\r\n    }\r\n    _internal_left() {\r\n        return this._private__left;\r\n    }\r\n    _internal_right() {\r\n        return this._private__right;\r\n    }\r\n    _internal_count() {\r\n        return this._private__right - this._private__left + 1;\r\n    }\r\n    _internal_contains(index) {\r\n        return this._private__left <= index && index <= this._private__right;\r\n    }\r\n    _internal_equals(other) {\r\n        return this._private__left === other._internal_left() && this._private__right === other._internal_right();\r\n    }\r\n}\r\nfunction areRangesEqual(first, second) {\r\n    if (first === null || second === null) {\r\n        return first === second;\r\n    }\r\n    return first._internal_equals(second);\r\n}\r\n\r\nclass TickMarks {\r\n    constructor() {\r\n        this._private__marksByWeight = new Map();\r\n        this._private__cache = null;\r\n        this._private__uniformDistribution = false;\r\n    }\r\n    _internal_setUniformDistribution(val) {\r\n        this._private__uniformDistribution = val;\r\n        this._private__cache = null;\r\n    }\r\n    _internal_setTimeScalePoints(newPoints, firstChangedPointIndex) {\r\n        this._private__removeMarksSinceIndex(firstChangedPointIndex);\r\n        this._private__cache = null;\r\n        for (let index = firstChangedPointIndex; index < newPoints.length; ++index) {\r\n            const point = newPoints[index];\r\n            let marksForWeight = this._private__marksByWeight.get(point.timeWeight);\r\n            if (marksForWeight === undefined) {\r\n                marksForWeight = [];\r\n                this._private__marksByWeight.set(point.timeWeight, marksForWeight);\r\n            }\r\n            marksForWeight.push({\r\n                index: index,\r\n                time: point.time,\r\n                weight: point.timeWeight,\r\n                originalTime: point.originalTime,\r\n            });\r\n        }\r\n    }\r\n    _internal_build(spacing, maxWidth, checkIndicesForData, indicesWithDataMap, indicesWithDataId) {\r\n        const maxIndexesPerMark = Math.ceil(maxWidth / spacing);\r\n        if (this._private__cache === null ||\r\n            this._private__cache._internal_maxIndexesPerMark !== maxIndexesPerMark ||\r\n            indicesWithDataId !== this._private__cache._internal_indicesWithDataId ||\r\n            checkIndicesForData !== this._private__cache._internal_checkIndicesForData) {\r\n            this._private__cache = {\r\n                _internal_indicesWithDataId: indicesWithDataId,\r\n                _internal_checkIndicesForData: checkIndicesForData,\r\n                _internal_marks: this._private__buildMarksImpl(maxIndexesPerMark, checkIndicesForData, indicesWithDataMap),\r\n                _internal_maxIndexesPerMark: maxIndexesPerMark,\r\n            };\r\n        }\r\n        return this._private__cache._internal_marks;\r\n    }\r\n    _private__removeMarksSinceIndex(sinceIndex) {\r\n        if (sinceIndex === 0) {\r\n            this._private__marksByWeight.clear();\r\n            return;\r\n        }\r\n        const weightsToClear = [];\r\n        this._private__marksByWeight.forEach((marks, timeWeight) => {\r\n            if (sinceIndex <= marks[0].index) {\r\n                weightsToClear.push(timeWeight);\r\n            }\r\n            else {\r\n                marks.splice(lowerBound(marks, sinceIndex, (tm) => tm.index < sinceIndex), Infinity);\r\n            }\r\n        });\r\n        for (const weight of weightsToClear) {\r\n            this._private__marksByWeight.delete(weight);\r\n        }\r\n    }\r\n    _private__buildMarksImpl(maxIndexesPerMark, checkIndicesForData, indicesWithDataMap) {\r\n        let marks = [];\r\n        const canBeIncluded = (mark) => !checkIndicesForData || indicesWithDataMap.has(mark.index);\r\n        for (const weight of Array.from(this._private__marksByWeight.keys()).sort((a, b) => b - a)) {\r\n            if (!this._private__marksByWeight.get(weight)) {\r\n                continue;\r\n            }\r\n            // Built tickMarks are now prevMarks, and marks it as new array\r\n            const prevMarks = marks;\r\n            marks = [];\r\n            const prevMarksLength = prevMarks.length;\r\n            let prevMarksPointer = 0;\r\n            const currentWeight = ensureDefined(this._private__marksByWeight.get(weight));\r\n            const currentWeightLength = currentWeight.length;\r\n            let rightIndex = Infinity;\r\n            let leftIndex = -Infinity;\r\n            for (let i = 0; i < currentWeightLength; i++) {\r\n                const mark = currentWeight[i];\r\n                const currentIndex = mark.index;\r\n                // Determine indexes with which current index will be compared\r\n                // All marks to the right is moved to new array\r\n                while (prevMarksPointer < prevMarksLength) {\r\n                    const lastMark = prevMarks[prevMarksPointer];\r\n                    const lastIndex = lastMark.index;\r\n                    if (lastIndex < currentIndex && canBeIncluded(lastMark)) {\r\n                        prevMarksPointer++;\r\n                        marks.push(lastMark);\r\n                        leftIndex = lastIndex;\r\n                        rightIndex = Infinity;\r\n                    }\r\n                    else {\r\n                        rightIndex = lastIndex;\r\n                        break;\r\n                    }\r\n                }\r\n                if (rightIndex - currentIndex >= maxIndexesPerMark &&\r\n                    currentIndex - leftIndex >= maxIndexesPerMark &&\r\n                    canBeIncluded(mark)) {\r\n                    // TickMark fits. Place it into new array\r\n                    marks.push(mark);\r\n                    leftIndex = currentIndex;\r\n                }\r\n                else {\r\n                    if (this._private__uniformDistribution) {\r\n                        return prevMarks;\r\n                    }\r\n                }\r\n            }\r\n            // Place all unused tickMarks into new array;\r\n            for (; prevMarksPointer < prevMarksLength; prevMarksPointer++) {\r\n                if (canBeIncluded(prevMarks[prevMarksPointer])) {\r\n                    marks.push(prevMarks[prevMarksPointer]);\r\n                }\r\n            }\r\n        }\r\n        return marks;\r\n    }\r\n}\r\n\r\nclass TimeScaleVisibleRange {\r\n    constructor(logicalRange) {\r\n        this._private__logicalRange = logicalRange;\r\n    }\r\n    _internal_strictRange() {\r\n        if (this._private__logicalRange === null) {\r\n            return null;\r\n        }\r\n        return new RangeImpl(Math.floor(this._private__logicalRange._internal_left()), Math.ceil(this._private__logicalRange._internal_right()));\r\n    }\r\n    _internal_logicalRange() {\r\n        return this._private__logicalRange;\r\n    }\r\n    static _internal_invalid() {\r\n        return new TimeScaleVisibleRange(null);\r\n    }\r\n}\r\n\r\nconst defaultTickMarkMaxCharacterLength = 8;\r\nfunction markWithGreaterWeight$2(a, b) {\r\n    return a.weight > b.weight ? a : b;\r\n}\r\nclass TimeScale {\r\n    constructor(model, options, localizationOptions, horzScaleBehavior) {\r\n        this._private__width = 0;\r\n        this._private__baseIndexOrNull = null;\r\n        this._private__points = [];\r\n        this._private__scrollStartPoint = null;\r\n        this._private__scaleStartPoint = null;\r\n        this._private__tickMarks = new TickMarks();\r\n        this._private__formattedByWeight = new Map();\r\n        this._private__visibleRange = TimeScaleVisibleRange._internal_invalid();\r\n        this._private__visibleRangeInvalidated = true;\r\n        this._private__visibleBarsChanged = new Delegate();\r\n        this._private__logicalRangeChanged = new Delegate();\r\n        this._private__optionsApplied = new Delegate();\r\n        this._private__commonTransitionStartState = null;\r\n        this._private__timeMarksCache = null;\r\n        this._private__indicesWithData = new Map();\r\n        this._private__indicesWithDataUpdateId = -1;\r\n        this._private__labels = [];\r\n        this._private__options = options;\r\n        this._private__localizationOptions = localizationOptions;\r\n        this._private__rightOffset = options.rightOffset;\r\n        this._private__barSpacing = options.barSpacing;\r\n        this._private__model = model;\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n        this._private__updateDateTimeFormatter();\r\n        this._private__tickMarks._internal_setUniformDistribution(options.uniformDistribution);\r\n        this._internal_recalculateIndicesWithData();\r\n    }\r\n    _internal_options() {\r\n        return this._private__options;\r\n    }\r\n    _internal_applyLocalizationOptions(localizationOptions) {\r\n        merge(this._private__localizationOptions, localizationOptions);\r\n        this._private__invalidateTickMarks();\r\n        this._private__updateDateTimeFormatter();\r\n    }\r\n    _internal_applyOptions(options, localizationOptions) {\r\n        merge(this._private__options, options);\r\n        if (this._private__options.fixLeftEdge) {\r\n            this._private__doFixLeftEdge();\r\n        }\r\n        if (this._private__options.fixRightEdge) {\r\n            this._private__doFixRightEdge();\r\n        }\r\n        // note that bar spacing should be applied before right offset\r\n        // because right offset depends on bar spacing\r\n        if (options.barSpacing !== undefined) {\r\n            this._private__model._internal_setBarSpacing(options.barSpacing);\r\n        }\r\n        if (options.rightOffset !== undefined) {\r\n            this._private__model._internal_setRightOffset(options.rightOffset);\r\n        }\r\n        if (options.minBarSpacing !== undefined || options.maxBarSpacing !== undefined) {\r\n            // yes, if we apply bar spacing constrains then we need to correct bar spacing\r\n            // the easiest way is to apply it once again\r\n            this._private__model._internal_setBarSpacing(options.barSpacing ?? this._private__barSpacing);\r\n        }\r\n        if (options.ignoreWhitespaceIndices !== undefined && options.ignoreWhitespaceIndices !== this._private__options.ignoreWhitespaceIndices) {\r\n            this._internal_recalculateIndicesWithData();\r\n        }\r\n        this._private__invalidateTickMarks();\r\n        this._private__updateDateTimeFormatter();\r\n        this._private__optionsApplied._internal_fire();\r\n    }\r\n    _internal_indexToTime(index) {\r\n        return this._private__points[index]?.time ?? null;\r\n    }\r\n    _internal_indexToTimeScalePoint(index) {\r\n        return this._private__points[index] ?? null;\r\n    }\r\n    _internal_timeToIndex(time, findNearest) {\r\n        if (this._private__points.length < 1) {\r\n            // no time points available\r\n            return null;\r\n        }\r\n        if (this._private__horzScaleBehavior.key(time) > this._private__horzScaleBehavior.key(this._private__points[this._private__points.length - 1].time)) {\r\n            // special case\r\n            return findNearest ? this._private__points.length - 1 : null;\r\n        }\r\n        const index = lowerBound(this._private__points, this._private__horzScaleBehavior.key(time), (a, b) => this._private__horzScaleBehavior.key(a.time) < b);\r\n        if (this._private__horzScaleBehavior.key(time) < this._private__horzScaleBehavior.key(this._private__points[index].time)) {\r\n            return findNearest ? index : null;\r\n        }\r\n        return index;\r\n    }\r\n    _internal_isEmpty() {\r\n        return this._private__width === 0 || this._private__points.length === 0 || this._private__baseIndexOrNull === null;\r\n    }\r\n    _internal_hasPoints() {\r\n        return this._private__points.length > 0;\r\n    }\r\n    // strict range: integer indices of the bars in the visible range rounded in more wide direction\r\n    _internal_visibleStrictRange() {\r\n        this._private__updateVisibleRange();\r\n        return this._private__visibleRange._internal_strictRange();\r\n    }\r\n    _internal_visibleLogicalRange() {\r\n        this._private__updateVisibleRange();\r\n        return this._private__visibleRange._internal_logicalRange();\r\n    }\r\n    _internal_visibleTimeRange() {\r\n        const visibleBars = this._internal_visibleStrictRange();\r\n        if (visibleBars === null) {\r\n            return null;\r\n        }\r\n        const range = {\r\n            from: visibleBars._internal_left(),\r\n            to: visibleBars._internal_right(),\r\n        };\r\n        return this._internal_timeRangeForLogicalRange(range);\r\n    }\r\n    _internal_timeRangeForLogicalRange(range) {\r\n        const from = Math.round(range.from);\r\n        const to = Math.round(range.to);\r\n        const firstIndex = ensureNotNull(this._private__firstIndex());\r\n        const lastIndex = ensureNotNull(this._private__lastIndex());\r\n        return {\r\n            from: ensureNotNull(this._internal_indexToTimeScalePoint(Math.max(firstIndex, from))),\r\n            to: ensureNotNull(this._internal_indexToTimeScalePoint(Math.min(lastIndex, to))),\r\n        };\r\n    }\r\n    _internal_logicalRangeForTimeRange(range) {\r\n        return {\r\n            from: ensureNotNull(this._internal_timeToIndex(range.from, true)),\r\n            to: ensureNotNull(this._internal_timeToIndex(range.to, true)),\r\n        };\r\n    }\r\n    _internal_width() {\r\n        return this._private__width;\r\n    }\r\n    _internal_setWidth(newWidth) {\r\n        if (!isFinite(newWidth) || newWidth <= 0) {\r\n            return;\r\n        }\r\n        if (this._private__width === newWidth) {\r\n            return;\r\n        }\r\n        // when we change the width and we need to correct visible range because of fixing left edge\r\n        // we need to check the previous visible range rather than the new one\r\n        // because it might be updated by changing width, bar spacing, etc\r\n        // but we need to try to keep the same range\r\n        const previousVisibleRange = this._internal_visibleLogicalRange();\r\n        const oldWidth = this._private__width;\r\n        this._private__width = newWidth;\r\n        this._private__visibleRangeInvalidated = true;\r\n        if (this._private__options.lockVisibleTimeRangeOnResize && oldWidth !== 0) {\r\n            // recalculate bar spacing\r\n            const newBarSpacing = this._private__barSpacing * newWidth / oldWidth;\r\n            this._private__barSpacing = newBarSpacing;\r\n        }\r\n        // if time scale is scrolled to the end of data and we have fixed right edge\r\n        // keep left edge instead of right\r\n        // we need it to avoid \"shaking\" if the last bar visibility affects time scale width\r\n        if (this._private__options.fixLeftEdge) {\r\n            // note that logical left range means not the middle of a bar (it's the left border)\r\n            if (previousVisibleRange !== null && previousVisibleRange._internal_left() <= 0) {\r\n                const delta = oldWidth - newWidth;\r\n                // reduce  _rightOffset means move right\r\n                // we could move more than required - this will be fixed by _correctOffset()\r\n                this._private__rightOffset -= Math.round(delta / this._private__barSpacing) + 1;\r\n                this._private__visibleRangeInvalidated = true;\r\n            }\r\n        }\r\n        // updating bar spacing should be first because right offset depends on it\r\n        this._private__correctBarSpacing();\r\n        this._private__correctOffset();\r\n    }\r\n    _internal_indexToCoordinate(index) {\r\n        if (this._internal_isEmpty() || !isInteger(index)) {\r\n            return 0;\r\n        }\r\n        const baseIndex = this._internal_baseIndex();\r\n        const deltaFromRight = baseIndex + this._private__rightOffset - index;\r\n        const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;\r\n        return coordinate;\r\n    }\r\n    _internal_indexesToCoordinates(points, visibleRange) {\r\n        const baseIndex = this._internal_baseIndex();\r\n        const indexFrom = (visibleRange === undefined) ? 0 : visibleRange.from;\r\n        const indexTo = (visibleRange === undefined) ? points.length : visibleRange.to;\r\n        for (let i = indexFrom; i < indexTo; i++) {\r\n            const index = points[i]._internal_time;\r\n            const deltaFromRight = baseIndex + this._private__rightOffset - index;\r\n            const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;\r\n            points[i]._internal_x = coordinate;\r\n        }\r\n    }\r\n    _internal_coordinateToIndex(x, considerIgnoreWhitespace) {\r\n        const index = Math.ceil(this._private__coordinateToFloatIndex(x));\r\n        if (!considerIgnoreWhitespace ||\r\n            !this._private__options.ignoreWhitespaceIndices ||\r\n            this._private__shouldConsiderIndex(index)) {\r\n            return index;\r\n        }\r\n        return this._private__findNearestIndexWithData(index);\r\n    }\r\n    _internal_setRightOffset(offset) {\r\n        this._private__visibleRangeInvalidated = true;\r\n        this._private__rightOffset = offset;\r\n        this._private__correctOffset();\r\n        this._private__model._internal_recalculateAllPanes();\r\n        this._private__model._internal_lightUpdate();\r\n    }\r\n    _internal_barSpacing() {\r\n        return this._private__barSpacing;\r\n    }\r\n    _internal_setBarSpacing(newBarSpacing) {\r\n        this._private__setBarSpacing(newBarSpacing);\r\n        // do not allow scroll out of visible bars\r\n        this._private__correctOffset();\r\n        this._private__model._internal_recalculateAllPanes();\r\n        this._private__model._internal_lightUpdate();\r\n    }\r\n    _internal_rightOffset() {\r\n        return this._private__rightOffset;\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _internal_marks() {\r\n        if (this._internal_isEmpty()) {\r\n            return null;\r\n        }\r\n        if (this._private__timeMarksCache !== null) {\r\n            return this._private__timeMarksCache;\r\n        }\r\n        const spacing = this._private__barSpacing;\r\n        const fontSize = this._private__model._internal_options()['layout'].fontSize;\r\n        const pixelsPer8Characters = (fontSize + 4) * 5;\r\n        const pixelsPerCharacter = pixelsPer8Characters / defaultTickMarkMaxCharacterLength;\r\n        const maxLabelWidth = pixelsPerCharacter * (this._private__options.tickMarkMaxCharacterLength || defaultTickMarkMaxCharacterLength);\r\n        const indexPerLabel = Math.round(maxLabelWidth / spacing);\r\n        const visibleBars = ensureNotNull(this._internal_visibleStrictRange());\r\n        const firstBar = Math.max(visibleBars._internal_left(), visibleBars._internal_left() - indexPerLabel);\r\n        const lastBar = Math.max(visibleBars._internal_right(), visibleBars._internal_right() - indexPerLabel);\r\n        const items = this._private__tickMarks._internal_build(spacing, maxLabelWidth, this._private__options.ignoreWhitespaceIndices, this._private__indicesWithData, this._private__indicesWithDataUpdateId);\r\n        // according to indexPerLabel value this value means \"earliest index which _might be_ used as the second label on time scale\"\r\n        const earliestIndexOfSecondLabel = this._private__firstIndex() + indexPerLabel;\r\n        // according to indexPerLabel value this value means \"earliest index which _might be_ used as the second last label on time scale\"\r\n        const indexOfSecondLastLabel = this._private__lastIndex() - indexPerLabel;\r\n        const isAllScalingAndScrollingDisabled = this._private__isAllScalingAndScrollingDisabled();\r\n        const isLeftEdgeFixed = this._private__options.fixLeftEdge || isAllScalingAndScrollingDisabled;\r\n        const isRightEdgeFixed = this._private__options.fixRightEdge || isAllScalingAndScrollingDisabled;\r\n        let targetIndex = 0;\r\n        for (const tm of items) {\r\n            if (!(firstBar <= tm.index && tm.index <= lastBar)) {\r\n                continue;\r\n            }\r\n            let label;\r\n            if (targetIndex < this._private__labels.length) {\r\n                label = this._private__labels[targetIndex];\r\n                label.coord = this._internal_indexToCoordinate(tm.index);\r\n                label.label = this._private__formatLabel(tm);\r\n                label.weight = tm.weight;\r\n            }\r\n            else {\r\n                label = {\r\n                    needAlignCoordinate: false,\r\n                    coord: this._internal_indexToCoordinate(tm.index),\r\n                    label: this._private__formatLabel(tm),\r\n                    weight: tm.weight,\r\n                };\r\n                this._private__labels.push(label);\r\n            }\r\n            if (this._private__barSpacing > (maxLabelWidth / 2) && !isAllScalingAndScrollingDisabled) {\r\n                // if there is enough space then let's show all tick marks as usual\r\n                label.needAlignCoordinate = false;\r\n            }\r\n            else {\r\n                // if a user is able to scroll after a tick mark then show it as usual, otherwise the coordinate might be aligned\r\n                // if the index is for the second (last) label or later (earlier) then most likely this label might be displayed without correcting the coordinate\r\n                label.needAlignCoordinate = (isLeftEdgeFixed && tm.index <= earliestIndexOfSecondLabel) || (isRightEdgeFixed && tm.index >= indexOfSecondLastLabel);\r\n            }\r\n            targetIndex++;\r\n        }\r\n        this._private__labels.length = targetIndex;\r\n        this._private__timeMarksCache = this._private__labels;\r\n        return this._private__labels;\r\n    }\r\n    _internal_restoreDefault() {\r\n        this._private__visibleRangeInvalidated = true;\r\n        this._internal_setBarSpacing(this._private__options.barSpacing);\r\n        this._internal_setRightOffset(this._private__options.rightOffset);\r\n    }\r\n    _internal_setBaseIndex(baseIndex) {\r\n        this._private__visibleRangeInvalidated = true;\r\n        this._private__baseIndexOrNull = baseIndex;\r\n        this._private__correctOffset();\r\n        this._private__doFixLeftEdge();\r\n    }\r\n    /**\r\n     * Zoom in/out the scale around a `zoomPoint` on `scale` value.\r\n     *\r\n     * @param zoomPoint - X coordinate of the point to apply the zoom.\r\n     * If `rightBarStaysOnScroll` option is disabled, then will be used to restore right offset.\r\n     * @param scale - Zoom value (in 1/10 parts of current bar spacing).\r\n     * Negative value means zoom out, positive - zoom in.\r\n     */\r\n    _internal_zoom(zoomPoint, scale) {\r\n        const floatIndexAtZoomPoint = this._private__coordinateToFloatIndex(zoomPoint);\r\n        const barSpacing = this._internal_barSpacing();\r\n        const newBarSpacing = barSpacing + scale * (barSpacing / 10);\r\n        // zoom in/out bar spacing\r\n        this._internal_setBarSpacing(newBarSpacing);\r\n        if (!this._private__options.rightBarStaysOnScroll) {\r\n            // and then correct right offset to move index under zoomPoint back to its coordinate\r\n            this._internal_setRightOffset(this._internal_rightOffset() + (floatIndexAtZoomPoint - this._private__coordinateToFloatIndex(zoomPoint)));\r\n        }\r\n    }\r\n    _internal_startScale(x) {\r\n        if (this._private__scrollStartPoint) {\r\n            this._internal_endScroll();\r\n        }\r\n        if (this._private__scaleStartPoint !== null || this._private__commonTransitionStartState !== null) {\r\n            return;\r\n        }\r\n        if (this._internal_isEmpty()) {\r\n            return;\r\n        }\r\n        this._private__scaleStartPoint = x;\r\n        this._private__saveCommonTransitionsStartState();\r\n    }\r\n    _internal_scaleTo(x) {\r\n        if (this._private__commonTransitionStartState === null) {\r\n            return;\r\n        }\r\n        const startLengthFromRight = clamp(this._private__width - x, 0, this._private__width);\r\n        const currentLengthFromRight = clamp(this._private__width - ensureNotNull(this._private__scaleStartPoint), 0, this._private__width);\r\n        if (startLengthFromRight === 0 || currentLengthFromRight === 0) {\r\n            return;\r\n        }\r\n        this._internal_setBarSpacing(this._private__commonTransitionStartState._internal_barSpacing * startLengthFromRight / currentLengthFromRight);\r\n    }\r\n    _internal_endScale() {\r\n        if (this._private__scaleStartPoint === null) {\r\n            return;\r\n        }\r\n        this._private__scaleStartPoint = null;\r\n        this._private__clearCommonTransitionsStartState();\r\n    }\r\n    _internal_startScroll(x) {\r\n        if (this._private__scrollStartPoint !== null || this._private__commonTransitionStartState !== null) {\r\n            return;\r\n        }\r\n        if (this._internal_isEmpty()) {\r\n            return;\r\n        }\r\n        this._private__scrollStartPoint = x;\r\n        this._private__saveCommonTransitionsStartState();\r\n    }\r\n    _internal_scrollTo(x) {\r\n        if (this._private__scrollStartPoint === null) {\r\n            return;\r\n        }\r\n        const shiftInLogical = (this._private__scrollStartPoint - x) / this._internal_barSpacing();\r\n        this._private__rightOffset = ensureNotNull(this._private__commonTransitionStartState)._internal_rightOffset + shiftInLogical;\r\n        this._private__visibleRangeInvalidated = true;\r\n        // do not allow scroll out of visible bars\r\n        this._private__correctOffset();\r\n    }\r\n    _internal_endScroll() {\r\n        if (this._private__scrollStartPoint === null) {\r\n            return;\r\n        }\r\n        this._private__scrollStartPoint = null;\r\n        this._private__clearCommonTransitionsStartState();\r\n    }\r\n    _internal_scrollToRealTime() {\r\n        this._internal_scrollToOffsetAnimated(this._private__options.rightOffset);\r\n    }\r\n    _internal_scrollToOffsetAnimated(offset, animationDuration = 400 /* Constants.DefaultAnimationDuration */) {\r\n        if (!isFinite(offset)) {\r\n            throw new RangeError('offset is required and must be finite number');\r\n        }\r\n        if (!isFinite(animationDuration) || animationDuration <= 0) {\r\n            throw new RangeError('animationDuration (optional) must be finite positive number');\r\n        }\r\n        const source = this._private__rightOffset;\r\n        const animationStart = performance.now();\r\n        this._private__model._internal_setTimeScaleAnimation({\r\n            _internal_finished: (time) => (time - animationStart) / animationDuration >= 1,\r\n            _internal_getPosition: (time) => {\r\n                const animationProgress = (time - animationStart) / animationDuration;\r\n                const finishAnimation = animationProgress >= 1;\r\n                return finishAnimation ? offset : source + (offset - source) * animationProgress;\r\n            },\r\n        });\r\n    }\r\n    _internal_update(newPoints, firstChangedPointIndex) {\r\n        this._private__visibleRangeInvalidated = true;\r\n        this._private__points = newPoints;\r\n        this._private__tickMarks._internal_setTimeScalePoints(newPoints, firstChangedPointIndex);\r\n        this._private__correctOffset();\r\n    }\r\n    _internal_visibleBarsChanged() {\r\n        return this._private__visibleBarsChanged;\r\n    }\r\n    _internal_logicalRangeChanged() {\r\n        return this._private__logicalRangeChanged;\r\n    }\r\n    _internal_optionsApplied() {\r\n        return this._private__optionsApplied;\r\n    }\r\n    _internal_baseIndex() {\r\n        // null is used to known that baseIndex is not set yet\r\n        // so in methods which should known whether it is set or not\r\n        // we should check field `_baseIndexOrNull` instead of getter `baseIndex()`\r\n        // see minRightOffset for example\r\n        return this._private__baseIndexOrNull || 0;\r\n    }\r\n    _internal_setVisibleRange(range) {\r\n        const length = range._internal_count();\r\n        this._private__setBarSpacing(this._private__width / length);\r\n        this._private__rightOffset = range._internal_right() - this._internal_baseIndex();\r\n        this._private__correctOffset();\r\n        this._private__visibleRangeInvalidated = true;\r\n        this._private__model._internal_recalculateAllPanes();\r\n        this._private__model._internal_lightUpdate();\r\n    }\r\n    _internal_fitContent() {\r\n        const first = this._private__firstIndex();\r\n        const last = this._private__lastIndex();\r\n        if (first === null || last === null) {\r\n            return;\r\n        }\r\n        this._internal_setVisibleRange(new RangeImpl(first, last + this._private__options.rightOffset));\r\n    }\r\n    _internal_setLogicalRange(range) {\r\n        const barRange = new RangeImpl(range.from, range.to);\r\n        this._internal_setVisibleRange(barRange);\r\n    }\r\n    _internal_formatDateTime(timeScalePoint) {\r\n        if (this._private__localizationOptions.timeFormatter !== undefined) {\r\n            return this._private__localizationOptions.timeFormatter(timeScalePoint.originalTime);\r\n        }\r\n        return this._private__horzScaleBehavior.formatHorzItem(timeScalePoint.time);\r\n    }\r\n    _internal_recalculateIndicesWithData() {\r\n        if (!this._private__options.ignoreWhitespaceIndices) {\r\n            return;\r\n        }\r\n        this._private__indicesWithData.clear();\r\n        const series = this._private__model._internal_serieses();\r\n        for (const s of series) {\r\n            for (const index of s._internal_fulfilledIndices()) {\r\n                this._private__indicesWithData.set(index, true);\r\n            }\r\n        }\r\n        this._private__indicesWithDataUpdateId++;\r\n    }\r\n    _private__isAllScalingAndScrollingDisabled() {\r\n        const handleScroll = this._private__model._internal_options()['handleScroll'];\r\n        const handleScale = this._private__model._internal_options()['handleScale'];\r\n        return !handleScroll.horzTouchDrag\r\n            && !handleScroll.mouseWheel\r\n            && !handleScroll.pressedMouseMove\r\n            && !handleScroll.vertTouchDrag\r\n            && !handleScale.axisDoubleClickReset.time\r\n            && !handleScale.axisPressedMouseMove.time\r\n            && !handleScale.mouseWheel\r\n            && !handleScale.pinch;\r\n    }\r\n    _private__firstIndex() {\r\n        return this._private__points.length === 0 ? null : 0;\r\n    }\r\n    _private__lastIndex() {\r\n        return this._private__points.length === 0 ? null : (this._private__points.length - 1);\r\n    }\r\n    _private__rightOffsetForCoordinate(x) {\r\n        return (this._private__width - 1 - x) / this._private__barSpacing;\r\n    }\r\n    _private__coordinateToFloatIndex(x) {\r\n        const deltaFromRight = this._private__rightOffsetForCoordinate(x);\r\n        const baseIndex = this._internal_baseIndex();\r\n        const index = baseIndex + this._private__rightOffset - deltaFromRight;\r\n        // JavaScript uses very strange rounding\r\n        // we need rounding to avoid problems with calculation errors\r\n        return Math.round(index * 1000000) / 1000000;\r\n    }\r\n    _private__setBarSpacing(newBarSpacing) {\r\n        const oldBarSpacing = this._private__barSpacing;\r\n        this._private__barSpacing = newBarSpacing;\r\n        this._private__correctBarSpacing();\r\n        // this._barSpacing might be changed in _correctBarSpacing\r\n        if (oldBarSpacing !== this._private__barSpacing) {\r\n            this._private__visibleRangeInvalidated = true;\r\n            this._private__resetTimeMarksCache();\r\n        }\r\n    }\r\n    _private__updateVisibleRange() {\r\n        if (!this._private__visibleRangeInvalidated) {\r\n            return;\r\n        }\r\n        this._private__visibleRangeInvalidated = false;\r\n        if (this._internal_isEmpty()) {\r\n            this._private__setVisibleRange(TimeScaleVisibleRange._internal_invalid());\r\n            return;\r\n        }\r\n        const baseIndex = this._internal_baseIndex();\r\n        const newBarsLength = this._private__width / this._private__barSpacing;\r\n        const rightBorder = this._private__rightOffset + baseIndex;\r\n        const leftBorder = rightBorder - newBarsLength + 1;\r\n        const logicalRange = new RangeImpl(leftBorder, rightBorder);\r\n        this._private__setVisibleRange(new TimeScaleVisibleRange(logicalRange));\r\n    }\r\n    _private__correctBarSpacing() {\r\n        const barSpacing = clamp(this._private__barSpacing, this._private__minBarSpacing(), this._private__maxBarSpacing());\r\n        if (this._private__barSpacing !== barSpacing) {\r\n            this._private__barSpacing = barSpacing;\r\n            this._private__visibleRangeInvalidated = true;\r\n        }\r\n    }\r\n    _private__maxBarSpacing() {\r\n        if (this._private__options.maxBarSpacing > 0) {\r\n            // option takes precedance\r\n            return this._private__options.maxBarSpacing;\r\n        }\r\n        else {\r\n            // half of the width is default value for maximum bar spacing\r\n            return this._private__width * 0.5;\r\n        }\r\n    }\r\n    _private__minBarSpacing() {\r\n        // if both options are enabled then limit bar spacing so that zooming-out is not possible\r\n        // if it would cause either the first or last points to move too far from an edge\r\n        if (this._private__options.fixLeftEdge && this._private__options.fixRightEdge && this._private__points.length !== 0) {\r\n            return this._private__width / this._private__points.length;\r\n        }\r\n        return this._private__options.minBarSpacing;\r\n    }\r\n    _private__correctOffset() {\r\n        // block scrolling of to past\r\n        const minRightOffset = this._private__minRightOffset();\r\n        if (minRightOffset !== null && this._private__rightOffset < minRightOffset) {\r\n            this._private__rightOffset = minRightOffset;\r\n            this._private__visibleRangeInvalidated = true;\r\n        }\r\n        // block scrolling of to future\r\n        const maxRightOffset = this._private__maxRightOffset();\r\n        if (this._private__rightOffset > maxRightOffset) {\r\n            this._private__rightOffset = maxRightOffset;\r\n            this._private__visibleRangeInvalidated = true;\r\n        }\r\n    }\r\n    _private__minRightOffset() {\r\n        const firstIndex = this._private__firstIndex();\r\n        const baseIndex = this._private__baseIndexOrNull;\r\n        if (firstIndex === null || baseIndex === null) {\r\n            return null;\r\n        }\r\n        const barsEstimation = this._private__options.fixLeftEdge\r\n            ? this._private__width / this._private__barSpacing\r\n            : Math.min(2 /* Constants.MinVisibleBarsCount */, this._private__points.length);\r\n        return firstIndex - baseIndex - 1 + barsEstimation;\r\n    }\r\n    _private__maxRightOffset() {\r\n        return this._private__options.fixRightEdge\r\n            ? 0\r\n            : (this._private__width / this._private__barSpacing) - Math.min(2 /* Constants.MinVisibleBarsCount */, this._private__points.length);\r\n    }\r\n    _private__saveCommonTransitionsStartState() {\r\n        this._private__commonTransitionStartState = {\r\n            _internal_barSpacing: this._internal_barSpacing(),\r\n            _internal_rightOffset: this._internal_rightOffset(),\r\n        };\r\n    }\r\n    _private__clearCommonTransitionsStartState() {\r\n        this._private__commonTransitionStartState = null;\r\n    }\r\n    _private__formatLabel(tickMark) {\r\n        let formatter = this._private__formattedByWeight.get(tickMark.weight);\r\n        if (formatter === undefined) {\r\n            formatter = new FormattedLabelsCache((mark) => {\r\n                return this._private__formatLabelImpl(mark);\r\n            }, this._private__horzScaleBehavior);\r\n            this._private__formattedByWeight.set(tickMark.weight, formatter);\r\n        }\r\n        return formatter._internal_format(tickMark);\r\n    }\r\n    _private__formatLabelImpl(tickMark) {\r\n        return this._private__horzScaleBehavior.formatTickmark(tickMark, this._private__localizationOptions);\r\n    }\r\n    _private__setVisibleRange(newVisibleRange) {\r\n        const oldVisibleRange = this._private__visibleRange;\r\n        this._private__visibleRange = newVisibleRange;\r\n        if (!areRangesEqual(oldVisibleRange._internal_strictRange(), this._private__visibleRange._internal_strictRange())) {\r\n            this._private__visibleBarsChanged._internal_fire();\r\n        }\r\n        if (!areRangesEqual(oldVisibleRange._internal_logicalRange(), this._private__visibleRange._internal_logicalRange())) {\r\n            this._private__logicalRangeChanged._internal_fire();\r\n        }\r\n        // TODO: reset only coords in case when this._visibleBars has not been changed\r\n        this._private__resetTimeMarksCache();\r\n    }\r\n    _private__resetTimeMarksCache() {\r\n        this._private__timeMarksCache = null;\r\n    }\r\n    _private__invalidateTickMarks() {\r\n        this._private__resetTimeMarksCache();\r\n        this._private__formattedByWeight.clear();\r\n    }\r\n    _private__updateDateTimeFormatter() {\r\n        this._private__horzScaleBehavior.updateFormatter(this._private__localizationOptions);\r\n    }\r\n    _private__doFixLeftEdge() {\r\n        if (!this._private__options.fixLeftEdge) {\r\n            return;\r\n        }\r\n        const firstIndex = this._private__firstIndex();\r\n        if (firstIndex === null) {\r\n            return;\r\n        }\r\n        const visibleRange = this._internal_visibleStrictRange();\r\n        if (visibleRange === null) {\r\n            return;\r\n        }\r\n        const delta = visibleRange._internal_left() - firstIndex;\r\n        if (delta < 0) {\r\n            const leftEdgeOffset = this._private__rightOffset - delta - 1;\r\n            this._internal_setRightOffset(leftEdgeOffset);\r\n        }\r\n        this._private__correctBarSpacing();\r\n    }\r\n    _private__doFixRightEdge() {\r\n        this._private__correctOffset();\r\n        this._private__correctBarSpacing();\r\n    }\r\n    _private__shouldConsiderIndex(index) {\r\n        if (!this._private__options.ignoreWhitespaceIndices) {\r\n            return true;\r\n        }\r\n        return this._private__indicesWithData.get(index) || false;\r\n    }\r\n    _private__findNearestIndexWithData(x) {\r\n        const gen = testNearestIntegers(x);\r\n        const maxIndex = this._private__lastIndex();\r\n        while (maxIndex) {\r\n            const index = gen.next().value;\r\n            if (this._private__indicesWithData.get(index)) {\r\n                return index;\r\n            }\r\n            if (index < 0 || index > maxIndex) {\r\n                break;\r\n            }\r\n        }\r\n        return x; // fallback to original index\r\n    }\r\n}\r\nfunction* testNearestIntegers(num) {\r\n    const rounded = Math.round(num);\r\n    const isRoundedDown = rounded < num;\r\n    let offset = 1;\r\n    while (true) {\r\n        if (isRoundedDown) {\r\n            yield rounded + offset;\r\n            yield rounded - offset;\r\n        }\r\n        else {\r\n            yield rounded - offset;\r\n            yield rounded + offset;\r\n        }\r\n        offset++;\r\n    }\r\n}\r\n\r\n/// <reference types=\"_build-time-constants\" />\r\n/**\r\n * Determine how to exit the tracking mode.\r\n *\r\n * By default, mobile users will long press to deactivate the scroll and have the ability to check values and dates.\r\n * Another press is required to activate the scroll, be able to move left/right, zoom, etc.\r\n */\r\nvar TrackingModeExitMode;\r\n(function (TrackingModeExitMode) {\r\n    /**\r\n     * Tracking Mode will be deactivated on touch end event.\r\n     */\r\n    TrackingModeExitMode[TrackingModeExitMode[\"OnTouchEnd\"] = 0] = \"OnTouchEnd\";\r\n    /**\r\n     * Tracking Mode will be deactivated on the next tap event.\r\n     */\r\n    TrackingModeExitMode[TrackingModeExitMode[\"OnNextTap\"] = 1] = \"OnNextTap\";\r\n})(TrackingModeExitMode || (TrackingModeExitMode = {}));\r\nfunction isPanePrimitive(source) {\r\n    return source instanceof Pane;\r\n}\r\nclass ChartModel {\r\n    constructor(invalidateHandler, options, horzScaleBehavior) {\r\n        this._private__panes = [];\r\n        this._private__serieses = [];\r\n        this._private__width = 0;\r\n        this._private__hoveredSource = null;\r\n        this._private__priceScalesOptionsChanged = new Delegate();\r\n        this._private__crosshairMoved = new Delegate();\r\n        this._private__gradientColorsCache = null;\r\n        this._private__invalidateHandler = invalidateHandler;\r\n        this._private__options = options;\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n        this._private__colorParser = new ColorParser(this._private__options.layout.colorParsers);\r\n        this._private__rendererOptionsProvider = new PriceAxisRendererOptionsProvider(this);\r\n        this._private__timeScale = new TimeScale(this, options.timeScale, this._private__options.localization, horzScaleBehavior);\r\n        this._private__crosshair = new Crosshair(this, options.crosshair);\r\n        this._private__magnet = new Magnet(options.crosshair);\r\n        if (options.addDefaultPane) {\r\n            this._private__getOrCreatePane(0);\r\n            this._private__panes[0]._internal_setStretchFactor(DEFAULT_STRETCH_FACTOR * 2);\r\n        }\r\n        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */);\r\n        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */);\r\n    }\r\n    _internal_fullUpdate() {\r\n        this._private__invalidate(InvalidateMask._internal_full());\r\n    }\r\n    _internal_lightUpdate() {\r\n        this._private__invalidate(InvalidateMask._internal_light());\r\n    }\r\n    _internal_cursorUpdate() {\r\n        this._private__invalidate(new InvalidateMask(1 /* InvalidationLevel.Cursor */));\r\n    }\r\n    _internal_updateSource(source) {\r\n        const inv = this._private__invalidationMaskForSource(source);\r\n        this._private__invalidate(inv);\r\n    }\r\n    _internal_hoveredSource() {\r\n        return this._private__hoveredSource;\r\n    }\r\n    _internal_setHoveredSource(source) {\r\n        if (this._private__hoveredSource?._internal_source === source?._internal_source && this._private__hoveredSource?._internal_object?._internal_externalId === source?._internal_object?._internal_externalId) {\r\n            return;\r\n        }\r\n        const prevSource = this._private__hoveredSource;\r\n        this._private__hoveredSource = source;\r\n        if (prevSource !== null) {\r\n            this._internal_updateSource(prevSource._internal_source);\r\n        }\r\n        // additional check to prevent unnecessary updates of same source\r\n        if (source !== null && source._internal_source !== prevSource?._internal_source) {\r\n            this._internal_updateSource(source._internal_source);\r\n        }\r\n    }\r\n    _internal_options() {\r\n        return this._private__options;\r\n    }\r\n    _internal_applyOptions(options) {\r\n        merge(this._private__options, options);\r\n        this._private__panes.forEach((p) => p._internal_applyScaleOptions(options));\r\n        if (options.timeScale !== undefined) {\r\n            this._private__timeScale._internal_applyOptions(options.timeScale);\r\n        }\r\n        if (options.localization !== undefined) {\r\n            this._private__timeScale._internal_applyLocalizationOptions(options.localization);\r\n        }\r\n        if (options.leftPriceScale || options.rightPriceScale) {\r\n            this._private__priceScalesOptionsChanged._internal_fire();\r\n        }\r\n        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */);\r\n        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */);\r\n        this._internal_fullUpdate();\r\n    }\r\n    _internal_applyPriceScaleOptions(priceScaleId, options, paneIndex = 0) {\r\n        const pane = this._private__panes[paneIndex];\r\n        if (pane === undefined) {\r\n            {\r\n                throw new Error(`Trying to apply price scale options with incorrect pane index: ${paneIndex}`);\r\n            }\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        if (priceScaleId === \"left\" /* DefaultPriceScaleId.Left */) {\r\n            merge(this._private__options, {\r\n                leftPriceScale: options,\r\n            });\r\n            pane._internal_applyScaleOptions({\r\n                leftPriceScale: options,\r\n            });\r\n            this._private__priceScalesOptionsChanged._internal_fire();\r\n            this._internal_fullUpdate();\r\n            return;\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        }\r\n        else if (priceScaleId === \"right\" /* DefaultPriceScaleId.Right */) {\r\n            merge(this._private__options, {\r\n                rightPriceScale: options,\r\n            });\r\n            pane._internal_applyScaleOptions({\r\n                rightPriceScale: options,\r\n            });\r\n            this._private__priceScalesOptionsChanged._internal_fire();\r\n            this._internal_fullUpdate();\r\n            return;\r\n        }\r\n        const res = this._internal_findPriceScale(priceScaleId, paneIndex);\r\n        if (res === null) {\r\n            {\r\n                throw new Error(`Trying to apply price scale options with incorrect ID: ${priceScaleId}`);\r\n            }\r\n        }\r\n        res._internal_priceScale._internal_applyOptions(options);\r\n        this._private__priceScalesOptionsChanged._internal_fire();\r\n    }\r\n    _internal_findPriceScale(priceScaleId, paneIndex) {\r\n        const pane = this._private__panes[paneIndex];\r\n        if (pane === undefined) {\r\n            return null;\r\n        }\r\n        const priceScale = pane._internal_priceScaleById(priceScaleId);\r\n        if (priceScale !== null) {\r\n            return {\r\n                _internal_pane: pane,\r\n                _internal_priceScale: priceScale,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    _internal_timeScale() {\r\n        return this._private__timeScale;\r\n    }\r\n    _internal_panes() {\r\n        return this._private__panes;\r\n    }\r\n    _internal_crosshairSource() {\r\n        return this._private__crosshair;\r\n    }\r\n    _internal_crosshairMoved() {\r\n        return this._private__crosshairMoved;\r\n    }\r\n    _internal_setPaneHeight(pane, height) {\r\n        pane._internal_setHeight(height);\r\n        this._internal_recalculateAllPanes();\r\n    }\r\n    _internal_setWidth(width) {\r\n        this._private__width = width;\r\n        this._private__timeScale._internal_setWidth(this._private__width);\r\n        this._private__panes.forEach((pane) => pane._internal_setWidth(width));\r\n        this._internal_recalculateAllPanes();\r\n    }\r\n    _internal_removePane(index) {\r\n        if (this._private__panes.length === 1) {\r\n            return;\r\n        }\r\n        assert(index >= 0 && index < this._private__panes.length, 'Invalid pane index');\r\n        this._private__panes.splice(index, 1);\r\n        this._internal_fullUpdate();\r\n    }\r\n    _internal_changePanesHeight(paneIndex, height) {\r\n        if (this._private__panes.length < 2) {\r\n            return;\r\n        }\r\n        assert(paneIndex >= 0 && paneIndex < this._private__panes.length, 'Invalid pane index');\r\n        const targetPane = this._private__panes[paneIndex];\r\n        const totalStretch = this._private__panes.reduce((prevValue, pane) => prevValue + pane._internal_stretchFactor(), 0);\r\n        const totalHeight = this._private__panes.reduce((prevValue, pane) => prevValue + pane._internal_height(), 0);\r\n        const maxPaneHeight = totalHeight - MIN_PANE_HEIGHT * (this._private__panes.length - 1);\r\n        height = Math.min(maxPaneHeight, Math.max(MIN_PANE_HEIGHT, height));\r\n        const pixelStretchFactor = totalStretch / totalHeight;\r\n        const oldHeight = targetPane._internal_height();\r\n        targetPane._internal_setStretchFactor(height * pixelStretchFactor);\r\n        let otherPanesChange = height - oldHeight;\r\n        let panesCount = this._private__panes.length - 1;\r\n        for (const pane of this._private__panes) {\r\n            if (pane !== targetPane) {\r\n                const newPaneHeight = Math.min(maxPaneHeight, Math.max(30, pane._internal_height() - otherPanesChange / panesCount));\r\n                otherPanesChange -= (pane._internal_height() - newPaneHeight);\r\n                panesCount -= 1;\r\n                const newStretchFactor = newPaneHeight * pixelStretchFactor;\r\n                pane._internal_setStretchFactor(newStretchFactor);\r\n            }\r\n        }\r\n        this._internal_fullUpdate();\r\n    }\r\n    _internal_swapPanes(first, second) {\r\n        assert(first >= 0 && first < this._private__panes.length && second >= 0 && second < this._private__panes.length, 'Invalid pane index');\r\n        const firstPane = this._private__panes[first];\r\n        const secondPane = this._private__panes[second];\r\n        this._private__panes[first] = secondPane;\r\n        this._private__panes[second] = firstPane;\r\n        this._internal_fullUpdate();\r\n    }\r\n    _internal_movePane(from, to) {\r\n        assert(from >= 0 && from < this._private__panes.length && to >= 0 && to < this._private__panes.length, 'Invalid pane index');\r\n        if (from === to) {\r\n            return;\r\n        }\r\n        const [paneToMove] = this._private__panes.splice(from, 1);\r\n        this._private__panes.splice(to, 0, paneToMove);\r\n        this._internal_fullUpdate();\r\n    }\r\n    _internal_startScalePrice(pane, priceScale, x) {\r\n        pane._internal_startScalePrice(priceScale, x);\r\n    }\r\n    _internal_scalePriceTo(pane, priceScale, x) {\r\n        pane._internal_scalePriceTo(priceScale, x);\r\n        this._internal_updateCrosshair();\r\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));\r\n    }\r\n    _internal_endScalePrice(pane, priceScale) {\r\n        pane._internal_endScalePrice(priceScale);\r\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));\r\n    }\r\n    _internal_startScrollPrice(pane, priceScale, x) {\r\n        if (priceScale._internal_isAutoScale()) {\r\n            return;\r\n        }\r\n        pane._internal_startScrollPrice(priceScale, x);\r\n    }\r\n    _internal_scrollPriceTo(pane, priceScale, x) {\r\n        if (priceScale._internal_isAutoScale()) {\r\n            return;\r\n        }\r\n        pane._internal_scrollPriceTo(priceScale, x);\r\n        this._internal_updateCrosshair();\r\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));\r\n    }\r\n    _internal_endScrollPrice(pane, priceScale) {\r\n        if (priceScale._internal_isAutoScale()) {\r\n            return;\r\n        }\r\n        pane._internal_endScrollPrice(priceScale);\r\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));\r\n    }\r\n    _internal_resetPriceScale(pane, priceScale) {\r\n        pane._internal_resetPriceScale(priceScale);\r\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */));\r\n    }\r\n    _internal_startScaleTime(position) {\r\n        this._private__timeScale._internal_startScale(position);\r\n    }\r\n    /**\r\n     * Zoom in/out the chart (depends on scale value).\r\n     *\r\n     * @param pointX - X coordinate of the point to apply the zoom (the point which should stay on its place)\r\n     * @param scale - Zoom value. Negative value means zoom out, positive - zoom in.\r\n     */\r\n    _internal_zoomTime(pointX, scale) {\r\n        const timeScale = this._internal_timeScale();\r\n        if (timeScale._internal_isEmpty() || scale === 0) {\r\n            return;\r\n        }\r\n        const timeScaleWidth = timeScale._internal_width();\r\n        pointX = Math.max(1, Math.min(pointX, timeScaleWidth));\r\n        timeScale._internal_zoom(pointX, scale);\r\n        this._internal_recalculateAllPanes();\r\n    }\r\n    _internal_scrollChart(x) {\r\n        this._internal_startScrollTime(0);\r\n        this._internal_scrollTimeTo(x);\r\n        this._internal_endScrollTime();\r\n    }\r\n    _internal_scaleTimeTo(x) {\r\n        this._private__timeScale._internal_scaleTo(x);\r\n        this._internal_recalculateAllPanes();\r\n    }\r\n    _internal_endScaleTime() {\r\n        this._private__timeScale._internal_endScale();\r\n        this._internal_lightUpdate();\r\n    }\r\n    _internal_startScrollTime(x) {\r\n        this._private__timeScale._internal_startScroll(x);\r\n    }\r\n    _internal_scrollTimeTo(x) {\r\n        this._private__timeScale._internal_scrollTo(x);\r\n        this._internal_recalculateAllPanes();\r\n    }\r\n    _internal_endScrollTime() {\r\n        this._private__timeScale._internal_endScroll();\r\n        this._internal_lightUpdate();\r\n    }\r\n    _internal_serieses() {\r\n        return this._private__serieses;\r\n    }\r\n    _internal_setAndSaveCurrentPosition(x, y, event, pane, skipEvent) {\r\n        this._private__crosshair._internal_saveOriginCoord(x, y);\r\n        let price = NaN;\r\n        let index = this._private__timeScale._internal_coordinateToIndex(x, true);\r\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\r\n        if (visibleBars !== null) {\r\n            index = Math.min(Math.max(visibleBars._internal_left(), index), visibleBars._internal_right());\r\n        }\r\n        const priceScale = pane._internal_defaultPriceScale();\r\n        const firstValue = priceScale._internal_firstValue();\r\n        if (firstValue !== null) {\r\n            price = priceScale._internal_coordinateToPrice(y, firstValue);\r\n        }\r\n        price = this._private__magnet._internal_align(price, index, pane);\r\n        this._private__crosshair._internal_setPosition(index, price, pane);\r\n        this._internal_cursorUpdate();\r\n        if (!skipEvent) {\r\n            const hitTest = hitTestPane(pane, x, y);\r\n            this._internal_setHoveredSource(hitTest && { _internal_source: hitTest._internal_source, _internal_object: hitTest._internal_object, _internal_cursorStyle: hitTest._internal_cursorStyle || null });\r\n            this._private__crosshairMoved._internal_fire(this._private__crosshair._internal_appliedIndex(), { x, y }, event);\r\n        }\r\n    }\r\n    // A position provided external (not from an internal event listener)\r\n    _internal_setAndSaveSyntheticPosition(price, horizontalPosition, pane) {\r\n        const priceScale = pane._internal_defaultPriceScale();\r\n        const firstValue = priceScale._internal_firstValue();\r\n        const y = priceScale._internal_priceToCoordinate(price, ensureNotNull(firstValue));\r\n        const index = this._private__timeScale._internal_timeToIndex(horizontalPosition, true);\r\n        const x = this._private__timeScale._internal_indexToCoordinate(ensureNotNull(index));\r\n        this._internal_setAndSaveCurrentPosition(x, y, null, pane, true);\r\n    }\r\n    _internal_clearCurrentPosition(skipEvent) {\r\n        const crosshair = this._internal_crosshairSource();\r\n        crosshair._internal_clearPosition();\r\n        this._internal_cursorUpdate();\r\n        if (!skipEvent) {\r\n            this._private__crosshairMoved._internal_fire(null, null, null);\r\n        }\r\n    }\r\n    _internal_updateCrosshair() {\r\n        // apply magnet\r\n        const pane = this._private__crosshair._internal_pane();\r\n        if (pane !== null) {\r\n            const x = this._private__crosshair._internal_originCoordX();\r\n            const y = this._private__crosshair._internal_originCoordY();\r\n            this._internal_setAndSaveCurrentPosition(x, y, null, pane);\r\n        }\r\n        this._private__crosshair._internal_updateAllViews();\r\n    }\r\n    _internal_updateTimeScale(newBaseIndex, newPoints, firstChangedPointIndex) {\r\n        const oldFirstTime = this._private__timeScale._internal_indexToTime(0);\r\n        if (newPoints !== undefined && firstChangedPointIndex !== undefined) {\r\n            this._private__timeScale._internal_update(newPoints, firstChangedPointIndex);\r\n        }\r\n        const newFirstTime = this._private__timeScale._internal_indexToTime(0);\r\n        const currentBaseIndex = this._private__timeScale._internal_baseIndex();\r\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\r\n        // if time scale cannot return current visible bars range (e.g. time scale has zero-width)\r\n        // then we do not need to update right offset to shift visible bars range to have the same right offset as we have before new bar\r\n        // (and actually we cannot)\r\n        if (visibleBars !== null && oldFirstTime !== null && newFirstTime !== null) {\r\n            const isLastSeriesBarVisible = visibleBars._internal_contains(currentBaseIndex);\r\n            const isLeftBarShiftToLeft = this._private__horzScaleBehavior.key(oldFirstTime) > this._private__horzScaleBehavior.key(newFirstTime);\r\n            const isSeriesPointsAdded = newBaseIndex !== null && newBaseIndex > currentBaseIndex;\r\n            const isSeriesPointsAddedToRight = isSeriesPointsAdded && !isLeftBarShiftToLeft;\r\n            const allowShiftWhenReplacingWhitespace = this._private__timeScale._internal_options().allowShiftVisibleRangeOnWhitespaceReplacement;\r\n            const replacedExistingWhitespace = firstChangedPointIndex === undefined;\r\n            const needShiftVisibleRangeOnNewBar = isLastSeriesBarVisible && (!replacedExistingWhitespace || allowShiftWhenReplacingWhitespace) && this._private__timeScale._internal_options().shiftVisibleRangeOnNewBar;\r\n            if (isSeriesPointsAddedToRight && !needShiftVisibleRangeOnNewBar) {\r\n                const compensationShift = newBaseIndex - currentBaseIndex;\r\n                this._private__timeScale._internal_setRightOffset(this._private__timeScale._internal_rightOffset() - compensationShift);\r\n            }\r\n        }\r\n        this._private__timeScale._internal_setBaseIndex(newBaseIndex);\r\n    }\r\n    _internal_recalculatePane(pane) {\r\n        if (pane !== null) {\r\n            pane._internal_recalculate();\r\n        }\r\n    }\r\n    _internal_paneForSource(source) {\r\n        if (isPanePrimitive(source)) {\r\n            return source;\r\n        }\r\n        const pane = this._private__panes.find((p) => p._internal_orderedSources().includes(source));\r\n        return pane === undefined ? null : pane;\r\n    }\r\n    _internal_recalculateAllPanes() {\r\n        this._private__panes.forEach((p) => p._internal_recalculate());\r\n        this._internal_updateCrosshair();\r\n    }\r\n    _internal_destroy() {\r\n        this._private__panes.forEach((p) => p._internal_destroy());\r\n        this._private__panes.length = 0;\r\n        // to avoid memleaks\r\n        this._private__options.localization.priceFormatter = undefined;\r\n        this._private__options.localization.percentageFormatter = undefined;\r\n        this._private__options.localization.timeFormatter = undefined;\r\n    }\r\n    _internal_rendererOptionsProvider() {\r\n        return this._private__rendererOptionsProvider;\r\n    }\r\n    _internal_priceAxisRendererOptions() {\r\n        return this._private__rendererOptionsProvider._internal_options();\r\n    }\r\n    _internal_priceScalesOptionsChanged() {\r\n        return this._private__priceScalesOptionsChanged;\r\n    }\r\n    _internal_addSeriesToPane(series, paneIndex) {\r\n        const pane = this._private__getOrCreatePane(paneIndex);\r\n        this._private__addSeriesToPane(series, pane);\r\n        this._private__serieses.push(series);\r\n        if (this._private__serieses.length === 1) {\r\n            // call fullUpdate to recalculate chart's parts geometry\r\n            this._internal_fullUpdate();\r\n        }\r\n        else {\r\n            this._internal_lightUpdate();\r\n        }\r\n    }\r\n    _internal_removeSeries(series) {\r\n        const pane = this._internal_paneForSource(series);\r\n        const seriesIndex = this._private__serieses.indexOf(series);\r\n        assert(seriesIndex !== -1, 'Series not found');\r\n        const paneImpl = ensureNotNull(pane);\r\n        this._private__serieses.splice(seriesIndex, 1);\r\n        paneImpl._internal_removeDataSource(series);\r\n        if (series._internal_destroy) {\r\n            series._internal_destroy();\r\n        }\r\n        this._private__timeScale._internal_recalculateIndicesWithData();\r\n        this._private__cleanupIfPaneIsEmpty(paneImpl);\r\n    }\r\n    _internal_moveSeriesToScale(series, targetScaleId) {\r\n        const pane = ensureNotNull(this._internal_paneForSource(series));\r\n        pane._internal_removeDataSource(series, true);\r\n        pane._internal_addDataSource(series, targetScaleId, true);\r\n    }\r\n    _internal_fitContent() {\r\n        const mask = InvalidateMask._internal_light();\r\n        mask._internal_setFitContent();\r\n        this._private__invalidate(mask);\r\n    }\r\n    _internal_setTargetLogicalRange(range) {\r\n        const mask = InvalidateMask._internal_light();\r\n        mask._internal_applyRange(range);\r\n        this._private__invalidate(mask);\r\n    }\r\n    _internal_resetTimeScale() {\r\n        const mask = InvalidateMask._internal_light();\r\n        mask._internal_resetTimeScale();\r\n        this._private__invalidate(mask);\r\n    }\r\n    _internal_setBarSpacing(spacing) {\r\n        const mask = InvalidateMask._internal_light();\r\n        mask._internal_setBarSpacing(spacing);\r\n        this._private__invalidate(mask);\r\n    }\r\n    _internal_setRightOffset(offset) {\r\n        const mask = InvalidateMask._internal_light();\r\n        mask._internal_setRightOffset(offset);\r\n        this._private__invalidate(mask);\r\n    }\r\n    _internal_setTimeScaleAnimation(animation) {\r\n        const mask = InvalidateMask._internal_light();\r\n        mask._internal_setTimeScaleAnimation(animation);\r\n        this._private__invalidate(mask);\r\n    }\r\n    _internal_stopTimeScaleAnimation() {\r\n        const mask = InvalidateMask._internal_light();\r\n        mask._internal_stopTimeScaleAnimation();\r\n        this._private__invalidate(mask);\r\n    }\r\n    _internal_defaultVisiblePriceScaleId() {\r\n        return this._private__options.rightPriceScale.visible ? \"right\" /* DefaultPriceScaleId.Right */ : \"left\" /* DefaultPriceScaleId.Left */;\r\n    }\r\n    _internal_moveSeriesToPane(series, newPaneIndex) {\r\n        assert(newPaneIndex >= 0, 'Index should be greater or equal to 0');\r\n        const fromPaneIndex = this._private__seriesPaneIndex(series);\r\n        if (newPaneIndex === fromPaneIndex) {\r\n            return;\r\n        }\r\n        const previousPane = ensureNotNull(this._internal_paneForSource(series));\r\n        previousPane._internal_removeDataSource(series);\r\n        const newPane = this._private__getOrCreatePane(newPaneIndex);\r\n        this._private__addSeriesToPane(series, newPane);\r\n        if (previousPane._internal_dataSources().length === 0) {\r\n            this._private__cleanupIfPaneIsEmpty(previousPane);\r\n        }\r\n        this._internal_fullUpdate();\r\n    }\r\n    _internal_backgroundBottomColor() {\r\n        return this._private__backgroundBottomColor;\r\n    }\r\n    _internal_backgroundTopColor() {\r\n        return this._private__backgroundTopColor;\r\n    }\r\n    _internal_backgroundColorAtYPercentFromTop(percent) {\r\n        const bottomColor = this._private__backgroundBottomColor;\r\n        const topColor = this._private__backgroundTopColor;\r\n        if (bottomColor === topColor) {\r\n            // solid background\r\n            return bottomColor;\r\n        }\r\n        // gradient background\r\n        // percent should be from 0 to 100 (we're using only integer values to make cache more efficient)\r\n        percent = Math.max(0, Math.min(100, Math.round(percent * 100)));\r\n        if (this._private__gradientColorsCache === null ||\r\n            this._private__gradientColorsCache._internal_topColor !== topColor || this._private__gradientColorsCache._internal_bottomColor !== bottomColor) {\r\n            this._private__gradientColorsCache = {\r\n                _internal_topColor: topColor,\r\n                _internal_bottomColor: bottomColor,\r\n                _internal_colors: new Map(),\r\n            };\r\n        }\r\n        else {\r\n            const cachedValue = this._private__gradientColorsCache._internal_colors.get(percent);\r\n            if (cachedValue !== undefined) {\r\n                return cachedValue;\r\n            }\r\n        }\r\n        const result = this._private__colorParser._internal_gradientColorAtPercent(topColor, bottomColor, percent / 100);\r\n        this._private__gradientColorsCache._internal_colors.set(percent, result);\r\n        return result;\r\n    }\r\n    _internal_getPaneIndex(pane) {\r\n        return this._private__panes.indexOf(pane);\r\n    }\r\n    _internal_colorParser() {\r\n        return this._private__colorParser;\r\n    }\r\n    _internal_addPane() {\r\n        return this._private__addPane();\r\n    }\r\n    _private__addPane(index) {\r\n        const pane = new Pane(this._private__timeScale, this);\r\n        this._private__panes.push(pane);\r\n        const idx = index ?? this._private__panes.length - 1;\r\n        // we always do autoscaling on the creation\r\n        // if autoscale option is true, it is ok, just recalculate by invalidation mask\r\n        // if autoscale option is false, autoscale anyway on the first draw\r\n        // also there is a scenario when autoscale is true in constructor and false later on applyOptions\r\n        const mask = InvalidateMask._internal_full();\r\n        mask._internal_invalidatePane(idx, {\r\n            _internal_level: 0 /* InvalidationLevel.None */,\r\n            _internal_autoScale: true,\r\n        });\r\n        this._private__invalidate(mask);\r\n        return pane;\r\n    }\r\n    _private__getOrCreatePane(index) {\r\n        assert(index >= 0, 'Index should be greater or equal to 0');\r\n        index = Math.min(this._private__panes.length, index);\r\n        if (index < this._private__panes.length) {\r\n            return this._private__panes[index];\r\n        }\r\n        return this._private__addPane(index);\r\n    }\r\n    _private__seriesPaneIndex(series) {\r\n        return this._private__panes.findIndex((pane) => pane._internal_series().includes(series));\r\n    }\r\n    _private__paneInvalidationMask(pane, level) {\r\n        const inv = new InvalidateMask(level);\r\n        if (pane !== null) {\r\n            const index = this._private__panes.indexOf(pane);\r\n            inv._internal_invalidatePane(index, {\r\n                _internal_level: level,\r\n            });\r\n        }\r\n        return inv;\r\n    }\r\n    _private__invalidationMaskForSource(source, invalidateType) {\r\n        if (invalidateType === undefined) {\r\n            invalidateType = 2 /* InvalidationLevel.Light */;\r\n        }\r\n        return this._private__paneInvalidationMask(this._internal_paneForSource(source), invalidateType);\r\n    }\r\n    _private__invalidate(mask) {\r\n        if (this._private__invalidateHandler) {\r\n            this._private__invalidateHandler(mask);\r\n        }\r\n        this._private__panes.forEach((pane) => pane._internal_grid()._internal_paneView()._internal_update());\r\n    }\r\n    _private__addSeriesToPane(series, pane) {\r\n        const priceScaleId = series._internal_options().priceScaleId;\r\n        const targetScaleId = priceScaleId !== undefined ? priceScaleId : this._internal_defaultVisiblePriceScaleId();\r\n        pane._internal_addDataSource(series, targetScaleId);\r\n        if (!isDefaultPriceScale(targetScaleId)) {\r\n            // let's apply that options again to apply margins\r\n            series._internal_applyOptions(series._internal_options());\r\n        }\r\n    }\r\n    _private__getBackgroundColor(side) {\r\n        const layoutOptions = this._private__options['layout'];\r\n        if (layoutOptions.background.type === \"gradient\" /* ColorType.VerticalGradient */) {\r\n            return side === 0 /* BackgroundColorSide.Top */ ?\r\n                layoutOptions.background.topColor :\r\n                layoutOptions.background.bottomColor;\r\n        }\r\n        return layoutOptions.background.color;\r\n    }\r\n    _private__cleanupIfPaneIsEmpty(pane) {\r\n        if (!pane._internal_preserveEmptyPane() && (pane._internal_dataSources().length === 0 && this._private__panes.length > 1)) {\r\n            this._private__panes.splice(this._internal_getPaneIndex(pane), 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction fillUpDownCandlesticksColors(options) {\r\n    if (options.borderColor !== undefined) {\r\n        options.borderUpColor = options.borderColor;\r\n        options.borderDownColor = options.borderColor;\r\n    }\r\n    if (options.wickColor !== undefined) {\r\n        options.wickUpColor = options.wickColor;\r\n        options.wickDownColor = options.wickColor;\r\n    }\r\n}\r\n/**\r\n * Represents the type of the last price animation for series such as area or line.\r\n */\r\nvar LastPriceAnimationMode;\r\n(function (LastPriceAnimationMode) {\r\n    /**\r\n     * Animation is always disabled\r\n     */\r\n    LastPriceAnimationMode[LastPriceAnimationMode[\"Disabled\"] = 0] = \"Disabled\";\r\n    /**\r\n     * Animation is always enabled.\r\n     */\r\n    LastPriceAnimationMode[LastPriceAnimationMode[\"Continuous\"] = 1] = \"Continuous\";\r\n    /**\r\n     * Animation is active after new data.\r\n     */\r\n    LastPriceAnimationMode[LastPriceAnimationMode[\"OnDataUpdate\"] = 2] = \"OnDataUpdate\";\r\n})(LastPriceAnimationMode || (LastPriceAnimationMode = {}));\r\nfunction precisionByMinMove(minMove) {\r\n    if (minMove >= 1) {\r\n        return 0;\r\n    }\r\n    let i = 0;\r\n    for (; i < 8; i++) {\r\n        const intPart = Math.round(minMove);\r\n        const fractPart = Math.abs(intPart - minMove);\r\n        if (fractPart < 1e-8) {\r\n            return i;\r\n        }\r\n        minMove = minMove * 10;\r\n    }\r\n    return i;\r\n}\r\n/**\r\n * Represents the source of data to be used for the horizontal price line.\r\n */\r\nvar PriceLineSource;\r\n(function (PriceLineSource) {\r\n    /**\r\n     * Use the last bar data.\r\n     */\r\n    PriceLineSource[PriceLineSource[\"LastBar\"] = 0] = \"LastBar\";\r\n    /**\r\n     * Use the last visible data of the chart viewport.\r\n     */\r\n    PriceLineSource[PriceLineSource[\"LastVisible\"] = 1] = \"LastVisible\";\r\n})(PriceLineSource || (PriceLineSource = {}));\r\n\r\n/**\r\n * Represents a type of color.\r\n */\r\nvar ColorType;\r\n(function (ColorType) {\r\n    /** Solid color */\r\n    ColorType[\"Solid\"] = \"solid\";\r\n    /** Vertical gradient color */\r\n    ColorType[\"VerticalGradient\"] = \"gradient\";\r\n})(ColorType || (ColorType = {}));\r\n\r\n/**\r\n * Check if a time value is a business day object.\r\n *\r\n * @param time - The time to check.\r\n * @returns `true` if `time` is a {@link BusinessDay} object, false otherwise.\r\n */\r\nfunction isBusinessDay(time) {\r\n    return !isNumber(time) && !isString(time);\r\n}\r\n/**\r\n * Check if a time value is a UTC timestamp number.\r\n *\r\n * @param time - The time to check.\r\n * @returns `true` if `time` is a {@link UTCTimestamp} number, false otherwise.\r\n */\r\nfunction isUTCTimestamp(time) {\r\n    return isNumber(time);\r\n}\r\n/**\r\n * Represents the type of a tick mark on the time axis.\r\n */\r\nvar TickMarkType;\r\n(function (TickMarkType) {\r\n    /**\r\n     * The start of the year (e.g. it's the first tick mark in a year).\r\n     */\r\n    TickMarkType[TickMarkType[\"Year\"] = 0] = \"Year\";\r\n    /**\r\n     * The start of the month (e.g. it's the first tick mark in a month).\r\n     */\r\n    TickMarkType[TickMarkType[\"Month\"] = 1] = \"Month\";\r\n    /**\r\n     * A day of the month.\r\n     */\r\n    TickMarkType[TickMarkType[\"DayOfMonth\"] = 2] = \"DayOfMonth\";\r\n    /**\r\n     * A time without seconds.\r\n     */\r\n    TickMarkType[TickMarkType[\"Time\"] = 3] = \"Time\";\r\n    /**\r\n     * A time with seconds.\r\n     */\r\n    TickMarkType[TickMarkType[\"TimeWithSeconds\"] = 4] = \"TimeWithSeconds\";\r\n})(TickMarkType || (TickMarkType = {}));\r\n\r\nconst getMonth = (date) => date.getUTCMonth() + 1;\r\nconst getDay = (date) => date.getUTCDate();\r\nconst getYear = (date) => date.getUTCFullYear();\r\nconst dd = (date) => numberToStringWithLeadingZero(getDay(date), 2);\r\nconst MMMM = (date, locale) => new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)\r\n    .toLocaleString(locale, { month: 'long' });\r\nconst MMM = (date, locale) => new Date(date.getUTCFullYear(), date.getUTCMonth(), 1)\r\n    .toLocaleString(locale, { month: 'short' });\r\nconst MM = (date) => numberToStringWithLeadingZero(getMonth(date), 2);\r\nconst yy = (date) => numberToStringWithLeadingZero(getYear(date) % 100, 2);\r\nconst yyyy = (date) => numberToStringWithLeadingZero(getYear(date), 4);\r\nfunction formatDate(date, format, locale) {\r\n    return format\r\n        .replace(/yyyy/g, yyyy(date))\r\n        .replace(/yy/g, yy(date))\r\n        .replace(/MMMM/g, MMMM(date, locale))\r\n        .replace(/MMM/g, MMM(date, locale))\r\n        .replace(/MM/g, MM(date))\r\n        .replace(/dd/g, dd(date));\r\n}\r\n\r\nclass DateFormatter {\r\n    constructor(dateFormat = 'yyyy-MM-dd', locale = 'default') {\r\n        this._private__dateFormat = dateFormat;\r\n        this._private__locale = locale;\r\n    }\r\n    _internal_format(date) {\r\n        return formatDate(date, this._private__dateFormat, this._private__locale);\r\n    }\r\n}\r\n\r\nclass TimeFormatter {\r\n    constructor(format) {\r\n        this._private__formatStr = format || '%h:%m:%s';\r\n    }\r\n    _internal_format(date) {\r\n        return this._private__formatStr.replace('%h', numberToStringWithLeadingZero(date.getUTCHours(), 2)).\r\n            replace('%m', numberToStringWithLeadingZero(date.getUTCMinutes(), 2)).\r\n            replace('%s', numberToStringWithLeadingZero(date.getUTCSeconds(), 2));\r\n    }\r\n}\r\n\r\nconst defaultParams = {\r\n    _internal_dateFormat: 'yyyy-MM-dd',\r\n    _internal_timeFormat: '%h:%m:%s',\r\n    _internal_dateTimeSeparator: ' ',\r\n    _internal_locale: 'default',\r\n};\r\nclass DateTimeFormatter {\r\n    constructor(params = {}) {\r\n        const formatterParams = { ...defaultParams, ...params };\r\n        this._private__dateFormatter = new DateFormatter(formatterParams._internal_dateFormat, formatterParams._internal_locale);\r\n        this._private__timeFormatter = new TimeFormatter(formatterParams._internal_timeFormat);\r\n        this._private__separator = formatterParams._internal_dateTimeSeparator;\r\n    }\r\n    _internal_format(dateTime) {\r\n        return `${this._private__dateFormatter._internal_format(dateTime)}${this._private__separator}${this._private__timeFormatter._internal_format(dateTime)}`;\r\n    }\r\n}\r\n\r\nfunction defaultTickMarkFormatter(timePoint, tickMarkType, locale) {\r\n    const formatOptions = {};\r\n    switch (tickMarkType) {\r\n        case 0 /* TickMarkType.Year */:\r\n            formatOptions.year = 'numeric';\r\n            break;\r\n        case 1 /* TickMarkType.Month */:\r\n            formatOptions.month = 'short';\r\n            break;\r\n        case 2 /* TickMarkType.DayOfMonth */:\r\n            formatOptions.day = 'numeric';\r\n            break;\r\n        case 3 /* TickMarkType.Time */:\r\n            formatOptions.hour12 = false;\r\n            formatOptions.hour = '2-digit';\r\n            formatOptions.minute = '2-digit';\r\n            break;\r\n        case 4 /* TickMarkType.TimeWithSeconds */:\r\n            formatOptions.hour12 = false;\r\n            formatOptions.hour = '2-digit';\r\n            formatOptions.minute = '2-digit';\r\n            formatOptions.second = '2-digit';\r\n            break;\r\n    }\r\n    const date = timePoint._internal_businessDay === undefined\r\n        ? new Date(timePoint._internal_timestamp * 1000)\r\n        : new Date(Date.UTC(timePoint._internal_businessDay.year, timePoint._internal_businessDay.month - 1, timePoint._internal_businessDay.day));\r\n    // from given date we should use only as UTC date or timestamp\r\n    // but to format as locale date we can convert UTC date to local date\r\n    const localDateFromUtc = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\r\n    return localDateFromUtc.toLocaleString(locale, formatOptions);\r\n}\r\n\r\nfunction hours(count) {\r\n    return count * 60 * 60 * 1000;\r\n}\r\nfunction minutes(count) {\r\n    return count * 60 * 1000;\r\n}\r\nfunction seconds(count) {\r\n    return count * 1000;\r\n}\r\nconst intradayWeightDivisors = [\r\n    { _internal_divisor: seconds(1), _internal_weight: 10 /* TickMarkWeight.Second */ },\r\n    { _internal_divisor: minutes(1), _internal_weight: 20 /* TickMarkWeight.Minute1 */ },\r\n    { _internal_divisor: minutes(5), _internal_weight: 21 /* TickMarkWeight.Minute5 */ },\r\n    { _internal_divisor: minutes(30), _internal_weight: 22 /* TickMarkWeight.Minute30 */ },\r\n    { _internal_divisor: hours(1), _internal_weight: 30 /* TickMarkWeight.Hour1 */ },\r\n    { _internal_divisor: hours(3), _internal_weight: 31 /* TickMarkWeight.Hour3 */ },\r\n    { _internal_divisor: hours(6), _internal_weight: 32 /* TickMarkWeight.Hour6 */ },\r\n    { _internal_divisor: hours(12), _internal_weight: 33 /* TickMarkWeight.Hour12 */ },\r\n];\r\nfunction weightByTime(currentDate, prevDate) {\r\n    if (currentDate.getUTCFullYear() !== prevDate.getUTCFullYear()) {\r\n        return 70 /* TickMarkWeight.Year */;\r\n    }\r\n    else if (currentDate.getUTCMonth() !== prevDate.getUTCMonth()) {\r\n        return 60 /* TickMarkWeight.Month */;\r\n    }\r\n    else if (currentDate.getUTCDate() !== prevDate.getUTCDate()) {\r\n        return 50 /* TickMarkWeight.Day */;\r\n    }\r\n    for (let i = intradayWeightDivisors.length - 1; i >= 0; --i) {\r\n        if (Math.floor(prevDate.getTime() / intradayWeightDivisors[i]._internal_divisor) !== Math.floor(currentDate.getTime() / intradayWeightDivisors[i]._internal_divisor)) {\r\n            return intradayWeightDivisors[i]._internal_weight;\r\n        }\r\n    }\r\n    return 0 /* TickMarkWeight.LessThanSecond */;\r\n}\r\nfunction cast(t) {\r\n    return t;\r\n}\r\nfunction fillWeightsForPoints(sortedTimePoints, startIndex = 0) {\r\n    if (sortedTimePoints.length === 0) {\r\n        return;\r\n    }\r\n    let prevTime = startIndex === 0 ? null : cast(sortedTimePoints[startIndex - 1].time)._internal_timestamp;\r\n    let prevDate = prevTime !== null ? new Date(prevTime * 1000) : null;\r\n    let totalTimeDiff = 0;\r\n    for (let index = startIndex; index < sortedTimePoints.length; ++index) {\r\n        const currentPoint = sortedTimePoints[index];\r\n        const currentDate = new Date(cast(currentPoint.time)._internal_timestamp * 1000);\r\n        if (prevDate !== null) {\r\n            currentPoint.timeWeight = weightByTime(currentDate, prevDate);\r\n        }\r\n        totalTimeDiff += cast(currentPoint.time)._internal_timestamp - (prevTime || cast(currentPoint.time)._internal_timestamp);\r\n        prevTime = cast(currentPoint.time)._internal_timestamp;\r\n        prevDate = currentDate;\r\n    }\r\n    if (startIndex === 0 && sortedTimePoints.length > 1) {\r\n        // let's guess a weight for the first point\r\n        // let's say the previous point was average time back in the history\r\n        const averageTimeDiff = Math.ceil(totalTimeDiff / (sortedTimePoints.length - 1));\r\n        const approxPrevDate = new Date((cast(sortedTimePoints[0].time)._internal_timestamp - averageTimeDiff) * 1000);\r\n        sortedTimePoints[0].timeWeight = weightByTime(new Date(cast(sortedTimePoints[0].time)._internal_timestamp * 1000), approxPrevDate);\r\n    }\r\n}\r\n\r\nfunction businessDayConverter(time) {\r\n    let businessDay = time;\r\n    if (isString(time)) {\r\n        businessDay = stringToBusinessDay(time);\r\n    }\r\n    if (!isBusinessDay(businessDay)) {\r\n        throw new Error('time must be of type BusinessDay');\r\n    }\r\n    const date = new Date(Date.UTC(businessDay.year, businessDay.month - 1, businessDay.day, 0, 0, 0, 0));\r\n    return {\r\n        _internal_timestamp: Math.round(date.getTime() / 1000),\r\n        _internal_businessDay: businessDay,\r\n    };\r\n}\r\nfunction timestampConverter(time) {\r\n    if (!isUTCTimestamp(time)) {\r\n        throw new Error('time must be of type isUTCTimestamp');\r\n    }\r\n    return {\r\n        _internal_timestamp: time,\r\n    };\r\n}\r\nfunction selectTimeConverter(data) {\r\n    if (data.length === 0) {\r\n        return null;\r\n    }\r\n    if (isBusinessDay(data[0].time) || isString(data[0].time)) {\r\n        return businessDayConverter;\r\n    }\r\n    return timestampConverter;\r\n}\r\nconst validDateRegex = /^\\d\\d\\d\\d-\\d\\d-\\d\\d$/;\r\nfunction convertTime(time) {\r\n    if (isUTCTimestamp(time)) {\r\n        return timestampConverter(time);\r\n    }\r\n    if (!isBusinessDay(time)) {\r\n        return businessDayConverter(stringToBusinessDay(time));\r\n    }\r\n    return businessDayConverter(time);\r\n}\r\nfunction stringToBusinessDay(value) {\r\n    {\r\n        // in some browsers (I look at your Chrome) the Date constructor may accept invalid date string\r\n        // but parses them in 'implementation specific' way\r\n        // for example 2019-1-1 isn't the same as 2019-01-01 (for Chrome both are 'valid' date strings)\r\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=968939\r\n        // so, we need to be sure that date has valid format to avoid strange behavior and hours of debugging\r\n        // but let's do this in development build only because of perf\r\n        if (!validDateRegex.test(value)) {\r\n            throw new Error(`Invalid date string=${value}, expected format=yyyy-mm-dd`);\r\n        }\r\n    }\r\n    const d = new Date(value);\r\n    if (isNaN(d.getTime())) {\r\n        throw new Error(`Invalid date string=${value}, expected format=yyyy-mm-dd`);\r\n    }\r\n    return {\r\n        day: d.getUTCDate(),\r\n        month: d.getUTCMonth() + 1,\r\n        year: d.getUTCFullYear(),\r\n    };\r\n}\r\nfunction convertStringToBusinessDay(value) {\r\n    if (isString(value.time)) {\r\n        value.time = stringToBusinessDay(value.time);\r\n    }\r\n}\r\nfunction convertStringsToBusinessDays(data) {\r\n    return data.forEach(convertStringToBusinessDay);\r\n}\r\n\r\n// eslint-disable-next-line complexity\r\nfunction weightToTickMarkType(weight, timeVisible, secondsVisible) {\r\n    switch (weight) {\r\n        case 0 /* TickMarkWeight.LessThanSecond */:\r\n        case 10 /* TickMarkWeight.Second */:\r\n            return timeVisible\r\n                ? (secondsVisible ? 4 /* TickMarkType.TimeWithSeconds */ : 3 /* TickMarkType.Time */)\r\n                : 2 /* TickMarkType.DayOfMonth */;\r\n        case 20 /* TickMarkWeight.Minute1 */:\r\n        case 21 /* TickMarkWeight.Minute5 */:\r\n        case 22 /* TickMarkWeight.Minute30 */:\r\n        case 30 /* TickMarkWeight.Hour1 */:\r\n        case 31 /* TickMarkWeight.Hour3 */:\r\n        case 32 /* TickMarkWeight.Hour6 */:\r\n        case 33 /* TickMarkWeight.Hour12 */:\r\n            return timeVisible ? 3 /* TickMarkType.Time */ : 2 /* TickMarkType.DayOfMonth */;\r\n        case 50 /* TickMarkWeight.Day */:\r\n            return 2 /* TickMarkType.DayOfMonth */;\r\n        case 60 /* TickMarkWeight.Month */:\r\n            return 1 /* TickMarkType.Month */;\r\n        case 70 /* TickMarkWeight.Year */:\r\n            return 0 /* TickMarkType.Year */;\r\n    }\r\n}\r\nclass HorzScaleBehaviorTime {\r\n    options() {\r\n        return this._private__options;\r\n    }\r\n    setOptions(options) {\r\n        this._private__options = options;\r\n        this.updateFormatter(options.localization);\r\n    }\r\n    preprocessData(data) {\r\n        if (Array.isArray(data)) {\r\n            convertStringsToBusinessDays(data);\r\n        }\r\n        else {\r\n            convertStringToBusinessDay(data);\r\n        }\r\n    }\r\n    createConverterToInternalObj(data) {\r\n        return ensureNotNull(selectTimeConverter(data));\r\n    }\r\n    key(item) {\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        if (typeof item === 'object' && \"_internal_timestamp\" in item) {\r\n            return item._internal_timestamp;\r\n        }\r\n        else {\r\n            return this.key(this.convertHorzItemToInternal(item));\r\n        }\r\n    }\r\n    cacheKey(item) {\r\n        const time = item;\r\n        return time._internal_businessDay === undefined\r\n            ? new Date(time._internal_timestamp * 1000).getTime()\r\n            : new Date(Date.UTC(time._internal_businessDay.year, time._internal_businessDay.month - 1, time._internal_businessDay.day)).getTime();\r\n    }\r\n    convertHorzItemToInternal(item) {\r\n        return convertTime(item);\r\n    }\r\n    updateFormatter(options) {\r\n        if (!this._private__options) {\r\n            return;\r\n        }\r\n        const dateFormat = options.dateFormat;\r\n        if (this._private__options.timeScale.timeVisible) {\r\n            this._private__dateTimeFormatter = new DateTimeFormatter({\r\n                _internal_dateFormat: dateFormat,\r\n                _internal_timeFormat: this._private__options.timeScale.secondsVisible ? '%h:%m:%s' : '%h:%m',\r\n                _internal_dateTimeSeparator: '   ',\r\n                _internal_locale: options.locale,\r\n            });\r\n        }\r\n        else {\r\n            this._private__dateTimeFormatter = new DateFormatter(dateFormat, options.locale);\r\n        }\r\n    }\r\n    formatHorzItem(item) {\r\n        const tp = item;\r\n        return this._private__dateTimeFormatter._internal_format(new Date(tp._internal_timestamp * 1000));\r\n    }\r\n    formatTickmark(tickMark, localizationOptions) {\r\n        const tickMarkType = weightToTickMarkType(tickMark.weight, this._private__options.timeScale.timeVisible, this._private__options.timeScale.secondsVisible);\r\n        const options = this._private__options.timeScale;\r\n        if (options.tickMarkFormatter !== undefined) {\r\n            const tickMarkString = options.tickMarkFormatter(tickMark.originalTime, tickMarkType, localizationOptions.locale);\r\n            if (tickMarkString !== null) {\r\n                return tickMarkString;\r\n            }\r\n        }\r\n        return defaultTickMarkFormatter(tickMark.time, tickMarkType, localizationOptions.locale);\r\n    }\r\n    maxTickMarkWeight(tickMarks) {\r\n        let maxWeight = tickMarks.reduce(markWithGreaterWeight$2, tickMarks[0]).weight;\r\n        // special case: it looks strange if 15:00 is bold but 14:00 is not\r\n        // so if maxWeight > TickMarkWeight.Hour1 and < TickMarkWeight.Day reduce it to TickMarkWeight.Hour1\r\n        if (maxWeight > 30 /* TickMarkWeight.Hour1 */ && maxWeight < 50 /* TickMarkWeight.Day */) {\r\n            maxWeight = 30 /* TickMarkWeight.Hour1 */;\r\n        }\r\n        return maxWeight;\r\n    }\r\n    fillWeightsForPoints(sortedTimePoints, startIndex) {\r\n        fillWeightsForPoints(sortedTimePoints, startIndex);\r\n    }\r\n    static _internal_applyDefaults(options) {\r\n        return merge({ localization: { dateFormat: 'dd MMM \\'yy' } }, options ?? {});\r\n    }\r\n}\r\n\r\n/**\r\n * When you're trying to use the library in server-side context (for instance in SSR)\r\n * you don't have some browser-specific variables like navigator or window\r\n * and if the library will use them on the top level of the library\r\n * the import will fail due ReferenceError\r\n * thus, this allows use the navigator on the top level and being imported in server-side context as well\r\n * See issue #446\r\n */\r\n// eslint-disable-next-line @typescript-eslint/tslint/config\r\nconst isRunningOnClientSide = typeof window !== 'undefined';\r\n\r\nfunction isFF() {\r\n    if (!isRunningOnClientSide) {\r\n        return false;\r\n    }\r\n    return window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n}\r\nfunction isIOS() {\r\n    if (!isRunningOnClientSide) {\r\n        return false;\r\n    }\r\n    // eslint-disable-next-line deprecation/deprecation\r\n    return /iPhone|iPad|iPod/.test(window.navigator.platform);\r\n}\r\nfunction isChrome() {\r\n    if (!isRunningOnClientSide) {\r\n        return false;\r\n    }\r\n    return window.chrome !== undefined;\r\n}\r\n// Determine whether the browser is running on windows.\r\nfunction isWindows() {\r\n    if (!isRunningOnClientSide) {\r\n        return false;\r\n    }\r\n    // more accurate if available\r\n    if (navigator?.userAgentData?.platform) {\r\n        return navigator.userAgentData.platform === 'Windows';\r\n    }\r\n    return navigator.userAgent.toLowerCase().indexOf('win') >= 0;\r\n}\r\n// Determine whether the browser is Chromium based.\r\nfunction isChromiumBased() {\r\n    if (!isRunningOnClientSide) {\r\n        return false;\r\n    }\r\n    if (!navigator.userAgentData) {\r\n        return false;\r\n    }\r\n    return navigator.userAgentData.brands.some((brand) => {\r\n        return brand.brand.includes('Chromium');\r\n    });\r\n}\r\n\r\n/// <reference types=\"_build-time-constants\" />\r\nfunction warn(msg) {\r\n    {\r\n        // eslint-disable-next-line no-console\r\n        console.warn(msg);\r\n    }\r\n}\r\n\r\n// on Hi-DPI CSS size * Device Pixel Ratio should be integer to avoid smoothing\r\n// For chart widget we decrease the size because we must be inside container.\r\n// For time axis this is not important, since it just affects space for pane widgets\r\nfunction suggestChartSize(originalSize) {\r\n    const integerWidth = Math.floor(originalSize.width);\r\n    const integerHeight = Math.floor(originalSize.height);\r\n    const width = integerWidth - (integerWidth % 2);\r\n    const height = integerHeight - (integerHeight % 2);\r\n    return size$1({ width, height });\r\n}\r\nfunction suggestTimeScaleHeight(originalHeight) {\r\n    return originalHeight + (originalHeight % 2);\r\n}\r\nfunction suggestPriceScaleWidth(originalWidth) {\r\n    return originalWidth + (originalWidth % 2);\r\n}\r\n\r\nfunction preventScrollByWheelClick(el) {\r\n    if (!isChrome()) {\r\n        return;\r\n    }\r\n    el.addEventListener('mousedown', (e) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        if (e.button === 1 /* MouseEventButton.Middle */) {\r\n            // prevent incorrect scrolling event\r\n            e.preventDefault();\r\n            return false;\r\n        }\r\n        return undefined;\r\n    });\r\n}\r\n\r\n// TODO: get rid of a lot of boolean flags, probably we should replace it with some enum\r\nclass MouseEventHandler {\r\n    constructor(target, handler, options) {\r\n        this._private__clickCount = 0;\r\n        this._private__clickTimeoutId = null;\r\n        this._private__clickPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };\r\n        this._private__tapCount = 0;\r\n        this._private__tapTimeoutId = null;\r\n        this._private__tapPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };\r\n        this._private__longTapTimeoutId = null;\r\n        this._private__longTapActive = false;\r\n        this._private__mouseMoveStartPosition = null;\r\n        this._private__touchMoveStartPosition = null;\r\n        this._private__touchMoveExceededManhattanDistance = false;\r\n        this._private__cancelClick = false;\r\n        this._private__cancelTap = false;\r\n        this._private__unsubscribeOutsideMouseEvents = null;\r\n        this._private__unsubscribeOutsideTouchEvents = null;\r\n        this._private__unsubscribeMobileSafariEvents = null;\r\n        this._private__unsubscribeMousemove = null;\r\n        this._private__unsubscribeRootMouseEvents = null;\r\n        this._private__unsubscribeRootTouchEvents = null;\r\n        this._private__startPinchMiddlePoint = null;\r\n        this._private__startPinchDistance = 0;\r\n        this._private__pinchPrevented = false;\r\n        this._private__preventTouchDragProcess = false;\r\n        this._private__mousePressed = false;\r\n        this._private__lastTouchEventTimeStamp = 0;\r\n        // for touchstart/touchmove/touchend events we handle only first touch\r\n        // i.e. we don't support several active touches at the same time (except pinch event)\r\n        this._private__activeTouchId = null;\r\n        // accept all mouse leave events if it's not an iOS device\r\n        // see _mouseEnterHandler, _mouseMoveHandler, _mouseLeaveHandler\r\n        this._private__acceptMouseLeave = !isIOS();\r\n        /**\r\n         * In Firefox mouse events dont't fire if the mouse position is outside of the browser's border.\r\n         * To prevent the mouse from hanging while pressed we're subscribing on the mouseleave event of the document element.\r\n         * We're subscribing on mouseleave, but this event is actually fired on mouseup outside of the browser's border.\r\n         */\r\n        this._private__onFirefoxOutsideMouseUp = (mouseUpEvent) => {\r\n            this._private__mouseUpHandler(mouseUpEvent);\r\n        };\r\n        /**\r\n         * Safari doesn't fire touchstart/mousedown events on double tap since iOS 13.\r\n         * There are two possible solutions:\r\n         * 1) Call preventDefault in touchEnd handler. But it also prevents click event from firing.\r\n         * 2) Add listener on dblclick event that fires with the preceding mousedown/mouseup.\r\n         * https://developer.apple.com/forums/thread/125073\r\n         */\r\n        this._private__onMobileSafariDoubleClick = (dblClickEvent) => {\r\n            if (this._private__firesTouchEvents(dblClickEvent)) {\r\n                const compatEvent = this._private__makeCompatEvent(dblClickEvent);\r\n                ++this._private__tapCount;\r\n                if (this._private__tapTimeoutId && this._private__tapCount > 1) {\r\n                    const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__tapPosition);\r\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n                    if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */ && !this._private__cancelTap) {\r\n                        this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);\r\n                    }\r\n                    this._private__resetTapTimeout();\r\n                }\r\n            }\r\n            else {\r\n                const compatEvent = this._private__makeCompatEvent(dblClickEvent);\r\n                ++this._private__clickCount;\r\n                if (this._private__clickTimeoutId && this._private__clickCount > 1) {\r\n                    const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__clickPosition);\r\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n                    if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */ && !this._private__cancelClick) {\r\n                        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);\r\n                    }\r\n                    this._private__resetClickTimeout();\r\n                }\r\n            }\r\n        };\r\n        this._private__target = target;\r\n        this._private__handler = handler;\r\n        this._private__options = options;\r\n        this._private__init();\r\n    }\r\n    _internal_destroy() {\r\n        if (this._private__unsubscribeOutsideMouseEvents !== null) {\r\n            this._private__unsubscribeOutsideMouseEvents();\r\n            this._private__unsubscribeOutsideMouseEvents = null;\r\n        }\r\n        if (this._private__unsubscribeOutsideTouchEvents !== null) {\r\n            this._private__unsubscribeOutsideTouchEvents();\r\n            this._private__unsubscribeOutsideTouchEvents = null;\r\n        }\r\n        if (this._private__unsubscribeMousemove !== null) {\r\n            this._private__unsubscribeMousemove();\r\n            this._private__unsubscribeMousemove = null;\r\n        }\r\n        if (this._private__unsubscribeRootMouseEvents !== null) {\r\n            this._private__unsubscribeRootMouseEvents();\r\n            this._private__unsubscribeRootMouseEvents = null;\r\n        }\r\n        if (this._private__unsubscribeRootTouchEvents !== null) {\r\n            this._private__unsubscribeRootTouchEvents();\r\n            this._private__unsubscribeRootTouchEvents = null;\r\n        }\r\n        if (this._private__unsubscribeMobileSafariEvents !== null) {\r\n            this._private__unsubscribeMobileSafariEvents();\r\n            this._private__unsubscribeMobileSafariEvents = null;\r\n        }\r\n        this._private__clearLongTapTimeout();\r\n        this._private__resetClickTimeout();\r\n    }\r\n    _private__mouseEnterHandler(enterEvent) {\r\n        if (this._private__unsubscribeMousemove) {\r\n            this._private__unsubscribeMousemove();\r\n        }\r\n        const boundMouseMoveHandler = this._private__mouseMoveHandler.bind(this);\r\n        this._private__unsubscribeMousemove = () => {\r\n            this._private__target.removeEventListener('mousemove', boundMouseMoveHandler);\r\n        };\r\n        this._private__target.addEventListener('mousemove', boundMouseMoveHandler);\r\n        if (this._private__firesTouchEvents(enterEvent)) {\r\n            return;\r\n        }\r\n        const compatEvent = this._private__makeCompatEvent(enterEvent);\r\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseEnterEvent);\r\n        this._private__acceptMouseLeave = true;\r\n    }\r\n    _private__resetClickTimeout() {\r\n        if (this._private__clickTimeoutId !== null) {\r\n            clearTimeout(this._private__clickTimeoutId);\r\n        }\r\n        this._private__clickCount = 0;\r\n        this._private__clickTimeoutId = null;\r\n        this._private__clickPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };\r\n    }\r\n    _private__resetTapTimeout() {\r\n        if (this._private__tapTimeoutId !== null) {\r\n            clearTimeout(this._private__tapTimeoutId);\r\n        }\r\n        this._private__tapCount = 0;\r\n        this._private__tapTimeoutId = null;\r\n        this._private__tapPosition = { _internal_x: Number.NEGATIVE_INFINITY, _internal_y: Number.POSITIVE_INFINITY };\r\n    }\r\n    _private__mouseMoveHandler(moveEvent) {\r\n        if (this._private__mousePressed || this._private__touchMoveStartPosition !== null) {\r\n            return;\r\n        }\r\n        if (this._private__firesTouchEvents(moveEvent)) {\r\n            return;\r\n        }\r\n        const compatEvent = this._private__makeCompatEvent(moveEvent);\r\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseMoveEvent);\r\n        this._private__acceptMouseLeave = true;\r\n    }\r\n    _private__touchMoveHandler(moveEvent) {\r\n        const touch = touchWithId(moveEvent.changedTouches, ensureNotNull(this._private__activeTouchId));\r\n        if (touch === null) {\r\n            return;\r\n        }\r\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(moveEvent);\r\n        if (this._private__startPinchMiddlePoint !== null) {\r\n            return;\r\n        }\r\n        if (this._private__preventTouchDragProcess) {\r\n            return;\r\n        }\r\n        // prevent pinch if move event comes faster than the second touch\r\n        this._private__pinchPrevented = true;\r\n        const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(touch), ensureNotNull(this._private__touchMoveStartPosition));\r\n        const { _internal_xOffset: xOffset, _internal_yOffset: yOffset, _internal_manhattanDistance: manhattanDistance } = moveInfo;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        if (!this._private__touchMoveExceededManhattanDistance && manhattanDistance < 5 /* Constants.CancelTapManhattanDistance */) {\r\n            return;\r\n        }\r\n        if (!this._private__touchMoveExceededManhattanDistance) {\r\n            // first time when current position exceeded manhattan distance\r\n            // vertical drag is more important than horizontal drag\r\n            // because we scroll the page vertically often than horizontally\r\n            const correctedXOffset = xOffset * 0.5;\r\n            // a drag can be only if touch page scroll isn't allowed\r\n            const isVertDrag = yOffset >= correctedXOffset && !this._private__options._internal_treatVertTouchDragAsPageScroll();\r\n            const isHorzDrag = correctedXOffset > yOffset && !this._private__options._internal_treatHorzTouchDragAsPageScroll();\r\n            // if drag event happened then we should revert preventDefault state to original one\r\n            // and try to process the drag event\r\n            // else we shouldn't prevent default of the event and ignore processing the drag event\r\n            if (!isVertDrag && !isHorzDrag) {\r\n                this._private__preventTouchDragProcess = true;\r\n            }\r\n            this._private__touchMoveExceededManhattanDistance = true;\r\n            // if manhattan distance is more that 5 - we should cancel tap event\r\n            this._private__cancelTap = true;\r\n            this._private__clearLongTapTimeout();\r\n            this._private__resetTapTimeout();\r\n        }\r\n        if (!this._private__preventTouchDragProcess) {\r\n            const compatEvent = this._private__makeCompatEvent(moveEvent, touch);\r\n            this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchMoveEvent);\r\n            // we should prevent default in case of touch only\r\n            // to prevent scroll of the page\r\n            preventDefault(moveEvent);\r\n        }\r\n    }\r\n    _private__mouseMoveWithDownHandler(moveEvent) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        if (moveEvent.button !== 0 /* MouseEventButton.Left */) {\r\n            return;\r\n        }\r\n        const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(moveEvent), ensureNotNull(this._private__mouseMoveStartPosition));\r\n        const { _internal_manhattanDistance: manhattanDistance } = moveInfo;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        if (manhattanDistance >= 5 /* Constants.CancelClickManhattanDistance */) {\r\n            // if manhattan distance is more that 5 - we should cancel click event\r\n            this._private__cancelClick = true;\r\n            this._private__resetClickTimeout();\r\n        }\r\n        if (this._private__cancelClick) {\r\n            // if this._cancelClick is true, that means that minimum manhattan distance is already exceeded\r\n            const compatEvent = this._private__makeCompatEvent(moveEvent);\r\n            this._private__processMouseEvent(compatEvent, this._private__handler._internal_pressedMouseMoveEvent);\r\n        }\r\n    }\r\n    _private__touchMouseMoveWithDownInfo(currentPosition, startPosition) {\r\n        const xOffset = Math.abs(startPosition._internal_x - currentPosition._internal_x);\r\n        const yOffset = Math.abs(startPosition._internal_y - currentPosition._internal_y);\r\n        const manhattanDistance = xOffset + yOffset;\r\n        return {\r\n            _internal_xOffset: xOffset,\r\n            _internal_yOffset: yOffset,\r\n            _internal_manhattanDistance: manhattanDistance,\r\n        };\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _private__touchEndHandler(touchEndEvent) {\r\n        let touch = touchWithId(touchEndEvent.changedTouches, ensureNotNull(this._private__activeTouchId));\r\n        if (touch === null && touchEndEvent.touches.length === 0) {\r\n            // something went wrong, somehow we missed the required touchend event\r\n            // probably the browser has not sent this event\r\n            touch = touchEndEvent.changedTouches[0];\r\n        }\r\n        if (touch === null) {\r\n            return;\r\n        }\r\n        this._private__activeTouchId = null;\r\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(touchEndEvent);\r\n        this._private__clearLongTapTimeout();\r\n        this._private__touchMoveStartPosition = null;\r\n        if (this._private__unsubscribeRootTouchEvents) {\r\n            this._private__unsubscribeRootTouchEvents();\r\n            this._private__unsubscribeRootTouchEvents = null;\r\n        }\r\n        const compatEvent = this._private__makeCompatEvent(touchEndEvent, touch);\r\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchEndEvent);\r\n        ++this._private__tapCount;\r\n        if (this._private__tapTimeoutId && this._private__tapCount > 1) {\r\n            // check that both clicks are near enough\r\n            const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(touch), this._private__tapPosition);\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n            if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */ && !this._private__cancelTap) {\r\n                this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);\r\n            }\r\n            this._private__resetTapTimeout();\r\n        }\r\n        else {\r\n            if (!this._private__cancelTap) {\r\n                this._private__processTouchEvent(compatEvent, this._private__handler._internal_tapEvent);\r\n                // do not fire mouse events if tap handler was executed\r\n                // prevent click event on new dom element (who appeared after tap)\r\n                if (this._private__handler._internal_tapEvent) {\r\n                    preventDefault(touchEndEvent);\r\n                }\r\n            }\r\n        }\r\n        // prevent, for example, safari's dblclick-to-zoom or fast-click after long-tap\r\n        // we handle mouseDoubleClickEvent here ourselves\r\n        if (this._private__tapCount === 0) {\r\n            preventDefault(touchEndEvent);\r\n        }\r\n        if (touchEndEvent.touches.length === 0) {\r\n            if (this._private__longTapActive) {\r\n                this._private__longTapActive = false;\r\n                // prevent native click event\r\n                preventDefault(touchEndEvent);\r\n            }\r\n        }\r\n    }\r\n    _private__mouseUpHandler(mouseUpEvent) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        if (mouseUpEvent.button !== 0 /* MouseEventButton.Left */) {\r\n            return;\r\n        }\r\n        const compatEvent = this._private__makeCompatEvent(mouseUpEvent);\r\n        this._private__mouseMoveStartPosition = null;\r\n        this._private__mousePressed = false;\r\n        if (this._private__unsubscribeRootMouseEvents) {\r\n            this._private__unsubscribeRootMouseEvents();\r\n            this._private__unsubscribeRootMouseEvents = null;\r\n        }\r\n        if (isFF()) {\r\n            const rootElement = this._private__target.ownerDocument.documentElement;\r\n            rootElement.removeEventListener('mouseleave', this._private__onFirefoxOutsideMouseUp);\r\n        }\r\n        if (this._private__firesTouchEvents(mouseUpEvent)) {\r\n            return;\r\n        }\r\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseUpEvent);\r\n        ++this._private__clickCount;\r\n        if (this._private__clickTimeoutId && this._private__clickCount > 1) {\r\n            // check that both clicks are near enough\r\n            const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(mouseUpEvent), this._private__clickPosition);\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n            if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */ && !this._private__cancelClick) {\r\n                this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);\r\n            }\r\n            this._private__resetClickTimeout();\r\n        }\r\n        else {\r\n            if (!this._private__cancelClick) {\r\n                this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseClickEvent);\r\n            }\r\n        }\r\n    }\r\n    _private__clearLongTapTimeout() {\r\n        if (this._private__longTapTimeoutId === null) {\r\n            return;\r\n        }\r\n        clearTimeout(this._private__longTapTimeoutId);\r\n        this._private__longTapTimeoutId = null;\r\n    }\r\n    _private__touchStartHandler(downEvent) {\r\n        if (this._private__activeTouchId !== null) {\r\n            return;\r\n        }\r\n        const touch = downEvent.changedTouches[0];\r\n        this._private__activeTouchId = touch.identifier;\r\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(downEvent);\r\n        const rootElement = this._private__target.ownerDocument.documentElement;\r\n        this._private__cancelTap = false;\r\n        this._private__touchMoveExceededManhattanDistance = false;\r\n        this._private__preventTouchDragProcess = false;\r\n        this._private__touchMoveStartPosition = getPosition(touch);\r\n        if (this._private__unsubscribeRootTouchEvents) {\r\n            this._private__unsubscribeRootTouchEvents();\r\n            this._private__unsubscribeRootTouchEvents = null;\r\n        }\r\n        {\r\n            const boundTouchMoveWithDownHandler = this._private__touchMoveHandler.bind(this);\r\n            const boundTouchEndHandler = this._private__touchEndHandler.bind(this);\r\n            this._private__unsubscribeRootTouchEvents = () => {\r\n                rootElement.removeEventListener('touchmove', boundTouchMoveWithDownHandler);\r\n                rootElement.removeEventListener('touchend', boundTouchEndHandler);\r\n            };\r\n            rootElement.addEventListener('touchmove', boundTouchMoveWithDownHandler, { passive: false });\r\n            rootElement.addEventListener('touchend', boundTouchEndHandler, { passive: false });\r\n            this._private__clearLongTapTimeout();\r\n            this._private__longTapTimeoutId = setTimeout(this._private__longTapHandler.bind(this, downEvent), 240 /* Delay.LongTap */);\r\n        }\r\n        const compatEvent = this._private__makeCompatEvent(downEvent, touch);\r\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchStartEvent);\r\n        if (!this._private__tapTimeoutId) {\r\n            this._private__tapCount = 0;\r\n            this._private__tapTimeoutId = setTimeout(this._private__resetTapTimeout.bind(this), 500 /* Delay.ResetClick */);\r\n            this._private__tapPosition = getPosition(touch);\r\n        }\r\n    }\r\n    _private__mouseDownHandler(downEvent) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        if (downEvent.button !== 0 /* MouseEventButton.Left */) {\r\n            return;\r\n        }\r\n        const rootElement = this._private__target.ownerDocument.documentElement;\r\n        if (isFF()) {\r\n            rootElement.addEventListener('mouseleave', this._private__onFirefoxOutsideMouseUp);\r\n        }\r\n        this._private__cancelClick = false;\r\n        this._private__mouseMoveStartPosition = getPosition(downEvent);\r\n        if (this._private__unsubscribeRootMouseEvents) {\r\n            this._private__unsubscribeRootMouseEvents();\r\n            this._private__unsubscribeRootMouseEvents = null;\r\n        }\r\n        {\r\n            const boundMouseMoveWithDownHandler = this._private__mouseMoveWithDownHandler.bind(this);\r\n            const boundMouseUpHandler = this._private__mouseUpHandler.bind(this);\r\n            this._private__unsubscribeRootMouseEvents = () => {\r\n                rootElement.removeEventListener('mousemove', boundMouseMoveWithDownHandler);\r\n                rootElement.removeEventListener('mouseup', boundMouseUpHandler);\r\n            };\r\n            rootElement.addEventListener('mousemove', boundMouseMoveWithDownHandler);\r\n            rootElement.addEventListener('mouseup', boundMouseUpHandler);\r\n        }\r\n        this._private__mousePressed = true;\r\n        if (this._private__firesTouchEvents(downEvent)) {\r\n            return;\r\n        }\r\n        const compatEvent = this._private__makeCompatEvent(downEvent);\r\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDownEvent);\r\n        if (!this._private__clickTimeoutId) {\r\n            this._private__clickCount = 0;\r\n            this._private__clickTimeoutId = setTimeout(this._private__resetClickTimeout.bind(this), 500 /* Delay.ResetClick */);\r\n            this._private__clickPosition = getPosition(downEvent);\r\n        }\r\n    }\r\n    _private__init() {\r\n        this._private__target.addEventListener('mouseenter', this._private__mouseEnterHandler.bind(this));\r\n        // Do not show context menu when something went wrong\r\n        this._private__target.addEventListener('touchcancel', this._private__clearLongTapTimeout.bind(this));\r\n        {\r\n            const doc = this._private__target.ownerDocument;\r\n            const outsideHandler = (event) => {\r\n                if (!this._private__handler._internal_mouseDownOutsideEvent) {\r\n                    return;\r\n                }\r\n                if (event.composed && this._private__target.contains(event.composedPath()[0])) {\r\n                    return;\r\n                }\r\n                if (event.target && this._private__target.contains(event.target)) {\r\n                    return;\r\n                }\r\n                this._private__handler._internal_mouseDownOutsideEvent();\r\n            };\r\n            this._private__unsubscribeOutsideTouchEvents = () => {\r\n                doc.removeEventListener('touchstart', outsideHandler);\r\n            };\r\n            this._private__unsubscribeOutsideMouseEvents = () => {\r\n                doc.removeEventListener('mousedown', outsideHandler);\r\n            };\r\n            doc.addEventListener('mousedown', outsideHandler);\r\n            doc.addEventListener('touchstart', outsideHandler, { passive: true });\r\n        }\r\n        if (isIOS()) {\r\n            this._private__unsubscribeMobileSafariEvents = () => {\r\n                this._private__target.removeEventListener('dblclick', this._private__onMobileSafariDoubleClick);\r\n            };\r\n            this._private__target.addEventListener('dblclick', this._private__onMobileSafariDoubleClick);\r\n        }\r\n        this._private__target.addEventListener('mouseleave', this._private__mouseLeaveHandler.bind(this));\r\n        this._private__target.addEventListener('touchstart', this._private__touchStartHandler.bind(this), { passive: true });\r\n        preventScrollByWheelClick(this._private__target);\r\n        this._private__target.addEventListener('mousedown', this._private__mouseDownHandler.bind(this));\r\n        this._private__initPinch();\r\n        // Hey mobile Safari, what's up?\r\n        // If mobile Safari doesn't have any touchmove handler with passive=false\r\n        // it treats a touchstart and the following touchmove events as cancelable=false,\r\n        // so we can't prevent them (as soon we subscribe on touchmove inside touchstart's handler).\r\n        // And we'll get scroll of the page along with chart's one instead of only chart's scroll.\r\n        this._private__target.addEventListener('touchmove', () => { }, { passive: false });\r\n    }\r\n    _private__initPinch() {\r\n        if (this._private__handler._internal_pinchStartEvent === undefined &&\r\n            this._private__handler._internal_pinchEvent === undefined &&\r\n            this._private__handler._internal_pinchEndEvent === undefined) {\r\n            return;\r\n        }\r\n        this._private__target.addEventListener('touchstart', (event) => this._private__checkPinchState(event.touches), { passive: true });\r\n        this._private__target.addEventListener('touchmove', (event) => {\r\n            if (event.touches.length !== 2 || this._private__startPinchMiddlePoint === null) {\r\n                return;\r\n            }\r\n            if (this._private__handler._internal_pinchEvent !== undefined) {\r\n                const currentDistance = getDistance(event.touches[0], event.touches[1]);\r\n                const scale = currentDistance / this._private__startPinchDistance;\r\n                this._private__handler._internal_pinchEvent(this._private__startPinchMiddlePoint, scale);\r\n                preventDefault(event);\r\n            }\r\n        }, { passive: false });\r\n        this._private__target.addEventListener('touchend', (event) => {\r\n            this._private__checkPinchState(event.touches);\r\n        });\r\n    }\r\n    _private__checkPinchState(touches) {\r\n        if (touches.length === 1) {\r\n            this._private__pinchPrevented = false;\r\n        }\r\n        if (touches.length !== 2 || this._private__pinchPrevented || this._private__longTapActive) {\r\n            this._private__stopPinch();\r\n        }\r\n        else {\r\n            this._private__startPinch(touches);\r\n        }\r\n    }\r\n    _private__startPinch(touches) {\r\n        const box = getBoundingClientRect(this._private__target);\r\n        this._private__startPinchMiddlePoint = {\r\n            _internal_x: ((touches[0].clientX - box.left) + (touches[1].clientX - box.left)) / 2,\r\n            _internal_y: ((touches[0].clientY - box.top) + (touches[1].clientY - box.top)) / 2,\r\n        };\r\n        this._private__startPinchDistance = getDistance(touches[0], touches[1]);\r\n        if (this._private__handler._internal_pinchStartEvent !== undefined) {\r\n            this._private__handler._internal_pinchStartEvent();\r\n        }\r\n        this._private__clearLongTapTimeout();\r\n    }\r\n    _private__stopPinch() {\r\n        if (this._private__startPinchMiddlePoint === null) {\r\n            return;\r\n        }\r\n        this._private__startPinchMiddlePoint = null;\r\n        if (this._private__handler._internal_pinchEndEvent !== undefined) {\r\n            this._private__handler._internal_pinchEndEvent();\r\n        }\r\n    }\r\n    _private__mouseLeaveHandler(event) {\r\n        if (this._private__unsubscribeMousemove) {\r\n            this._private__unsubscribeMousemove();\r\n        }\r\n        if (this._private__firesTouchEvents(event)) {\r\n            return;\r\n        }\r\n        if (!this._private__acceptMouseLeave) {\r\n            // mobile Safari sometimes emits mouse leave event for no reason, there is no way to handle it in other way\r\n            // just ignore this event if there was no mouse move or mouse enter events\r\n            return;\r\n        }\r\n        const compatEvent = this._private__makeCompatEvent(event);\r\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseLeaveEvent);\r\n        // accept all mouse leave events if it's not an iOS device\r\n        this._private__acceptMouseLeave = !isIOS();\r\n    }\r\n    _private__longTapHandler(event) {\r\n        const touch = touchWithId(event.touches, ensureNotNull(this._private__activeTouchId));\r\n        if (touch === null) {\r\n            return;\r\n        }\r\n        const compatEvent = this._private__makeCompatEvent(event, touch);\r\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_longTapEvent);\r\n        this._private__cancelTap = true;\r\n        // long tap is active until touchend event with 0 touches occurred\r\n        this._private__longTapActive = true;\r\n    }\r\n    _private__firesTouchEvents(e) {\r\n        if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents !== undefined) {\r\n            return e.sourceCapabilities.firesTouchEvents;\r\n        }\r\n        return eventTimeStamp(e) < this._private__lastTouchEventTimeStamp + 500 /* Delay.PreventFiresTouchEvents */;\r\n    }\r\n    _private__processTouchEvent(event, callback) {\r\n        if (callback) {\r\n            callback.call(this._private__handler, event);\r\n        }\r\n    }\r\n    _private__processMouseEvent(event, callback) {\r\n        if (!callback) {\r\n            return;\r\n        }\r\n        callback.call(this._private__handler, event);\r\n    }\r\n    _private__makeCompatEvent(event, touch) {\r\n        // TouchEvent has no clientX/Y coordinates:\r\n        // We have to use the last Touch instead\r\n        const eventLike = touch || event;\r\n        const box = this._private__target.getBoundingClientRect() || { left: 0, top: 0 };\r\n        return {\r\n            clientX: eventLike.clientX,\r\n            clientY: eventLike.clientY,\r\n            pageX: eventLike.pageX,\r\n            pageY: eventLike.pageY,\r\n            screenX: eventLike.screenX,\r\n            screenY: eventLike.screenY,\r\n            localX: (eventLike.clientX - box.left),\r\n            localY: (eventLike.clientY - box.top),\r\n            ctrlKey: event.ctrlKey,\r\n            altKey: event.altKey,\r\n            shiftKey: event.shiftKey,\r\n            metaKey: event.metaKey,\r\n            _internal_isTouch: !event.type.startsWith('mouse') && event.type !== 'contextmenu' && event.type !== 'click',\r\n            _internal_srcType: event.type,\r\n            _internal_target: eventLike.target,\r\n            _internal_view: event.view,\r\n            _internal_preventDefault: () => {\r\n                if (event.type !== 'touchstart') {\r\n                    // touchstart is passive and cannot be prevented\r\n                    preventDefault(event);\r\n                }\r\n            },\r\n        };\r\n    }\r\n}\r\nfunction getBoundingClientRect(element) {\r\n    return element.getBoundingClientRect() || { left: 0, top: 0 };\r\n}\r\nfunction getDistance(p1, p2) {\r\n    const xDiff = p1.clientX - p2.clientX;\r\n    const yDiff = p1.clientY - p2.clientY;\r\n    return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n}\r\nfunction preventDefault(event) {\r\n    if (event.cancelable) {\r\n        event.preventDefault();\r\n    }\r\n}\r\nfunction getPosition(eventLike) {\r\n    return {\r\n        _internal_x: eventLike.pageX,\r\n        _internal_y: eventLike.pageY,\r\n    };\r\n}\r\nfunction eventTimeStamp(e) {\r\n    // for some reason e.timestamp is always 0 on iPad with magic mouse, so we use performance.now() as a fallback\r\n    return e.timeStamp || performance.now();\r\n}\r\nfunction touchWithId(touches, id) {\r\n    for (let i = 0; i < touches.length; ++i) {\r\n        if (touches[i].identifier === id) {\r\n            return touches[i];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nclass PaneSeparator {\r\n    constructor(chartWidget, topPaneIndex, bottomPaneIndex) {\r\n        this._private__handle = null;\r\n        this._private__mouseEventHandler = null;\r\n        this._private__resizeEnabled = true;\r\n        this._private__resizeInfo = null;\r\n        this._private__chartWidget = chartWidget;\r\n        this._private__topPane = chartWidget._internal_paneWidgets()[topPaneIndex];\r\n        this._private__bottomPane = chartWidget._internal_paneWidgets()[bottomPaneIndex];\r\n        this._private__rowElement = document.createElement('tr');\r\n        this._private__rowElement.style.height = 1 /* SeparatorConstants.SeparatorHeight */ + 'px';\r\n        this._private__cell = document.createElement('td');\r\n        this._private__cell.style.position = 'relative';\r\n        this._private__cell.style.padding = '0';\r\n        this._private__cell.style.margin = '0';\r\n        this._private__cell.setAttribute('colspan', '3');\r\n        this._private__updateBorderColor();\r\n        this._private__rowElement.appendChild(this._private__cell);\r\n        this._private__resizeEnabled = this._private__chartWidget._internal_options()['layout'].panes.enableResize;\r\n        if (!this._private__resizeEnabled) {\r\n            this._private__handle = null;\r\n            this._private__mouseEventHandler = null;\r\n        }\r\n        else {\r\n            this._private__addResizableHandle();\r\n        }\r\n    }\r\n    _internal_destroy() {\r\n        if (this._private__mouseEventHandler !== null) {\r\n            this._private__mouseEventHandler._internal_destroy();\r\n        }\r\n    }\r\n    _internal_getElement() {\r\n        return this._private__rowElement;\r\n    }\r\n    _internal_getSize() {\r\n        return size$1({\r\n            width: this._private__topPane._internal_getSize().width,\r\n            height: 1 /* SeparatorConstants.SeparatorHeight */,\r\n        });\r\n    }\r\n    _internal_getBitmapSize() {\r\n        return size$1({\r\n            width: this._private__topPane._internal_getBitmapSize().width,\r\n            height: 1 /* SeparatorConstants.SeparatorHeight */ * window.devicePixelRatio,\r\n        });\r\n    }\r\n    _internal_drawBitmap(ctx, x, y) {\r\n        const bitmapSize = this._internal_getBitmapSize();\r\n        ctx.fillStyle = this._private__chartWidget._internal_options()['layout'].panes.separatorColor;\r\n        ctx.fillRect(x, y, bitmapSize.width, bitmapSize.height);\r\n    }\r\n    _internal_update() {\r\n        this._private__updateBorderColor();\r\n        if (this._private__chartWidget._internal_options()['layout'].panes.enableResize !== this._private__resizeEnabled) {\r\n            this._private__resizeEnabled = this._private__chartWidget._internal_options()['layout'].panes.enableResize;\r\n            if (this._private__resizeEnabled) {\r\n                this._private__addResizableHandle();\r\n            }\r\n            else {\r\n                if (this._private__handle !== null) {\r\n                    this._private__cell.removeChild(this._private__handle._internal_backgroundElement);\r\n                    this._private__cell.removeChild(this._private__handle._internal_element);\r\n                    this._private__handle = null;\r\n                }\r\n                if (this._private__mouseEventHandler !== null) {\r\n                    this._private__mouseEventHandler._internal_destroy();\r\n                    this._private__mouseEventHandler = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _private__addResizableHandle() {\r\n        const backgroundElement = document.createElement('div');\r\n        const bgStyle = backgroundElement.style;\r\n        bgStyle.position = 'fixed';\r\n        bgStyle.display = 'none';\r\n        bgStyle.zIndex = '49';\r\n        bgStyle.top = '0';\r\n        bgStyle.left = '0';\r\n        bgStyle.width = '100%';\r\n        bgStyle.height = '100%';\r\n        bgStyle.cursor = 'row-resize';\r\n        this._private__cell.appendChild(backgroundElement);\r\n        const element = document.createElement('div');\r\n        const style = element.style;\r\n        style.position = 'absolute';\r\n        style.zIndex = '50';\r\n        style.top = '-4px';\r\n        style.height = '9px';\r\n        style.width = '100%';\r\n        style.backgroundColor = '';\r\n        style.cursor = 'row-resize';\r\n        this._private__cell.appendChild(element);\r\n        const handlers = {\r\n            _internal_mouseEnterEvent: this._private__mouseOverEvent.bind(this),\r\n            _internal_mouseLeaveEvent: this._private__mouseLeaveEvent.bind(this),\r\n            _internal_mouseDownEvent: this._private__mouseDownEvent.bind(this),\r\n            _internal_touchStartEvent: this._private__mouseDownEvent.bind(this),\r\n            _internal_pressedMouseMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\r\n            _internal_touchMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\r\n            _internal_mouseUpEvent: this._private__mouseUpEvent.bind(this),\r\n            _internal_touchEndEvent: this._private__mouseUpEvent.bind(this),\r\n        };\r\n        this._private__mouseEventHandler = new MouseEventHandler(element, handlers, {\r\n            _internal_treatVertTouchDragAsPageScroll: () => false,\r\n            _internal_treatHorzTouchDragAsPageScroll: () => true,\r\n        });\r\n        this._private__handle = { _internal_element: element, _internal_backgroundElement: backgroundElement };\r\n    }\r\n    _private__updateBorderColor() {\r\n        this._private__cell.style.background = this._private__chartWidget._internal_options()['layout'].panes.separatorColor;\r\n    }\r\n    _private__mouseOverEvent(event) {\r\n        if (this._private__handle !== null) {\r\n            this._private__handle._internal_element.style.backgroundColor = this._private__chartWidget._internal_options()['layout'].panes.separatorHoverColor;\r\n        }\r\n    }\r\n    _private__mouseLeaveEvent(event) {\r\n        if (this._private__handle !== null && this._private__resizeInfo === null) {\r\n            this._private__handle._internal_element.style.backgroundColor = '';\r\n        }\r\n    }\r\n    _private__mouseDownEvent(event) {\r\n        if (this._private__handle === null) {\r\n            return;\r\n        }\r\n        const totalStretch = this._private__topPane._internal_state()._internal_stretchFactor() + this._private__bottomPane._internal_state()._internal_stretchFactor();\r\n        const totalHeight = this._private__topPane._internal_getSize().height + this._private__bottomPane._internal_getSize().height;\r\n        const pixelStretchFactor = totalStretch / totalHeight;\r\n        const minPaneStretch = 30 /* SeparatorConstants.MinPaneHeight */ * pixelStretchFactor;\r\n        if (totalStretch <= minPaneStretch * 2) {\r\n            // cannot resize panes that already have less than minimal height\r\n            // that's possible if there are many panes on the chart\r\n            return;\r\n        }\r\n        this._private__resizeInfo = {\r\n            _internal_startY: event.pageY,\r\n            _internal_prevStretchTopPane: this._private__topPane._internal_state()._internal_stretchFactor(),\r\n            _internal_maxPaneStretch: totalStretch - minPaneStretch,\r\n            _internal_totalStretch: totalStretch,\r\n            _internal_pixelStretchFactor: pixelStretchFactor,\r\n            _internal_minPaneStretch: minPaneStretch,\r\n        };\r\n        this._private__handle._internal_backgroundElement.style.display = 'block';\r\n    }\r\n    _private__pressedMouseMoveEvent(event) {\r\n        const resizeInfo = this._private__resizeInfo;\r\n        if (resizeInfo === null) {\r\n            return;\r\n        }\r\n        const deltaY = event.pageY - resizeInfo._internal_startY;\r\n        const deltaStretchFactor = deltaY * resizeInfo._internal_pixelStretchFactor;\r\n        const upperPaneNewStretch = clamp(resizeInfo._internal_prevStretchTopPane + deltaStretchFactor, resizeInfo._internal_minPaneStretch, resizeInfo._internal_maxPaneStretch);\r\n        this._private__topPane._internal_state()._internal_setStretchFactor(upperPaneNewStretch);\r\n        this._private__bottomPane._internal_state()._internal_setStretchFactor(resizeInfo._internal_totalStretch - upperPaneNewStretch);\r\n        this._private__chartWidget._internal_model()._internal_fullUpdate();\r\n    }\r\n    _private__mouseUpEvent(event) {\r\n        if (this._private__resizeInfo === null || this._private__handle === null) {\r\n            return;\r\n        }\r\n        this._private__resizeInfo = null;\r\n        this._private__handle._internal_backgroundElement.style.display = 'none';\r\n    }\r\n}\r\n\r\nfunction distanceBetweenPoints(pos1, pos2) {\r\n    return pos1._internal_position - pos2._internal_position;\r\n}\r\nfunction speedPxPerMSec(pos1, pos2, maxSpeed) {\r\n    const speed = (pos1._internal_position - pos2._internal_position) / (pos1._internal_time - pos2._internal_time);\r\n    return Math.sign(speed) * Math.min(Math.abs(speed), maxSpeed);\r\n}\r\nfunction durationMSec(speed, dumpingCoeff) {\r\n    const lnDumpingCoeff = Math.log(dumpingCoeff);\r\n    return Math.log((1 /* Constants.EpsilonDistance */ * lnDumpingCoeff) / -speed) / (lnDumpingCoeff);\r\n}\r\nclass KineticAnimation {\r\n    constructor(minSpeed, maxSpeed, dumpingCoeff, minMove) {\r\n        this._private__position1 = null;\r\n        this._private__position2 = null;\r\n        this._private__position3 = null;\r\n        this._private__position4 = null;\r\n        this._private__animationStartPosition = null;\r\n        this._private__durationMsecs = 0;\r\n        this._private__speedPxPerMsec = 0;\r\n        this._private__minSpeed = minSpeed;\r\n        this._private__maxSpeed = maxSpeed;\r\n        this._private__dumpingCoeff = dumpingCoeff;\r\n        this._private__minMove = minMove;\r\n    }\r\n    _internal_addPosition(position, time) {\r\n        if (this._private__position1 !== null) {\r\n            if (this._private__position1._internal_time === time) {\r\n                this._private__position1._internal_position = position;\r\n                return;\r\n            }\r\n            if (Math.abs(this._private__position1._internal_position - position) < this._private__minMove) {\r\n                return;\r\n            }\r\n        }\r\n        this._private__position4 = this._private__position3;\r\n        this._private__position3 = this._private__position2;\r\n        this._private__position2 = this._private__position1;\r\n        this._private__position1 = { _internal_time: time, _internal_position: position };\r\n    }\r\n    _internal_start(position, time) {\r\n        if (this._private__position1 === null || this._private__position2 === null) {\r\n            return;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        if (time - this._private__position1._internal_time > 50 /* Constants.MaxStartDelay */) {\r\n            return;\r\n        }\r\n        // To calculate all the rest parameters we should calculate the speed af first\r\n        let totalDistance = 0;\r\n        const speed1 = speedPxPerMSec(this._private__position1, this._private__position2, this._private__maxSpeed);\r\n        const distance1 = distanceBetweenPoints(this._private__position1, this._private__position2);\r\n        // We're calculating weighted average speed\r\n        // Than more distance for a segment, than more its weight\r\n        const speedItems = [speed1];\r\n        const distanceItems = [distance1];\r\n        totalDistance += distance1;\r\n        if (this._private__position3 !== null) {\r\n            const speed2 = speedPxPerMSec(this._private__position2, this._private__position3, this._private__maxSpeed);\r\n            // stop at this moment if direction of the segment is opposite\r\n            if (Math.sign(speed2) === Math.sign(speed1)) {\r\n                const distance2 = distanceBetweenPoints(this._private__position2, this._private__position3);\r\n                speedItems.push(speed2);\r\n                distanceItems.push(distance2);\r\n                totalDistance += distance2;\r\n                if (this._private__position4 !== null) {\r\n                    const speed3 = speedPxPerMSec(this._private__position3, this._private__position4, this._private__maxSpeed);\r\n                    if (Math.sign(speed3) === Math.sign(speed1)) {\r\n                        const distance3 = distanceBetweenPoints(this._private__position3, this._private__position4);\r\n                        speedItems.push(speed3);\r\n                        distanceItems.push(distance3);\r\n                        totalDistance += distance3;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let resultSpeed = 0;\r\n        for (let i = 0; i < speedItems.length; ++i) {\r\n            resultSpeed += distanceItems[i] / totalDistance * speedItems[i];\r\n        }\r\n        if (Math.abs(resultSpeed) < this._private__minSpeed) {\r\n            return;\r\n        }\r\n        this._private__animationStartPosition = { _internal_position: position, _internal_time: time };\r\n        this._private__speedPxPerMsec = resultSpeed;\r\n        this._private__durationMsecs = durationMSec(Math.abs(resultSpeed), this._private__dumpingCoeff);\r\n    }\r\n    _internal_getPosition(time) {\r\n        const startPosition = ensureNotNull(this._private__animationStartPosition);\r\n        const durationMsecs = time - startPosition._internal_time;\r\n        return startPosition._internal_position + this._private__speedPxPerMsec * (Math.pow(this._private__dumpingCoeff, durationMsecs) - 1) / (Math.log(this._private__dumpingCoeff));\r\n    }\r\n    _internal_finished(time) {\r\n        return this._private__animationStartPosition === null || this._private__progressDuration(time) === this._private__durationMsecs;\r\n    }\r\n    _private__progressDuration(time) {\r\n        const startPosition = ensureNotNull(this._private__animationStartPosition);\r\n        const progress = time - startPosition._internal_time;\r\n        return Math.min(progress, this._private__durationMsecs);\r\n    }\r\n}\r\n\r\nconst svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"35\" height=\"19\" fill=\"none\"><g fill-rule=\"evenodd\" clip-path=\"url(#a)\" clip-rule=\"evenodd\"><path fill=\"var(--stroke)\" d=\"M2 0H0v10h6v9h21.4l.5-1.3 6-15 1-2.7H23.7l-.5 1.3-.2.6a5 5 0 0 0-7-.9V0H2Zm20 17h4l5.2-13 .8-2h-7l-1 2.5-.2.5-1.5 3.8-.3.7V17Zm-.8-10a3 3 0 0 0 .7-2.7A3 3 0 1 0 16.8 7h4.4ZM14 7V2H2v6h6v9h4V7h2Z\"/><path fill=\"var(--fill)\" d=\"M14 2H2v6h6v9h6V2Zm12 15h-7l6-15h7l-6 15Zm-7-9a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z\"/></g><defs><clipPath id=\"a\"><path fill=\"var(--stroke)\" d=\"M0 0h35v19H0z\"/></clipPath></defs></svg>`;\r\nconst css = `a#tv-attr-logo{--fill:#131722;--stroke:#fff;position:absolute;left:10px;bottom:10px;height:19px;width:35px;margin:0;padding:0;border:0;z-index:3;}a#tv-attr-logo[data-dark]{--fill:#D1D4DC;--stroke:#131722;}`;\r\n// This widget doesn't support dynamically responding to options changes\r\n// because it is expected that the `attributionLogo` option won't be changed\r\n// and this saves some bundle size.\r\nclass AttributionLogoWidget {\r\n    constructor(container, chart) {\r\n        this._private__element = undefined;\r\n        this._private__cssElement = undefined;\r\n        this._private__theme = undefined;\r\n        this._private__visible = false;\r\n        this._private__container = container;\r\n        this._private__chart = chart;\r\n        this._private__render();\r\n    }\r\n    _internal_update() {\r\n        this._private__render();\r\n    }\r\n    _internal_removeElement() {\r\n        if (this._private__element) {\r\n            this._private__container.removeChild(this._private__element);\r\n        }\r\n        if (this._private__cssElement) {\r\n            this._private__container.removeChild(this._private__cssElement);\r\n        }\r\n        this._private__element = undefined;\r\n        this._private__cssElement = undefined;\r\n    }\r\n    _private__shouldUpdate() {\r\n        return this._private__visible !== this._private__shouldBeVisible() || this._private__theme !== this._private__themeToUse();\r\n    }\r\n    _private__themeToUse() {\r\n        return this._private__chart._internal_model()._internal_colorParser()._internal_colorStringToGrayscale(this._private__chart._internal_options()['layout'].textColor) > 160\r\n            ? 'dark'\r\n            : 'light';\r\n    }\r\n    _private__shouldBeVisible() {\r\n        return this._private__chart._internal_options()['layout'].attributionLogo;\r\n    }\r\n    _private__getUTMSource() {\r\n        const url = new URL(location.href);\r\n        if (!url.hostname) {\r\n            // ignore local testing\r\n            return '';\r\n        }\r\n        return '&utm_source=' + url.hostname + url.pathname;\r\n    }\r\n    _private__render() {\r\n        if (!this._private__shouldUpdate()) {\r\n            return;\r\n        }\r\n        this._internal_removeElement();\r\n        this._private__visible = this._private__shouldBeVisible();\r\n        if (this._private__visible) {\r\n            this._private__theme = this._private__themeToUse();\r\n            this._private__cssElement = document.createElement('style');\r\n            this._private__cssElement.innerText = css;\r\n            this._private__element = document.createElement('a');\r\n            this._private__element.href = `https://www.tradingview.com/?utm_medium=lwc-link&utm_campaign=lwc-chart${this._private__getUTMSource()}`;\r\n            this._private__element.title = 'Charting by TradingView';\r\n            this._private__element.id = 'tv-attr-logo';\r\n            this._private__element.target = '_blank';\r\n            this._private__element.innerHTML = svg;\r\n            this._private__element.toggleAttribute('data-dark', this._private__theme === 'dark');\r\n            this._private__container.appendChild(this._private__cssElement);\r\n            this._private__container.appendChild(this._private__element);\r\n        }\r\n    }\r\n}\r\n\r\nfunction createBoundCanvas(parentElement, size) {\r\n    const doc = ensureNotNull(parentElement.ownerDocument);\r\n    const canvas = doc.createElement('canvas');\r\n    parentElement.appendChild(canvas);\r\n    const binding = bindCanvasElementBitmapSizeTo(canvas, {\r\n        type: 'device-pixel-content-box',\r\n        options: {\r\n            allowResizeObserver: true,\r\n        },\r\n        transform: (bitmapSize, canvasElementClientSize) => ({\r\n            width: Math.max(bitmapSize.width, canvasElementClientSize.width),\r\n            height: Math.max(bitmapSize.height, canvasElementClientSize.height),\r\n        }),\r\n    });\r\n    binding.resizeCanvasElement(size);\r\n    return binding;\r\n}\r\nfunction releaseCanvas(canvas) {\r\n    // This function fixes the iOS Safari error \"Total canvas memory use exceeds the maximum limit\".\r\n    // Seems that iOS Safari stores canvas elements for some additional time internally.\r\n    // So if we create/destroy a lot of canvas elements in a short period of time we can get this error.\r\n    // We resize the canvas to 1x1 pixels to force it to release memmory resources.\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    canvas.getContext('2d')?.clearRect(0, 0, 1, 1);\r\n}\r\n\r\nfunction drawBackground(renderer, target, isHovered, hitTestData) {\r\n    if (renderer._internal_drawBackground) {\r\n        renderer._internal_drawBackground(target, isHovered, hitTestData);\r\n    }\r\n}\r\nfunction drawForeground(renderer, target, isHovered, hitTestData) {\r\n    renderer._internal_draw(target, isHovered, hitTestData);\r\n}\r\nfunction drawSourceViews(paneViewsGetter, drawRendererFn, source, pane) {\r\n    const views = paneViewsGetter(source, pane);\r\n    for (const view of views) {\r\n        const renderer = view._internal_renderer(pane);\r\n        if (renderer !== null) {\r\n            drawRendererFn(renderer);\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasPriceScale(source) {\r\n    return source._internal_priceScale !== undefined;\r\n}\r\nfunction buildPriceAxisViewsGetter(zOrder, priceScaleId) {\r\n    return (source) => {\r\n        if (!hasPriceScale(source)) {\r\n            return [];\r\n        }\r\n        const psId = source._internal_priceScale()?._internal_id() ?? '';\r\n        if (psId !== priceScaleId) {\r\n            // exclude if source is using a different price scale.\r\n            return [];\r\n        }\r\n        return source._internal_pricePaneViews?.(zOrder) ?? [];\r\n    };\r\n}\r\nfunction recalculateOverlapping(views, direction, scaleHeight, rendererOptions) {\r\n    if (!views.length) {\r\n        return;\r\n    }\r\n    let currentGroupStart = 0;\r\n    const initLabelHeight = views[0]._internal_height(rendererOptions, true);\r\n    let spaceBeforeCurrentGroup = direction === 1\r\n        ? scaleHeight / 2 - (views[0]._internal_getFixedCoordinate() - initLabelHeight / 2)\r\n        : views[0]._internal_getFixedCoordinate() - initLabelHeight / 2 - scaleHeight / 2;\r\n    spaceBeforeCurrentGroup = Math.max(0, spaceBeforeCurrentGroup);\r\n    for (let i = 1; i < views.length; i++) {\r\n        const view = views[i];\r\n        const prev = views[i - 1];\r\n        const height = prev._internal_height(rendererOptions, false);\r\n        const coordinate = view._internal_getFixedCoordinate();\r\n        const prevFixedCoordinate = prev._internal_getFixedCoordinate();\r\n        const overlap = direction === 1\r\n            ? coordinate > prevFixedCoordinate - height\r\n            : coordinate < prevFixedCoordinate + height;\r\n        if (overlap) {\r\n            const fixedCoordinate = prevFixedCoordinate - height * direction;\r\n            view._internal_setFixedCoordinate(fixedCoordinate);\r\n            const edgePoint = fixedCoordinate - direction * height / 2;\r\n            const outOfViewport = direction === 1 ? edgePoint < 0 : edgePoint > scaleHeight;\r\n            if (outOfViewport && spaceBeforeCurrentGroup > 0) {\r\n                // shift the whole group up or down\r\n                const desiredGroupShift = direction === 1 ? -1 - edgePoint : edgePoint - scaleHeight;\r\n                const possibleShift = Math.min(desiredGroupShift, spaceBeforeCurrentGroup);\r\n                for (let k = currentGroupStart; k < views.length; k++) {\r\n                    views[k]._internal_setFixedCoordinate(views[k]._internal_getFixedCoordinate() + direction * possibleShift);\r\n                }\r\n                spaceBeforeCurrentGroup -= possibleShift;\r\n            }\r\n        }\r\n        else {\r\n            currentGroupStart = i;\r\n            spaceBeforeCurrentGroup = direction === 1\r\n                ? prevFixedCoordinate - height - coordinate\r\n                : coordinate - (prevFixedCoordinate + height);\r\n        }\r\n    }\r\n}\r\nfunction priceScaleCrosshairLabelVisible(crosshair) {\r\n    return crosshair.mode !== 2 /* CrosshairMode.Hidden */ && crosshair.horzLine.visible && crosshair.horzLine.labelVisible;\r\n}\r\nclass PriceAxisWidget {\r\n    constructor(pane, options, rendererOptionsProvider, side) {\r\n        this._private__priceScale = null;\r\n        this._private__size = null;\r\n        this._private__mousedown = false;\r\n        this._private__widthCache = new TextWidthCache(200);\r\n        this._private__font = null;\r\n        this._private__prevOptimalWidth = 0;\r\n        this._private__isSettingSize = false;\r\n        this._private__canvasSuggestedBitmapSizeChangedHandler = () => {\r\n            if (this._private__isSettingSize) {\r\n                return;\r\n            }\r\n            this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();\r\n        };\r\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = () => {\r\n            if (this._private__isSettingSize) {\r\n                return;\r\n            }\r\n            this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();\r\n        };\r\n        this._private__pane = pane;\r\n        this._private__options = options;\r\n        this._private__layoutOptions = options['layout'];\r\n        this._private__rendererOptionsProvider = rendererOptionsProvider;\r\n        this._private__isLeft = side === 'left';\r\n        this._private__sourcePaneViews = buildPriceAxisViewsGetter('normal', side);\r\n        this._private__sourceTopPaneViews = buildPriceAxisViewsGetter('top', side);\r\n        this._private__sourceBottomPaneViews = buildPriceAxisViewsGetter('bottom', side);\r\n        this._private__cell = document.createElement('div');\r\n        this._private__cell.style.height = '100%';\r\n        this._private__cell.style.overflow = 'hidden';\r\n        this._private__cell.style.width = '25px';\r\n        this._private__cell.style.left = '0';\r\n        this._private__cell.style.position = 'relative';\r\n        this._private__canvasBinding = createBoundCanvas(this._private__cell, size$1({ width: 16, height: 16 }));\r\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\r\n        const canvas = this._private__canvasBinding.canvasElement;\r\n        canvas.style.position = 'absolute';\r\n        canvas.style.zIndex = '1';\r\n        canvas.style.left = '0';\r\n        canvas.style.top = '0';\r\n        this._private__topCanvasBinding = createBoundCanvas(this._private__cell, size$1({ width: 16, height: 16 }));\r\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\r\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\r\n        topCanvas.style.position = 'absolute';\r\n        topCanvas.style.zIndex = '2';\r\n        topCanvas.style.left = '0';\r\n        topCanvas.style.top = '0';\r\n        const handler = {\r\n            _internal_mouseDownEvent: this._private__mouseDownEvent.bind(this),\r\n            _internal_touchStartEvent: this._private__mouseDownEvent.bind(this),\r\n            _internal_pressedMouseMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\r\n            _internal_touchMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\r\n            _internal_mouseDownOutsideEvent: this._private__mouseDownOutsideEvent.bind(this),\r\n            _internal_mouseUpEvent: this._private__mouseUpEvent.bind(this),\r\n            _internal_touchEndEvent: this._private__mouseUpEvent.bind(this),\r\n            _internal_mouseDoubleClickEvent: this._private__mouseDoubleClickEvent.bind(this),\r\n            _internal_doubleTapEvent: this._private__mouseDoubleClickEvent.bind(this),\r\n            _internal_mouseEnterEvent: this._private__mouseEnterEvent.bind(this),\r\n            _internal_mouseLeaveEvent: this._private__mouseLeaveEvent.bind(this),\r\n        };\r\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, handler, {\r\n            _internal_treatVertTouchDragAsPageScroll: () => !this._private__options['handleScroll'].vertTouchDrag,\r\n            _internal_treatHorzTouchDragAsPageScroll: () => true,\r\n        });\r\n    }\r\n    _internal_destroy() {\r\n        this._private__mouseEventHandler._internal_destroy();\r\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\r\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\r\n        this._private__topCanvasBinding.dispose();\r\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\r\n        releaseCanvas(this._private__canvasBinding.canvasElement);\r\n        this._private__canvasBinding.dispose();\r\n        if (this._private__priceScale !== null) {\r\n            this._private__priceScale._internal_onMarksChanged()._internal_unsubscribeAll(this);\r\n        }\r\n        this._private__priceScale = null;\r\n    }\r\n    _internal_getElement() {\r\n        return this._private__cell;\r\n    }\r\n    _internal_fontSize() {\r\n        return this._private__layoutOptions.fontSize;\r\n    }\r\n    _internal_rendererOptions() {\r\n        const options = this._private__rendererOptionsProvider._internal_options();\r\n        const isFontChanged = this._private__font !== options._internal_font;\r\n        if (isFontChanged) {\r\n            this._private__widthCache._internal_reset();\r\n            this._private__font = options._internal_font;\r\n        }\r\n        return options;\r\n    }\r\n    _internal_optimalWidth() {\r\n        if (this._private__priceScale === null) {\r\n            return 0;\r\n        }\r\n        let tickMarkMaxWidth = 0;\r\n        const rendererOptions = this._internal_rendererOptions();\r\n        const ctx = ensureNotNull(this._private__canvasBinding.canvasElement.getContext('2d', {\r\n            colorSpace: this._private__pane._internal_chart()._internal_options().layout.colorSpace,\r\n        }));\r\n        ctx.save();\r\n        const tickMarks = this._private__priceScale._internal_marks();\r\n        ctx.font = this._private__baseFont();\r\n        if (tickMarks.length > 0) {\r\n            tickMarkMaxWidth = Math.max(this._private__widthCache._internal_measureText(ctx, tickMarks[0]._internal_label), this._private__widthCache._internal_measureText(ctx, tickMarks[tickMarks.length - 1]._internal_label));\r\n        }\r\n        const views = this._private__backLabels();\r\n        for (let j = views.length; j--;) {\r\n            const width = this._private__widthCache._internal_measureText(ctx, views[j]._internal_text());\r\n            if (width > tickMarkMaxWidth) {\r\n                tickMarkMaxWidth = width;\r\n            }\r\n        }\r\n        const firstValue = this._private__priceScale._internal_firstValue();\r\n        if (firstValue !== null &&\r\n            this._private__size !== null &&\r\n            priceScaleCrosshairLabelVisible(this._private__options.crosshair)) {\r\n            const topValue = this._private__priceScale._internal_coordinateToPrice(1, firstValue);\r\n            const bottomValue = this._private__priceScale._internal_coordinateToPrice(this._private__size.height - 2, firstValue);\r\n            tickMarkMaxWidth = Math.max(tickMarkMaxWidth, this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.floor(Math.min(topValue, bottomValue)) + 0.11111111111111, firstValue)), this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.ceil(Math.max(topValue, bottomValue)) - 0.11111111111111, firstValue)));\r\n        }\r\n        ctx.restore();\r\n        const resultTickMarksMaxWidth = tickMarkMaxWidth || 34 /* Constants.DefaultOptimalWidth */;\r\n        const res = Math.ceil(rendererOptions._internal_borderSize +\r\n            rendererOptions._internal_tickLength +\r\n            rendererOptions._internal_paddingInner +\r\n            rendererOptions._internal_paddingOuter +\r\n            5 /* Constants.LabelOffset */ +\r\n            resultTickMarksMaxWidth);\r\n        // make it even, remove this after migration to perfect fancy canvas\r\n        return suggestPriceScaleWidth(res);\r\n    }\r\n    _internal_setSize(newSize) {\r\n        if (this._private__size === null || !equalSizes(this._private__size, newSize)) {\r\n            this._private__size = newSize;\r\n            this._private__isSettingSize = true;\r\n            this._private__canvasBinding.resizeCanvasElement(newSize);\r\n            this._private__topCanvasBinding.resizeCanvasElement(newSize);\r\n            this._private__isSettingSize = false;\r\n            this._private__cell.style.width = `${newSize.width}px`;\r\n            this._private__cell.style.height = `${newSize.height}px`;\r\n        }\r\n    }\r\n    _internal_getWidth() {\r\n        return ensureNotNull(this._private__size).width;\r\n    }\r\n    _internal_setPriceScale(priceScale) {\r\n        if (this._private__priceScale === priceScale) {\r\n            return;\r\n        }\r\n        if (this._private__priceScale !== null) {\r\n            this._private__priceScale._internal_onMarksChanged()._internal_unsubscribeAll(this);\r\n        }\r\n        this._private__priceScale = priceScale;\r\n        priceScale._internal_onMarksChanged()._internal_subscribe(this._private__onMarksChanged.bind(this), this);\r\n    }\r\n    _internal_priceScale() {\r\n        return this._private__priceScale;\r\n    }\r\n    _internal_reset() {\r\n        const pane = this._private__pane._internal_state();\r\n        const model = this._private__pane._internal_chart()._internal_model();\r\n        model._internal_resetPriceScale(pane, ensureNotNull(this._internal_priceScale()));\r\n    }\r\n    _internal_paint(type) {\r\n        if (this._private__size === null) {\r\n            return;\r\n        }\r\n        const canvasOptions = {\r\n            colorSpace: this._private__pane._internal_chart()._internal_options().layout.colorSpace,\r\n        };\r\n        if (type !== 1 /* InvalidationLevel.Cursor */) {\r\n            this._private__alignLabels();\r\n            this._private__canvasBinding.applySuggestedBitmapSize();\r\n            const target = tryCreateCanvasRenderingTarget2D(this._private__canvasBinding, canvasOptions);\r\n            if (target !== null) {\r\n                target.useBitmapCoordinateSpace((scope) => {\r\n                    this._private__drawBackground(scope);\r\n                    this._private__drawBorder(scope);\r\n                });\r\n                this._private__pane._internal_drawAdditionalSources(target, this._private__sourceBottomPaneViews);\r\n                this._private__drawTickMarks(target);\r\n                this._private__pane._internal_drawAdditionalSources(target, this._private__sourcePaneViews);\r\n                this._private__drawBackLabels(target);\r\n            }\r\n        }\r\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\r\n        const topTarget = tryCreateCanvasRenderingTarget2D(this._private__topCanvasBinding, canvasOptions);\r\n        if (topTarget !== null) {\r\n            topTarget.useBitmapCoordinateSpace(({ context: ctx, bitmapSize }) => {\r\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\r\n            });\r\n            this._private__drawCrosshairLabel(topTarget);\r\n            this._private__pane._internal_drawAdditionalSources(topTarget, this._private__sourceTopPaneViews);\r\n        }\r\n    }\r\n    _internal_getBitmapSize() {\r\n        return this._private__canvasBinding.bitmapSize;\r\n    }\r\n    _internal_drawBitmap(ctx, x, y) {\r\n        const bitmapSize = this._internal_getBitmapSize();\r\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\r\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\r\n        }\r\n    }\r\n    _internal_update() {\r\n        // this call has side-effect - it regenerates marks on the price scale\r\n        this._private__priceScale?._internal_marks();\r\n    }\r\n    _private__mouseDownEvent(e) {\r\n        if (this._private__priceScale === null || this._private__priceScale._internal_isEmpty() || !this._private__options['handleScale'].axisPressedMouseMove.price) {\r\n            return;\r\n        }\r\n        const model = this._private__pane._internal_chart()._internal_model();\r\n        const pane = this._private__pane._internal_state();\r\n        this._private__mousedown = true;\r\n        model._internal_startScalePrice(pane, this._private__priceScale, e.localY);\r\n    }\r\n    _private__pressedMouseMoveEvent(e) {\r\n        if (this._private__priceScale === null || !this._private__options['handleScale'].axisPressedMouseMove.price) {\r\n            return;\r\n        }\r\n        const model = this._private__pane._internal_chart()._internal_model();\r\n        const pane = this._private__pane._internal_state();\r\n        const priceScale = this._private__priceScale;\r\n        model._internal_scalePriceTo(pane, priceScale, e.localY);\r\n    }\r\n    _private__mouseDownOutsideEvent() {\r\n        if (this._private__priceScale === null || !this._private__options['handleScale'].axisPressedMouseMove.price) {\r\n            return;\r\n        }\r\n        const model = this._private__pane._internal_chart()._internal_model();\r\n        const pane = this._private__pane._internal_state();\r\n        const priceScale = this._private__priceScale;\r\n        if (this._private__mousedown) {\r\n            this._private__mousedown = false;\r\n            model._internal_endScalePrice(pane, priceScale);\r\n        }\r\n    }\r\n    _private__mouseUpEvent(e) {\r\n        if (this._private__priceScale === null || !this._private__options['handleScale'].axisPressedMouseMove.price) {\r\n            return;\r\n        }\r\n        const model = this._private__pane._internal_chart()._internal_model();\r\n        const pane = this._private__pane._internal_state();\r\n        this._private__mousedown = false;\r\n        model._internal_endScalePrice(pane, this._private__priceScale);\r\n    }\r\n    _private__mouseDoubleClickEvent(e) {\r\n        if (this._private__options['handleScale'].axisDoubleClickReset.price) {\r\n            this._internal_reset();\r\n        }\r\n    }\r\n    _private__mouseEnterEvent(e) {\r\n        if (this._private__priceScale === null) {\r\n            return;\r\n        }\r\n        const model = this._private__pane._internal_chart()._internal_model();\r\n        if (model._internal_options()['handleScale'].axisPressedMouseMove.price && !this._private__priceScale._internal_isPercentage() && !this._private__priceScale._internal_isIndexedTo100()) {\r\n            this._private__setCursor(1 /* CursorType.NsResize */);\r\n        }\r\n    }\r\n    _private__mouseLeaveEvent(e) {\r\n        this._private__setCursor(0 /* CursorType.Default */);\r\n    }\r\n    _private__backLabels() {\r\n        const res = [];\r\n        const priceScale = (this._private__priceScale === null) ? undefined : this._private__priceScale;\r\n        const addViewsForSources = (sources) => {\r\n            for (let i = 0; i < sources.length; ++i) {\r\n                const source = sources[i];\r\n                const views = source._internal_priceAxisViews(this._private__pane._internal_state(), priceScale);\r\n                for (let j = 0; j < views.length; j++) {\r\n                    res.push(views[j]);\r\n                }\r\n            }\r\n        };\r\n        // calculate max and min coordinates for views on selection\r\n        // crosshair individually\r\n        addViewsForSources(this._private__pane._internal_state()._internal_orderedSources());\r\n        return res;\r\n    }\r\n    _private__drawBackground({ context: ctx, bitmapSize }) {\r\n        const { width, height } = bitmapSize;\r\n        const model = this._private__pane._internal_state()._internal_model();\r\n        const topColor = model._internal_backgroundTopColor();\r\n        const bottomColor = model._internal_backgroundBottomColor();\r\n        if (topColor === bottomColor) {\r\n            clearRect(ctx, 0, 0, width, height, topColor);\r\n        }\r\n        else {\r\n            clearRectWithGradient(ctx, 0, 0, width, height, topColor, bottomColor);\r\n        }\r\n    }\r\n    _private__drawBorder({ context: ctx, bitmapSize, horizontalPixelRatio }) {\r\n        if (this._private__size === null || this._private__priceScale === null || !this._private__priceScale._internal_options().borderVisible) {\r\n            return;\r\n        }\r\n        ctx.fillStyle = this._private__priceScale._internal_options().borderColor;\r\n        const borderSize = Math.max(1, Math.floor(this._internal_rendererOptions()._internal_borderSize * horizontalPixelRatio));\r\n        let left;\r\n        if (this._private__isLeft) {\r\n            left = bitmapSize.width - borderSize;\r\n        }\r\n        else {\r\n            left = 0;\r\n        }\r\n        ctx.fillRect(left, 0, borderSize, bitmapSize.height);\r\n    }\r\n    _private__drawTickMarks(target) {\r\n        if (this._private__size === null || this._private__priceScale === null) {\r\n            return;\r\n        }\r\n        const tickMarks = this._private__priceScale._internal_marks();\r\n        const priceScaleOptions = this._private__priceScale._internal_options();\r\n        const rendererOptions = this._internal_rendererOptions();\r\n        const tickMarkLeftX = this._private__isLeft ?\r\n            (this._private__size.width - rendererOptions._internal_tickLength) :\r\n            0;\r\n        if (priceScaleOptions.borderVisible && priceScaleOptions.ticksVisible) {\r\n            target.useBitmapCoordinateSpace(({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) => {\r\n                ctx.fillStyle = priceScaleOptions.borderColor;\r\n                const tickHeight = Math.max(1, Math.floor(verticalPixelRatio));\r\n                const tickOffset = Math.floor(verticalPixelRatio * 0.5);\r\n                const tickLength = Math.round(rendererOptions._internal_tickLength * horizontalPixelRatio);\r\n                ctx.beginPath();\r\n                for (const tickMark of tickMarks) {\r\n                    ctx.rect(Math.floor(tickMarkLeftX * horizontalPixelRatio), Math.round(tickMark._internal_coord * verticalPixelRatio) - tickOffset, tickLength, tickHeight);\r\n                }\r\n                ctx.fill();\r\n            });\r\n        }\r\n        target.useMediaCoordinateSpace(({ context: ctx }) => {\r\n            ctx.font = this._private__baseFont();\r\n            ctx.fillStyle = priceScaleOptions.textColor ?? this._private__layoutOptions.textColor;\r\n            ctx.textAlign = this._private__isLeft ? 'right' : 'left';\r\n            ctx.textBaseline = 'middle';\r\n            const textLeftX = this._private__isLeft ?\r\n                Math.round(tickMarkLeftX - rendererOptions._internal_paddingInner) :\r\n                Math.round(tickMarkLeftX + rendererOptions._internal_tickLength + rendererOptions._internal_paddingInner);\r\n            const yMidCorrections = tickMarks.map((mark) => this._private__widthCache._internal_yMidCorrection(ctx, mark._internal_label));\r\n            for (let i = tickMarks.length; i--;) {\r\n                const tickMark = tickMarks[i];\r\n                ctx.fillText(tickMark._internal_label, textLeftX, tickMark._internal_coord + yMidCorrections[i]);\r\n            }\r\n        });\r\n    }\r\n    _private__alignLabels() {\r\n        if (this._private__size === null || this._private__priceScale === null) {\r\n            return;\r\n        }\r\n        let center = this._private__size.height / 2;\r\n        const views = [];\r\n        const orderedSources = this._private__priceScale._internal_orderedSources().slice(); // Copy of array\r\n        const pane = this._private__pane;\r\n        const paneState = pane._internal_state();\r\n        const rendererOptions = this._internal_rendererOptions();\r\n        // if we are default price scale, append labels from no-scale\r\n        const isDefault = this._private__priceScale === paneState._internal_defaultVisiblePriceScale();\r\n        if (isDefault) {\r\n            this._private__pane._internal_state()._internal_orderedSources().forEach((source) => {\r\n                if (paneState._internal_isOverlay(source)) {\r\n                    orderedSources.push(source);\r\n                }\r\n            });\r\n        }\r\n        // we can use any, but let's use the first source as \"center\" one\r\n        const centerSource = this._private__priceScale._internal_dataSources()[0];\r\n        const priceScale = this._private__priceScale;\r\n        const updateForSources = (sources) => {\r\n            sources.forEach((source) => {\r\n                const sourceViews = source._internal_priceAxisViews(paneState, priceScale);\r\n                // never align selected sources\r\n                sourceViews.forEach((view) => {\r\n                    view._internal_setFixedCoordinate(null);\r\n                    if (view._internal_isVisible()) {\r\n                        views.push(view);\r\n                    }\r\n                });\r\n                if (centerSource === source && sourceViews.length > 0) {\r\n                    center = sourceViews[0]._internal_coordinate();\r\n                }\r\n            });\r\n        };\r\n        // crosshair individually\r\n        updateForSources(orderedSources);\r\n        views.forEach((view) => view._internal_setFixedCoordinate(view._internal_coordinate()));\r\n        const options = this._private__priceScale._internal_options();\r\n        if (!options.alignLabels) {\r\n            return;\r\n        }\r\n        this._private__fixLabelOverlap(views, rendererOptions, center);\r\n    }\r\n    _private__fixLabelOverlap(views, rendererOptions, center) {\r\n        if (this._private__size === null) {\r\n            return;\r\n        }\r\n        // split into two parts\r\n        const top = views.filter((view) => view._internal_coordinate() <= center);\r\n        const bottom = views.filter((view) => view._internal_coordinate() > center);\r\n        // sort top from center to top\r\n        top.sort((l, r) => r._internal_coordinate() - l._internal_coordinate());\r\n        // share center label\r\n        if (top.length && bottom.length) {\r\n            bottom.push(top[0]);\r\n        }\r\n        bottom.sort((l, r) => l._internal_coordinate() - r._internal_coordinate());\r\n        for (const view of views) {\r\n            const halfHeight = Math.floor(view._internal_height(rendererOptions) / 2);\r\n            const coordinate = view._internal_coordinate();\r\n            if (coordinate > -halfHeight && coordinate < halfHeight) {\r\n                view._internal_setFixedCoordinate(halfHeight);\r\n            }\r\n            if (coordinate > (this._private__size.height - halfHeight) && coordinate < this._private__size.height + halfHeight) {\r\n                view._internal_setFixedCoordinate(this._private__size.height - halfHeight);\r\n            }\r\n        }\r\n        recalculateOverlapping(top, 1, this._private__size.height, rendererOptions);\r\n        recalculateOverlapping(bottom, -1, this._private__size.height, rendererOptions);\r\n    }\r\n    _private__drawBackLabels(target) {\r\n        if (this._private__size === null) {\r\n            return;\r\n        }\r\n        const views = this._private__backLabels();\r\n        const rendererOptions = this._internal_rendererOptions();\r\n        const align = this._private__isLeft ? 'right' : 'left';\r\n        views.forEach((view) => {\r\n            if (view._internal_isAxisLabelVisible()) {\r\n                const renderer = view._internal_renderer(ensureNotNull(this._private__priceScale));\r\n                renderer._internal_draw(target, rendererOptions, this._private__widthCache, align);\r\n            }\r\n        });\r\n    }\r\n    _private__drawCrosshairLabel(target) {\r\n        if (this._private__size === null || this._private__priceScale === null) {\r\n            return;\r\n        }\r\n        const model = this._private__pane._internal_chart()._internal_model();\r\n        const views = []; // array of arrays\r\n        const pane = this._private__pane._internal_state();\r\n        const v = model._internal_crosshairSource()._internal_priceAxisViews(pane, this._private__priceScale);\r\n        if (v.length) {\r\n            views.push(v);\r\n        }\r\n        const ro = this._internal_rendererOptions();\r\n        const align = this._private__isLeft ? 'right' : 'left';\r\n        views.forEach((arr) => {\r\n            arr.forEach((view) => {\r\n                view._internal_renderer(ensureNotNull(this._private__priceScale))._internal_draw(target, ro, this._private__widthCache, align);\r\n            });\r\n        });\r\n    }\r\n    _private__setCursor(type) {\r\n        this._private__cell.style.cursor = type === 1 /* CursorType.NsResize */ ? 'ns-resize' : 'default';\r\n    }\r\n    _private__onMarksChanged() {\r\n        const width = this._internal_optimalWidth();\r\n        // avoid price scale is shrunk\r\n        // using < instead !== to avoid infinite changes\r\n        if (this._private__prevOptimalWidth < width) {\r\n            this._private__pane._internal_chart()._internal_model()._internal_fullUpdate();\r\n        }\r\n        this._private__prevOptimalWidth = width;\r\n    }\r\n    _private__baseFont() {\r\n        return makeFont(this._private__layoutOptions.fontSize, this._private__layoutOptions.fontFamily);\r\n    }\r\n}\r\n\r\nfunction sourceBottomPaneViews$1(source, pane) {\r\n    return source._internal_bottomPaneViews?.(pane) ?? [];\r\n}\r\nfunction sourcePaneViews$1(source, pane) {\r\n    return source._internal_paneViews?.(pane) ?? [];\r\n}\r\nfunction sourceLabelPaneViews(source, pane) {\r\n    return source._internal_labelPaneViews?.(pane) ?? [];\r\n}\r\nfunction sourceTopPaneViews$1(source, pane) {\r\n    return source._internal_topPaneViews?.(pane) ?? [];\r\n}\r\nclass PaneWidget {\r\n    constructor(chart, state) {\r\n        this._private__size = size$1({ width: 0, height: 0 });\r\n        this._private__leftPriceAxisWidget = null;\r\n        this._private__rightPriceAxisWidget = null;\r\n        this._private__attributionLogoWidget = null;\r\n        this._private__startScrollingPos = null;\r\n        this._private__isScrolling = false;\r\n        this._private__clicked = new Delegate();\r\n        this._private__dblClicked = new Delegate();\r\n        this._private__prevPinchScale = 0;\r\n        this._private__longTap = false;\r\n        this._private__startTrackPoint = null;\r\n        this._private__exitTrackingModeOnNextTry = false;\r\n        this._private__initCrosshairPosition = null;\r\n        this._private__scrollXAnimation = null;\r\n        this._private__isSettingSize = false;\r\n        this._private__canvasSuggestedBitmapSizeChangedHandler = () => {\r\n            if (this._private__isSettingSize || this._private__state === null) {\r\n                return;\r\n            }\r\n            this._private__model()._internal_lightUpdate();\r\n        };\r\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = () => {\r\n            if (this._private__isSettingSize || this._private__state === null) {\r\n                return;\r\n            }\r\n            this._private__model()._internal_lightUpdate();\r\n        };\r\n        this._private__chart = chart;\r\n        this._private__state = state;\r\n        this._private__state._internal_onDestroyed()._internal_subscribe(this._private__onStateDestroyed.bind(this), this, true);\r\n        this._private__paneCell = document.createElement('td');\r\n        this._private__paneCell.style.padding = '0';\r\n        this._private__paneCell.style.position = 'relative';\r\n        const paneWrapper = document.createElement('div');\r\n        paneWrapper.style.width = '100%';\r\n        paneWrapper.style.height = '100%';\r\n        paneWrapper.style.position = 'relative';\r\n        paneWrapper.style.overflow = 'hidden';\r\n        this._private__leftAxisCell = document.createElement('td');\r\n        this._private__leftAxisCell.style.padding = '0';\r\n        this._private__rightAxisCell = document.createElement('td');\r\n        this._private__rightAxisCell.style.padding = '0';\r\n        this._private__paneCell.appendChild(paneWrapper);\r\n        this._private__canvasBinding = createBoundCanvas(paneWrapper, size$1({ width: 16, height: 16 }));\r\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\r\n        const canvas = this._private__canvasBinding.canvasElement;\r\n        canvas.style.position = 'absolute';\r\n        canvas.style.zIndex = '1';\r\n        canvas.style.left = '0';\r\n        canvas.style.top = '0';\r\n        this._private__topCanvasBinding = createBoundCanvas(paneWrapper, size$1({ width: 16, height: 16 }));\r\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\r\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\r\n        topCanvas.style.position = 'absolute';\r\n        topCanvas.style.zIndex = '2';\r\n        topCanvas.style.left = '0';\r\n        topCanvas.style.top = '0';\r\n        this._private__rowElement = document.createElement('tr');\r\n        this._private__rowElement.appendChild(this._private__leftAxisCell);\r\n        this._private__rowElement.appendChild(this._private__paneCell);\r\n        this._private__rowElement.appendChild(this._private__rightAxisCell);\r\n        this._internal_updatePriceAxisWidgetsStates();\r\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, this, {\r\n            _internal_treatVertTouchDragAsPageScroll: () => this._private__startTrackPoint === null && !this._private__chart._internal_options()['handleScroll'].vertTouchDrag,\r\n            _internal_treatHorzTouchDragAsPageScroll: () => this._private__startTrackPoint === null && !this._private__chart._internal_options()['handleScroll'].horzTouchDrag,\r\n        });\r\n    }\r\n    _internal_destroy() {\r\n        if (this._private__leftPriceAxisWidget !== null) {\r\n            this._private__leftPriceAxisWidget._internal_destroy();\r\n        }\r\n        if (this._private__rightPriceAxisWidget !== null) {\r\n            this._private__rightPriceAxisWidget._internal_destroy();\r\n        }\r\n        this._private__attributionLogoWidget = null;\r\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\r\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\r\n        this._private__topCanvasBinding.dispose();\r\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\r\n        releaseCanvas(this._private__canvasBinding.canvasElement);\r\n        this._private__canvasBinding.dispose();\r\n        if (this._private__state !== null) {\r\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\r\n            this._private__state._internal_destroy();\r\n        }\r\n        this._private__mouseEventHandler._internal_destroy();\r\n    }\r\n    _internal_state() {\r\n        return ensureNotNull(this._private__state);\r\n    }\r\n    _internal_setState(pane) {\r\n        if (this._private__state !== null) {\r\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\r\n        }\r\n        this._private__state = pane;\r\n        if (this._private__state !== null) {\r\n            this._private__state._internal_onDestroyed()._internal_subscribe(PaneWidget.prototype._private__onStateDestroyed.bind(this), this, true);\r\n        }\r\n        this._internal_updatePriceAxisWidgetsStates();\r\n        if (this._private__chart._internal_paneWidgets().indexOf(this) === this._private__chart._internal_paneWidgets().length - 1) {\r\n            this._private__attributionLogoWidget = this._private__attributionLogoWidget ?? new AttributionLogoWidget(this._private__paneCell, this._private__chart);\r\n            this._private__attributionLogoWidget._internal_update();\r\n        }\r\n        else {\r\n            this._private__attributionLogoWidget?._internal_removeElement();\r\n            this._private__attributionLogoWidget = null;\r\n        }\r\n    }\r\n    _internal_chart() {\r\n        return this._private__chart;\r\n    }\r\n    _internal_getElement() {\r\n        return this._private__rowElement;\r\n    }\r\n    _internal_updatePriceAxisWidgetsStates() {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        this._private__recreatePriceAxisWidgets();\r\n        if (this._private__model()._internal_serieses().length === 0) {\r\n            return;\r\n        }\r\n        if (this._private__leftPriceAxisWidget !== null) {\r\n            const leftPriceScale = this._private__state._internal_leftPriceScale();\r\n            this._private__leftPriceAxisWidget._internal_setPriceScale(ensureNotNull(leftPriceScale));\r\n        }\r\n        if (this._private__rightPriceAxisWidget !== null) {\r\n            const rightPriceScale = this._private__state._internal_rightPriceScale();\r\n            this._private__rightPriceAxisWidget._internal_setPriceScale(ensureNotNull(rightPriceScale));\r\n        }\r\n    }\r\n    _internal_updatePriceAxisWidgets() {\r\n        if (this._private__leftPriceAxisWidget !== null) {\r\n            this._private__leftPriceAxisWidget._internal_update();\r\n        }\r\n        if (this._private__rightPriceAxisWidget !== null) {\r\n            this._private__rightPriceAxisWidget._internal_update();\r\n        }\r\n    }\r\n    _internal_stretchFactor() {\r\n        return this._private__state !== null ? this._private__state._internal_stretchFactor() : 0;\r\n    }\r\n    _internal_setStretchFactor(stretchFactor) {\r\n        if (this._private__state) {\r\n            this._private__state._internal_setStretchFactor(stretchFactor);\r\n        }\r\n    }\r\n    _internal_mouseEnterEvent(event) {\r\n        if (!this._private__state) {\r\n            return;\r\n        }\r\n        this._private__onMouseEvent();\r\n        const x = event.localX;\r\n        const y = event.localY;\r\n        this._private__setCrosshairPosition(x, y, event);\r\n    }\r\n    _internal_mouseDownEvent(event) {\r\n        this._private__onMouseEvent();\r\n        this._private__mouseTouchDownEvent();\r\n        this._private__setCrosshairPosition(event.localX, event.localY, event);\r\n    }\r\n    _internal_mouseMoveEvent(event) {\r\n        if (!this._private__state) {\r\n            return;\r\n        }\r\n        this._private__onMouseEvent();\r\n        const x = event.localX;\r\n        const y = event.localY;\r\n        this._private__setCrosshairPosition(x, y, event);\r\n    }\r\n    _internal_mouseClickEvent(event) {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        this._private__onMouseEvent();\r\n        this._private__fireClickedDelegate(event);\r\n    }\r\n    _internal_mouseDoubleClickEvent(event) {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        this._private__fireMouseClickDelegate(this._private__dblClicked, event);\r\n    }\r\n    _internal_doubleTapEvent(event) {\r\n        this._internal_mouseDoubleClickEvent(event);\r\n    }\r\n    _internal_pressedMouseMoveEvent(event) {\r\n        this._private__onMouseEvent();\r\n        this._private__pressedMouseTouchMoveEvent(event);\r\n        this._private__setCrosshairPosition(event.localX, event.localY, event);\r\n    }\r\n    _internal_mouseUpEvent(event) {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        this._private__onMouseEvent();\r\n        this._private__longTap = false;\r\n        this._private__endScroll(event);\r\n    }\r\n    _internal_tapEvent(event) {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        this._private__fireClickedDelegate(event);\r\n    }\r\n    _internal_longTapEvent(event) {\r\n        this._private__longTap = true;\r\n        if (this._private__startTrackPoint === null) {\r\n            const point = { x: event.localX, y: event.localY };\r\n            this._private__startTrackingMode(point, point, event);\r\n        }\r\n    }\r\n    _internal_mouseLeaveEvent(event) {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        this._private__onMouseEvent();\r\n        this._private__state._internal_model()._internal_setHoveredSource(null);\r\n        this._private__clearCrosshairPosition();\r\n    }\r\n    _internal_clicked() {\r\n        return this._private__clicked;\r\n    }\r\n    _internal_dblClicked() {\r\n        return this._private__dblClicked;\r\n    }\r\n    _internal_pinchStartEvent() {\r\n        this._private__prevPinchScale = 1;\r\n        this._private__model()._internal_stopTimeScaleAnimation();\r\n    }\r\n    _internal_pinchEvent(middlePoint, scale) {\r\n        if (!this._private__chart._internal_options()['handleScale'].pinch) {\r\n            return;\r\n        }\r\n        const zoomScale = (scale - this._private__prevPinchScale) * 5;\r\n        this._private__prevPinchScale = scale;\r\n        this._private__model()._internal_zoomTime(middlePoint._internal_x, zoomScale);\r\n    }\r\n    _internal_touchStartEvent(event) {\r\n        this._private__longTap = false;\r\n        this._private__exitTrackingModeOnNextTry = this._private__startTrackPoint !== null;\r\n        this._private__mouseTouchDownEvent();\r\n        const crosshair = this._private__model()._internal_crosshairSource();\r\n        if (this._private__startTrackPoint !== null && crosshair._internal_visible()) {\r\n            this._private__initCrosshairPosition = { x: crosshair._internal_appliedX(), y: crosshair._internal_appliedY() };\r\n            this._private__startTrackPoint = { x: event.localX, y: event.localY };\r\n        }\r\n    }\r\n    _internal_touchMoveEvent(event) {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        const x = event.localX;\r\n        const y = event.localY;\r\n        if (this._private__startTrackPoint !== null) {\r\n            // tracking mode: move crosshair\r\n            this._private__exitTrackingModeOnNextTry = false;\r\n            const origPoint = ensureNotNull(this._private__initCrosshairPosition);\r\n            const newX = origPoint.x + (x - this._private__startTrackPoint.x);\r\n            const newY = origPoint.y + (y - this._private__startTrackPoint.y);\r\n            this._private__setCrosshairPosition(newX, newY, event);\r\n            return;\r\n        }\r\n        this._private__pressedMouseTouchMoveEvent(event);\r\n    }\r\n    _internal_touchEndEvent(event) {\r\n        if (this._internal_chart()._internal_options().trackingMode.exitMode === 0 /* TrackingModeExitMode.OnTouchEnd */) {\r\n            this._private__exitTrackingModeOnNextTry = true;\r\n        }\r\n        this._private__tryExitTrackingMode();\r\n        this._private__endScroll(event);\r\n    }\r\n    _internal_hitTest(x, y) {\r\n        const state = this._private__state;\r\n        if (state === null) {\r\n            return null;\r\n        }\r\n        return hitTestPane(state, x, y);\r\n    }\r\n    _internal_setPriceAxisSize(width, position) {\r\n        const priceAxisWidget = position === 'left' ? this._private__leftPriceAxisWidget : this._private__rightPriceAxisWidget;\r\n        ensureNotNull(priceAxisWidget)._internal_setSize(size$1({ width, height: this._private__size.height }));\r\n    }\r\n    _internal_getSize() {\r\n        return this._private__size;\r\n    }\r\n    _internal_setSize(newSize) {\r\n        if (equalSizes(this._private__size, newSize)) {\r\n            return;\r\n        }\r\n        this._private__size = newSize;\r\n        this._private__isSettingSize = true;\r\n        this._private__canvasBinding.resizeCanvasElement(newSize);\r\n        this._private__topCanvasBinding.resizeCanvasElement(newSize);\r\n        this._private__isSettingSize = false;\r\n        this._private__paneCell.style.width = newSize.width + 'px';\r\n        this._private__paneCell.style.height = newSize.height + 'px';\r\n    }\r\n    _internal_recalculatePriceScales() {\r\n        const pane = ensureNotNull(this._private__state);\r\n        pane._internal_recalculatePriceScale(pane._internal_leftPriceScale());\r\n        pane._internal_recalculatePriceScale(pane._internal_rightPriceScale());\r\n        for (const source of pane._internal_dataSources()) {\r\n            if (pane._internal_isOverlay(source)) {\r\n                const priceScale = source._internal_priceScale();\r\n                if (priceScale !== null) {\r\n                    pane._internal_recalculatePriceScale(priceScale);\r\n                }\r\n                // for overlay drawings price scale is owner's price scale\r\n                // however owner's price scale could not contain ds\r\n                source._internal_updateAllViews();\r\n            }\r\n        }\r\n        for (const primitive of pane._internal_primitives()) {\r\n            primitive._internal_updateAllViews();\r\n        }\r\n    }\r\n    _internal_getBitmapSize() {\r\n        return this._private__canvasBinding.bitmapSize;\r\n    }\r\n    _internal_drawBitmap(ctx, x, y) {\r\n        const bitmapSize = this._internal_getBitmapSize();\r\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\r\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\r\n        }\r\n    }\r\n    _internal_paint(type) {\r\n        if (type === 0 /* InvalidationLevel.None */) {\r\n            return;\r\n        }\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        if (type > 1 /* InvalidationLevel.Cursor */) {\r\n            this._internal_recalculatePriceScales();\r\n        }\r\n        if (this._private__leftPriceAxisWidget !== null) {\r\n            this._private__leftPriceAxisWidget._internal_paint(type);\r\n        }\r\n        if (this._private__rightPriceAxisWidget !== null) {\r\n            this._private__rightPriceAxisWidget._internal_paint(type);\r\n        }\r\n        const canvasOptions = {\r\n            colorSpace: this._private__chart._internal_options().layout.colorSpace,\r\n        };\r\n        if (type !== 1 /* InvalidationLevel.Cursor */) {\r\n            this._private__canvasBinding.applySuggestedBitmapSize();\r\n            const target = tryCreateCanvasRenderingTarget2D(this._private__canvasBinding, canvasOptions);\r\n            if (target !== null) {\r\n                target.useBitmapCoordinateSpace((scope) => {\r\n                    this._private__drawBackground(scope);\r\n                });\r\n                if (this._private__state) {\r\n                    this._private__drawSources(target, sourceBottomPaneViews$1);\r\n                    this._private__drawGrid(target);\r\n                    this._private__drawSources(target, sourcePaneViews$1);\r\n                    this._private__drawSources(target, sourceLabelPaneViews);\r\n                }\r\n            }\r\n        }\r\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\r\n        const topTarget = tryCreateCanvasRenderingTarget2D(this._private__topCanvasBinding, canvasOptions);\r\n        if (topTarget !== null) {\r\n            topTarget.useBitmapCoordinateSpace(({ context: ctx, bitmapSize }) => {\r\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\r\n            });\r\n            this._private__drawCrosshair(topTarget);\r\n            this._private__drawSources(topTarget, sourceTopPaneViews$1);\r\n            this._private__drawSources(topTarget, sourceLabelPaneViews);\r\n        }\r\n    }\r\n    _internal_leftPriceAxisWidget() {\r\n        return this._private__leftPriceAxisWidget;\r\n    }\r\n    _internal_rightPriceAxisWidget() {\r\n        return this._private__rightPriceAxisWidget;\r\n    }\r\n    _internal_drawAdditionalSources(target, paneViewsGetter) {\r\n        this._private__drawSources(target, paneViewsGetter);\r\n    }\r\n    _private__onStateDestroyed() {\r\n        if (this._private__state !== null) {\r\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\r\n        }\r\n        this._private__state = null;\r\n    }\r\n    _private__fireClickedDelegate(event) {\r\n        this._private__fireMouseClickDelegate(this._private__clicked, event);\r\n    }\r\n    _private__fireMouseClickDelegate(delegate, event) {\r\n        const x = event.localX;\r\n        const y = event.localY;\r\n        if (delegate._internal_hasListeners()) {\r\n            delegate._internal_fire(this._private__model()._internal_timeScale()._internal_coordinateToIndex(x), { x, y }, event);\r\n        }\r\n    }\r\n    _private__drawBackground({ context: ctx, bitmapSize }) {\r\n        const { width, height } = bitmapSize;\r\n        const model = this._private__model();\r\n        const topColor = model._internal_backgroundTopColor();\r\n        const bottomColor = model._internal_backgroundBottomColor();\r\n        if (topColor === bottomColor) {\r\n            clearRect(ctx, 0, 0, width, height, bottomColor);\r\n        }\r\n        else {\r\n            clearRectWithGradient(ctx, 0, 0, width, height, topColor, bottomColor);\r\n        }\r\n    }\r\n    _private__drawGrid(target) {\r\n        const state = ensureNotNull(this._private__state);\r\n        const paneView = state._internal_grid()._internal_paneView();\r\n        const renderer = paneView._internal_renderer(state);\r\n        if (renderer !== null) {\r\n            renderer._internal_draw(target, false);\r\n        }\r\n    }\r\n    _private__drawCrosshair(target) {\r\n        this._private__drawSourceImpl(target, sourcePaneViews$1, drawForeground, this._private__model()._internal_crosshairSource());\r\n    }\r\n    _private__drawSources(target, paneViewsGetter) {\r\n        const state = ensureNotNull(this._private__state);\r\n        const sources = state._internal_orderedSources();\r\n        const panePrimitives = state._internal_primitives();\r\n        for (const panePrimitive of panePrimitives) {\r\n            this._private__drawSourceImpl(target, paneViewsGetter, drawBackground, panePrimitive);\r\n        }\r\n        for (const source of sources) {\r\n            this._private__drawSourceImpl(target, paneViewsGetter, drawBackground, source);\r\n        }\r\n        for (const panePrimitive of panePrimitives) {\r\n            this._private__drawSourceImpl(target, paneViewsGetter, drawForeground, panePrimitive);\r\n        }\r\n        for (const source of sources) {\r\n            this._private__drawSourceImpl(target, paneViewsGetter, drawForeground, source);\r\n        }\r\n    }\r\n    _private__drawSourceImpl(target, paneViewsGetter, drawFn, source) {\r\n        const state = ensureNotNull(this._private__state);\r\n        const hoveredSource = state._internal_model()._internal_hoveredSource();\r\n        const isHovered = hoveredSource !== null && hoveredSource._internal_source === source;\r\n        const objecId = hoveredSource !== null && isHovered && hoveredSource._internal_object !== undefined\r\n            ? hoveredSource._internal_object._internal_hitTestData\r\n            : undefined;\r\n        const drawRendererFn = (renderer) => drawFn(renderer, target, isHovered, objecId);\r\n        drawSourceViews(paneViewsGetter, drawRendererFn, source, state);\r\n    }\r\n    _private__recreatePriceAxisWidgets() {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        const chart = this._private__chart;\r\n        const leftAxisVisible = this._private__state._internal_leftPriceScale()._internal_options().visible;\r\n        const rightAxisVisible = this._private__state._internal_rightPriceScale()._internal_options().visible;\r\n        if (!leftAxisVisible && this._private__leftPriceAxisWidget !== null) {\r\n            this._private__leftAxisCell.removeChild(this._private__leftPriceAxisWidget._internal_getElement());\r\n            this._private__leftPriceAxisWidget._internal_destroy();\r\n            this._private__leftPriceAxisWidget = null;\r\n        }\r\n        if (!rightAxisVisible && this._private__rightPriceAxisWidget !== null) {\r\n            this._private__rightAxisCell.removeChild(this._private__rightPriceAxisWidget._internal_getElement());\r\n            this._private__rightPriceAxisWidget._internal_destroy();\r\n            this._private__rightPriceAxisWidget = null;\r\n        }\r\n        const rendererOptionsProvider = chart._internal_model()._internal_rendererOptionsProvider();\r\n        if (leftAxisVisible && this._private__leftPriceAxisWidget === null) {\r\n            this._private__leftPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, 'left');\r\n            this._private__leftAxisCell.appendChild(this._private__leftPriceAxisWidget._internal_getElement());\r\n        }\r\n        if (rightAxisVisible && this._private__rightPriceAxisWidget === null) {\r\n            this._private__rightPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, 'right');\r\n            this._private__rightAxisCell.appendChild(this._private__rightPriceAxisWidget._internal_getElement());\r\n        }\r\n    }\r\n    _private__preventScroll(event) {\r\n        return event._internal_isTouch && this._private__longTap || this._private__startTrackPoint !== null;\r\n    }\r\n    _private__correctXCoord(x) {\r\n        return Math.max(0, Math.min(x, this._private__size.width - 1));\r\n    }\r\n    _private__correctYCoord(y) {\r\n        return Math.max(0, Math.min(y, this._private__size.height - 1));\r\n    }\r\n    _private__setCrosshairPosition(x, y, event) {\r\n        this._private__model()._internal_setAndSaveCurrentPosition(this._private__correctXCoord(x), this._private__correctYCoord(y), event, ensureNotNull(this._private__state));\r\n    }\r\n    _private__clearCrosshairPosition() {\r\n        this._private__model()._internal_clearCurrentPosition();\r\n    }\r\n    _private__tryExitTrackingMode() {\r\n        if (this._private__exitTrackingModeOnNextTry) {\r\n            this._private__startTrackPoint = null;\r\n            this._private__clearCrosshairPosition();\r\n        }\r\n    }\r\n    _private__startTrackingMode(startTrackPoint, crossHairPosition, event) {\r\n        this._private__startTrackPoint = startTrackPoint;\r\n        this._private__exitTrackingModeOnNextTry = false;\r\n        this._private__setCrosshairPosition(crossHairPosition.x, crossHairPosition.y, event);\r\n        const crosshair = this._private__model()._internal_crosshairSource();\r\n        this._private__initCrosshairPosition = { x: crosshair._internal_appliedX(), y: crosshair._internal_appliedY() };\r\n    }\r\n    _private__model() {\r\n        return this._private__chart._internal_model();\r\n    }\r\n    _private__endScroll(event) {\r\n        if (!this._private__isScrolling) {\r\n            return;\r\n        }\r\n        const model = this._private__model();\r\n        const state = this._internal_state();\r\n        model._internal_endScrollPrice(state, state._internal_defaultPriceScale());\r\n        this._private__startScrollingPos = null;\r\n        this._private__isScrolling = false;\r\n        model._internal_endScrollTime();\r\n        if (this._private__scrollXAnimation !== null) {\r\n            const startAnimationTime = performance.now();\r\n            const timeScale = model._internal_timeScale();\r\n            this._private__scrollXAnimation._internal_start(timeScale._internal_rightOffset(), startAnimationTime);\r\n            if (!this._private__scrollXAnimation._internal_finished(startAnimationTime)) {\r\n                model._internal_setTimeScaleAnimation(this._private__scrollXAnimation);\r\n            }\r\n        }\r\n    }\r\n    _private__onMouseEvent() {\r\n        this._private__startTrackPoint = null;\r\n    }\r\n    _private__mouseTouchDownEvent() {\r\n        if (!this._private__state) {\r\n            return;\r\n        }\r\n        this._private__model()._internal_stopTimeScaleAnimation();\r\n        if (document.activeElement !== document.body && document.activeElement !== document.documentElement) {\r\n            // If any focusable element except the page itself is focused, remove the focus\r\n            ensureNotNull(document.activeElement).blur();\r\n        }\r\n        else {\r\n            // Clear selection\r\n            const selection = document.getSelection();\r\n            if (selection !== null) {\r\n                selection.removeAllRanges();\r\n            }\r\n        }\r\n        const priceScale = this._private__state._internal_defaultPriceScale();\r\n        if (priceScale._internal_isEmpty() || this._private__model()._internal_timeScale()._internal_isEmpty()) {\r\n            return;\r\n        }\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _private__pressedMouseTouchMoveEvent(event) {\r\n        if (this._private__state === null) {\r\n            return;\r\n        }\r\n        const model = this._private__model();\r\n        const timeScale = model._internal_timeScale();\r\n        if (timeScale._internal_isEmpty()) {\r\n            return;\r\n        }\r\n        const chartOptions = this._private__chart._internal_options();\r\n        const scrollOptions = chartOptions['handleScroll'];\r\n        const kineticScrollOptions = chartOptions.kineticScroll;\r\n        if ((!scrollOptions.pressedMouseMove || event._internal_isTouch) &&\r\n            (!scrollOptions.horzTouchDrag && !scrollOptions.vertTouchDrag || !event._internal_isTouch)) {\r\n            return;\r\n        }\r\n        const priceScale = this._private__state._internal_defaultPriceScale();\r\n        const now = performance.now();\r\n        if (this._private__startScrollingPos === null && !this._private__preventScroll(event)) {\r\n            this._private__startScrollingPos = {\r\n                x: event.clientX,\r\n                y: event.clientY,\r\n                _internal_timestamp: now,\r\n                _internal_localX: event.localX,\r\n                _internal_localY: event.localY,\r\n            };\r\n        }\r\n        if (this._private__startScrollingPos !== null &&\r\n            !this._private__isScrolling &&\r\n            (this._private__startScrollingPos.x !== event.clientX || this._private__startScrollingPos.y !== event.clientY)) {\r\n            if (event._internal_isTouch && kineticScrollOptions.touch || !event._internal_isTouch && kineticScrollOptions.mouse) {\r\n                const barSpacing = timeScale._internal_barSpacing();\r\n                this._private__scrollXAnimation = new KineticAnimation(0.2 /* KineticScrollConstants.MinScrollSpeed */ / barSpacing, 7 /* KineticScrollConstants.MaxScrollSpeed */ / barSpacing, 0.997 /* KineticScrollConstants.DumpingCoeff */, 15 /* KineticScrollConstants.ScrollMinMove */ / barSpacing);\r\n                this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), this._private__startScrollingPos._internal_timestamp);\r\n            }\r\n            else {\r\n                this._private__scrollXAnimation = null;\r\n            }\r\n            if (!priceScale._internal_isEmpty()) {\r\n                model._internal_startScrollPrice(this._private__state, priceScale, event.localY);\r\n            }\r\n            model._internal_startScrollTime(event.localX);\r\n            this._private__isScrolling = true;\r\n        }\r\n        if (this._private__isScrolling) {\r\n            // this allows scrolling not default price scales\r\n            if (!priceScale._internal_isEmpty()) {\r\n                model._internal_scrollPriceTo(this._private__state, priceScale, event.localY);\r\n            }\r\n            model._internal_scrollTimeTo(event.localX);\r\n            if (this._private__scrollXAnimation !== null) {\r\n                this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), now);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass PriceAxisStub {\r\n    constructor(side, options, params, borderVisible, bottomColor) {\r\n        this._private__invalidated = true;\r\n        this._private__size = size$1({ width: 0, height: 0 });\r\n        this._private__canvasSuggestedBitmapSizeChangedHandler = () => this._internal_paint(3 /* InvalidationLevel.Full */);\r\n        this._private__isLeft = side === 'left';\r\n        this._private__rendererOptionsProvider = params._internal_rendererOptionsProvider;\r\n        this._private__options = options;\r\n        this._private__borderVisible = borderVisible;\r\n        this._private__bottomColor = bottomColor;\r\n        this._private__cell = document.createElement('div');\r\n        this._private__cell.style.width = '25px';\r\n        this._private__cell.style.height = '100%';\r\n        this._private__cell.style.overflow = 'hidden';\r\n        this._private__canvasBinding = createBoundCanvas(this._private__cell, size$1({ width: 16, height: 16 }));\r\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\r\n    }\r\n    _internal_destroy() {\r\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\r\n        releaseCanvas(this._private__canvasBinding.canvasElement);\r\n        this._private__canvasBinding.dispose();\r\n    }\r\n    _internal_getElement() {\r\n        return this._private__cell;\r\n    }\r\n    _internal_getSize() {\r\n        return this._private__size;\r\n    }\r\n    _internal_setSize(newSize) {\r\n        if (!equalSizes(this._private__size, newSize)) {\r\n            this._private__size = newSize;\r\n            this._private__canvasBinding.resizeCanvasElement(newSize);\r\n            this._private__cell.style.width = `${newSize.width}px`;\r\n            this._private__cell.style.height = `${newSize.height}px`;\r\n            this._private__invalidated = true;\r\n        }\r\n    }\r\n    _internal_paint(type) {\r\n        if (type < 3 /* InvalidationLevel.Full */ && !this._private__invalidated) {\r\n            return;\r\n        }\r\n        if (this._private__size.width === 0 || this._private__size.height === 0) {\r\n            return;\r\n        }\r\n        this._private__invalidated = false;\r\n        this._private__canvasBinding.applySuggestedBitmapSize();\r\n        const target = tryCreateCanvasRenderingTarget2D(this._private__canvasBinding, {\r\n            colorSpace: this._private__options.layout.colorSpace,\r\n        });\r\n        if (target !== null) {\r\n            target.useBitmapCoordinateSpace((scope) => {\r\n                this._private__drawBackground(scope);\r\n                this._private__drawBorder(scope);\r\n            });\r\n        }\r\n    }\r\n    _internal_getBitmapSize() {\r\n        return this._private__canvasBinding.bitmapSize;\r\n    }\r\n    _internal_drawBitmap(ctx, x, y) {\r\n        const bitmapSize = this._internal_getBitmapSize();\r\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\r\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\r\n        }\r\n    }\r\n    _private__drawBorder({ context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio }) {\r\n        if (!this._private__borderVisible()) {\r\n            return;\r\n        }\r\n        ctx.fillStyle = this._private__options.timeScale.borderColor;\r\n        const horzBorderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * horizontalPixelRatio);\r\n        const vertBorderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * verticalPixelRatio);\r\n        const left = (this._private__isLeft) ? bitmapSize.width - horzBorderSize : 0;\r\n        ctx.fillRect(left, 0, horzBorderSize, vertBorderSize);\r\n    }\r\n    _private__drawBackground({ context: ctx, bitmapSize }) {\r\n        clearRect(ctx, 0, 0, bitmapSize.width, bitmapSize.height, this._private__bottomColor());\r\n    }\r\n}\r\n\r\nfunction buildTimeAxisViewsGetter(zOrder) {\r\n    return (source) => source._internal_timePaneViews?.(zOrder) ?? [];\r\n}\r\nconst sourcePaneViews = buildTimeAxisViewsGetter('normal');\r\nconst sourceTopPaneViews = buildTimeAxisViewsGetter('top');\r\nconst sourceBottomPaneViews = buildTimeAxisViewsGetter('bottom');\r\nclass TimeAxisWidget {\r\n    constructor(chartWidget, horzScaleBehavior) {\r\n        this._private__leftStub = null;\r\n        this._private__rightStub = null;\r\n        this._private__rendererOptions = null;\r\n        this._private__mouseDown = false;\r\n        this._private__size = size$1({ width: 0, height: 0 });\r\n        this._private__sizeChanged = new Delegate();\r\n        this._private__widthCache = new TextWidthCache(5);\r\n        this._private__isSettingSize = false;\r\n        this._private__canvasSuggestedBitmapSizeChangedHandler = () => {\r\n            if (!this._private__isSettingSize) {\r\n                this._private__chart._internal_model()._internal_lightUpdate();\r\n            }\r\n        };\r\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = () => {\r\n            if (!this._private__isSettingSize) {\r\n                this._private__chart._internal_model()._internal_lightUpdate();\r\n            }\r\n        };\r\n        this._private__chart = chartWidget;\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n        this._private__options = chartWidget._internal_options()['layout'];\r\n        this._private__element = document.createElement('tr');\r\n        this._private__leftStubCell = document.createElement('td');\r\n        this._private__leftStubCell.style.padding = '0';\r\n        this._private__rightStubCell = document.createElement('td');\r\n        this._private__rightStubCell.style.padding = '0';\r\n        this._private__cell = document.createElement('td');\r\n        this._private__cell.style.height = '25px';\r\n        this._private__cell.style.padding = '0';\r\n        this._private__dv = document.createElement('div');\r\n        this._private__dv.style.width = '100%';\r\n        this._private__dv.style.height = '100%';\r\n        this._private__dv.style.position = 'relative';\r\n        this._private__dv.style.overflow = 'hidden';\r\n        this._private__cell.appendChild(this._private__dv);\r\n        this._private__canvasBinding = createBoundCanvas(this._private__dv, size$1({ width: 16, height: 16 }));\r\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\r\n        const canvas = this._private__canvasBinding.canvasElement;\r\n        canvas.style.position = 'absolute';\r\n        canvas.style.zIndex = '1';\r\n        canvas.style.left = '0';\r\n        canvas.style.top = '0';\r\n        this._private__topCanvasBinding = createBoundCanvas(this._private__dv, size$1({ width: 16, height: 16 }));\r\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\r\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\r\n        topCanvas.style.position = 'absolute';\r\n        topCanvas.style.zIndex = '2';\r\n        topCanvas.style.left = '0';\r\n        topCanvas.style.top = '0';\r\n        this._private__element.appendChild(this._private__leftStubCell);\r\n        this._private__element.appendChild(this._private__cell);\r\n        this._private__element.appendChild(this._private__rightStubCell);\r\n        this._private__recreateStubs();\r\n        this._private__chart._internal_model()._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__recreateStubs.bind(this), this);\r\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, this, {\r\n            _internal_treatVertTouchDragAsPageScroll: () => true,\r\n            _internal_treatHorzTouchDragAsPageScroll: () => !this._private__chart._internal_options()['handleScroll'].horzTouchDrag,\r\n        });\r\n    }\r\n    _internal_destroy() {\r\n        this._private__mouseEventHandler._internal_destroy();\r\n        if (this._private__leftStub !== null) {\r\n            this._private__leftStub._internal_destroy();\r\n        }\r\n        if (this._private__rightStub !== null) {\r\n            this._private__rightStub._internal_destroy();\r\n        }\r\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\r\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\r\n        this._private__topCanvasBinding.dispose();\r\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\r\n        releaseCanvas(this._private__canvasBinding.canvasElement);\r\n        this._private__canvasBinding.dispose();\r\n    }\r\n    _internal_getElement() {\r\n        return this._private__element;\r\n    }\r\n    _internal_leftStub() {\r\n        return this._private__leftStub;\r\n    }\r\n    _internal_rightStub() {\r\n        return this._private__rightStub;\r\n    }\r\n    _internal_mouseDownEvent(event) {\r\n        if (this._private__mouseDown) {\r\n            return;\r\n        }\r\n        this._private__mouseDown = true;\r\n        const model = this._private__chart._internal_model();\r\n        if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options()['handleScale'].axisPressedMouseMove.time) {\r\n            return;\r\n        }\r\n        model._internal_startScaleTime(event.localX);\r\n    }\r\n    _internal_touchStartEvent(event) {\r\n        this._internal_mouseDownEvent(event);\r\n    }\r\n    _internal_mouseDownOutsideEvent() {\r\n        const model = this._private__chart._internal_model();\r\n        if (!model._internal_timeScale()._internal_isEmpty() && this._private__mouseDown) {\r\n            this._private__mouseDown = false;\r\n            if (this._private__chart._internal_options()['handleScale'].axisPressedMouseMove.time) {\r\n                model._internal_endScaleTime();\r\n            }\r\n        }\r\n    }\r\n    _internal_pressedMouseMoveEvent(event) {\r\n        const model = this._private__chart._internal_model();\r\n        if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options()['handleScale'].axisPressedMouseMove.time) {\r\n            return;\r\n        }\r\n        model._internal_scaleTimeTo(event.localX);\r\n    }\r\n    _internal_touchMoveEvent(event) {\r\n        this._internal_pressedMouseMoveEvent(event);\r\n    }\r\n    _internal_mouseUpEvent() {\r\n        this._private__mouseDown = false;\r\n        const model = this._private__chart._internal_model();\r\n        if (model._internal_timeScale()._internal_isEmpty() && !this._private__chart._internal_options()['handleScale'].axisPressedMouseMove.time) {\r\n            return;\r\n        }\r\n        model._internal_endScaleTime();\r\n    }\r\n    _internal_touchEndEvent() {\r\n        this._internal_mouseUpEvent();\r\n    }\r\n    _internal_mouseDoubleClickEvent() {\r\n        if (this._private__chart._internal_options()['handleScale'].axisDoubleClickReset.time) {\r\n            this._private__chart._internal_model()._internal_resetTimeScale();\r\n        }\r\n    }\r\n    _internal_doubleTapEvent() {\r\n        this._internal_mouseDoubleClickEvent();\r\n    }\r\n    _internal_mouseEnterEvent() {\r\n        if (this._private__chart._internal_model()._internal_options()['handleScale'].axisPressedMouseMove.time) {\r\n            this._private__setCursor(1 /* CursorType.EwResize */);\r\n        }\r\n    }\r\n    _internal_mouseLeaveEvent() {\r\n        this._private__setCursor(0 /* CursorType.Default */);\r\n    }\r\n    _internal_getSize() {\r\n        return this._private__size;\r\n    }\r\n    _internal_sizeChanged() {\r\n        return this._private__sizeChanged;\r\n    }\r\n    _internal_setSizes(timeAxisSize, leftStubWidth, rightStubWidth) {\r\n        if (!equalSizes(this._private__size, timeAxisSize)) {\r\n            this._private__size = timeAxisSize;\r\n            this._private__isSettingSize = true;\r\n            this._private__canvasBinding.resizeCanvasElement(timeAxisSize);\r\n            this._private__topCanvasBinding.resizeCanvasElement(timeAxisSize);\r\n            this._private__isSettingSize = false;\r\n            this._private__cell.style.width = `${timeAxisSize.width}px`;\r\n            this._private__cell.style.height = `${timeAxisSize.height}px`;\r\n            this._private__sizeChanged._internal_fire(timeAxisSize);\r\n        }\r\n        if (this._private__leftStub !== null) {\r\n            this._private__leftStub._internal_setSize(size$1({ width: leftStubWidth, height: timeAxisSize.height }));\r\n        }\r\n        if (this._private__rightStub !== null) {\r\n            this._private__rightStub._internal_setSize(size$1({ width: rightStubWidth, height: timeAxisSize.height }));\r\n        }\r\n    }\r\n    _internal_optimalHeight() {\r\n        const rendererOptions = this._private__getRendererOptions();\r\n        return Math.ceil(\r\n        // rendererOptions.offsetSize +\r\n        rendererOptions._internal_borderSize +\r\n            rendererOptions._internal_tickLength +\r\n            rendererOptions._internal_fontSize +\r\n            rendererOptions._internal_paddingTop +\r\n            rendererOptions._internal_paddingBottom +\r\n            rendererOptions._internal_labelBottomOffset);\r\n    }\r\n    _internal_update() {\r\n        // this call has side-effect - it regenerates marks on the time scale\r\n        this._private__chart._internal_model()._internal_timeScale()._internal_marks();\r\n    }\r\n    _internal_getBitmapSize() {\r\n        return this._private__canvasBinding.bitmapSize;\r\n    }\r\n    _internal_drawBitmap(ctx, x, y) {\r\n        const bitmapSize = this._internal_getBitmapSize();\r\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\r\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\r\n        }\r\n    }\r\n    _internal_paint(type) {\r\n        if (type === 0 /* InvalidationLevel.None */) {\r\n            return;\r\n        }\r\n        const canvasOptions = {\r\n            colorSpace: this._private__options.colorSpace,\r\n        };\r\n        if (type !== 1 /* InvalidationLevel.Cursor */) {\r\n            this._private__canvasBinding.applySuggestedBitmapSize();\r\n            const target = tryCreateCanvasRenderingTarget2D(this._private__canvasBinding, canvasOptions);\r\n            if (target !== null) {\r\n                target.useBitmapCoordinateSpace((scope) => {\r\n                    this._private__drawBackground(scope);\r\n                    this._private__drawBorder(scope);\r\n                    this._private__drawAdditionalSources(target, sourceBottomPaneViews);\r\n                });\r\n                this._private__drawTickMarks(target);\r\n                this._private__drawAdditionalSources(target, sourcePaneViews);\r\n                // atm we don't have sources to be drawn on time axis except crosshair which is rendered on top level canvas\r\n                // so let's don't call this code at all for now\r\n                // this._drawLabels(this._chart.model().dataSources(), target);\r\n            }\r\n            if (this._private__leftStub !== null) {\r\n                this._private__leftStub._internal_paint(type);\r\n            }\r\n            if (this._private__rightStub !== null) {\r\n                this._private__rightStub._internal_paint(type);\r\n            }\r\n        }\r\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\r\n        const topTarget = tryCreateCanvasRenderingTarget2D(this._private__topCanvasBinding, canvasOptions);\r\n        if (topTarget !== null) {\r\n            topTarget.useBitmapCoordinateSpace(({ context: ctx, bitmapSize }) => {\r\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\r\n            });\r\n            this._private__drawLabels([...this._private__chart._internal_model()._internal_serieses(), this._private__chart._internal_model()._internal_crosshairSource()], topTarget);\r\n            this._private__drawAdditionalSources(topTarget, sourceTopPaneViews);\r\n        }\r\n    }\r\n    _private__drawAdditionalSources(target, axisViewsGetter) {\r\n        const sources = this._private__chart._internal_model()._internal_serieses();\r\n        for (const source of sources) {\r\n            drawSourceViews(axisViewsGetter, (renderer) => drawBackground(renderer, target, false, undefined), source, undefined);\r\n        }\r\n        for (const source of sources) {\r\n            drawSourceViews(axisViewsGetter, (renderer) => drawForeground(renderer, target, false, undefined), source, undefined);\r\n        }\r\n    }\r\n    _private__drawBackground({ context: ctx, bitmapSize }) {\r\n        clearRect(ctx, 0, 0, bitmapSize.width, bitmapSize.height, this._private__chart._internal_model()._internal_backgroundBottomColor());\r\n    }\r\n    _private__drawBorder({ context: ctx, bitmapSize, verticalPixelRatio }) {\r\n        if (this._private__chart._internal_options().timeScale.borderVisible) {\r\n            ctx.fillStyle = this._private__lineColor();\r\n            const borderSize = Math.max(1, Math.floor(this._private__getRendererOptions()._internal_borderSize * verticalPixelRatio));\r\n            ctx.fillRect(0, 0, bitmapSize.width, borderSize);\r\n        }\r\n    }\r\n    _private__drawTickMarks(target) {\r\n        const timeScale = this._private__chart._internal_model()._internal_timeScale();\r\n        const tickMarks = timeScale._internal_marks();\r\n        if (!tickMarks || tickMarks.length === 0) {\r\n            return;\r\n        }\r\n        const maxWeight = this._private__horzScaleBehavior.maxTickMarkWeight(tickMarks);\r\n        const rendererOptions = this._private__getRendererOptions();\r\n        const options = timeScale._internal_options();\r\n        if (options.borderVisible && options.ticksVisible) {\r\n            target.useBitmapCoordinateSpace(({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) => {\r\n                ctx.strokeStyle = this._private__lineColor();\r\n                ctx.fillStyle = this._private__lineColor();\r\n                const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\r\n                const tickOffset = Math.floor(horizontalPixelRatio * 0.5);\r\n                ctx.beginPath();\r\n                const tickLen = Math.round(rendererOptions._internal_tickLength * verticalPixelRatio);\r\n                for (let index = tickMarks.length; index--;) {\r\n                    const x = Math.round(tickMarks[index].coord * horizontalPixelRatio);\r\n                    ctx.rect(x - tickOffset, 0, tickWidth, tickLen);\r\n                }\r\n                ctx.fill();\r\n            });\r\n        }\r\n        target.useMediaCoordinateSpace(({ context: ctx }) => {\r\n            const yText = (rendererOptions._internal_borderSize +\r\n                rendererOptions._internal_tickLength +\r\n                rendererOptions._internal_paddingTop +\r\n                rendererOptions._internal_fontSize / 2);\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillStyle = this._private__textColor();\r\n            // draw base marks\r\n            ctx.font = this._private__baseFont();\r\n            for (const tickMark of tickMarks) {\r\n                if (tickMark.weight < maxWeight) {\r\n                    const coordinate = tickMark.needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark.coord, tickMark.label) : tickMark.coord;\r\n                    ctx.fillText(tickMark.label, coordinate, yText);\r\n                }\r\n            }\r\n            if (this._private__chart._internal_options().timeScale.allowBoldLabels) {\r\n                ctx.font = this._private__baseBoldFont();\r\n            }\r\n            for (const tickMark of tickMarks) {\r\n                if (tickMark.weight >= maxWeight) {\r\n                    const coordinate = tickMark.needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark.coord, tickMark.label) : tickMark.coord;\r\n                    ctx.fillText(tickMark.label, coordinate, yText);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    _private__alignTickMarkLabelCoordinate(ctx, coordinate, labelText) {\r\n        const labelWidth = this._private__widthCache._internal_measureText(ctx, labelText);\r\n        const labelWidthHalf = labelWidth / 2;\r\n        const leftTextCoordinate = Math.floor(coordinate - labelWidthHalf) + 0.5;\r\n        if (leftTextCoordinate < 0) {\r\n            coordinate = coordinate + Math.abs(0 - leftTextCoordinate);\r\n        }\r\n        else if (leftTextCoordinate + labelWidth > this._private__size.width) {\r\n            coordinate = coordinate - Math.abs(this._private__size.width - (leftTextCoordinate + labelWidth));\r\n        }\r\n        return coordinate;\r\n    }\r\n    _private__drawLabels(sources, target) {\r\n        const rendererOptions = this._private__getRendererOptions();\r\n        for (const source of sources) {\r\n            for (const view of source._internal_timeAxisViews()) {\r\n                view._internal_renderer()._internal_draw(target, rendererOptions);\r\n            }\r\n        }\r\n    }\r\n    _private__lineColor() {\r\n        return this._private__chart._internal_options().timeScale.borderColor;\r\n    }\r\n    _private__textColor() {\r\n        return this._private__options.textColor;\r\n    }\r\n    _private__fontSize() {\r\n        return this._private__options.fontSize;\r\n    }\r\n    _private__baseFont() {\r\n        return makeFont(this._private__fontSize(), this._private__options.fontFamily);\r\n    }\r\n    _private__baseBoldFont() {\r\n        return makeFont(this._private__fontSize(), this._private__options.fontFamily, 'bold');\r\n    }\r\n    _private__getRendererOptions() {\r\n        if (this._private__rendererOptions === null) {\r\n            this._private__rendererOptions = {\r\n                _internal_borderSize: 1 /* Constants.BorderSize */,\r\n                _internal_baselineOffset: NaN,\r\n                _internal_paddingTop: NaN,\r\n                _internal_paddingBottom: NaN,\r\n                _internal_paddingHorizontal: NaN,\r\n                _internal_tickLength: 5 /* Constants.TickLength */,\r\n                _internal_fontSize: NaN,\r\n                _internal_font: '',\r\n                _internal_widthCache: new TextWidthCache(),\r\n                _internal_labelBottomOffset: 0,\r\n            };\r\n        }\r\n        const rendererOptions = this._private__rendererOptions;\r\n        const newFont = this._private__baseFont();\r\n        if (rendererOptions._internal_font !== newFont) {\r\n            const fontSize = this._private__fontSize();\r\n            rendererOptions._internal_fontSize = fontSize;\r\n            rendererOptions._internal_font = newFont;\r\n            rendererOptions._internal_paddingTop = 3 * fontSize / 12;\r\n            rendererOptions._internal_paddingBottom = 3 * fontSize / 12;\r\n            rendererOptions._internal_paddingHorizontal = 9 * fontSize / 12;\r\n            rendererOptions._internal_baselineOffset = 0;\r\n            rendererOptions._internal_labelBottomOffset = 4 * fontSize / 12;\r\n            rendererOptions._internal_widthCache._internal_reset();\r\n        }\r\n        return this._private__rendererOptions;\r\n    }\r\n    _private__setCursor(type) {\r\n        this._private__cell.style.cursor = type === 1 /* CursorType.EwResize */ ? 'ew-resize' : 'default';\r\n    }\r\n    _private__recreateStubs() {\r\n        const model = this._private__chart._internal_model();\r\n        const options = model._internal_options();\r\n        if (!options.leftPriceScale.visible && this._private__leftStub !== null) {\r\n            this._private__leftStubCell.removeChild(this._private__leftStub._internal_getElement());\r\n            this._private__leftStub._internal_destroy();\r\n            this._private__leftStub = null;\r\n        }\r\n        if (!options.rightPriceScale.visible && this._private__rightStub !== null) {\r\n            this._private__rightStubCell.removeChild(this._private__rightStub._internal_getElement());\r\n            this._private__rightStub._internal_destroy();\r\n            this._private__rightStub = null;\r\n        }\r\n        const rendererOptionsProvider = this._private__chart._internal_model()._internal_rendererOptionsProvider();\r\n        const params = {\r\n            _internal_rendererOptionsProvider: rendererOptionsProvider,\r\n        };\r\n        const borderVisibleGetter = () => {\r\n            return options.leftPriceScale.borderVisible && model._internal_timeScale()._internal_options().borderVisible;\r\n        };\r\n        const bottomColorGetter = () => model._internal_backgroundBottomColor();\r\n        if (options.leftPriceScale.visible && this._private__leftStub === null) {\r\n            this._private__leftStub = new PriceAxisStub('left', options, params, borderVisibleGetter, bottomColorGetter);\r\n            this._private__leftStubCell.appendChild(this._private__leftStub._internal_getElement());\r\n        }\r\n        if (options.rightPriceScale.visible && this._private__rightStub === null) {\r\n            this._private__rightStub = new PriceAxisStub('right', options, params, borderVisibleGetter, bottomColorGetter);\r\n            this._private__rightStubCell.appendChild(this._private__rightStub._internal_getElement());\r\n        }\r\n    }\r\n}\r\n\r\nconst windowsChrome = isChromiumBased() && isWindows();\r\nclass ChartWidget {\r\n    constructor(container, options, horzScaleBehavior) {\r\n        this._private__paneWidgets = [];\r\n        this._private__paneSeparators = [];\r\n        this._private__drawRafId = 0;\r\n        this._private__height = 0;\r\n        this._private__width = 0;\r\n        this._private__leftPriceAxisWidth = 0;\r\n        this._private__rightPriceAxisWidth = 0;\r\n        this._private__invalidateMask = null;\r\n        this._private__drawPlanned = false;\r\n        this._private__clicked = new Delegate();\r\n        this._private__dblClicked = new Delegate();\r\n        this._private__crosshairMoved = new Delegate();\r\n        this._private__observer = null;\r\n        this._private__cursorStyleOverride = null;\r\n        this._private__container = container;\r\n        this._private__options = options;\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n        this._private__element = document.createElement('div');\r\n        this._private__element.classList.add('tv-lightweight-charts');\r\n        this._private__element.style.overflow = 'hidden';\r\n        this._private__element.style.direction = 'ltr';\r\n        this._private__element.style.width = '100%';\r\n        this._private__element.style.height = '100%';\r\n        disableSelection(this._private__element);\r\n        this._private__tableElement = document.createElement('table');\r\n        this._private__tableElement.setAttribute('cellspacing', '0');\r\n        this._private__element.appendChild(this._private__tableElement);\r\n        this._private__onWheelBound = this._private__onMousewheel.bind(this);\r\n        if (shouldSubscribeMouseWheel(this._private__options)) {\r\n            this._private__setMouseWheelEventListener(true);\r\n        }\r\n        this._private__model = new ChartModel(this._private__invalidateHandler.bind(this), this._private__options, horzScaleBehavior);\r\n        this._internal_model()._internal_crosshairMoved()._internal_subscribe(this._private__onPaneWidgetCrosshairMoved.bind(this), this);\r\n        this._private__timeAxisWidget = new TimeAxisWidget(this, this._private__horzScaleBehavior);\r\n        this._private__tableElement.appendChild(this._private__timeAxisWidget._internal_getElement());\r\n        const usedObserver = options.autoSize && this._private__installObserver();\r\n        // observer could not fire event immediately for some cases\r\n        // so we have to set initial size manually\r\n        let width = this._private__options.width;\r\n        let height = this._private__options.height;\r\n        // ignore width/height options if observer has actually been used\r\n        // however respect options if installing resize observer failed\r\n        if (usedObserver || width === 0 || height === 0) {\r\n            const containerRect = container.getBoundingClientRect();\r\n            width = width || containerRect.width;\r\n            height = height || containerRect.height;\r\n        }\r\n        // BEWARE: resize must be called BEFORE _syncGuiWithModel (in constructor only)\r\n        // or after but with adjustSize to properly update time scale\r\n        this._internal_resize(width, height);\r\n        this._private__syncGuiWithModel();\r\n        container.appendChild(this._private__element);\r\n        this._private__updateTimeAxisVisibility();\r\n        this._private__model._internal_timeScale()._internal_optionsApplied()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);\r\n        this._private__model._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);\r\n    }\r\n    _internal_model() {\r\n        return this._private__model;\r\n    }\r\n    _internal_options() {\r\n        return this._private__options;\r\n    }\r\n    _internal_paneWidgets() {\r\n        return this._private__paneWidgets;\r\n    }\r\n    _internal_timeAxisWidget() {\r\n        return this._private__timeAxisWidget;\r\n    }\r\n    _internal_destroy() {\r\n        this._private__setMouseWheelEventListener(false);\r\n        if (this._private__drawRafId !== 0) {\r\n            window.cancelAnimationFrame(this._private__drawRafId);\r\n        }\r\n        this._private__model._internal_crosshairMoved()._internal_unsubscribeAll(this);\r\n        this._private__model._internal_timeScale()._internal_optionsApplied()._internal_unsubscribeAll(this);\r\n        this._private__model._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);\r\n        this._private__model._internal_destroy();\r\n        for (const paneWidget of this._private__paneWidgets) {\r\n            this._private__tableElement.removeChild(paneWidget._internal_getElement());\r\n            paneWidget._internal_clicked()._internal_unsubscribeAll(this);\r\n            paneWidget._internal_dblClicked()._internal_unsubscribeAll(this);\r\n            paneWidget._internal_destroy();\r\n        }\r\n        this._private__paneWidgets = [];\r\n        for (const paneSeparator of this._private__paneSeparators) {\r\n            this._private__destroySeparator(paneSeparator);\r\n        }\r\n        this._private__paneSeparators = [];\r\n        ensureNotNull(this._private__timeAxisWidget)._internal_destroy();\r\n        if (this._private__element.parentElement !== null) {\r\n            this._private__element.parentElement.removeChild(this._private__element);\r\n        }\r\n        this._private__crosshairMoved._internal_destroy();\r\n        this._private__clicked._internal_destroy();\r\n        this._private__dblClicked._internal_destroy();\r\n        this._private__uninstallObserver();\r\n    }\r\n    _internal_resize(width, height, forceRepaint = false) {\r\n        if (this._private__height === height && this._private__width === width) {\r\n            return;\r\n        }\r\n        const sizeHint = suggestChartSize(size$1({ width, height }));\r\n        this._private__height = sizeHint.height;\r\n        this._private__width = sizeHint.width;\r\n        const heightStr = this._private__height + 'px';\r\n        const widthStr = this._private__width + 'px';\r\n        ensureNotNull(this._private__element).style.height = heightStr;\r\n        ensureNotNull(this._private__element).style.width = widthStr;\r\n        this._private__tableElement.style.height = heightStr;\r\n        this._private__tableElement.style.width = widthStr;\r\n        if (forceRepaint) {\r\n            this._private__drawImpl(InvalidateMask._internal_full(), performance.now());\r\n        }\r\n        else {\r\n            this._private__model._internal_fullUpdate();\r\n        }\r\n    }\r\n    _internal_paint(invalidateMask) {\r\n        if (invalidateMask === undefined) {\r\n            invalidateMask = InvalidateMask._internal_full();\r\n        }\r\n        for (let i = 0; i < this._private__paneWidgets.length; i++) {\r\n            this._private__paneWidgets[i]._internal_paint(invalidateMask._internal_invalidateForPane(i)._internal_level);\r\n        }\r\n        if (this._private__options.timeScale.visible) {\r\n            this._private__timeAxisWidget._internal_paint(invalidateMask._internal_fullInvalidation());\r\n        }\r\n    }\r\n    _internal_applyOptions(options) {\r\n        const currentlyHasMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);\r\n        // we don't need to merge options here because it's done in chart model\r\n        // and since both model and widget share the same object it will be done automatically for widget as well\r\n        // not ideal solution for sure, but it work's for now ¯\\_(ツ)_/¯\r\n        this._private__model._internal_applyOptions(options);\r\n        const shouldHaveMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);\r\n        if (shouldHaveMouseWheelListener !== currentlyHasMouseWheelListener) {\r\n            this._private__setMouseWheelEventListener(shouldHaveMouseWheelListener);\r\n        }\r\n        if (options['layout']?.panes) {\r\n            this._private__applyPanesOptions();\r\n        }\r\n        this._private__updateTimeAxisVisibility();\r\n        this._private__applyAutoSizeOptions(options);\r\n    }\r\n    _internal_clicked() {\r\n        return this._private__clicked;\r\n    }\r\n    _internal_dblClicked() {\r\n        return this._private__dblClicked;\r\n    }\r\n    _internal_crosshairMoved() {\r\n        return this._private__crosshairMoved;\r\n    }\r\n    _internal_takeScreenshot() {\r\n        if (this._private__invalidateMask !== null) {\r\n            this._private__drawImpl(this._private__invalidateMask, performance.now());\r\n            this._private__invalidateMask = null;\r\n        }\r\n        const screeshotBitmapSize = this._private__traverseLayout(null);\r\n        const screenshotCanvas = document.createElement('canvas');\r\n        screenshotCanvas.width = screeshotBitmapSize.width;\r\n        screenshotCanvas.height = screeshotBitmapSize.height;\r\n        const ctx = ensureNotNull(screenshotCanvas.getContext('2d'));\r\n        this._private__traverseLayout(ctx);\r\n        return screenshotCanvas;\r\n    }\r\n    _internal_getPriceAxisWidth(position) {\r\n        if (position === \"left\" /* DefaultPriceScaleId.Left */ && !this._private__isLeftAxisVisible()) {\r\n            return 0;\r\n        }\r\n        if (position === \"right\" /* DefaultPriceScaleId.Right */ && !this._private__isRightAxisVisible()) {\r\n            return 0;\r\n        }\r\n        if (this._private__paneWidgets.length === 0) {\r\n            return 0;\r\n        }\r\n        // we don't need to worry about exactly pane widget here\r\n        // because all pane widgets have the same width of price axis widget\r\n        // see _adjustSizeImpl\r\n        const priceAxisWidget = position === \"left\" /* DefaultPriceScaleId.Left */\r\n            ? this._private__paneWidgets[0]._internal_leftPriceAxisWidget()\r\n            : this._private__paneWidgets[0]._internal_rightPriceAxisWidget();\r\n        return ensureNotNull(priceAxisWidget)._internal_getWidth();\r\n    }\r\n    _internal_autoSizeActive() {\r\n        return this._private__options.autoSize && this._private__observer !== null;\r\n    }\r\n    _internal_element() {\r\n        return this._private__element;\r\n    }\r\n    _internal_setCursorStyle(style) {\r\n        this._private__cursorStyleOverride = style;\r\n        if (this._private__cursorStyleOverride) {\r\n            this._internal_element().style.setProperty('cursor', style);\r\n        }\r\n        else {\r\n            this._internal_element().style.removeProperty('cursor');\r\n        }\r\n    }\r\n    _internal_getCursorOverrideStyle() {\r\n        return this._private__cursorStyleOverride;\r\n    }\r\n    _internal_paneSize(paneIndex) {\r\n        return ensureDefined(this._private__paneWidgets[paneIndex])._internal_getSize();\r\n    }\r\n    _private__applyPanesOptions() {\r\n        this._private__paneSeparators.forEach((separator) => {\r\n            separator._internal_update();\r\n        });\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _private__applyAutoSizeOptions(options) {\r\n        if (options.autoSize === undefined && this._private__observer && (options.width !== undefined || options.height !== undefined)) {\r\n            warn(`You should turn autoSize off explicitly before specifying sizes; try adding options.autoSize: false to new options`);\r\n            return;\r\n        }\r\n        if (options.autoSize && !this._private__observer) {\r\n            // installing observer will override resize if successful\r\n            this._private__installObserver();\r\n        }\r\n        if (options.autoSize === false && this._private__observer !== null) {\r\n            this._private__uninstallObserver();\r\n        }\r\n        if (!options.autoSize && (options.width !== undefined || options.height !== undefined)) {\r\n            this._internal_resize(options.width || this._private__width, options.height || this._private__height);\r\n        }\r\n    }\r\n    /**\r\n     * Traverses the widget's layout (pane and axis child widgets),\r\n     * draws the screenshot (if rendering context is passed) and returns the screenshot bitmap size\r\n     *\r\n     * @param ctx - if passed, used to draw the screenshot of widget\r\n     * @returns screenshot bitmap size\r\n     */\r\n    _private__traverseLayout(ctx) {\r\n        let totalWidth = 0;\r\n        let totalHeight = 0;\r\n        const firstPane = this._private__paneWidgets[0];\r\n        const drawPriceAxises = (position, targetX) => {\r\n            let targetY = 0;\r\n            for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++) {\r\n                const paneWidget = this._private__paneWidgets[paneIndex];\r\n                const priceAxisWidget = ensureNotNull(position === 'left' ? paneWidget._internal_leftPriceAxisWidget() : paneWidget._internal_rightPriceAxisWidget());\r\n                const bitmapSize = priceAxisWidget._internal_getBitmapSize();\r\n                if (ctx !== null) {\r\n                    priceAxisWidget._internal_drawBitmap(ctx, targetX, targetY);\r\n                }\r\n                targetY += bitmapSize.height;\r\n                if (paneIndex < this._private__paneWidgets.length - 1) {\r\n                    const separator = this._private__paneSeparators[paneIndex];\r\n                    const separatorBitmapSize = separator._internal_getBitmapSize();\r\n                    if (ctx !== null) {\r\n                        separator._internal_drawBitmap(ctx, targetX, targetY);\r\n                    }\r\n                    targetY += separatorBitmapSize.height;\r\n                }\r\n            }\r\n        };\r\n        // draw left price scale if exists\r\n        if (this._private__isLeftAxisVisible()) {\r\n            drawPriceAxises('left', 0);\r\n            const leftAxisBitmapWidth = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getBitmapSize().width;\r\n            totalWidth += leftAxisBitmapWidth;\r\n        }\r\n        for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++) {\r\n            const paneWidget = this._private__paneWidgets[paneIndex];\r\n            const bitmapSize = paneWidget._internal_getBitmapSize();\r\n            if (ctx !== null) {\r\n                paneWidget._internal_drawBitmap(ctx, totalWidth, totalHeight);\r\n            }\r\n            totalHeight += bitmapSize.height;\r\n            if (paneIndex < this._private__paneWidgets.length - 1) {\r\n                const separator = this._private__paneSeparators[paneIndex];\r\n                const separatorBitmapSize = separator._internal_getBitmapSize();\r\n                if (ctx !== null) {\r\n                    separator._internal_drawBitmap(ctx, totalWidth, totalHeight);\r\n                }\r\n                totalHeight += separatorBitmapSize.height;\r\n            }\r\n        }\r\n        const firstPaneBitmapWidth = firstPane._internal_getBitmapSize().width;\r\n        totalWidth += firstPaneBitmapWidth;\r\n        // draw right price scale if exists\r\n        if (this._private__isRightAxisVisible()) {\r\n            drawPriceAxises('right', totalWidth);\r\n            const rightAxisBitmapWidth = ensureNotNull(firstPane._internal_rightPriceAxisWidget())._internal_getBitmapSize().width;\r\n            totalWidth += rightAxisBitmapWidth;\r\n        }\r\n        const drawStub = (position, targetX, targetY) => {\r\n            const stub = ensureNotNull(position === 'left' ? this._private__timeAxisWidget._internal_leftStub() : this._private__timeAxisWidget._internal_rightStub());\r\n            stub._internal_drawBitmap(ensureNotNull(ctx), targetX, targetY);\r\n        };\r\n        // draw time scale and stubs\r\n        if (this._private__options.timeScale.visible) {\r\n            const timeAxisBitmapSize = this._private__timeAxisWidget._internal_getBitmapSize();\r\n            if (ctx !== null) {\r\n                let targetX = 0;\r\n                if (this._private__isLeftAxisVisible()) {\r\n                    drawStub('left', targetX, totalHeight);\r\n                    targetX = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getBitmapSize().width;\r\n                }\r\n                this._private__timeAxisWidget._internal_drawBitmap(ctx, targetX, totalHeight);\r\n                targetX += timeAxisBitmapSize.width;\r\n                if (this._private__isRightAxisVisible()) {\r\n                    drawStub('right', targetX, totalHeight);\r\n                }\r\n            }\r\n            totalHeight += timeAxisBitmapSize.height;\r\n        }\r\n        return size$1({\r\n            width: totalWidth,\r\n            height: totalHeight,\r\n        });\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _private__adjustSizeImpl() {\r\n        let totalStretch = 0;\r\n        let leftPriceAxisWidth = 0;\r\n        let rightPriceAxisWidth = 0;\r\n        for (const paneWidget of this._private__paneWidgets) {\r\n            if (this._private__isLeftAxisVisible()) {\r\n                leftPriceAxisWidth = Math.max(leftPriceAxisWidth, ensureNotNull(paneWidget._internal_leftPriceAxisWidget())._internal_optimalWidth(), this._private__options.leftPriceScale.minimumWidth);\r\n            }\r\n            if (this._private__isRightAxisVisible()) {\r\n                rightPriceAxisWidth = Math.max(rightPriceAxisWidth, ensureNotNull(paneWidget._internal_rightPriceAxisWidget())._internal_optimalWidth(), this._private__options.rightPriceScale.minimumWidth);\r\n            }\r\n            totalStretch += paneWidget._internal_stretchFactor();\r\n        }\r\n        leftPriceAxisWidth = suggestPriceScaleWidth(leftPriceAxisWidth);\r\n        rightPriceAxisWidth = suggestPriceScaleWidth(rightPriceAxisWidth);\r\n        const width = this._private__width;\r\n        const height = this._private__height;\r\n        const paneWidth = Math.max(width - leftPriceAxisWidth - rightPriceAxisWidth, 0);\r\n        const separatorCount = this._private__paneSeparators.length;\r\n        const separatorHeight = 1 /* SeparatorConstants.SeparatorHeight */;\r\n        const separatorsHeight = separatorHeight * separatorCount;\r\n        const timeAxisVisible = this._private__options.timeScale.visible;\r\n        let timeAxisHeight = timeAxisVisible ? Math.max(this._private__timeAxisWidget._internal_optimalHeight(), this._private__options.timeScale.minimumHeight) : 0;\r\n        timeAxisHeight = suggestTimeScaleHeight(timeAxisHeight);\r\n        const otherWidgetHeight = separatorsHeight + timeAxisHeight;\r\n        const totalPaneHeight = height < otherWidgetHeight ? 0 : height - otherWidgetHeight;\r\n        const stretchPixels = totalPaneHeight / totalStretch;\r\n        let accumulatedHeight = 0;\r\n        const pixelRatio = window.devicePixelRatio || 1;\r\n        for (let paneIndex = 0; paneIndex < this._private__paneWidgets.length; ++paneIndex) {\r\n            const paneWidget = this._private__paneWidgets[paneIndex];\r\n            paneWidget._internal_setState(this._private__model._internal_panes()[paneIndex]);\r\n            let paneHeight = 0;\r\n            let calculatePaneHeight = 0;\r\n            if (paneIndex === this._private__paneWidgets.length - 1) {\r\n                calculatePaneHeight = Math.ceil((totalPaneHeight - accumulatedHeight) * pixelRatio) / pixelRatio;\r\n            }\r\n            else {\r\n                calculatePaneHeight = Math.round(paneWidget._internal_stretchFactor() * stretchPixels * pixelRatio) / pixelRatio;\r\n            }\r\n            paneHeight = Math.max(calculatePaneHeight, 2);\r\n            accumulatedHeight += paneHeight;\r\n            paneWidget._internal_setSize(size$1({ width: paneWidth, height: paneHeight }));\r\n            if (this._private__isLeftAxisVisible()) {\r\n                paneWidget._internal_setPriceAxisSize(leftPriceAxisWidth, 'left');\r\n            }\r\n            if (this._private__isRightAxisVisible()) {\r\n                paneWidget._internal_setPriceAxisSize(rightPriceAxisWidth, 'right');\r\n            }\r\n            if (paneWidget._internal_state()) {\r\n                this._private__model._internal_setPaneHeight(paneWidget._internal_state(), paneHeight);\r\n            }\r\n        }\r\n        this._private__timeAxisWidget._internal_setSizes(size$1({ width: timeAxisVisible ? paneWidth : 0, height: timeAxisHeight }), timeAxisVisible ? leftPriceAxisWidth : 0, timeAxisVisible ? rightPriceAxisWidth : 0);\r\n        this._private__model._internal_setWidth(paneWidth);\r\n        if (this._private__leftPriceAxisWidth !== leftPriceAxisWidth) {\r\n            this._private__leftPriceAxisWidth = leftPriceAxisWidth;\r\n        }\r\n        if (this._private__rightPriceAxisWidth !== rightPriceAxisWidth) {\r\n            this._private__rightPriceAxisWidth = rightPriceAxisWidth;\r\n        }\r\n    }\r\n    _private__setMouseWheelEventListener(add) {\r\n        if (add) {\r\n            this._private__element.addEventListener('wheel', this._private__onWheelBound, { passive: false });\r\n            return;\r\n        }\r\n        this._private__element.removeEventListener('wheel', this._private__onWheelBound);\r\n    }\r\n    _private__determineWheelSpeedAdjustment(event) {\r\n        switch (event.deltaMode) {\r\n            case event.DOM_DELTA_PAGE:\r\n                // one screen at time scroll mode\r\n                return 120;\r\n            case event.DOM_DELTA_LINE:\r\n                // one line at time scroll mode\r\n                return 32;\r\n        }\r\n        if (!windowsChrome) {\r\n            return 1;\r\n        }\r\n        // Chromium on Windows has a bug where the scroll speed isn't correctly\r\n        // adjusted for high density displays. We need to correct for this so that\r\n        // scroll speed is consistent between browsers.\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1001735\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1207308\r\n        return (1 / window.devicePixelRatio);\r\n    }\r\n    _private__onMousewheel(event) {\r\n        if ((event.deltaX === 0 || !this._private__options['handleScroll'].mouseWheel) &&\r\n            (event.deltaY === 0 || !this._private__options['handleScale'].mouseWheel)) {\r\n            return;\r\n        }\r\n        const scrollSpeedAdjustment = this._private__determineWheelSpeedAdjustment(event);\r\n        const deltaX = scrollSpeedAdjustment * event.deltaX / 100;\r\n        const deltaY = -(scrollSpeedAdjustment * event.deltaY / 100);\r\n        if (event.cancelable) {\r\n            event.preventDefault();\r\n        }\r\n        if (deltaY !== 0 && this._private__options['handleScale'].mouseWheel) {\r\n            const zoomScale = Math.sign(deltaY) * Math.min(1, Math.abs(deltaY));\r\n            const scrollPosition = event.clientX - this._private__element.getBoundingClientRect().left;\r\n            this._internal_model()._internal_zoomTime(scrollPosition, zoomScale);\r\n        }\r\n        if (deltaX !== 0 && this._private__options['handleScroll'].mouseWheel) {\r\n            this._internal_model()._internal_scrollChart(deltaX * -80); // 80 is a made up coefficient, and minus is for the \"natural\" scroll\r\n        }\r\n    }\r\n    _private__drawImpl(invalidateMask, time) {\r\n        const invalidationType = invalidateMask._internal_fullInvalidation();\r\n        // actions for full invalidation ONLY (not shared with light)\r\n        if (invalidationType === 3 /* InvalidationLevel.Full */) {\r\n            this._private__updateGui();\r\n        }\r\n        // light or full invalidate actions\r\n        if (invalidationType === 3 /* InvalidationLevel.Full */ ||\r\n            invalidationType === 2 /* InvalidationLevel.Light */) {\r\n            this._private__applyMomentaryAutoScale(invalidateMask);\r\n            this._private__applyTimeScaleInvalidations(invalidateMask, time);\r\n            this._private__timeAxisWidget._internal_update();\r\n            this._private__paneWidgets.forEach((pane) => {\r\n                pane._internal_updatePriceAxisWidgets();\r\n            });\r\n            // In the case a full invalidation has been postponed during the draw, reapply\r\n            // the timescale invalidations. A full invalidation would mean there is a change\r\n            // in the timescale width (caused by price scale changes) that needs to be drawn\r\n            // right away to avoid flickering.\r\n            if (this._private__invalidateMask?._internal_fullInvalidation() === 3 /* InvalidationLevel.Full */) {\r\n                this._private__invalidateMask._internal_merge(invalidateMask);\r\n                this._private__updateGui();\r\n                this._private__applyMomentaryAutoScale(this._private__invalidateMask);\r\n                this._private__applyTimeScaleInvalidations(this._private__invalidateMask, time);\r\n                invalidateMask = this._private__invalidateMask;\r\n                this._private__invalidateMask = null;\r\n            }\r\n        }\r\n        this._internal_paint(invalidateMask);\r\n    }\r\n    _private__applyTimeScaleInvalidations(invalidateMask, time) {\r\n        for (const tsInvalidation of invalidateMask._internal_timeScaleInvalidations()) {\r\n            this._private__applyTimeScaleInvalidation(tsInvalidation, time);\r\n        }\r\n    }\r\n    _private__applyMomentaryAutoScale(invalidateMask) {\r\n        const panes = this._private__model._internal_panes();\r\n        for (let i = 0; i < panes.length; i++) {\r\n            if (invalidateMask._internal_invalidateForPane(i)._internal_autoScale) {\r\n                panes[i]._internal_momentaryAutoScale();\r\n            }\r\n        }\r\n    }\r\n    _private__applyTimeScaleInvalidation(invalidation, time) {\r\n        const timeScale = this._private__model._internal_timeScale();\r\n        switch (invalidation._internal_type) {\r\n            case 0 /* TimeScaleInvalidationType.FitContent */:\r\n                timeScale._internal_fitContent();\r\n                break;\r\n            case 1 /* TimeScaleInvalidationType.ApplyRange */:\r\n                timeScale._internal_setLogicalRange(invalidation._internal_value);\r\n                break;\r\n            case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */:\r\n                timeScale._internal_setBarSpacing(invalidation._internal_value);\r\n                break;\r\n            case 3 /* TimeScaleInvalidationType.ApplyRightOffset */:\r\n                timeScale._internal_setRightOffset(invalidation._internal_value);\r\n                break;\r\n            case 4 /* TimeScaleInvalidationType.Reset */:\r\n                timeScale._internal_restoreDefault();\r\n                break;\r\n            case 5 /* TimeScaleInvalidationType.Animation */:\r\n                if (!invalidation._internal_value._internal_finished(time)) {\r\n                    timeScale._internal_setRightOffset(invalidation._internal_value._internal_getPosition(time));\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    _private__invalidateHandler(invalidateMask) {\r\n        if (this._private__invalidateMask !== null) {\r\n            this._private__invalidateMask._internal_merge(invalidateMask);\r\n        }\r\n        else {\r\n            this._private__invalidateMask = invalidateMask;\r\n        }\r\n        if (!this._private__drawPlanned) {\r\n            this._private__drawPlanned = true;\r\n            this._private__drawRafId = window.requestAnimationFrame((time) => {\r\n                this._private__drawPlanned = false;\r\n                this._private__drawRafId = 0;\r\n                if (this._private__invalidateMask !== null) {\r\n                    const mask = this._private__invalidateMask;\r\n                    this._private__invalidateMask = null;\r\n                    this._private__drawImpl(mask, time);\r\n                    for (const tsInvalidation of mask._internal_timeScaleInvalidations()) {\r\n                        if (tsInvalidation._internal_type === 5 /* TimeScaleInvalidationType.Animation */ && !tsInvalidation._internal_value._internal_finished(time)) {\r\n                            this._internal_model()._internal_setTimeScaleAnimation(tsInvalidation._internal_value);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    _private__updateGui() {\r\n        this._private__syncGuiWithModel();\r\n    }\r\n    _private__destroySeparator(separator) {\r\n        this._private__tableElement.removeChild(separator._internal_getElement());\r\n        separator._internal_destroy();\r\n    }\r\n    _private__syncGuiWithModel() {\r\n        const panes = this._private__model._internal_panes();\r\n        const targetPaneWidgetsCount = panes.length;\r\n        const actualPaneWidgetsCount = this._private__paneWidgets.length;\r\n        // Remove (if needed) pane widgets and separators\r\n        for (let i = targetPaneWidgetsCount; i < actualPaneWidgetsCount; i++) {\r\n            const paneWidget = ensureDefined(this._private__paneWidgets.pop());\r\n            this._private__tableElement.removeChild(paneWidget._internal_getElement());\r\n            paneWidget._internal_clicked()._internal_unsubscribeAll(this);\r\n            paneWidget._internal_dblClicked()._internal_unsubscribeAll(this);\r\n            paneWidget._internal_destroy();\r\n            const paneSeparator = this._private__paneSeparators.pop();\r\n            if (paneSeparator !== undefined) {\r\n                this._private__destroySeparator(paneSeparator);\r\n            }\r\n        }\r\n        // Create (if needed) new pane widgets and separators\r\n        for (let i = actualPaneWidgetsCount; i < targetPaneWidgetsCount; i++) {\r\n            const paneWidget = new PaneWidget(this, panes[i]);\r\n            paneWidget._internal_clicked()._internal_subscribe(this._private__onPaneWidgetClicked.bind(this, paneWidget), this);\r\n            paneWidget._internal_dblClicked()._internal_subscribe(this._private__onPaneWidgetDblClicked.bind(this, paneWidget), this);\r\n            this._private__paneWidgets.push(paneWidget);\r\n            // create and insert separator\r\n            if (i > 0) {\r\n                const paneSeparator = new PaneSeparator(this, i - 1, i);\r\n                this._private__paneSeparators.push(paneSeparator);\r\n                this._private__tableElement.insertBefore(paneSeparator._internal_getElement(), this._private__timeAxisWidget._internal_getElement());\r\n            }\r\n            // insert paneWidget\r\n            this._private__tableElement.insertBefore(paneWidget._internal_getElement(), this._private__timeAxisWidget._internal_getElement());\r\n        }\r\n        for (let i = 0; i < targetPaneWidgetsCount; i++) {\r\n            const state = panes[i];\r\n            const paneWidget = this._private__paneWidgets[i];\r\n            if (paneWidget._internal_state() !== state) {\r\n                paneWidget._internal_setState(state);\r\n            }\r\n            else {\r\n                paneWidget._internal_updatePriceAxisWidgetsStates();\r\n            }\r\n        }\r\n        this._private__updateTimeAxisVisibility();\r\n        this._private__adjustSizeImpl();\r\n    }\r\n    _private__getMouseEventParamsImpl(index, point, event, pane) {\r\n        const seriesData = new Map();\r\n        if (index !== null) {\r\n            const serieses = this._private__model._internal_serieses();\r\n            serieses.forEach((s) => {\r\n                // TODO: replace with search left\r\n                const data = s._internal_bars()._internal_search(index);\r\n                if (data !== null) {\r\n                    seriesData.set(s, data);\r\n                }\r\n            });\r\n        }\r\n        let clientTime;\r\n        if (index !== null) {\r\n            const timePoint = this._private__model._internal_timeScale()._internal_indexToTimeScalePoint(index)?.originalTime;\r\n            if (timePoint !== undefined) {\r\n                clientTime = timePoint;\r\n            }\r\n        }\r\n        const hoveredSource = this._internal_model()._internal_hoveredSource();\r\n        const hoveredSeries = hoveredSource !== null && hoveredSource._internal_source instanceof Series\r\n            ? hoveredSource._internal_source\r\n            : undefined;\r\n        const hoveredObject = hoveredSource !== null && hoveredSource._internal_object !== undefined\r\n            ? hoveredSource._internal_object._internal_externalId\r\n            : undefined;\r\n        const paneIndex = this._private__getPaneIndex(pane);\r\n        return {\r\n            _internal_originalTime: clientTime,\r\n            _internal_index: index ?? undefined,\r\n            _internal_point: point ?? undefined,\r\n            _internal_paneIndex: paneIndex !== -1 ? paneIndex : undefined,\r\n            _internal_hoveredSeries: hoveredSeries,\r\n            _internal_seriesData: seriesData,\r\n            _internal_hoveredObject: hoveredObject,\r\n            _internal_touchMouseEventData: event ?? undefined,\r\n        };\r\n    }\r\n    _private__getPaneIndex(pane) {\r\n        let paneIndex = -1;\r\n        if (pane) {\r\n            paneIndex = this._private__paneWidgets.indexOf(pane);\r\n        }\r\n        else {\r\n            const crosshairPane = this._internal_model()._internal_crosshairSource()._internal_pane();\r\n            if (crosshairPane !== null) {\r\n                paneIndex = this._internal_model()._internal_panes().indexOf(crosshairPane);\r\n            }\r\n        }\r\n        return paneIndex;\r\n    }\r\n    _private__onPaneWidgetClicked(pane, time, point, event) {\r\n        this._private__clicked._internal_fire(() => this._private__getMouseEventParamsImpl(time, point, event, pane));\r\n    }\r\n    _private__onPaneWidgetDblClicked(pane, time, point, event) {\r\n        this._private__dblClicked._internal_fire(() => this._private__getMouseEventParamsImpl(time, point, event, pane));\r\n    }\r\n    _private__onPaneWidgetCrosshairMoved(time, point, event) {\r\n        this._internal_setCursorStyle(this._internal_model()._internal_hoveredSource()?._internal_cursorStyle ?? null);\r\n        this._private__crosshairMoved._internal_fire(() => this._private__getMouseEventParamsImpl(time, point, event));\r\n    }\r\n    _private__updateTimeAxisVisibility() {\r\n        const display = this._private__options.timeScale.visible ? '' : 'none';\r\n        this._private__timeAxisWidget._internal_getElement().style.display = display;\r\n    }\r\n    _private__isLeftAxisVisible() {\r\n        return this._private__paneWidgets[0]._internal_state()._internal_leftPriceScale()._internal_options().visible;\r\n    }\r\n    _private__isRightAxisVisible() {\r\n        return this._private__paneWidgets[0]._internal_state()._internal_rightPriceScale()._internal_options().visible;\r\n    }\r\n    _private__installObserver() {\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        if (!('ResizeObserver' in window)) {\r\n            warn('Options contains \"autoSize\" flag, but the browser does not support ResizeObserver feature. Please provide polyfill.');\r\n            return false;\r\n        }\r\n        else {\r\n            this._private__observer = new ResizeObserver((entries) => {\r\n                // There is no need to check if entry.target === this._container since there is only\r\n                // a single element being observed.\r\n                // and we want to use the last entry (if multiple) because it would be most up to date\r\n                // (since the browser may batch multiple updates).\r\n                const containerEntry = entries[entries.length - 1];\r\n                if (!containerEntry) {\r\n                    // this may be undefined if the entries array was empty.\r\n                    return;\r\n                }\r\n                this._internal_resize(containerEntry.contentRect.width, containerEntry.contentRect.height);\r\n            });\r\n            this._private__observer.observe(this._private__container, { box: 'border-box' });\r\n            return true;\r\n        }\r\n    }\r\n    _private__uninstallObserver() {\r\n        if (this._private__observer !== null) {\r\n            this._private__observer.disconnect();\r\n        }\r\n        this._private__observer = null;\r\n    }\r\n}\r\nfunction disableSelection(element) {\r\n    element.style.userSelect = 'none';\r\n    // eslint-disable-next-line deprecation/deprecation\r\n    element.style.webkitUserSelect = 'none';\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\r\n    element.style.msUserSelect = 'none';\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\r\n    element.style.MozUserSelect = 'none';\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\r\n    element.style.webkitTapHighlightColor = 'transparent';\r\n}\r\nfunction shouldSubscribeMouseWheel(options) {\r\n    return Boolean(options['handleScroll'].mouseWheel || options['handleScale'].mouseWheel);\r\n}\r\n\r\nfunction isWhitespaceData(data) {\r\n    return data.open === undefined && data.value === undefined;\r\n}\r\nfunction isFulfilledData(data) {\r\n    return isFulfilledBarData(data) || isFulfilledLineData(data);\r\n}\r\nfunction isFulfilledBarData(data) {\r\n    return data.open !== undefined;\r\n}\r\nfunction isFulfilledLineData(data) {\r\n    return data.value !== undefined;\r\n}\r\n\r\nfunction getColoredLineBasedSeriesPlotRow(time, index, item, originalTime) {\r\n    const val = item.value;\r\n    const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };\r\n    if (item.color !== undefined) {\r\n        res._internal_color = item.color;\r\n    }\r\n    return res;\r\n}\r\nfunction getAreaSeriesPlotRow(time, index, item, originalTime) {\r\n    const val = item.value;\r\n    const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };\r\n    if (item.lineColor !== undefined) {\r\n        res._internal_lineColor = item.lineColor;\r\n    }\r\n    if (item.topColor !== undefined) {\r\n        res._internal_topColor = item.topColor;\r\n    }\r\n    if (item.bottomColor !== undefined) {\r\n        res._internal_bottomColor = item.bottomColor;\r\n    }\r\n    return res;\r\n}\r\nfunction getBaselineSeriesPlotRow(time, index, item, originalTime) {\r\n    const val = item.value;\r\n    const res = { _internal_index: index, _internal_time: time, _internal_value: [val, val, val, val], _internal_originalTime: originalTime };\r\n    if (item.topLineColor !== undefined) {\r\n        res._internal_topLineColor = item.topLineColor;\r\n    }\r\n    if (item.bottomLineColor !== undefined) {\r\n        res._internal_bottomLineColor = item.bottomLineColor;\r\n    }\r\n    if (item.topFillColor1 !== undefined) {\r\n        res._internal_topFillColor1 = item.topFillColor1;\r\n    }\r\n    if (item.topFillColor2 !== undefined) {\r\n        res._internal_topFillColor2 = item.topFillColor2;\r\n    }\r\n    if (item.bottomFillColor1 !== undefined) {\r\n        res._internal_bottomFillColor1 = item.bottomFillColor1;\r\n    }\r\n    if (item.bottomFillColor2 !== undefined) {\r\n        res._internal_bottomFillColor2 = item.bottomFillColor2;\r\n    }\r\n    return res;\r\n}\r\nfunction getBarSeriesPlotRow(time, index, item, originalTime) {\r\n    const res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close], _internal_originalTime: originalTime };\r\n    if (item.color !== undefined) {\r\n        res._internal_color = item.color;\r\n    }\r\n    return res;\r\n}\r\nfunction getCandlestickSeriesPlotRow(time, index, item, originalTime) {\r\n    const res = { _internal_index: index, _internal_time: time, _internal_value: [item.open, item.high, item.low, item.close], _internal_originalTime: originalTime };\r\n    if (item.color !== undefined) {\r\n        res._internal_color = item.color;\r\n    }\r\n    if (item.borderColor !== undefined) {\r\n        res._internal_borderColor = item.borderColor;\r\n    }\r\n    if (item.wickColor !== undefined) {\r\n        res._internal_wickColor = item.wickColor;\r\n    }\r\n    return res;\r\n}\r\nfunction getCustomSeriesPlotRow(time, index, item, originalTime, dataToPlotRow) {\r\n    const values = ensureDefined(dataToPlotRow)(item);\r\n    const max = Math.max(...values);\r\n    const min = Math.min(...values);\r\n    const last = values[values.length - 1];\r\n    const value = [last, max, min, last];\r\n    const { time: excludedTime, color, ...data } = item;\r\n    return { _internal_index: index, _internal_time: time, _internal_value: value, _internal_originalTime: originalTime, _internal_data: data, _internal_color: color };\r\n}\r\nfunction isSeriesPlotRow(row) {\r\n    return row._internal_value !== undefined;\r\n}\r\nfunction wrapCustomValues(plotRow, bar) {\r\n    if (bar.customValues !== undefined) {\r\n        plotRow._internal_customValues = bar.customValues;\r\n    }\r\n    return plotRow;\r\n}\r\nfunction isWhitespaceDataWithCustomCheck(bar, customIsWhitespace) {\r\n    if (customIsWhitespace) {\r\n        return customIsWhitespace(bar);\r\n    }\r\n    return isWhitespaceData(bar);\r\n}\r\nfunction wrapWhitespaceData(createPlotRowFn) {\r\n    return (time, index, bar, originalTime, dataToPlotRow, customIsWhitespace) => {\r\n        if (isWhitespaceDataWithCustomCheck(bar, customIsWhitespace)) {\r\n            return wrapCustomValues({ _internal_time: time, _internal_index: index, _internal_originalTime: originalTime }, bar);\r\n        }\r\n        return wrapCustomValues(createPlotRowFn(time, index, bar, originalTime, dataToPlotRow), bar);\r\n    };\r\n}\r\nfunction getSeriesPlotRowCreator(seriesType) {\r\n    const seriesPlotRowFnMap = {\r\n        Candlestick: wrapWhitespaceData(getCandlestickSeriesPlotRow),\r\n        Bar: wrapWhitespaceData(getBarSeriesPlotRow),\r\n        Area: wrapWhitespaceData(getAreaSeriesPlotRow),\r\n        Baseline: wrapWhitespaceData(getBaselineSeriesPlotRow),\r\n        Histogram: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),\r\n        Line: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),\r\n        Custom: wrapWhitespaceData(getCustomSeriesPlotRow),\r\n    };\r\n    return seriesPlotRowFnMap[seriesType];\r\n}\r\n\r\n/// <reference types=\"_build-time-constants\" />\r\nfunction createEmptyTimePointData(timePoint) {\r\n    return { _internal_index: 0, _internal_mapping: new Map(), _internal_timePoint: timePoint };\r\n}\r\nfunction seriesRowsFirstAndLastTime(seriesRows, bh) {\r\n    if (seriesRows === undefined || seriesRows.length === 0) {\r\n        return undefined;\r\n    }\r\n    return {\r\n        _internal_firstTime: bh.key(seriesRows[0]._internal_time),\r\n        _internal_lastTime: bh.key(seriesRows[seriesRows.length - 1]._internal_time),\r\n    };\r\n}\r\nfunction seriesUpdateInfo(seriesRows, prevSeriesRows, bh) {\r\n    const firstAndLastTime = seriesRowsFirstAndLastTime(seriesRows, bh);\r\n    const prevFirstAndLastTime = seriesRowsFirstAndLastTime(prevSeriesRows, bh);\r\n    if (firstAndLastTime !== undefined && prevFirstAndLastTime !== undefined) {\r\n        return {\r\n            _internal_historicalUpdate: false,\r\n            _internal_lastBarUpdatedOrNewBarsAddedToTheRight: firstAndLastTime._internal_lastTime >= prevFirstAndLastTime._internal_lastTime &&\r\n                firstAndLastTime._internal_firstTime >= prevFirstAndLastTime._internal_firstTime,\r\n        };\r\n    }\r\n    return undefined;\r\n}\r\nfunction timeScalePointTime(mergedPointData) {\r\n    let result;\r\n    mergedPointData.forEach((v) => {\r\n        if (result === undefined) {\r\n            result = v._internal_originalTime;\r\n        }\r\n    });\r\n    return ensureDefined(result);\r\n}\r\nfunction saveOriginalTime(data) {\r\n    if (data._internal_originalTime === undefined) {\r\n        data._internal_originalTime = data.time;\r\n    }\r\n}\r\nclass DataLayer {\r\n    constructor(horzScaleBehavior) {\r\n        // note that _pointDataByTimePoint and _seriesRowsBySeries shares THE SAME objects in their values between each other\r\n        // it's just different kind of maps to make usages/perf better\r\n        this._private__pointDataByTimePoint = new Map();\r\n        this._private__seriesRowsBySeries = new Map();\r\n        this._private__seriesLastTimePoint = new Map();\r\n        // this is kind of \"dest\" values (in opposite to \"source\" ones) - we don't need to modify it manually, the only by calling _updateTimeScalePoints or updateSeriesData methods\r\n        this._private__sortedTimePoints = [];\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n    }\r\n    _internal_destroy() {\r\n        this._private__pointDataByTimePoint.clear();\r\n        this._private__seriesRowsBySeries.clear();\r\n        this._private__seriesLastTimePoint.clear();\r\n        this._private__sortedTimePoints = [];\r\n    }\r\n    _internal_setSeriesData(series, data) {\r\n        let needCleanupPoints = this._private__pointDataByTimePoint.size !== 0;\r\n        let isTimeScaleAffected = false;\r\n        // save previous series rows data before it's replaced inside this._setRowsToSeries\r\n        const prevSeriesRows = this._private__seriesRowsBySeries.get(series);\r\n        if (prevSeriesRows !== undefined) {\r\n            if (this._private__seriesRowsBySeries.size === 1) {\r\n                needCleanupPoints = false;\r\n                isTimeScaleAffected = true;\r\n                // perf optimization - if there is only 1 series, then we can just clear and fill everything from scratch\r\n                this._private__pointDataByTimePoint.clear();\r\n            }\r\n            else {\r\n                // perf optimization - actually we have to use this._pointDataByTimePoint for going through here\r\n                // but as soon as this._sortedTimePoints is just a different form of _pointDataByTimePoint we can use it as well\r\n                for (const point of this._private__sortedTimePoints) {\r\n                    if (point.pointData._internal_mapping.delete(series)) {\r\n                        isTimeScaleAffected = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let seriesRows = [];\r\n        if (data.length !== 0) {\r\n            const originalTimes = data.map((d) => d.time);\r\n            const timeConverter = this._private__horzScaleBehavior.createConverterToInternalObj(data);\r\n            const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());\r\n            const dataToPlotRow = series._internal_customSeriesPlotValuesBuilder();\r\n            const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\r\n            seriesRows = data.map((item, index) => {\r\n                const time = timeConverter(item.time);\r\n                const horzItemKey = this._private__horzScaleBehavior.key(time);\r\n                let timePointData = this._private__pointDataByTimePoint.get(horzItemKey);\r\n                if (timePointData === undefined) {\r\n                    // the indexes will be sync later\r\n                    timePointData = createEmptyTimePointData(time);\r\n                    this._private__pointDataByTimePoint.set(horzItemKey, timePointData);\r\n                    isTimeScaleAffected = true;\r\n                }\r\n                const row = createPlotRow(time, timePointData._internal_index, item, originalTimes[index], dataToPlotRow, customWhitespaceChecker);\r\n                timePointData._internal_mapping.set(series, row);\r\n                return row;\r\n            });\r\n        }\r\n        if (needCleanupPoints) {\r\n            // we deleted the old data from mapping and added the new ones\r\n            // so there might be empty points now, let's remove them first\r\n            this._private__cleanupPointsData();\r\n        }\r\n        this._private__setRowsToSeries(series, seriesRows);\r\n        let firstChangedPointIndex = -1;\r\n        if (isTimeScaleAffected) {\r\n            // then generate the time scale points\r\n            // timeWeight will be updates in _updateTimeScalePoints later\r\n            const newTimeScalePoints = [];\r\n            this._private__pointDataByTimePoint.forEach((pointData) => {\r\n                newTimeScalePoints.push({\r\n                    timeWeight: 0,\r\n                    time: pointData._internal_timePoint,\r\n                    pointData,\r\n                    originalTime: timeScalePointTime(pointData._internal_mapping),\r\n                });\r\n            });\r\n            newTimeScalePoints.sort((t1, t2) => this._private__horzScaleBehavior.key(t1.time) - this._private__horzScaleBehavior.key(t2.time));\r\n            firstChangedPointIndex = this._private__replaceTimeScalePoints(newTimeScalePoints);\r\n        }\r\n        return this._private__getUpdateResponse(series, firstChangedPointIndex, seriesUpdateInfo(this._private__seriesRowsBySeries.get(series), prevSeriesRows, this._private__horzScaleBehavior));\r\n    }\r\n    _internal_removeSeries(series) {\r\n        return this._internal_setSeriesData(series, []);\r\n    }\r\n    _internal_updateSeriesData(series, data, historicalUpdate) {\r\n        const extendedData = data;\r\n        saveOriginalTime(extendedData);\r\n        // convertStringToBusinessDay(data);\r\n        this._private__horzScaleBehavior.preprocessData(data);\r\n        const timeConverter = this._private__horzScaleBehavior.createConverterToInternalObj([data]);\r\n        const time = timeConverter(data.time);\r\n        const lastSeriesTime = this._private__seriesLastTimePoint.get(series);\r\n        if (!historicalUpdate && lastSeriesTime !== undefined && this._private__horzScaleBehavior.key(time) < this._private__horzScaleBehavior.key(lastSeriesTime)) {\r\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n            throw new Error(`Cannot update oldest data, last time=${lastSeriesTime}, new time=${time}`);\r\n        }\r\n        let pointDataAtTime = this._private__pointDataByTimePoint.get(this._private__horzScaleBehavior.key(time));\r\n        if (historicalUpdate && pointDataAtTime === undefined) {\r\n            throw new Error('Cannot update non-existing data point when historicalUpdate is true');\r\n        }\r\n        // if no point data found for the new data item\r\n        // that means that we need to update scale\r\n        const affectsTimeScale = pointDataAtTime === undefined;\r\n        if (pointDataAtTime === undefined) {\r\n            // the indexes will be sync later\r\n            pointDataAtTime = createEmptyTimePointData(time);\r\n            this._private__pointDataByTimePoint.set(this._private__horzScaleBehavior.key(time), pointDataAtTime);\r\n        }\r\n        const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());\r\n        const dataToPlotRow = series._internal_customSeriesPlotValuesBuilder();\r\n        const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\r\n        const plotRow = createPlotRow(time, pointDataAtTime._internal_index, data, extendedData._internal_originalTime, dataToPlotRow, customWhitespaceChecker);\r\n        pointDataAtTime._internal_mapping.set(series, plotRow);\r\n        if (historicalUpdate) {\r\n            this._private__updateHistoricalSeriesRow(series, plotRow, pointDataAtTime._internal_index);\r\n        }\r\n        else {\r\n            this._private__updateLastSeriesRow(series, plotRow);\r\n        }\r\n        const info = {\r\n            _internal_lastBarUpdatedOrNewBarsAddedToTheRight: isSeriesPlotRow(plotRow),\r\n            _internal_historicalUpdate: historicalUpdate,\r\n        };\r\n        // if point already exist on the time scale - we don't need to make a full update and just make an incremental one\r\n        if (!affectsTimeScale) {\r\n            return this._private__getUpdateResponse(series, -1, info);\r\n        }\r\n        const newPoint = {\r\n            timeWeight: 0,\r\n            time: pointDataAtTime._internal_timePoint,\r\n            pointData: pointDataAtTime,\r\n            originalTime: timeScalePointTime(pointDataAtTime._internal_mapping),\r\n        };\r\n        const insertIndex = lowerBound(this._private__sortedTimePoints, this._private__horzScaleBehavior.key(newPoint.time), (a, b) => this._private__horzScaleBehavior.key(a.time) < b);\r\n        // yes, I know that this array is readonly and this change is intended to make it performative\r\n        // we marked _sortedTimePoints array as readonly to avoid modifying this array anywhere else\r\n        // but this place is exceptional case due performance reasons, sorry\r\n        this._private__sortedTimePoints.splice(insertIndex, 0, newPoint);\r\n        for (let index = insertIndex; index < this._private__sortedTimePoints.length; ++index) {\r\n            assignIndexToPointData(this._private__sortedTimePoints[index].pointData, index);\r\n        }\r\n        this._private__horzScaleBehavior.fillWeightsForPoints(this._private__sortedTimePoints, insertIndex);\r\n        return this._private__getUpdateResponse(series, insertIndex, info);\r\n    }\r\n    _private__updateLastSeriesRow(series, plotRow) {\r\n        let seriesData = this._private__seriesRowsBySeries.get(series);\r\n        if (seriesData === undefined) {\r\n            seriesData = [];\r\n            this._private__seriesRowsBySeries.set(series, seriesData);\r\n        }\r\n        const lastSeriesRow = seriesData.length !== 0 ? seriesData[seriesData.length - 1] : null;\r\n        if (lastSeriesRow === null || this._private__horzScaleBehavior.key(plotRow._internal_time) > this._private__horzScaleBehavior.key(lastSeriesRow._internal_time)) {\r\n            if (isSeriesPlotRow(plotRow)) {\r\n                seriesData.push(plotRow);\r\n            }\r\n        }\r\n        else {\r\n            if (isSeriesPlotRow(plotRow)) {\r\n                seriesData[seriesData.length - 1] = plotRow;\r\n            }\r\n            else {\r\n                seriesData.splice(-1, 1);\r\n            }\r\n        }\r\n        this._private__seriesLastTimePoint.set(series, plotRow._internal_time);\r\n    }\r\n    _private__updateHistoricalSeriesRow(series, plotRow, pointDataIndex) {\r\n        const seriesData = this._private__seriesRowsBySeries.get(series);\r\n        if (seriesData === undefined) {\r\n            return;\r\n        }\r\n        // binary search for actual index in array.\r\n        const index = lowerBound(seriesData, pointDataIndex, (row, currentIndex) => row._internal_index < currentIndex);\r\n        if (isSeriesPlotRow(plotRow)) {\r\n            seriesData[index] = plotRow;\r\n        }\r\n        else {\r\n            seriesData.splice(index, 1);\r\n        }\r\n    }\r\n    _private__setRowsToSeries(series, seriesRows) {\r\n        if (seriesRows.length !== 0) {\r\n            this._private__seriesRowsBySeries.set(series, seriesRows.filter(isSeriesPlotRow));\r\n            this._private__seriesLastTimePoint.set(series, seriesRows[seriesRows.length - 1]._internal_time);\r\n        }\r\n        else {\r\n            this._private__seriesRowsBySeries.delete(series);\r\n            this._private__seriesLastTimePoint.delete(series);\r\n        }\r\n    }\r\n    _private__cleanupPointsData() {\r\n        // let's treat all current points as \"potentially removed\"\r\n        // we could create an array with actually potentially removed points\r\n        // but most likely this array will be similar to _sortedTimePoints so let's avoid using additional memory\r\n        // note that we can use _sortedTimePoints here since a point might be removed only it was here previously\r\n        for (const point of this._private__sortedTimePoints) {\r\n            if (point.pointData._internal_mapping.size === 0) {\r\n                this._private__pointDataByTimePoint.delete(this._private__horzScaleBehavior.key(point.time));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets new time scale and make indexes valid for all series\r\n     *\r\n     * @returns The index of the first changed point or `-1` if there is no change.\r\n     */\r\n    _private__replaceTimeScalePoints(newTimePoints) {\r\n        let firstChangedPointIndex = -1;\r\n        // search the first different point and \"syncing\" time weight by the way\r\n        for (let index = 0; index < this._private__sortedTimePoints.length && index < newTimePoints.length; ++index) {\r\n            const oldPoint = this._private__sortedTimePoints[index];\r\n            const newPoint = newTimePoints[index];\r\n            if (this._private__horzScaleBehavior.key(oldPoint.time) !== this._private__horzScaleBehavior.key(newPoint.time)) {\r\n                firstChangedPointIndex = index;\r\n                break;\r\n            }\r\n            // re-assign point's time weight for points if time is the same (and all prior times was the same)\r\n            newPoint.timeWeight = oldPoint.timeWeight;\r\n            assignIndexToPointData(newPoint.pointData, index);\r\n        }\r\n        if (firstChangedPointIndex === -1 && this._private__sortedTimePoints.length !== newTimePoints.length) {\r\n            // the common part of the prev and the new points are the same\r\n            // so the first changed point is the next after the common part\r\n            firstChangedPointIndex = Math.min(this._private__sortedTimePoints.length, newTimePoints.length);\r\n        }\r\n        if (firstChangedPointIndex === -1) {\r\n            // if no time scale changed, then do nothing\r\n            return -1;\r\n        }\r\n        // if time scale points are changed that means that we need to make full update to all series (with clearing points)\r\n        // but first we need to synchronize indexes and re-fill time weights\r\n        for (let index = firstChangedPointIndex; index < newTimePoints.length; ++index) {\r\n            assignIndexToPointData(newTimePoints[index].pointData, index);\r\n        }\r\n        // re-fill time weights for point after the first changed one\r\n        this._private__horzScaleBehavior.fillWeightsForPoints(newTimePoints, firstChangedPointIndex);\r\n        this._private__sortedTimePoints = newTimePoints;\r\n        return firstChangedPointIndex;\r\n    }\r\n    _private__getBaseIndex() {\r\n        if (this._private__seriesRowsBySeries.size === 0) {\r\n            // if we have no data then 'reset' the base index to null\r\n            return null;\r\n        }\r\n        let baseIndex = 0;\r\n        this._private__seriesRowsBySeries.forEach((data) => {\r\n            if (data.length !== 0) {\r\n                baseIndex = Math.max(baseIndex, data[data.length - 1]._internal_index);\r\n            }\r\n        });\r\n        return baseIndex;\r\n    }\r\n    _private__getUpdateResponse(updatedSeries, firstChangedPointIndex, info) {\r\n        const dataUpdateResponse = {\r\n            _internal_series: new Map(),\r\n            _internal_timeScale: {\r\n                _internal_baseIndex: this._private__getBaseIndex(),\r\n            },\r\n        };\r\n        if (firstChangedPointIndex !== -1) {\r\n            // TODO: it's possible to make perf improvements by checking what series has data after firstChangedPointIndex\r\n            // but let's skip for now\r\n            this._private__seriesRowsBySeries.forEach((data, s) => {\r\n                dataUpdateResponse._internal_series.set(s, {\r\n                    _internal_data: data,\r\n                    _internal_info: s === updatedSeries ? info : undefined,\r\n                });\r\n            });\r\n            // if the series data was set to [] it will have already been removed from _seriesRowBySeries\r\n            // meaning the forEach above won't add the series to the data update response\r\n            // so we handle that case here\r\n            if (!this._private__seriesRowsBySeries.has(updatedSeries)) {\r\n                dataUpdateResponse._internal_series.set(updatedSeries, { _internal_data: [], _internal_info: info });\r\n            }\r\n            dataUpdateResponse._internal_timeScale._internal_points = this._private__sortedTimePoints;\r\n            dataUpdateResponse._internal_timeScale._internal_firstChangedPointIndex = firstChangedPointIndex;\r\n        }\r\n        else {\r\n            const seriesData = this._private__seriesRowsBySeries.get(updatedSeries);\r\n            // if no seriesData found that means that we just removed the series\r\n            dataUpdateResponse._internal_series.set(updatedSeries, { _internal_data: seriesData || [], _internal_info: info });\r\n        }\r\n        return dataUpdateResponse;\r\n    }\r\n}\r\nfunction assignIndexToPointData(pointData, index) {\r\n    // first, nevertheless update index of point data (\"make it valid\")\r\n    pointData._internal_index = index;\r\n    // and then we need to sync indexes for all series\r\n    pointData._internal_mapping.forEach((seriesRow) => {\r\n        seriesRow._internal_index = index;\r\n    });\r\n}\r\n\r\nfunction lowerBoundItemsCompare(item, time) {\r\n    return item._internal_time < time;\r\n}\r\nfunction upperBoundItemsCompare(item, time) {\r\n    return time < item._internal_time;\r\n}\r\nfunction visibleTimedValues(items, range, extendedRange) {\r\n    const firstBar = range._internal_left();\r\n    const lastBar = range._internal_right();\r\n    const from = lowerBound(items, firstBar, lowerBoundItemsCompare);\r\n    const to = upperBound(items, lastBar, upperBoundItemsCompare);\r\n    if (!extendedRange) {\r\n        return { from, to };\r\n    }\r\n    let extendedFrom = from;\r\n    let extendedTo = to;\r\n    if (from > 0 && from < items.length && items[from]._internal_time >= firstBar) {\r\n        extendedFrom = from - 1;\r\n    }\r\n    if (to > 0 && to < items.length && items[to - 1]._internal_time <= lastBar) {\r\n        extendedTo = to + 1;\r\n    }\r\n    return { from: extendedFrom, to: extendedTo };\r\n}\r\n\r\nclass SeriesPaneViewBase {\r\n    constructor(series, model, extendedVisibleRange) {\r\n        this._internal__invalidated = true;\r\n        this._internal__dataInvalidated = true;\r\n        this._internal__optionsInvalidated = true;\r\n        this._internal__items = [];\r\n        this._internal__itemsVisibleRange = null;\r\n        this._internal__series = series;\r\n        this._internal__model = model;\r\n        this._private__extendedVisibleRange = extendedVisibleRange;\r\n    }\r\n    _internal_update(updateType) {\r\n        this._internal__invalidated = true;\r\n        if (updateType === 'data') {\r\n            this._internal__dataInvalidated = true;\r\n        }\r\n        if (updateType === 'options') {\r\n            this._internal__optionsInvalidated = true;\r\n        }\r\n    }\r\n    _internal_renderer() {\r\n        if (!this._internal__series._internal_visible()) {\r\n            return null;\r\n        }\r\n        this._private__makeValid();\r\n        return this._internal__itemsVisibleRange === null ? null : this._internal__renderer;\r\n    }\r\n    _internal__updateOptions() {\r\n        this._internal__items = this._internal__items.map((item) => ({\r\n            ...item,\r\n            ...this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time),\r\n        }));\r\n    }\r\n    _internal__clearVisibleRange() {\r\n        this._internal__itemsVisibleRange = null;\r\n    }\r\n    _private__makeValid() {\r\n        if (this._internal__dataInvalidated) {\r\n            this._internal__fillRawPoints();\r\n            this._internal__dataInvalidated = false;\r\n        }\r\n        if (this._internal__optionsInvalidated) {\r\n            this._internal__updateOptions();\r\n            this._internal__optionsInvalidated = false;\r\n        }\r\n        if (this._internal__invalidated) {\r\n            this._private__makeValidImpl();\r\n            this._internal__invalidated = false;\r\n        }\r\n    }\r\n    _private__makeValidImpl() {\r\n        const priceScale = this._internal__series._internal_priceScale();\r\n        const timeScale = this._internal__model._internal_timeScale();\r\n        this._internal__clearVisibleRange();\r\n        if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {\r\n            return;\r\n        }\r\n        const visibleBars = timeScale._internal_visibleStrictRange();\r\n        if (visibleBars === null) {\r\n            return;\r\n        }\r\n        if (this._internal__series._internal_bars()._internal_size() === 0) {\r\n            return;\r\n        }\r\n        const firstValue = this._internal__series._internal_firstValue();\r\n        if (firstValue === null) {\r\n            return;\r\n        }\r\n        this._internal__itemsVisibleRange = visibleTimedValues(this._internal__items, visibleBars, this._private__extendedVisibleRange);\r\n        this._internal__convertToCoordinates(priceScale, timeScale, firstValue._internal_value);\r\n        this._internal__prepareRendererData();\r\n    }\r\n}\r\n\r\nclass CustomSeriesPaneRendererWrapper {\r\n    constructor(sourceRenderer, priceScale) {\r\n        this._private__sourceRenderer = sourceRenderer;\r\n        this._private__priceScale = priceScale;\r\n    }\r\n    _internal_draw(target, isHovered, hitTestData) {\r\n        this._private__sourceRenderer.draw(target, this._private__priceScale, isHovered, hitTestData);\r\n    }\r\n}\r\nclass SeriesCustomPaneView extends SeriesPaneViewBase {\r\n    constructor(series, model, paneView) {\r\n        super(series, model, false);\r\n        this._private__paneView = paneView;\r\n        this._internal__renderer = new CustomSeriesPaneRendererWrapper(this._private__paneView.renderer(), (price) => {\r\n            const firstValue = series._internal_firstValue();\r\n            if (firstValue === null) {\r\n                return null;\r\n            }\r\n            return series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);\r\n        });\r\n    }\r\n    _internal_priceValueBuilder(plotRow) {\r\n        return this._private__paneView.priceValueBuilder(plotRow);\r\n    }\r\n    _internal_isWhitespace(data) {\r\n        return this._private__paneView.isWhitespace(data);\r\n    }\r\n    _internal__fillRawPoints() {\r\n        const colorer = this._internal__series._internal_barColorer();\r\n        this._internal__items = this._internal__series._internal_bars()._internal_rows()\r\n            .map((row) => {\r\n            return {\r\n                _internal_time: row._internal_index,\r\n                _internal_x: NaN,\r\n                ...colorer._internal_barStyle(row._internal_index),\r\n                _internal_originalData: row._internal_data,\r\n            };\r\n        });\r\n    }\r\n    _internal__convertToCoordinates(priceScale, timeScale) {\r\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\r\n    }\r\n    _internal__prepareRendererData() {\r\n        this._private__paneView.update({\r\n            bars: this._internal__items.map(unwrapItemData),\r\n            barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\r\n            visibleRange: this._internal__itemsVisibleRange,\r\n        }, this._internal__series._internal_options());\r\n    }\r\n}\r\nfunction unwrapItemData(item) {\r\n    return {\r\n        x: item._internal_x,\r\n        time: item._internal_time,\r\n        originalData: item._internal_originalData,\r\n        barColor: item._internal_barColor,\r\n    };\r\n}\r\n\r\nconst customStyleDefaults = {\r\n    color: '#2196f3',\r\n};\r\nconst createPaneView$6 = (series, model, customPaneView) => {\r\n    const paneView = ensure(customPaneView);\r\n    return new SeriesCustomPaneView(series, model, paneView);\r\n};\r\nconst createCustomSeriesDefinition = (paneView) => {\r\n    const definition = {\r\n        type: 'Custom',\r\n        isBuiltIn: false,\r\n        defaultOptions: { ...customStyleDefaults, ...paneView.defaultOptions() },\r\n        /**\r\n         * @internal\r\n         */\r\n        _internal_createPaneView: createPaneView$6,\r\n        _internal_customPaneView: paneView,\r\n    };\r\n    return definition;\r\n};\r\n\r\nconst isSeriesDefinition = (value) => {\r\n    return value._internal_createPaneView !== undefined;\r\n};\r\n\r\nfunction singleValueData(plotRow) {\r\n    const data = {\r\n        value: plotRow._internal_value[3 /* PlotRowValueIndex.Close */],\r\n        time: plotRow._internal_originalTime,\r\n    };\r\n    if (plotRow._internal_customValues !== undefined) {\r\n        data.customValues = plotRow._internal_customValues;\r\n    }\r\n    return data;\r\n}\r\nfunction lineData(plotRow) {\r\n    const result = singleValueData(plotRow);\r\n    if (plotRow._internal_color !== undefined) {\r\n        result.color = plotRow._internal_color;\r\n    }\r\n    return result;\r\n}\r\nfunction areaData(plotRow) {\r\n    const result = singleValueData(plotRow);\r\n    if (plotRow._internal_lineColor !== undefined) {\r\n        result.lineColor = plotRow._internal_lineColor;\r\n    }\r\n    if (plotRow._internal_topColor !== undefined) {\r\n        result.topColor = plotRow._internal_topColor;\r\n    }\r\n    if (plotRow._internal_bottomColor !== undefined) {\r\n        result.bottomColor = plotRow._internal_bottomColor;\r\n    }\r\n    return result;\r\n}\r\nfunction baselineData(plotRow) {\r\n    const result = singleValueData(plotRow);\r\n    if (plotRow._internal_topLineColor !== undefined) {\r\n        result.topLineColor = plotRow._internal_topLineColor;\r\n    }\r\n    if (plotRow._internal_bottomLineColor !== undefined) {\r\n        result.bottomLineColor = plotRow._internal_bottomLineColor;\r\n    }\r\n    if (plotRow._internal_topFillColor1 !== undefined) {\r\n        result.topFillColor1 = plotRow._internal_topFillColor1;\r\n    }\r\n    if (plotRow._internal_topFillColor2 !== undefined) {\r\n        result.topFillColor2 = plotRow._internal_topFillColor2;\r\n    }\r\n    if (plotRow._internal_bottomFillColor1 !== undefined) {\r\n        result.bottomFillColor1 = plotRow._internal_bottomFillColor1;\r\n    }\r\n    if (plotRow._internal_bottomFillColor2 !== undefined) {\r\n        result.bottomFillColor2 = plotRow._internal_bottomFillColor2;\r\n    }\r\n    return result;\r\n}\r\nfunction ohlcData(plotRow) {\r\n    const data = {\r\n        open: plotRow._internal_value[0 /* PlotRowValueIndex.Open */],\r\n        high: plotRow._internal_value[1 /* PlotRowValueIndex.High */],\r\n        low: plotRow._internal_value[2 /* PlotRowValueIndex.Low */],\r\n        close: plotRow._internal_value[3 /* PlotRowValueIndex.Close */],\r\n        time: plotRow._internal_originalTime,\r\n    };\r\n    if (plotRow._internal_customValues !== undefined) {\r\n        data.customValues = plotRow._internal_customValues;\r\n    }\r\n    return data;\r\n}\r\nfunction barData(plotRow) {\r\n    const result = ohlcData(plotRow);\r\n    if (plotRow._internal_color !== undefined) {\r\n        result.color = plotRow._internal_color;\r\n    }\r\n    return result;\r\n}\r\nfunction candlestickData(plotRow) {\r\n    const result = ohlcData(plotRow);\r\n    const { _internal_color: color, _internal_borderColor: borderColor, _internal_wickColor: wickColor } = plotRow;\r\n    if (color !== undefined) {\r\n        result.color = color;\r\n    }\r\n    if (borderColor !== undefined) {\r\n        result.borderColor = borderColor;\r\n    }\r\n    if (wickColor !== undefined) {\r\n        result.wickColor = wickColor;\r\n    }\r\n    return result;\r\n}\r\nfunction getSeriesDataCreator(seriesType) {\r\n    const seriesPlotRowToDataMap = {\r\n        Area: (areaData),\r\n        Line: (lineData),\r\n        Baseline: (baselineData),\r\n        Histogram: (lineData),\r\n        Bar: (barData),\r\n        Candlestick: (candlestickData),\r\n        Custom: (customData),\r\n    };\r\n    return seriesPlotRowToDataMap[seriesType];\r\n}\r\nfunction customData(plotRow) {\r\n    const time = plotRow._internal_originalTime;\r\n    return {\r\n        ...plotRow._internal_data,\r\n        time,\r\n    };\r\n}\r\n\r\nconst crosshairOptionsDefaults = {\r\n    vertLine: {\r\n        color: '#9598A1',\r\n        width: 1,\r\n        style: 3 /* LineStyle.LargeDashed */,\r\n        visible: true,\r\n        labelVisible: true,\r\n        labelBackgroundColor: '#131722',\r\n    },\r\n    horzLine: {\r\n        color: '#9598A1',\r\n        width: 1,\r\n        style: 3 /* LineStyle.LargeDashed */,\r\n        visible: true,\r\n        labelVisible: true,\r\n        labelBackgroundColor: '#131722',\r\n    },\r\n    mode: 1 /* CrosshairMode.Magnet */,\r\n};\r\n\r\nconst gridOptionsDefaults = {\r\n    vertLines: {\r\n        color: '#D6DCDE',\r\n        style: 0 /* LineStyle.Solid */,\r\n        visible: true,\r\n    },\r\n    horzLines: {\r\n        color: '#D6DCDE',\r\n        style: 0 /* LineStyle.Solid */,\r\n        visible: true,\r\n    },\r\n};\r\n\r\nconst layoutOptionsDefaults = {\r\n    background: {\r\n        type: \"solid\" /* ColorType.Solid */,\r\n        color: '#FFFFFF',\r\n    },\r\n    textColor: '#191919',\r\n    fontSize: 12,\r\n    fontFamily: defaultFontFamily,\r\n    panes: {\r\n        enableResize: true,\r\n        separatorColor: '#E0E3EB',\r\n        separatorHoverColor: 'rgba(178, 181, 189, 0.2)',\r\n    },\r\n    attributionLogo: true,\r\n    colorSpace: 'srgb',\r\n    colorParsers: [],\r\n};\r\n\r\nconst priceScaleOptionsDefaults = {\r\n    autoScale: true,\r\n    mode: 0 /* PriceScaleMode.Normal */,\r\n    invertScale: false,\r\n    alignLabels: true,\r\n    borderVisible: true,\r\n    borderColor: '#2B2B43',\r\n    entireTextOnly: false,\r\n    visible: false,\r\n    ticksVisible: false,\r\n    scaleMargins: {\r\n        bottom: 0.1,\r\n        top: 0.2,\r\n    },\r\n    minimumWidth: 0,\r\n    ensureEdgeTickMarksVisible: false,\r\n};\r\n\r\nconst timeScaleOptionsDefaults = {\r\n    rightOffset: 0,\r\n    barSpacing: 6,\r\n    minBarSpacing: 0.5,\r\n    maxBarSpacing: 0,\r\n    fixLeftEdge: false,\r\n    fixRightEdge: false,\r\n    lockVisibleTimeRangeOnResize: false,\r\n    rightBarStaysOnScroll: false,\r\n    borderVisible: true,\r\n    borderColor: '#2B2B43',\r\n    visible: true,\r\n    timeVisible: false,\r\n    secondsVisible: true,\r\n    shiftVisibleRangeOnNewBar: true,\r\n    allowShiftVisibleRangeOnWhitespaceReplacement: false,\r\n    ticksVisible: false,\r\n    uniformDistribution: false,\r\n    minimumHeight: 0,\r\n    allowBoldLabels: true,\r\n    ignoreWhitespaceIndices: false,\r\n};\r\n\r\nfunction chartOptionsDefaults() {\r\n    return {\r\n        addDefaultPane: true,\r\n        width: 0,\r\n        height: 0,\r\n        autoSize: false,\r\n        layout: layoutOptionsDefaults,\r\n        crosshair: crosshairOptionsDefaults,\r\n        grid: gridOptionsDefaults,\r\n        overlayPriceScales: {\r\n            ...priceScaleOptionsDefaults,\r\n        },\r\n        leftPriceScale: {\r\n            ...priceScaleOptionsDefaults,\r\n            visible: false,\r\n        },\r\n        rightPriceScale: {\r\n            ...priceScaleOptionsDefaults,\r\n            visible: true,\r\n        },\r\n        timeScale: timeScaleOptionsDefaults,\r\n        localization: {\r\n            locale: isRunningOnClientSide ? navigator.language : '',\r\n            dateFormat: 'dd MMM \\'yy',\r\n        },\r\n        handleScroll: {\r\n            mouseWheel: true,\r\n            pressedMouseMove: true,\r\n            horzTouchDrag: true,\r\n            vertTouchDrag: true,\r\n        },\r\n        handleScale: {\r\n            axisPressedMouseMove: {\r\n                time: true,\r\n                price: true,\r\n            },\r\n            axisDoubleClickReset: {\r\n                time: true,\r\n                price: true,\r\n            },\r\n            mouseWheel: true,\r\n            pinch: true,\r\n        },\r\n        kineticScroll: {\r\n            mouse: false,\r\n            touch: true,\r\n        },\r\n        trackingMode: {\r\n            exitMode: 1 /* TrackingModeExitMode.OnNextTap */,\r\n        },\r\n    };\r\n}\r\n\r\nclass PriceScaleApi {\r\n    constructor(chartWidget, priceScaleId, paneIndex) {\r\n        this._private__chartWidget = chartWidget;\r\n        this._private__priceScaleId = priceScaleId;\r\n        this._private__paneIndex = paneIndex ?? 0;\r\n    }\r\n    applyOptions(options) {\r\n        this._private__chartWidget._internal_model()._internal_applyPriceScaleOptions(this._private__priceScaleId, options, this._private__paneIndex);\r\n    }\r\n    options() {\r\n        return this._private__priceScale()._internal_options();\r\n    }\r\n    width() {\r\n        if (!isDefaultPriceScale(this._private__priceScaleId)) {\r\n            return 0;\r\n        }\r\n        return this._private__chartWidget._internal_getPriceAxisWidth(this._private__priceScaleId);\r\n    }\r\n    setVisibleRange(range) {\r\n        this.setAutoScale(false);\r\n        this._private__priceScale()._internal_setCustomPriceRange(new PriceRangeImpl(range.from, range.to));\r\n    }\r\n    getVisibleRange() {\r\n        const range = this._private__priceScale()._internal_priceRange();\r\n        return range === null ? null : {\r\n            from: range._internal_minValue(),\r\n            to: range._internal_maxValue(),\r\n        };\r\n    }\r\n    setAutoScale(on) {\r\n        this.applyOptions({ autoScale: on });\r\n    }\r\n    _private__priceScale() {\r\n        return ensureNotNull(this._private__chartWidget._internal_model()._internal_findPriceScale(this._private__priceScaleId, this._private__paneIndex))._internal_priceScale;\r\n    }\r\n}\r\n\r\nclass PaneApi {\r\n    constructor(chartWidget, seriesApiGetter, pane, chartApi) {\r\n        this._private__chartWidget = chartWidget;\r\n        this._private__pane = pane;\r\n        this._private__seriesApiGetter = seriesApiGetter;\r\n        this._internal__chartApi = chartApi;\r\n    }\r\n    getHeight() {\r\n        return this._private__pane._internal_height();\r\n    }\r\n    setHeight(height) {\r\n        const chartModel = this._private__chartWidget._internal_model();\r\n        const paneIndex = chartModel._internal_getPaneIndex(this._private__pane);\r\n        chartModel._internal_changePanesHeight(paneIndex, height);\r\n    }\r\n    getStretchFactor() {\r\n        return this._private__pane._internal_stretchFactor();\r\n    }\r\n    setStretchFactor(stretchFactor) {\r\n        this._private__pane._internal_setStretchFactor(stretchFactor);\r\n        this._private__chartWidget._internal_model()._internal_fullUpdate();\r\n    }\r\n    paneIndex() {\r\n        return this._private__chartWidget._internal_model()._internal_getPaneIndex(this._private__pane);\r\n    }\r\n    moveTo(paneIndex) {\r\n        const currentIndex = this.paneIndex();\r\n        if (currentIndex === paneIndex) {\r\n            return;\r\n        }\r\n        assert(paneIndex >= 0 && paneIndex < this._private__chartWidget._internal_paneWidgets().length, 'Invalid pane index');\r\n        this._private__chartWidget._internal_model()._internal_movePane(currentIndex, paneIndex);\r\n    }\r\n    getSeries() {\r\n        return this._private__pane._internal_series().map((source) => this._private__seriesApiGetter(source)) ?? [];\r\n    }\r\n    getHTMLElement() {\r\n        const widgets = this._private__chartWidget._internal_paneWidgets();\r\n        if (!widgets || widgets.length === 0 || !widgets[this.paneIndex()]) {\r\n            return null;\r\n        }\r\n        return widgets[this.paneIndex()]._internal_getElement();\r\n    }\r\n    attachPrimitive(primitive) {\r\n        this._private__pane._internal_attachPrimitive(primitive);\r\n        if (primitive.attached) {\r\n            primitive.attached({\r\n                chart: this._internal__chartApi,\r\n                requestUpdate: () => this._private__pane._internal_model()._internal_fullUpdate(),\r\n            });\r\n        }\r\n    }\r\n    detachPrimitive(primitive) {\r\n        this._private__pane._internal_detachPrimitive(primitive);\r\n    }\r\n    priceScale(priceScaleId) {\r\n        const priceScale = this._private__pane._internal_priceScaleById(priceScaleId);\r\n        if (priceScale === null) {\r\n            throw new Error(`Cannot find price scale with id: ${priceScaleId}`);\r\n        }\r\n        return new PriceScaleApi(this._private__chartWidget, priceScaleId, this.paneIndex());\r\n    }\r\n    setPreserveEmptyPane(preserve) {\r\n        this._private__pane._internal_setPreserveEmptyPane(preserve);\r\n    }\r\n    preserveEmptyPane() {\r\n        return this._private__pane._internal_preserveEmptyPane();\r\n    }\r\n    addCustomSeries(customPaneView, options = {}, paneIndex = 0) {\r\n        return this._internal__chartApi.addCustomSeries(customPaneView, options, paneIndex);\r\n    }\r\n    addSeries(definition, options = {}) {\r\n        return this._internal__chartApi.addSeries(definition, options, this.paneIndex());\r\n    }\r\n}\r\n\r\n/// <reference types=\"_build-time-constants\" />\r\nfunction checkPriceLineOptions(options) {\r\n    assert(typeof options.price === 'number', `the type of 'price' price line's property must be a number, got '${typeof options.price}'`);\r\n}\r\nfunction checkItemsAreOrdered(data, bh, allowDuplicates = false) {\r\n    if (data.length === 0) {\r\n        return;\r\n    }\r\n    let prevTime = bh.key(data[0].time);\r\n    for (let i = 1; i < data.length; ++i) {\r\n        const currentTime = bh.key(data[i].time);\r\n        const checkResult = allowDuplicates ? prevTime <= currentTime : prevTime < currentTime;\r\n        assert(checkResult, `data must be asc ordered by time, index=${i}, time=${currentTime}, prev time=${prevTime}`);\r\n        prevTime = currentTime;\r\n    }\r\n}\r\nfunction checkSeriesValuesType(type, data) {\r\n    data.forEach(getChecker(type));\r\n}\r\nfunction getChecker(type) {\r\n    switch (type) {\r\n        case 'Bar':\r\n        case 'Candlestick':\r\n            return checkBarItem.bind(null, type);\r\n        case 'Area':\r\n        case 'Baseline':\r\n        case 'Line':\r\n        case 'Histogram':\r\n            return checkLineItem.bind(null, type);\r\n        case 'Custom':\r\n            return checkCustomItem.bind(null);\r\n    }\r\n}\r\nfunction checkBarItem(type, barItem) {\r\n    if (!isFulfilledData(barItem)) {\r\n        return;\r\n    }\r\n    ['open', 'high', 'low', 'close'].forEach((key) => {\r\n        assert(typeof barItem[key] === 'number', `${type} series item data value of ${key} must be a number, got=${typeof barItem[key]}, value=${barItem[key]}`);\r\n        assert(isSafeValue(barItem[key]), `${type} series item data value of ${key} must be between ${MIN_SAFE_VALUE.toPrecision(16)} and ${MAX_SAFE_VALUE.toPrecision(16)}, got=${typeof barItem[key]}, value=${barItem[key]}`);\r\n    });\r\n}\r\nfunction checkLineItem(type, lineItem) {\r\n    if (!isFulfilledData(lineItem)) {\r\n        return;\r\n    }\r\n    assert(typeof lineItem.value === 'number', `${type} series item data value must be a number, got=${typeof lineItem.value}, value=${lineItem.value}`);\r\n    assert(isSafeValue(lineItem.value), `${type} series item data value must be between ${MIN_SAFE_VALUE.toPrecision(16)} and ${MAX_SAFE_VALUE.toPrecision(16)}, got=${typeof lineItem.value}, value=${lineItem.value}`);\r\n}\r\nfunction checkCustomItem(\r\n// type: 'Custom',\r\n// customItem: SeriesDataItemTypeMap[typeof type]\r\n) {\r\n    // Nothing to check yet...\r\n    return;\r\n}\r\nconst MIN_SAFE_VALUE = Number.MIN_SAFE_INTEGER / 100;\r\nconst MAX_SAFE_VALUE = Number.MAX_SAFE_INTEGER / 100;\r\nfunction isSafeValue(value) {\r\n    return value >= MIN_SAFE_VALUE && value <= MAX_SAFE_VALUE;\r\n}\r\n\r\nconst priceLineOptionsDefaults = {\r\n    color: '#FF0000',\r\n    price: 0,\r\n    lineStyle: 2 /* LineStyle.Dashed */,\r\n    lineWidth: 1,\r\n    lineVisible: true,\r\n    axisLabelVisible: true,\r\n    title: '',\r\n    axisLabelColor: '',\r\n    axisLabelTextColor: '',\r\n};\r\n\r\nclass PriceLine {\r\n    constructor(priceLine) {\r\n        this._private__priceLine = priceLine;\r\n    }\r\n    applyOptions(options) {\r\n        this._private__priceLine._internal_applyOptions(options);\r\n    }\r\n    options() {\r\n        return this._private__priceLine._internal_options();\r\n    }\r\n    _internal_priceLine() {\r\n        return this._private__priceLine;\r\n    }\r\n}\r\n\r\nclass SeriesApi {\r\n    constructor(series, dataUpdatesConsumer, priceScaleApiProvider, chartApi, horzScaleBehavior, paneApiGetter) {\r\n        this._private__dataChangedDelegate = new Delegate();\r\n        this._internal__series = series;\r\n        this._internal__dataUpdatesConsumer = dataUpdatesConsumer;\r\n        this._private__priceScaleApiProvider = priceScaleApiProvider;\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n        this._internal__chartApi = chartApi;\r\n        this._private__paneApiGetter = paneApiGetter;\r\n    }\r\n    _internal_destroy() {\r\n        this._private__dataChangedDelegate._internal_destroy();\r\n    }\r\n    priceFormatter() {\r\n        return this._internal__series._internal_formatter();\r\n    }\r\n    priceToCoordinate(price) {\r\n        const firstValue = this._internal__series._internal_firstValue();\r\n        if (firstValue === null) {\r\n            return null;\r\n        }\r\n        return this._internal__series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);\r\n    }\r\n    coordinateToPrice(coordinate) {\r\n        const firstValue = this._internal__series._internal_firstValue();\r\n        if (firstValue === null) {\r\n            return null;\r\n        }\r\n        return this._internal__series._internal_priceScale()._internal_coordinateToPrice(coordinate, firstValue._internal_value);\r\n    }\r\n    barsInLogicalRange(range) {\r\n        if (range === null) {\r\n            return null;\r\n        }\r\n        // we use TimeScaleVisibleRange here to convert LogicalRange to strict range properly\r\n        const correctedRange = new TimeScaleVisibleRange(new RangeImpl(range.from, range.to))._internal_strictRange();\r\n        const bars = this._internal__series._internal_bars();\r\n        if (bars._internal_isEmpty()) {\r\n            return null;\r\n        }\r\n        const dataFirstBarInRange = bars._internal_search(correctedRange._internal_left(), 1 /* MismatchDirection.NearestRight */);\r\n        const dataLastBarInRange = bars._internal_search(correctedRange._internal_right(), -1 /* MismatchDirection.NearestLeft */);\r\n        const dataFirstIndex = ensureNotNull(bars._internal_firstIndex());\r\n        const dataLastIndex = ensureNotNull(bars._internal_lastIndex());\r\n        // this means that we request data in the data gap\r\n        // e.g. let's say we have series with data [0..10, 30..60]\r\n        // and we request bars info in range [15, 25]\r\n        // thus, dataFirstBarInRange will be with index 30 and dataLastBarInRange with 10\r\n        if (dataFirstBarInRange !== null && dataLastBarInRange !== null && dataFirstBarInRange._internal_index > dataLastBarInRange._internal_index) {\r\n            return {\r\n                barsBefore: range.from - dataFirstIndex,\r\n                barsAfter: dataLastIndex - range.to,\r\n            };\r\n        }\r\n        const barsBefore = (dataFirstBarInRange === null || dataFirstBarInRange._internal_index === dataFirstIndex)\r\n            ? range.from - dataFirstIndex\r\n            : dataFirstBarInRange._internal_index - dataFirstIndex;\r\n        const barsAfter = (dataLastBarInRange === null || dataLastBarInRange._internal_index === dataLastIndex)\r\n            ? dataLastIndex - range.to\r\n            : dataLastIndex - dataLastBarInRange._internal_index;\r\n        const result = { barsBefore, barsAfter };\r\n        // actually they can't exist separately\r\n        if (dataFirstBarInRange !== null && dataLastBarInRange !== null) {\r\n            result.from = dataFirstBarInRange._internal_originalTime;\r\n            result.to = dataLastBarInRange._internal_originalTime;\r\n        }\r\n        return result;\r\n    }\r\n    setData(data) {\r\n        checkItemsAreOrdered(data, this._private__horzScaleBehavior);\r\n        checkSeriesValuesType(this._internal__series._internal_seriesType(), data);\r\n        this._internal__dataUpdatesConsumer._internal_applyNewData(this._internal__series, data);\r\n        this._private__onDataChanged('full');\r\n    }\r\n    update(bar, historicalUpdate = false) {\r\n        checkSeriesValuesType(this._internal__series._internal_seriesType(), [bar]);\r\n        this._internal__dataUpdatesConsumer._internal_updateData(this._internal__series, bar, historicalUpdate);\r\n        this._private__onDataChanged('update');\r\n    }\r\n    dataByIndex(logicalIndex, mismatchDirection) {\r\n        const data = this._internal__series._internal_bars()._internal_search(logicalIndex, mismatchDirection);\r\n        if (data === null) {\r\n            // actually it can be a whitespace\r\n            return null;\r\n        }\r\n        const creator = getSeriesDataCreator(this.seriesType());\r\n        return creator(data);\r\n    }\r\n    data() {\r\n        const seriesCreator = getSeriesDataCreator(this.seriesType());\r\n        const rows = this._internal__series._internal_bars()._internal_rows();\r\n        return rows.map((row) => seriesCreator(row));\r\n    }\r\n    subscribeDataChanged(handler) {\r\n        this._private__dataChangedDelegate._internal_subscribe(handler);\r\n    }\r\n    unsubscribeDataChanged(handler) {\r\n        this._private__dataChangedDelegate._internal_unsubscribe(handler);\r\n    }\r\n    applyOptions(options) {\r\n        this._internal__series._internal_applyOptions(options);\r\n    }\r\n    options() {\r\n        return clone(this._internal__series._internal_options());\r\n    }\r\n    priceScale() {\r\n        return this._private__priceScaleApiProvider.priceScale(this._internal__series._internal_priceScale()._internal_id(), this.getPane().paneIndex());\r\n    }\r\n    createPriceLine(options) {\r\n        checkPriceLineOptions(options);\r\n        const strictOptions = merge(clone(priceLineOptionsDefaults), options);\r\n        const priceLine = this._internal__series._internal_createPriceLine(strictOptions);\r\n        return new PriceLine(priceLine);\r\n    }\r\n    removePriceLine(line) {\r\n        this._internal__series._internal_removePriceLine(line._internal_priceLine());\r\n    }\r\n    priceLines() {\r\n        return this._internal__series._internal_priceLines().map((priceLine) => new PriceLine(priceLine));\r\n    }\r\n    seriesType() {\r\n        return this._internal__series._internal_seriesType();\r\n    }\r\n    attachPrimitive(primitive) {\r\n        // at this point we cast the generic to unknown because we\r\n        // don't want the model to know the types of the API (◑_◑)\r\n        this._internal__series._internal_attachPrimitive(primitive);\r\n        if (primitive.attached) {\r\n            primitive.attached({\r\n                chart: this._internal__chartApi,\r\n                series: this,\r\n                requestUpdate: () => this._internal__series._internal_model()._internal_fullUpdate(),\r\n                horzScaleBehavior: this._private__horzScaleBehavior,\r\n            });\r\n        }\r\n    }\r\n    detachPrimitive(primitive) {\r\n        this._internal__series._internal_detachPrimitive(primitive);\r\n        if (primitive.detached) {\r\n            primitive.detached();\r\n        }\r\n        this._internal__series._internal_model()._internal_fullUpdate();\r\n    }\r\n    getPane() {\r\n        const series = this._internal__series;\r\n        const pane = ensureNotNull(this._internal__series._internal_model()._internal_paneForSource(series));\r\n        return this._private__paneApiGetter(pane);\r\n    }\r\n    moveToPane(paneIndex) {\r\n        this._internal__series._internal_model()._internal_moveSeriesToPane(this._internal__series, paneIndex);\r\n    }\r\n    seriesOrder() {\r\n        const pane = this._internal__series._internal_model()._internal_paneForSource(this._internal__series);\r\n        if (pane === null) {\r\n            return -1;\r\n        }\r\n        return pane._internal_series().indexOf(this._internal__series);\r\n    }\r\n    setSeriesOrder(order) {\r\n        const pane = this._internal__series._internal_model()._internal_paneForSource(this._internal__series);\r\n        if (pane === null) {\r\n            return;\r\n        }\r\n        pane._internal_setSeriesOrder(this._internal__series, order);\r\n    }\r\n    _private__onDataChanged(scope) {\r\n        if (this._private__dataChangedDelegate._internal_hasListeners()) {\r\n            this._private__dataChangedDelegate._internal_fire(scope);\r\n        }\r\n    }\r\n}\r\n\r\nclass TimeScaleApi {\r\n    constructor(model, timeAxisWidget, horzScaleBehavior) {\r\n        this._private__timeRangeChanged = new Delegate();\r\n        this._private__logicalRangeChanged = new Delegate();\r\n        this._private__sizeChanged = new Delegate();\r\n        this._private__model = model;\r\n        this._private__timeScale = model._internal_timeScale();\r\n        this._private__timeAxisWidget = timeAxisWidget;\r\n        this._private__timeScale._internal_visibleBarsChanged()._internal_subscribe(this._private__onVisibleBarsChanged.bind(this));\r\n        this._private__timeScale._internal_logicalRangeChanged()._internal_subscribe(this._private__onVisibleLogicalRangeChanged.bind(this));\r\n        this._private__timeAxisWidget._internal_sizeChanged()._internal_subscribe(this._private__onSizeChanged.bind(this));\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n    }\r\n    _internal_destroy() {\r\n        this._private__timeScale._internal_visibleBarsChanged()._internal_unsubscribeAll(this);\r\n        this._private__timeScale._internal_logicalRangeChanged()._internal_unsubscribeAll(this);\r\n        this._private__timeAxisWidget._internal_sizeChanged()._internal_unsubscribeAll(this);\r\n        this._private__timeRangeChanged._internal_destroy();\r\n        this._private__logicalRangeChanged._internal_destroy();\r\n        this._private__sizeChanged._internal_destroy();\r\n    }\r\n    scrollPosition() {\r\n        return this._private__timeScale._internal_rightOffset();\r\n    }\r\n    scrollToPosition(position, animated) {\r\n        if (!animated) {\r\n            this._private__model._internal_setRightOffset(position);\r\n            return;\r\n        }\r\n        this._private__timeScale._internal_scrollToOffsetAnimated(position, 1000 /* Constants.AnimationDurationMs */);\r\n    }\r\n    scrollToRealTime() {\r\n        this._private__timeScale._internal_scrollToRealTime();\r\n    }\r\n    getVisibleRange() {\r\n        const timeRange = this._private__timeScale._internal_visibleTimeRange();\r\n        if (timeRange === null) {\r\n            return null;\r\n        }\r\n        return {\r\n            from: timeRange.from.originalTime,\r\n            to: timeRange.to.originalTime,\r\n        };\r\n    }\r\n    setVisibleRange(range) {\r\n        const convertedRange = {\r\n            from: this._private__horzScaleBehavior.convertHorzItemToInternal(range.from),\r\n            to: this._private__horzScaleBehavior.convertHorzItemToInternal(range.to),\r\n        };\r\n        const logicalRange = this._private__timeScale._internal_logicalRangeForTimeRange(convertedRange);\r\n        this._private__model._internal_setTargetLogicalRange(logicalRange);\r\n    }\r\n    getVisibleLogicalRange() {\r\n        const logicalRange = this._private__timeScale._internal_visibleLogicalRange();\r\n        if (logicalRange === null) {\r\n            return null;\r\n        }\r\n        return {\r\n            from: logicalRange._internal_left(),\r\n            to: logicalRange._internal_right(),\r\n        };\r\n    }\r\n    setVisibleLogicalRange(range) {\r\n        assert(range.from <= range.to, 'The from index cannot be after the to index.');\r\n        this._private__model._internal_setTargetLogicalRange(range);\r\n    }\r\n    resetTimeScale() {\r\n        this._private__model._internal_resetTimeScale();\r\n    }\r\n    fitContent() {\r\n        this._private__model._internal_fitContent();\r\n    }\r\n    logicalToCoordinate(logical) {\r\n        const timeScale = this._private__model._internal_timeScale();\r\n        if (timeScale._internal_isEmpty()) {\r\n            return null;\r\n        }\r\n        else {\r\n            return timeScale._internal_indexToCoordinate(logical);\r\n        }\r\n    }\r\n    coordinateToLogical(x) {\r\n        if (this._private__timeScale._internal_isEmpty()) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this._private__timeScale._internal_coordinateToIndex(x);\r\n        }\r\n    }\r\n    timeToIndex(time, findNearest) {\r\n        const timePoint = this._private__horzScaleBehavior.convertHorzItemToInternal(time);\r\n        return this._private__timeScale._internal_timeToIndex(timePoint, findNearest);\r\n    }\r\n    timeToCoordinate(time) {\r\n        const timePointIndex = this.timeToIndex(time, false);\r\n        if (timePointIndex === null) {\r\n            return null;\r\n        }\r\n        return this._private__timeScale._internal_indexToCoordinate(timePointIndex);\r\n    }\r\n    coordinateToTime(x) {\r\n        const timeScale = this._private__model._internal_timeScale();\r\n        const timePointIndex = timeScale._internal_coordinateToIndex(x);\r\n        const timePoint = timeScale._internal_indexToTimeScalePoint(timePointIndex);\r\n        if (timePoint === null) {\r\n            return null;\r\n        }\r\n        return timePoint.originalTime;\r\n    }\r\n    width() {\r\n        return this._private__timeAxisWidget._internal_getSize().width;\r\n    }\r\n    height() {\r\n        return this._private__timeAxisWidget._internal_getSize().height;\r\n    }\r\n    subscribeVisibleTimeRangeChange(handler) {\r\n        this._private__timeRangeChanged._internal_subscribe(handler);\r\n    }\r\n    unsubscribeVisibleTimeRangeChange(handler) {\r\n        this._private__timeRangeChanged._internal_unsubscribe(handler);\r\n    }\r\n    subscribeVisibleLogicalRangeChange(handler) {\r\n        this._private__logicalRangeChanged._internal_subscribe(handler);\r\n    }\r\n    unsubscribeVisibleLogicalRangeChange(handler) {\r\n        this._private__logicalRangeChanged._internal_unsubscribe(handler);\r\n    }\r\n    subscribeSizeChange(handler) {\r\n        this._private__sizeChanged._internal_subscribe(handler);\r\n    }\r\n    unsubscribeSizeChange(handler) {\r\n        this._private__sizeChanged._internal_unsubscribe(handler);\r\n    }\r\n    applyOptions(options) {\r\n        this._private__timeScale._internal_applyOptions(options);\r\n    }\r\n    options() {\r\n        return {\r\n            ...clone(this._private__timeScale._internal_options()),\r\n            barSpacing: this._private__timeScale._internal_barSpacing(),\r\n        };\r\n    }\r\n    _private__onVisibleBarsChanged() {\r\n        if (this._private__timeRangeChanged._internal_hasListeners()) {\r\n            this._private__timeRangeChanged._internal_fire(this.getVisibleRange());\r\n        }\r\n    }\r\n    _private__onVisibleLogicalRangeChanged() {\r\n        if (this._private__logicalRangeChanged._internal_hasListeners()) {\r\n            this._private__logicalRangeChanged._internal_fire(this.getVisibleLogicalRange());\r\n        }\r\n    }\r\n    _private__onSizeChanged(size) {\r\n        this._private__sizeChanged._internal_fire(size.width, size.height);\r\n    }\r\n}\r\n\r\n/// <reference types=\"_build-time-constants\" />\r\nfunction patchPriceFormat(priceFormat) {\r\n    if (priceFormat === undefined || priceFormat.type === 'custom') {\r\n        return;\r\n    }\r\n    const priceFormatBuiltIn = priceFormat;\r\n    if (priceFormatBuiltIn.minMove !== undefined && priceFormatBuiltIn.precision === undefined) {\r\n        priceFormatBuiltIn.precision = precisionByMinMove(priceFormatBuiltIn.minMove);\r\n    }\r\n}\r\nfunction migrateHandleScaleScrollOptions(options) {\r\n    if (isBoolean(options['handleScale'])) {\r\n        const handleScale = options['handleScale'];\r\n        options['handleScale'] = {\r\n            axisDoubleClickReset: {\r\n                time: handleScale,\r\n                price: handleScale,\r\n            },\r\n            axisPressedMouseMove: {\r\n                time: handleScale,\r\n                price: handleScale,\r\n            },\r\n            mouseWheel: handleScale,\r\n            pinch: handleScale,\r\n        };\r\n    }\r\n    else if (options['handleScale'] !== undefined) {\r\n        const { axisPressedMouseMove, axisDoubleClickReset } = options['handleScale'];\r\n        if (isBoolean(axisPressedMouseMove)) {\r\n            options['handleScale'].axisPressedMouseMove = {\r\n                time: axisPressedMouseMove,\r\n                price: axisPressedMouseMove,\r\n            };\r\n        }\r\n        if (isBoolean(axisDoubleClickReset)) {\r\n            options['handleScale'].axisDoubleClickReset = {\r\n                time: axisDoubleClickReset,\r\n                price: axisDoubleClickReset,\r\n            };\r\n        }\r\n    }\r\n    const handleScroll = options['handleScroll'];\r\n    if (isBoolean(handleScroll)) {\r\n        options['handleScroll'] = {\r\n            horzTouchDrag: handleScroll,\r\n            vertTouchDrag: handleScroll,\r\n            mouseWheel: handleScroll,\r\n            pressedMouseMove: handleScroll,\r\n        };\r\n    }\r\n}\r\nfunction toInternalOptions(options) {\r\n    migrateHandleScaleScrollOptions(options);\r\n    return options;\r\n}\r\nclass ChartApi {\r\n    constructor(container, horzScaleBehavior, options) {\r\n        this._private__seriesMap = new Map();\r\n        this._private__seriesMapReversed = new Map();\r\n        this._private__clickedDelegate = new Delegate();\r\n        this._private__dblClickedDelegate = new Delegate();\r\n        this._private__crosshairMovedDelegate = new Delegate();\r\n        this._private__panes = new WeakMap();\r\n        this._private__dataLayer = new DataLayer(horzScaleBehavior);\r\n        const internalOptions = (options === undefined) ?\r\n            clone(chartOptionsDefaults()) :\r\n            merge(clone(chartOptionsDefaults()), toInternalOptions(options));\r\n        this._internal__horzScaleBehavior = horzScaleBehavior;\r\n        this._private__chartWidget = new ChartWidget(container, internalOptions, horzScaleBehavior);\r\n        this._private__chartWidget._internal_clicked()._internal_subscribe((paramSupplier) => {\r\n            if (this._private__clickedDelegate._internal_hasListeners()) {\r\n                this._private__clickedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\r\n            }\r\n        }, this);\r\n        this._private__chartWidget._internal_dblClicked()._internal_subscribe((paramSupplier) => {\r\n            if (this._private__dblClickedDelegate._internal_hasListeners()) {\r\n                this._private__dblClickedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\r\n            }\r\n        }, this);\r\n        this._private__chartWidget._internal_crosshairMoved()._internal_subscribe((paramSupplier) => {\r\n            if (this._private__crosshairMovedDelegate._internal_hasListeners()) {\r\n                this._private__crosshairMovedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\r\n            }\r\n        }, this);\r\n        const model = this._private__chartWidget._internal_model();\r\n        this._private__timeScaleApi = new TimeScaleApi(model, this._private__chartWidget._internal_timeAxisWidget(), this._internal__horzScaleBehavior);\r\n    }\r\n    remove() {\r\n        this._private__chartWidget._internal_clicked()._internal_unsubscribeAll(this);\r\n        this._private__chartWidget._internal_dblClicked()._internal_unsubscribeAll(this);\r\n        this._private__chartWidget._internal_crosshairMoved()._internal_unsubscribeAll(this);\r\n        this._private__timeScaleApi._internal_destroy();\r\n        this._private__chartWidget._internal_destroy();\r\n        this._private__seriesMap.clear();\r\n        this._private__seriesMapReversed.clear();\r\n        this._private__clickedDelegate._internal_destroy();\r\n        this._private__dblClickedDelegate._internal_destroy();\r\n        this._private__crosshairMovedDelegate._internal_destroy();\r\n        this._private__dataLayer._internal_destroy();\r\n    }\r\n    resize(width, height, forceRepaint) {\r\n        if (this.autoSizeActive()) {\r\n            // We return early here instead of checking this within the actual _chartWidget.resize method\r\n            // because this should only apply to external resize requests.\r\n            warn(`Height and width values ignored because 'autoSize' option is enabled.`);\r\n            return;\r\n        }\r\n        this._private__chartWidget._internal_resize(width, height, forceRepaint);\r\n    }\r\n    addCustomSeries(customPaneView, options = {}, paneIndex = 0) {\r\n        const paneView = ensure(customPaneView);\r\n        const definition = createCustomSeriesDefinition(paneView);\r\n        return this._private__addSeriesImpl(definition, options, paneIndex);\r\n    }\r\n    addSeries(definition, options = {}, paneIndex = 0) {\r\n        return this._private__addSeriesImpl(definition, options, paneIndex);\r\n    }\r\n    removeSeries(seriesApi) {\r\n        const series = ensureDefined(this._private__seriesMap.get(seriesApi));\r\n        const update = this._private__dataLayer._internal_removeSeries(series);\r\n        const model = this._private__chartWidget._internal_model();\r\n        model._internal_removeSeries(series);\r\n        this._private__sendUpdateToChart(update);\r\n        this._private__seriesMap.delete(seriesApi);\r\n        this._private__seriesMapReversed.delete(series);\r\n    }\r\n    _internal_applyNewData(series, data) {\r\n        this._private__sendUpdateToChart(this._private__dataLayer._internal_setSeriesData(series, data));\r\n    }\r\n    _internal_updateData(series, data, historicalUpdate) {\r\n        this._private__sendUpdateToChart(this._private__dataLayer._internal_updateSeriesData(series, data, historicalUpdate));\r\n    }\r\n    subscribeClick(handler) {\r\n        this._private__clickedDelegate._internal_subscribe(handler);\r\n    }\r\n    unsubscribeClick(handler) {\r\n        this._private__clickedDelegate._internal_unsubscribe(handler);\r\n    }\r\n    subscribeCrosshairMove(handler) {\r\n        this._private__crosshairMovedDelegate._internal_subscribe(handler);\r\n    }\r\n    unsubscribeCrosshairMove(handler) {\r\n        this._private__crosshairMovedDelegate._internal_unsubscribe(handler);\r\n    }\r\n    subscribeDblClick(handler) {\r\n        this._private__dblClickedDelegate._internal_subscribe(handler);\r\n    }\r\n    unsubscribeDblClick(handler) {\r\n        this._private__dblClickedDelegate._internal_unsubscribe(handler);\r\n    }\r\n    priceScale(priceScaleId, paneIndex = 0) {\r\n        return new PriceScaleApi(this._private__chartWidget, priceScaleId, paneIndex);\r\n    }\r\n    timeScale() {\r\n        return this._private__timeScaleApi;\r\n    }\r\n    applyOptions(options) {\r\n        {\r\n            const colorSpace = options.layout?.colorSpace;\r\n            if (colorSpace !== undefined && colorSpace !== this.options().layout.colorSpace) {\r\n                throw new Error(`colorSpace option should not be changed once the chart has been created.`);\r\n            }\r\n            const colorParsers = options.layout?.colorParsers;\r\n            if (colorParsers !== undefined && colorParsers !== this.options().layout.colorParsers) {\r\n                throw new Error(`colorParsers option should not be changed once the chart has been created.`);\r\n            }\r\n        }\r\n        this._private__chartWidget._internal_applyOptions(toInternalOptions(options));\r\n    }\r\n    options() {\r\n        return this._private__chartWidget._internal_options();\r\n    }\r\n    takeScreenshot() {\r\n        return this._private__chartWidget._internal_takeScreenshot();\r\n    }\r\n    addPane(preserveEmptyPane = false) {\r\n        const pane = this._private__chartWidget._internal_model()._internal_addPane();\r\n        pane._internal_setPreserveEmptyPane(preserveEmptyPane);\r\n        return this._private__getPaneApi(pane);\r\n    }\r\n    removePane(index) {\r\n        this._private__chartWidget._internal_model()._internal_removePane(index);\r\n    }\r\n    swapPanes(first, second) {\r\n        this._private__chartWidget._internal_model()._internal_swapPanes(first, second);\r\n    }\r\n    autoSizeActive() {\r\n        return this._private__chartWidget._internal_autoSizeActive();\r\n    }\r\n    chartElement() {\r\n        return this._private__chartWidget._internal_element();\r\n    }\r\n    panes() {\r\n        return this._private__chartWidget._internal_model()._internal_panes().map((pane) => this._private__getPaneApi(pane));\r\n    }\r\n    paneSize(paneIndex = 0) {\r\n        const size = this._private__chartWidget._internal_paneSize(paneIndex);\r\n        return {\r\n            height: size.height,\r\n            width: size.width,\r\n        };\r\n    }\r\n    setCrosshairPosition(price, horizontalPosition, seriesApi) {\r\n        const series = this._private__seriesMap.get(seriesApi);\r\n        if (series === undefined) {\r\n            return;\r\n        }\r\n        const pane = this._private__chartWidget._internal_model()._internal_paneForSource(series);\r\n        if (pane === null) {\r\n            return;\r\n        }\r\n        this._private__chartWidget._internal_model()._internal_setAndSaveSyntheticPosition(price, horizontalPosition, pane);\r\n    }\r\n    clearCrosshairPosition() {\r\n        this._private__chartWidget._internal_model()._internal_clearCurrentPosition(true);\r\n    }\r\n    horzBehaviour() {\r\n        return this._internal__horzScaleBehavior;\r\n    }\r\n    _private__addSeriesImpl(definition, options = {}, paneIndex = 0) {\r\n        assert(isSeriesDefinition(definition));\r\n        patchPriceFormat(options.priceFormat);\r\n        if (definition.type === 'Candlestick') {\r\n            fillUpDownCandlesticksColors(options);\r\n        }\r\n        const strictOptions = merge(clone(seriesOptionsDefaults), clone(definition.defaultOptions), options);\r\n        const createPaneView = definition._internal_createPaneView;\r\n        const series = new Series(this._private__chartWidget._internal_model(), definition.type, strictOptions, createPaneView, definition._internal_customPaneView);\r\n        this._private__chartWidget._internal_model()._internal_addSeriesToPane(series, paneIndex);\r\n        const res = new SeriesApi(series, this, this, this, this._internal__horzScaleBehavior, (pane) => this._private__getPaneApi(pane));\r\n        this._private__seriesMap.set(res, series);\r\n        this._private__seriesMapReversed.set(series, res);\r\n        return res;\r\n    }\r\n    _private__sendUpdateToChart(update) {\r\n        const model = this._private__chartWidget._internal_model();\r\n        model._internal_updateTimeScale(update._internal_timeScale._internal_baseIndex, update._internal_timeScale._internal_points, update._internal_timeScale._internal_firstChangedPointIndex);\r\n        update._internal_series.forEach((value, series) => series._internal_setData(value._internal_data, value._internal_info));\r\n        model._internal_timeScale()._internal_recalculateIndicesWithData();\r\n        model._internal_recalculateAllPanes();\r\n    }\r\n    _private__mapSeriesToApi(series) {\r\n        return ensureDefined(this._private__seriesMapReversed.get(series));\r\n    }\r\n    _private__convertMouseParams(param) {\r\n        const seriesData = new Map();\r\n        param._internal_seriesData.forEach((plotRow, series) => {\r\n            const seriesType = series._internal_seriesType();\r\n            const data = getSeriesDataCreator(seriesType)(plotRow);\r\n            if (seriesType !== 'Custom') {\r\n                assert(isFulfilledData(data));\r\n            }\r\n            else {\r\n                const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\r\n                assert(!customWhitespaceChecker || customWhitespaceChecker(data) === false);\r\n            }\r\n            seriesData.set(this._private__mapSeriesToApi(series), data);\r\n        });\r\n        const hoveredSeries = param._internal_hoveredSeries === undefined ||\r\n            !this._private__seriesMapReversed.has(param._internal_hoveredSeries)\r\n            ? undefined\r\n            : this._private__mapSeriesToApi(param._internal_hoveredSeries);\r\n        return {\r\n            time: param._internal_originalTime,\r\n            logical: param._internal_index,\r\n            point: param._internal_point,\r\n            paneIndex: param._internal_paneIndex,\r\n            hoveredSeries,\r\n            hoveredObjectId: param._internal_hoveredObject,\r\n            seriesData,\r\n            sourceEvent: param._internal_touchMouseEventData,\r\n        };\r\n    }\r\n    _private__getPaneApi(pane) {\r\n        let result = this._private__panes.get(pane);\r\n        if (!result) {\r\n            result = new PaneApi(this._private__chartWidget, (series) => this._private__mapSeriesToApi(series), pane, this);\r\n            this._private__panes.set(pane, result);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction fetchHtmlElement(container) {\r\n    if (isString(container)) {\r\n        const element = document.getElementById(container);\r\n        assert(element !== null, `Cannot find element in DOM with id=${container}`);\r\n        return element;\r\n    }\r\n    return container;\r\n}\r\n/**\r\n * This function is the main entry point of the Lightweight Charting Library. If you are using time values\r\n * for the horizontal scale then it is recommended that you rather use the {@link createChart} function.\r\n *\r\n * @template HorzScaleItem - type of points on the horizontal scale\r\n * @template THorzScaleBehavior - type of horizontal axis strategy that encapsulate all the specific behaviors of the horizontal scale type\r\n *\r\n * @param container - ID of HTML element or element itself\r\n * @param horzScaleBehavior - Horizontal scale behavior\r\n * @param options - Any subset of options to be applied at start.\r\n * @returns An interface to the created chart\r\n */\r\nfunction createChartEx(container, horzScaleBehavior, options) {\r\n    const htmlElement = fetchHtmlElement(container);\r\n    const res = new ChartApi(htmlElement, horzScaleBehavior, options);\r\n    horzScaleBehavior.setOptions(res.options());\r\n    return res;\r\n}\r\n/**\r\n * This function is the simplified main entry point of the Lightweight Charting Library with time points for the horizontal scale.\r\n *\r\n * @param container - ID of HTML element or element itself\r\n * @param options - Any subset of options to be applied at start.\r\n * @returns An interface to the created chart\r\n */\r\nfunction createChart(container, options) {\r\n    return createChartEx(container, new HorzScaleBehaviorTime(), HorzScaleBehaviorTime._internal_applyDefaults(options));\r\n}\r\n/**\r\n * Provides the default implementation of the horizontal scale (time-based) that can be used as a base for extending the horizontal scale with custom behavior.\r\n * This allows for the introduction of custom functionality without re-implementing the entire {@link IHorzScaleBehavior}&lt;{@link Time}&gt; interface.\r\n *\r\n * For further details, refer to the {@link createChartEx} chart constructor method.\r\n *\r\n * @returns An uninitialized class implementing the {@link IHorzScaleBehavior}&lt;{@link Time}&gt; interface\r\n */\r\nfunction defaultHorzScaleBehavior() {\r\n    return HorzScaleBehaviorTime;\r\n}\r\n\r\nclass LinePaneViewBase extends SeriesPaneViewBase {\r\n    constructor(series, model) {\r\n        super(series, model, true);\r\n    }\r\n    _internal__convertToCoordinates(priceScale, timeScale, firstValue) {\r\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\r\n        priceScale._internal_pointsArrayToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));\r\n    }\r\n    _internal__createRawItemBase(time, price) {\r\n        return {\r\n            _internal_time: time,\r\n            _internal_price: price,\r\n            _internal_x: NaN,\r\n            _internal_y: NaN,\r\n        };\r\n    }\r\n    _internal__fillRawPoints() {\r\n        const colorer = this._internal__series._internal_barColorer();\r\n        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row) => {\r\n            const value = row._internal_value[3 /* PlotRowValueIndex.Close */];\r\n            return this._internal__createRawItem(row._internal_index, value, colorer);\r\n        });\r\n    }\r\n}\r\n\r\nfunction drawSeriesPointMarkers(renderingScope, items, pointMarkersRadius, visibleRange, \r\n// the values returned by styleGetter are compared using the operator !==,\r\n// so if styleGetter returns objects, then styleGetter should return the same object for equal styles\r\nstyleGetter) {\r\n    if (visibleRange.to - visibleRange.from <= 0) {\r\n        return;\r\n    }\r\n    const { horizontalPixelRatio, verticalPixelRatio, context } = renderingScope;\r\n    let prevStyle = null;\r\n    const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\r\n    const correction = (tickWidth % 2) / 2;\r\n    const radius = pointMarkersRadius * verticalPixelRatio + correction;\r\n    for (let i = visibleRange.to - 1; i >= visibleRange.from; --i) {\r\n        const point = items[i];\r\n        if (point) {\r\n            const style = styleGetter(renderingScope, point);\r\n            if (style !== prevStyle) {\r\n                context.beginPath();\r\n                if (prevStyle !== null) {\r\n                    context.fill();\r\n                }\r\n                context.fillStyle = style;\r\n                prevStyle = style;\r\n            }\r\n            const centerX = Math.round(point._internal_x * horizontalPixelRatio) + correction; // correct x coordinate only\r\n            const centerY = point._internal_y * verticalPixelRatio;\r\n            context.moveTo(centerX, centerY);\r\n            context.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n        }\r\n    }\r\n    context.fill();\r\n}\r\n\r\n// eslint-disable-next-line max-params, complexity\r\nfunction walkLine(renderingScope, items, lineType, visibleRange, barWidth, \r\n// the values returned by styleGetter are compared using the operator !==,\r\n// so if styleGetter returns objects, then styleGetter should return the same object for equal styles\r\nstyleGetter, finishStyledArea) {\r\n    if (items.length === 0 || visibleRange.from >= items.length || visibleRange.to <= 0) {\r\n        return;\r\n    }\r\n    const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\r\n    const firstItem = items[visibleRange.from];\r\n    let currentStyle = styleGetter(renderingScope, firstItem);\r\n    let currentStyleFirstItem = firstItem;\r\n    if (visibleRange.to - visibleRange.from < 2) {\r\n        const halfBarWidth = barWidth / 2;\r\n        ctx.beginPath();\r\n        const item1 = { _internal_x: firstItem._internal_x - halfBarWidth, _internal_y: firstItem._internal_y };\r\n        const item2 = { _internal_x: firstItem._internal_x + halfBarWidth, _internal_y: firstItem._internal_y };\r\n        ctx.moveTo(item1._internal_x * horizontalPixelRatio, item1._internal_y * verticalPixelRatio);\r\n        ctx.lineTo(item2._internal_x * horizontalPixelRatio, item2._internal_y * verticalPixelRatio);\r\n        finishStyledArea(renderingScope, currentStyle, item1, item2);\r\n    }\r\n    else {\r\n        const changeStyle = (newStyle, currentItem) => {\r\n            finishStyledArea(renderingScope, currentStyle, currentStyleFirstItem, currentItem);\r\n            ctx.beginPath();\r\n            currentStyle = newStyle;\r\n            currentStyleFirstItem = currentItem;\r\n        };\r\n        let currentItem = currentStyleFirstItem;\r\n        ctx.beginPath();\r\n        ctx.moveTo(firstItem._internal_x * horizontalPixelRatio, firstItem._internal_y * verticalPixelRatio);\r\n        for (let i = visibleRange.from + 1; i < visibleRange.to; ++i) {\r\n            currentItem = items[i];\r\n            const itemStyle = styleGetter(renderingScope, currentItem);\r\n            switch (lineType) {\r\n                case 0 /* LineType.Simple */:\r\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\r\n                    break;\r\n                case 1 /* LineType.WithSteps */:\r\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, items[i - 1]._internal_y * verticalPixelRatio);\r\n                    if (itemStyle !== currentStyle) {\r\n                        changeStyle(itemStyle, currentItem);\r\n                        ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, items[i - 1]._internal_y * verticalPixelRatio);\r\n                    }\r\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\r\n                    break;\r\n                case 2 /* LineType.Curved */: {\r\n                    const [cp1, cp2] = getControlPoints(items, i - 1, i);\r\n                    ctx.bezierCurveTo(cp1._internal_x * horizontalPixelRatio, cp1._internal_y * verticalPixelRatio, cp2._internal_x * horizontalPixelRatio, cp2._internal_y * verticalPixelRatio, currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\r\n                    break;\r\n                }\r\n            }\r\n            if (lineType !== 1 /* LineType.WithSteps */ && itemStyle !== currentStyle) {\r\n                changeStyle(itemStyle, currentItem);\r\n                ctx.moveTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\r\n            }\r\n        }\r\n        if (currentStyleFirstItem !== currentItem || currentStyleFirstItem === currentItem && lineType === 1 /* LineType.WithSteps */) {\r\n            finishStyledArea(renderingScope, currentStyle, currentStyleFirstItem, currentItem);\r\n        }\r\n    }\r\n}\r\nconst curveTension = 6;\r\nfunction subtract(p1, p2) {\r\n    return { _internal_x: p1._internal_x - p2._internal_x, _internal_y: p1._internal_y - p2._internal_y };\r\n}\r\nfunction add(p1, p2) {\r\n    return { _internal_x: p1._internal_x + p2._internal_x, _internal_y: p1._internal_y + p2._internal_y };\r\n}\r\nfunction divide(p1, n) {\r\n    return { _internal_x: p1._internal_x / n, _internal_y: p1._internal_y / n };\r\n}\r\n/**\r\n * @returns Two control points that can be used as arguments to {@link CanvasRenderingContext2D.bezierCurveTo} to draw a curved line between `points[fromPointIndex]` and `points[toPointIndex]`.\r\n */\r\nfunction getControlPoints(points, fromPointIndex, toPointIndex) {\r\n    const beforeFromPointIndex = Math.max(0, fromPointIndex - 1);\r\n    const afterToPointIndex = Math.min(points.length - 1, toPointIndex + 1);\r\n    const cp1 = add(points[fromPointIndex], divide(subtract(points[toPointIndex], points[beforeFromPointIndex]), curveTension));\r\n    const cp2 = subtract(points[toPointIndex], divide(subtract(points[afterToPointIndex], points[fromPointIndex]), curveTension));\r\n    return [cp1, cp2];\r\n}\r\n\r\nfunction finishStyledArea$1(scope, style) {\r\n    const ctx = scope.context;\r\n    ctx.strokeStyle = style;\r\n    ctx.stroke();\r\n}\r\nclass PaneRendererLineBase extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._internal__data = null;\r\n    }\r\n    _internal_setData(data) {\r\n        this._internal__data = data;\r\n    }\r\n    _internal__drawImpl(renderingScope) {\r\n        if (this._internal__data === null) {\r\n            return;\r\n        }\r\n        const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineType: lineType, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle, _internal_pointMarkersRadius: pointMarkersRadius } = this._internal__data;\r\n        if (visibleRange === null) {\r\n            return;\r\n        }\r\n        const ctx = renderingScope.context;\r\n        ctx.lineCap = 'butt';\r\n        ctx.lineWidth = lineWidth * renderingScope.verticalPixelRatio;\r\n        setLineStyle(ctx, lineStyle);\r\n        ctx.lineJoin = 'round';\r\n        const styleGetter = this._internal__strokeStyle.bind(this);\r\n        if (lineType !== undefined) {\r\n            walkLine(renderingScope, items, lineType, visibleRange, barWidth, styleGetter, finishStyledArea$1);\r\n        }\r\n        if (pointMarkersRadius) {\r\n            drawSeriesPointMarkers(renderingScope, items, pointMarkersRadius, visibleRange, styleGetter);\r\n        }\r\n    }\r\n}\r\n\r\nclass PaneRendererLine extends PaneRendererLineBase {\r\n    _internal__strokeStyle(renderingScope, item) {\r\n        return item._internal_lineColor;\r\n    }\r\n}\r\n\r\nclass SeriesLinePaneView extends LinePaneViewBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._internal__renderer = new PaneRendererLine();\r\n    }\r\n    _internal__createRawItem(time, price, colorer) {\r\n        return {\r\n            ...this._internal__createRawItemBase(time, price),\r\n            ...colorer._internal_barStyle(time),\r\n        };\r\n    }\r\n    _internal__prepareRendererData() {\r\n        const options = this._internal__series._internal_options();\r\n        const data = {\r\n            _internal_items: this._internal__items,\r\n            _internal_lineStyle: options.lineStyle,\r\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\r\n            _internal_lineWidth: options.lineWidth,\r\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? (options.pointMarkersRadius || options.lineWidth / 2 + 2) : undefined,\r\n            _internal_visibleRange: this._internal__itemsVisibleRange,\r\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),\r\n        };\r\n        this._internal__renderer._internal_setData(data);\r\n    }\r\n}\r\n\r\nconst lineStyleDefaults = {\r\n    color: '#2196f3',\r\n    lineStyle: 0 /* LineStyle.Solid */,\r\n    lineWidth: 3,\r\n    lineType: 0 /* LineType.Simple */,\r\n    lineVisible: true,\r\n    crosshairMarkerVisible: true,\r\n    crosshairMarkerRadius: 4,\r\n    crosshairMarkerBorderColor: '',\r\n    crosshairMarkerBorderWidth: 2,\r\n    crosshairMarkerBackgroundColor: '',\r\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,\r\n    pointMarkersVisible: false,\r\n};\r\nconst createPaneView$5 = (series, model) => new SeriesLinePaneView(series, model);\r\nconst createLineSeries = () => {\r\n    const definition = {\r\n        type: 'Line',\r\n        isBuiltIn: true,\r\n        defaultOptions: lineStyleDefaults,\r\n        /**\r\n         * @internal\r\n         */\r\n        _internal_createPaneView: createPaneView$5,\r\n    };\r\n    return definition;\r\n};\r\nconst lineSeries = createLineSeries();\r\n\r\nfunction createDebouncedMicroTaskHandler(callback) {\r\n    let scheduled = false;\r\n    return function (...args) {\r\n        if (!scheduled) {\r\n            scheduled = true;\r\n            queueMicrotask(() => {\r\n                callback(...args);\r\n                scheduled = false;\r\n            });\r\n        }\r\n    };\r\n}\r\nfunction markWithGreaterWeight$1(a, b) {\r\n    return a.weight > b.weight ? a : b;\r\n}\r\nfunction toInternalHorzScaleItem(item) {\r\n    return item;\r\n}\r\nfunction fromInternalHorzScaleItem(item) {\r\n    return item;\r\n}\r\nclass YieldCurveHorzScaleBehavior {\r\n    constructor() {\r\n        this._private__pointsChangedDelegate = new Delegate();\r\n        this._private__invalidateWhitespace = createDebouncedMicroTaskHandler(() => this._private__pointsChangedDelegate._internal_fire(this._private__largestIndex));\r\n        this._private__largestIndex = 0;\r\n    }\r\n    /** Data changes might require that the whitespace be generated again */\r\n    _internal_whitespaceInvalidated() {\r\n        return this._private__pointsChangedDelegate;\r\n    }\r\n    _internal_destroy() {\r\n        this._private__pointsChangedDelegate._internal_destroy();\r\n    }\r\n    options() {\r\n        return this._private__options;\r\n    }\r\n    setOptions(options) {\r\n        this._private__options = options;\r\n    }\r\n    preprocessData(data) {\r\n        // No preprocessing needed for yield curve data\r\n    }\r\n    updateFormatter(options) {\r\n        if (!this._private__options) {\r\n            return;\r\n        }\r\n        this._private__options.localization = options;\r\n    }\r\n    createConverterToInternalObj(data) {\r\n        this._private__invalidateWhitespace();\r\n        return (time) => {\r\n            if (time > this._private__largestIndex) {\r\n                this._private__largestIndex = time;\r\n            }\r\n            return toInternalHorzScaleItem(time);\r\n        };\r\n    }\r\n    key(internalItem) {\r\n        return internalItem;\r\n    }\r\n    cacheKey(internalItem) {\r\n        return fromInternalHorzScaleItem(internalItem);\r\n    }\r\n    convertHorzItemToInternal(item) {\r\n        return toInternalHorzScaleItem(item);\r\n    }\r\n    formatHorzItem(item) {\r\n        return this._private__formatTime(item);\r\n    }\r\n    formatTickmark(item) {\r\n        return this._private__formatTime(item.time);\r\n    }\r\n    maxTickMarkWeight(marks) {\r\n        return marks.reduce(markWithGreaterWeight$1, marks[0]).weight;\r\n    }\r\n    fillWeightsForPoints(sortedTimePoints, startIndex) {\r\n        const timeWeight = (time) => {\r\n            if (time % 120 === 0) {\r\n                return 10;\r\n            }\r\n            if (time % 60 === 0) {\r\n                return 9;\r\n            }\r\n            if (time % 36 === 0) {\r\n                return 8;\r\n            }\r\n            if (time % 12 === 0) {\r\n                return 7;\r\n            }\r\n            if (time % 6 === 0) {\r\n                return 6;\r\n            }\r\n            if (time % 3 === 0) {\r\n                return 5;\r\n            }\r\n            if (time % 1 === 0) {\r\n                return 4;\r\n            }\r\n            return 0;\r\n        };\r\n        for (let index = startIndex; index < sortedTimePoints.length; ++index) {\r\n            sortedTimePoints[index].timeWeight = timeWeight(fromInternalHorzScaleItem(sortedTimePoints[index].time));\r\n        }\r\n        this._private__largestIndex = fromInternalHorzScaleItem(sortedTimePoints[sortedTimePoints.length - 1].time);\r\n        this._private__invalidateWhitespace();\r\n    }\r\n    _private__formatTime(months) {\r\n        if (this._private__options.localization?.timeFormatter) {\r\n            return this._private__options.localization.timeFormatter(months);\r\n        }\r\n        if (months < 12) {\r\n            return `${months}M`;\r\n        }\r\n        const years = Math.floor(months / 12);\r\n        const remainingMonths = months % 12;\r\n        if (remainingMonths === 0) {\r\n            return `${years}Y`;\r\n        }\r\n        return `${years}Y${remainingMonths}M`;\r\n    }\r\n}\r\n\r\nconst yieldChartOptionsDefaults = {\r\n    baseResolution: 1,\r\n    minimumTimeRange: 120,\r\n    startTimeRange: 0,\r\n};\r\n\r\nfunction generateWhitespaceData({ _internal_start: start, _internal_end: end, _internal_resolution: resolution, }) {\r\n    return Array.from({ length: Math.floor((end - start) / resolution) + 1 }, \r\n    // eslint-disable-next-line quote-props\r\n    (item, i) => ({ 'time': start + i * resolution }));\r\n}\r\nfunction buildWhitespaceState(options, lastIndex) {\r\n    return {\r\n        _internal_start: Math.max(0, options.startTimeRange),\r\n        _internal_end: Math.max(0, options.minimumTimeRange, lastIndex || 0),\r\n        _internal_resolution: Math.max(1, options.baseResolution),\r\n    };\r\n}\r\nconst generateWhitespaceHash = ({ _internal_start: start, _internal_end: end, _internal_resolution: resolution, }) => `${start}~${end}~${resolution}`;\r\nconst defaultOptions = {\r\n    yieldCurve: yieldChartOptionsDefaults,\r\n    // and add sensible default options for yield charts which\r\n    // are different from the usual defaults.\r\n    timeScale: {\r\n        ignoreWhitespaceIndices: true,\r\n    },\r\n    leftPriceScale: {\r\n        visible: true,\r\n    },\r\n    rightPriceScale: {\r\n        visible: false,\r\n    },\r\n    localization: {\r\n        priceFormatter: (value) => {\r\n            return value.toFixed(3) + '%';\r\n        },\r\n    },\r\n};\r\nconst lineStyleDefaultOptionOverrides = {\r\n    lastValueVisible: false,\r\n    priceLineVisible: false,\r\n};\r\nclass YieldChartApi extends ChartApi {\r\n    constructor(container, options) {\r\n        const fullOptions = merge(defaultOptions, options || {});\r\n        const horzBehaviour = new YieldCurveHorzScaleBehavior();\r\n        super(container, horzBehaviour, fullOptions);\r\n        horzBehaviour.setOptions(this.options());\r\n        this._initWhitespaceSeries();\r\n    }\r\n    addSeries(definition, options = {}, paneIndex = 0) {\r\n        if (definition.isBuiltIn && ['Area', 'Line'].includes(definition.type) === false) {\r\n            throw new Error('Yield curve only support Area and Line series');\r\n        }\r\n        const optionOverrides = {\r\n            ...lineStyleDefaultOptionOverrides,\r\n            ...options,\r\n        };\r\n        return super.addSeries(definition, optionOverrides, paneIndex);\r\n    }\r\n    _initWhitespaceSeries() {\r\n        const horzBehaviour = this.horzBehaviour();\r\n        const whiteSpaceSeries = this.addSeries(lineSeries);\r\n        let currentWhitespaceHash;\r\n        function updateWhitespace(lastIndex) {\r\n            const newWhitespaceState = buildWhitespaceState(horzBehaviour.options().yieldCurve, lastIndex);\r\n            const newWhitespaceHash = generateWhitespaceHash(newWhitespaceState);\r\n            if (newWhitespaceHash !== currentWhitespaceHash) {\r\n                currentWhitespaceHash = newWhitespaceHash;\r\n                whiteSpaceSeries.setData(generateWhitespaceData(newWhitespaceState));\r\n            }\r\n        }\r\n        updateWhitespace(0);\r\n        horzBehaviour._internal_whitespaceInvalidated()._internal_subscribe(updateWhitespace);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a yield curve chart with the specified options.\r\n *\r\n * A yield curve chart differs from the default chart type\r\n * in the following ways:\r\n * - Horizontal scale is linearly spaced, and defined in monthly\r\n * time duration units\r\n * - Whitespace is ignored for the crosshair and grid lines\r\n *\r\n * @param container - ID of HTML element or element itself\r\n * @param options - The yield chart options.\r\n * @returns An interface to the created chart\r\n */\r\nfunction createYieldCurveChart(container, options) {\r\n    const htmlElement = fetchHtmlElement(container);\r\n    const chartApi = new YieldChartApi(htmlElement, options);\r\n    return chartApi;\r\n}\r\n\r\nfunction markWithGreaterWeight(a, b) {\r\n    return a.weight > b.weight ? a : b;\r\n}\r\nclass HorzScaleBehaviorPrice {\r\n    options() {\r\n        return this._private__options;\r\n    }\r\n    setOptions(options) {\r\n        this._private__options = options;\r\n    }\r\n    preprocessData(data) { }\r\n    updateFormatter(options) {\r\n        if (!this._private__options) {\r\n            return;\r\n        }\r\n        this._private__options.localization = options;\r\n    }\r\n    createConverterToInternalObj(data) {\r\n        return (price) => price;\r\n    }\r\n    key(internalItem) {\r\n        return internalItem;\r\n    }\r\n    cacheKey(internalItem) {\r\n        return internalItem;\r\n    }\r\n    convertHorzItemToInternal(item) {\r\n        return item;\r\n    }\r\n    formatHorzItem(item) {\r\n        return item.toFixed(this._private__precision());\r\n    }\r\n    formatTickmark(item, localizationOptions) {\r\n        return item.time.toFixed(this._private__precision());\r\n    }\r\n    maxTickMarkWeight(marks) {\r\n        return marks.reduce(markWithGreaterWeight, marks[0]).weight;\r\n    }\r\n    fillWeightsForPoints(sortedTimePoints, startIndex) {\r\n        const priceWeight = (price) => {\r\n            if (price === Math.ceil(price / 100) * 100) {\r\n                return 8;\r\n            }\r\n            if (price === Math.ceil(price / 50) * 50) {\r\n                return 7;\r\n            }\r\n            if (price === Math.ceil(price / 25) * 25) {\r\n                return 6;\r\n            }\r\n            if (price === Math.ceil(price / 10) * 10) {\r\n                return 5;\r\n            }\r\n            if (price === Math.ceil(price / 5) * 5) {\r\n                return 4;\r\n            }\r\n            if (price === Math.ceil(price)) {\r\n                return 3;\r\n            }\r\n            if (price * 2 === Math.ceil(price * 2)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        };\r\n        for (let index = startIndex; index < sortedTimePoints.length; ++index) {\r\n            sortedTimePoints[index].timeWeight = priceWeight(sortedTimePoints[index].time);\r\n        }\r\n    }\r\n    _private__precision() {\r\n        return this._private__options.localization\r\n            .precision;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates an 'options' chart with price values on the horizontal scale.\r\n *\r\n * This function is used to create a specialized chart type where the horizontal scale\r\n * represents price values instead of time. It's particularly useful for visualizing\r\n * option chains, price distributions, or any data where price is the primary x-axis metric.\r\n *\r\n * @param container - The DOM element or its id where the chart will be rendered.\r\n * @param options - Optional configuration options for the price chart.\r\n * @returns An instance of IChartApiBase configured for price-based horizontal scaling.\r\n */\r\nfunction createOptionsChart(container, options) {\r\n    return createChartEx(container, new HorzScaleBehaviorPrice(), options);\r\n}\r\n\r\nfunction finishStyledArea(baseLevelCoordinate, scope, style, areaFirstItem, newAreaFirstItem) {\r\n    const { context, horizontalPixelRatio, verticalPixelRatio } = scope;\r\n    context.lineTo(newAreaFirstItem._internal_x * horizontalPixelRatio, baseLevelCoordinate * verticalPixelRatio);\r\n    context.lineTo(areaFirstItem._internal_x * horizontalPixelRatio, baseLevelCoordinate * verticalPixelRatio);\r\n    context.closePath();\r\n    context.fillStyle = style;\r\n    context.fill();\r\n}\r\nclass PaneRendererAreaBase extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._internal__data = null;\r\n    }\r\n    _internal_setData(data) {\r\n        this._internal__data = data;\r\n    }\r\n    _internal__drawImpl(renderingScope) {\r\n        if (this._internal__data === null) {\r\n            return;\r\n        }\r\n        const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle, _internal_lineType: lineType } = this._internal__data;\r\n        const baseLevelCoordinate = this._internal__data._internal_baseLevelCoordinate ??\r\n            (this._internal__data._internal_invertFilledArea ? 0 : renderingScope.mediaSize.height);\r\n        if (visibleRange === null) {\r\n            return;\r\n        }\r\n        const ctx = renderingScope.context;\r\n        ctx.lineCap = 'butt';\r\n        ctx.lineJoin = 'round';\r\n        ctx.lineWidth = lineWidth;\r\n        setLineStyle(ctx, lineStyle);\r\n        // walk lines with width=1 to have more accurate gradient's filling\r\n        ctx.lineWidth = 1;\r\n        walkLine(renderingScope, items, lineType, visibleRange, barWidth, this._internal__fillStyle.bind(this), finishStyledArea.bind(null, baseLevelCoordinate));\r\n    }\r\n}\r\n\r\nclass GradientStyleCache {\r\n    // eslint-disable-next-line complexity\r\n    _internal_get(scope, params) {\r\n        const cachedParams = this._private__params;\r\n        const { _internal_topColor1: topColor1, _internal_topColor2: topColor2, _internal_bottomColor1: bottomColor1, _internal_bottomColor2: bottomColor2, _internal_baseLevelCoordinate: baseLevelCoordinate, _internal_topCoordinate: topCoordinate, _internal_bottomCoordinate: bottomCoordinate, } = params;\r\n        if (this._private__cachedValue === undefined ||\r\n            cachedParams === undefined ||\r\n            cachedParams._internal_topColor1 !== topColor1 ||\r\n            cachedParams._internal_topColor2 !== topColor2 ||\r\n            cachedParams._internal_bottomColor1 !== bottomColor1 ||\r\n            cachedParams._internal_bottomColor2 !== bottomColor2 ||\r\n            cachedParams._internal_baseLevelCoordinate !== baseLevelCoordinate ||\r\n            cachedParams._internal_topCoordinate !== topCoordinate ||\r\n            cachedParams._internal_bottomCoordinate !== bottomCoordinate) {\r\n            const { verticalPixelRatio } = scope;\r\n            const multiplier = baseLevelCoordinate || topCoordinate > 0 ? verticalPixelRatio : 1;\r\n            const top = topCoordinate * multiplier;\r\n            const bottom = bottomCoordinate === scope.bitmapSize.height ? bottomCoordinate : bottomCoordinate * multiplier;\r\n            const baseline = (baseLevelCoordinate ?? 0) * multiplier;\r\n            const gradient = scope.context.createLinearGradient(0, top, 0, bottom);\r\n            gradient.addColorStop(0, topColor1);\r\n            if (baseLevelCoordinate !== null && baseLevelCoordinate !== undefined) {\r\n                const range = bottom - top;\r\n                const baselineRatio = clamp(((baseline - top) / range), 0, 1);\r\n                gradient.addColorStop(baselineRatio, topColor2);\r\n                gradient.addColorStop(baselineRatio, bottomColor1);\r\n            }\r\n            gradient.addColorStop(1, bottomColor2);\r\n            this._private__cachedValue = gradient;\r\n            this._private__params = params;\r\n        }\r\n        return this._private__cachedValue;\r\n    }\r\n}\r\n\r\nclass PaneRendererBaselineArea extends PaneRendererAreaBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__fillCache = new GradientStyleCache();\r\n    }\r\n    _internal__fillStyle(renderingScope, item) {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const data = this._internal__data;\r\n        return this._private__fillCache._internal_get(renderingScope, {\r\n            _internal_topColor1: item._internal_topFillColor1,\r\n            _internal_topColor2: item._internal_topFillColor2,\r\n            _internal_bottomColor1: item._internal_bottomFillColor1,\r\n            _internal_bottomColor2: item._internal_bottomFillColor2,\r\n            _internal_baseLevelCoordinate: data._internal_baseLevelCoordinate,\r\n            _internal_topCoordinate: data._internal_topCoordinate ?? 0,\r\n            _internal_bottomCoordinate: data._internal_bottomCoordinate ?? renderingScope.bitmapSize.height,\r\n        });\r\n    }\r\n}\r\n\r\nclass PaneRendererBaselineLine extends PaneRendererLineBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__strokeCache = new GradientStyleCache();\r\n    }\r\n    _internal__strokeStyle(renderingScope, item) {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const data = this._internal__data;\r\n        return this._private__strokeCache._internal_get(renderingScope, {\r\n            _internal_topColor1: item._internal_topLineColor,\r\n            _internal_topColor2: item._internal_topLineColor,\r\n            _internal_bottomColor1: item._internal_bottomLineColor,\r\n            _internal_bottomColor2: item._internal_bottomLineColor,\r\n            _internal_baseLevelCoordinate: data._internal_baseLevelCoordinate,\r\n            _internal_topCoordinate: data._internal_topCoordinate ?? 0,\r\n            _internal_bottomCoordinate: data._internal_bottomCoordinate ?? renderingScope.bitmapSize.height,\r\n        });\r\n    }\r\n}\r\n\r\nclass SeriesBaselinePaneView extends LinePaneViewBase {\r\n    constructor(series, model) {\r\n        super(series, model);\r\n        this._internal__renderer = new CompositeRenderer();\r\n        this._private__baselineAreaRenderer = new PaneRendererBaselineArea();\r\n        this._private__baselineLineRenderer = new PaneRendererBaselineLine();\r\n        this._internal__renderer._internal_setRenderers([this._private__baselineAreaRenderer, this._private__baselineLineRenderer]);\r\n    }\r\n    _internal__createRawItem(time, price, colorer) {\r\n        return {\r\n            ...this._internal__createRawItemBase(time, price),\r\n            ...colorer._internal_barStyle(time),\r\n        };\r\n    }\r\n    _internal__prepareRendererData() {\r\n        const firstValue = this._internal__series._internal_firstValue();\r\n        if (firstValue === null) {\r\n            return;\r\n        }\r\n        const options = this._internal__series._internal_options();\r\n        const baseLevelCoordinate = this._internal__series._internal_priceScale()._internal_priceToCoordinate(options.baseValue.price, firstValue._internal_value);\r\n        const barWidth = this._internal__model._internal_timeScale()._internal_barSpacing();\r\n        if (this._internal__itemsVisibleRange === null || this._internal__items.length === 0) {\r\n            return;\r\n        }\r\n        let topCoordinate;\r\n        let bottomCoordinate;\r\n        if (options.relativeGradient) {\r\n            topCoordinate = this._internal__items[this._internal__itemsVisibleRange.from]._internal_y;\r\n            bottomCoordinate = this._internal__items[this._internal__itemsVisibleRange.from]._internal_y;\r\n            for (let i = this._internal__itemsVisibleRange.from; i < this._internal__itemsVisibleRange.to; i++) {\r\n                const item = this._internal__items[i];\r\n                if (item._internal_y < topCoordinate) {\r\n                    topCoordinate = item._internal_y;\r\n                }\r\n                if (item._internal_y > bottomCoordinate) {\r\n                    bottomCoordinate = item._internal_y;\r\n                }\r\n            }\r\n        }\r\n        this._private__baselineAreaRenderer._internal_setData({\r\n            _internal_items: this._internal__items,\r\n            _internal_lineWidth: options.lineWidth,\r\n            _internal_lineStyle: options.lineStyle,\r\n            _internal_lineType: options.lineType,\r\n            _internal_baseLevelCoordinate: baseLevelCoordinate,\r\n            _internal_topCoordinate: topCoordinate,\r\n            _internal_bottomCoordinate: bottomCoordinate,\r\n            _internal_invertFilledArea: false,\r\n            _internal_visibleRange: this._internal__itemsVisibleRange,\r\n            _internal_barWidth: barWidth,\r\n        });\r\n        this._private__baselineLineRenderer._internal_setData({\r\n            _internal_items: this._internal__items,\r\n            _internal_lineWidth: options.lineWidth,\r\n            _internal_lineStyle: options.lineStyle,\r\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\r\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? (options.pointMarkersRadius || options.lineWidth / 2 + 2) : undefined,\r\n            _internal_baseLevelCoordinate: baseLevelCoordinate,\r\n            _internal_topCoordinate: topCoordinate,\r\n            _internal_bottomCoordinate: bottomCoordinate,\r\n            _internal_visibleRange: this._internal__itemsVisibleRange,\r\n            _internal_barWidth: barWidth,\r\n        });\r\n    }\r\n}\r\n\r\nconst baselineStyleDefaults = {\r\n    baseValue: {\r\n        type: 'price',\r\n        price: 0,\r\n    },\r\n    relativeGradient: false,\r\n    topFillColor1: 'rgba(38, 166, 154, 0.28)',\r\n    topFillColor2: 'rgba(38, 166, 154, 0.05)',\r\n    topLineColor: 'rgba(38, 166, 154, 1)',\r\n    bottomFillColor1: 'rgba(239, 83, 80, 0.05)',\r\n    bottomFillColor2: 'rgba(239, 83, 80, 0.28)',\r\n    bottomLineColor: 'rgba(239, 83, 80, 1)',\r\n    lineWidth: 3,\r\n    lineStyle: 0 /* LineStyle.Solid */,\r\n    lineType: 0 /* LineType.Simple */,\r\n    lineVisible: true,\r\n    crosshairMarkerVisible: true,\r\n    crosshairMarkerRadius: 4,\r\n    crosshairMarkerBorderColor: '',\r\n    crosshairMarkerBorderWidth: 2,\r\n    crosshairMarkerBackgroundColor: '',\r\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,\r\n    pointMarkersVisible: false,\r\n};\r\nconst createPaneView$4 = (series, model) => new SeriesBaselinePaneView(series, model);\r\nconst createSeries$4 = () => {\r\n    const definition = {\r\n        type: 'Baseline',\r\n        isBuiltIn: true,\r\n        defaultOptions: baselineStyleDefaults,\r\n        /**\r\n         * @internal\r\n         */\r\n        _internal_createPaneView: createPaneView$4,\r\n    };\r\n    return definition;\r\n};\r\nconst baselineSeries = createSeries$4();\r\n\r\nclass PaneRendererArea extends PaneRendererAreaBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__fillCache = new GradientStyleCache();\r\n    }\r\n    _internal__fillStyle(renderingScope, item) {\r\n        return this._private__fillCache._internal_get(renderingScope, {\r\n            _internal_topColor1: item._internal_topColor,\r\n            _internal_topColor2: '',\r\n            _internal_bottomColor1: '',\r\n            _internal_bottomColor2: item._internal_bottomColor,\r\n            _internal_topCoordinate: this._internal__data?._internal_topCoordinate ?? 0,\r\n            _internal_bottomCoordinate: renderingScope.bitmapSize.height,\r\n        });\r\n    }\r\n}\r\n\r\nclass SeriesAreaPaneView extends LinePaneViewBase {\r\n    constructor(series, model) {\r\n        super(series, model);\r\n        this._internal__renderer = new CompositeRenderer();\r\n        this._private__areaRenderer = new PaneRendererArea();\r\n        this._private__lineRenderer = new PaneRendererLine();\r\n        this._internal__renderer._internal_setRenderers([this._private__areaRenderer, this._private__lineRenderer]);\r\n    }\r\n    _internal__createRawItem(time, price, colorer) {\r\n        return {\r\n            ...this._internal__createRawItemBase(time, price),\r\n            ...colorer._internal_barStyle(time),\r\n        };\r\n    }\r\n    _internal__prepareRendererData() {\r\n        const options = this._internal__series._internal_options();\r\n        if (this._internal__itemsVisibleRange === null || this._internal__items.length === 0) {\r\n            return;\r\n        }\r\n        let topCoordinate;\r\n        if (options.relativeGradient) {\r\n            topCoordinate = this._internal__items[this._internal__itemsVisibleRange.from]._internal_y;\r\n            for (let i = this._internal__itemsVisibleRange.from; i < this._internal__itemsVisibleRange.to; i++) {\r\n                const item = this._internal__items[i];\r\n                if (item._internal_y < topCoordinate) {\r\n                    topCoordinate = item._internal_y;\r\n                }\r\n            }\r\n        }\r\n        this._private__areaRenderer._internal_setData({\r\n            _internal_lineType: options.lineType,\r\n            _internal_items: this._internal__items,\r\n            _internal_lineStyle: options.lineStyle,\r\n            _internal_lineWidth: options.lineWidth,\r\n            _internal_baseLevelCoordinate: null,\r\n            _internal_topCoordinate: topCoordinate,\r\n            _internal_invertFilledArea: options.invertFilledArea,\r\n            _internal_visibleRange: this._internal__itemsVisibleRange,\r\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),\r\n        });\r\n        this._private__lineRenderer._internal_setData({\r\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\r\n            _internal_items: this._internal__items,\r\n            _internal_lineStyle: options.lineStyle,\r\n            _internal_lineWidth: options.lineWidth,\r\n            _internal_visibleRange: this._internal__itemsVisibleRange,\r\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),\r\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? (options.pointMarkersRadius || options.lineWidth / 2 + 2) : undefined,\r\n        });\r\n    }\r\n}\r\n\r\nconst areaStyleDefaults = {\r\n    topColor: 'rgba( 46, 220, 135, 0.4)',\r\n    bottomColor: 'rgba( 40, 221, 100, 0)',\r\n    invertFilledArea: false,\r\n    relativeGradient: false,\r\n    lineColor: '#33D778',\r\n    lineStyle: 0 /* LineStyle.Solid */,\r\n    lineWidth: 3,\r\n    lineType: 0 /* LineType.Simple */,\r\n    lineVisible: true,\r\n    crosshairMarkerVisible: true,\r\n    crosshairMarkerRadius: 4,\r\n    crosshairMarkerBorderColor: '',\r\n    crosshairMarkerBorderWidth: 2,\r\n    crosshairMarkerBackgroundColor: '',\r\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */,\r\n    pointMarkersVisible: false,\r\n};\r\nconst createPaneView$3 = (series, model) => new SeriesAreaPaneView(series, model);\r\nconst createSeries$3 = () => {\r\n    const definition = {\r\n        type: 'Area',\r\n        isBuiltIn: true,\r\n        defaultOptions: areaStyleDefaults,\r\n        /**\r\n         * @internal\r\n         */\r\n        _internal_createPaneView: createPaneView$3,\r\n    };\r\n    return definition;\r\n};\r\nconst areaSeries = createSeries$3();\r\n\r\nfunction optimalBarWidth(barSpacing, pixelRatio) {\r\n    return Math.floor(barSpacing * 0.3 * pixelRatio);\r\n}\r\nfunction optimalCandlestickWidth(barSpacing, pixelRatio) {\r\n    const barSpacingSpecialCaseFrom = 2.5;\r\n    const barSpacingSpecialCaseTo = 4;\r\n    const barSpacingSpecialCaseCoeff = 3;\r\n    if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {\r\n        return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);\r\n    }\r\n    // coeff should be 1 on small barspacing and go to 0.8 while groing bar spacing\r\n    const barSpacingReducingCoeff = 0.2;\r\n    const coeff = 1 - barSpacingReducingCoeff * Math.atan(Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo) / (Math.PI * 0.5);\r\n    const res = Math.floor(barSpacing * coeff * pixelRatio);\r\n    const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);\r\n    const optimal = Math.min(res, scaledBarSpacing);\r\n    return Math.max(Math.floor(pixelRatio), optimal);\r\n}\r\n\r\nclass PaneRendererBars extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__data = null;\r\n        this._private__barWidth = 0;\r\n        this._private__barLineWidth = 0;\r\n    }\r\n    _internal_setData(data) {\r\n        this._private__data = data;\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\r\n        if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {\r\n            return;\r\n        }\r\n        this._private__barWidth = this._private__calcBarWidth(horizontalPixelRatio);\r\n        // grid and crosshair have line width = Math.floor(pixelRatio)\r\n        // if this value is odd, we have to make bars' width odd\r\n        // if this value is even, we have to make bars' width even\r\n        // in order of keeping crosshair-over-bar drawing symmetric\r\n        if (this._private__barWidth >= 2) {\r\n            const lineWidth = Math.max(1, Math.floor(horizontalPixelRatio));\r\n            if ((lineWidth % 2) !== (this._private__barWidth % 2)) {\r\n                this._private__barWidth--;\r\n            }\r\n        }\r\n        // if scale is compressed, bar could become less than 1 CSS pixel\r\n        this._private__barLineWidth = this._private__data._internal_thinBars ? Math.min(this._private__barWidth, Math.floor(horizontalPixelRatio)) : this._private__barWidth;\r\n        let prevColor = null;\r\n        const drawOpenClose = this._private__barLineWidth <= this._private__barWidth && this._private__data._internal_barSpacing >= Math.floor(1.5 * horizontalPixelRatio);\r\n        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; ++i) {\r\n            const bar = this._private__data._internal_bars[i];\r\n            if (prevColor !== bar._internal_barColor) {\r\n                ctx.fillStyle = bar._internal_barColor;\r\n                prevColor = bar._internal_barColor;\r\n            }\r\n            const bodyWidthHalf = Math.floor(this._private__barLineWidth * 0.5);\r\n            const bodyCenter = Math.round(bar._internal_x * horizontalPixelRatio);\r\n            const bodyLeft = bodyCenter - bodyWidthHalf;\r\n            const bodyWidth = this._private__barLineWidth;\r\n            const bodyRight = bodyLeft + bodyWidth - 1;\r\n            const high = Math.min(bar._internal_highY, bar._internal_lowY);\r\n            const low = Math.max(bar._internal_highY, bar._internal_lowY);\r\n            const bodyTop = Math.round(high * verticalPixelRatio) - bodyWidthHalf;\r\n            const bodyBottom = Math.round(low * verticalPixelRatio) + bodyWidthHalf;\r\n            const bodyHeight = Math.max((bodyBottom - bodyTop), this._private__barLineWidth);\r\n            ctx.fillRect(bodyLeft, bodyTop, bodyWidth, bodyHeight);\r\n            const sideWidth = Math.ceil(this._private__barWidth * 1.5);\r\n            if (drawOpenClose) {\r\n                if (this._private__data._internal_openVisible) {\r\n                    const openLeft = bodyCenter - sideWidth;\r\n                    let openTop = Math.max(bodyTop, Math.round(bar._internal_openY * verticalPixelRatio) - bodyWidthHalf);\r\n                    let openBottom = openTop + bodyWidth - 1;\r\n                    if (openBottom > bodyTop + bodyHeight - 1) {\r\n                        openBottom = bodyTop + bodyHeight - 1;\r\n                        openTop = openBottom - bodyWidth + 1;\r\n                    }\r\n                    ctx.fillRect(openLeft, openTop, bodyLeft - openLeft, openBottom - openTop + 1);\r\n                }\r\n                const closeRight = bodyCenter + sideWidth;\r\n                let closeTop = Math.max(bodyTop, Math.round(bar._internal_closeY * verticalPixelRatio) - bodyWidthHalf);\r\n                let closeBottom = closeTop + bodyWidth - 1;\r\n                if (closeBottom > bodyTop + bodyHeight - 1) {\r\n                    closeBottom = bodyTop + bodyHeight - 1;\r\n                    closeTop = closeBottom - bodyWidth + 1;\r\n                }\r\n                ctx.fillRect(bodyRight + 1, closeTop, closeRight - bodyRight, closeBottom - closeTop + 1);\r\n            }\r\n        }\r\n    }\r\n    _private__calcBarWidth(pixelRatio) {\r\n        const limit = Math.floor(pixelRatio);\r\n        return Math.max(limit, Math.floor(optimalBarWidth(ensureNotNull(this._private__data)._internal_barSpacing, pixelRatio)));\r\n    }\r\n}\r\n\r\nclass BarsPaneViewBase extends SeriesPaneViewBase {\r\n    constructor(series, model) {\r\n        super(series, model, false);\r\n    }\r\n    _internal__convertToCoordinates(priceScale, timeScale, firstValue) {\r\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\r\n        priceScale._internal_barPricesToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));\r\n    }\r\n    _internal__createDefaultItem(time, bar, colorer) {\r\n        return {\r\n            _internal_time: time,\r\n            _internal_open: bar._internal_value[0 /* PlotRowValueIndex.Open */],\r\n            _internal_high: bar._internal_value[1 /* PlotRowValueIndex.High */],\r\n            _internal_low: bar._internal_value[2 /* PlotRowValueIndex.Low */],\r\n            _internal_close: bar._internal_value[3 /* PlotRowValueIndex.Close */],\r\n            _internal_x: NaN,\r\n            _internal_openY: NaN,\r\n            _internal_highY: NaN,\r\n            _internal_lowY: NaN,\r\n            _internal_closeY: NaN,\r\n        };\r\n    }\r\n    _internal__fillRawPoints() {\r\n        const colorer = this._internal__series._internal_barColorer();\r\n        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row) => this._internal__createRawItem(row._internal_index, row, colorer));\r\n    }\r\n}\r\n\r\nclass SeriesBarsPaneView extends BarsPaneViewBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._internal__renderer = new PaneRendererBars();\r\n    }\r\n    _internal__createRawItem(time, bar, colorer) {\r\n        return {\r\n            ...this._internal__createDefaultItem(time, bar, colorer),\r\n            ...colorer._internal_barStyle(time),\r\n        };\r\n    }\r\n    _internal__prepareRendererData() {\r\n        const barStyleProps = this._internal__series._internal_options();\r\n        this._internal__renderer._internal_setData({\r\n            _internal_bars: this._internal__items,\r\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\r\n            _internal_openVisible: barStyleProps.openVisible,\r\n            _internal_thinBars: barStyleProps.thinBars,\r\n            _internal_visibleRange: this._internal__itemsVisibleRange,\r\n        });\r\n    }\r\n}\r\n\r\nconst barStyleDefaults = {\r\n    upColor: '#26a69a',\r\n    downColor: '#ef5350',\r\n    openVisible: true,\r\n    thinBars: true,\r\n};\r\nconst createPaneView$2 = (series, model) => new SeriesBarsPaneView(series, model);\r\nconst createSeries$2 = () => {\r\n    const definition = {\r\n        type: 'Bar',\r\n        isBuiltIn: true,\r\n        defaultOptions: barStyleDefaults,\r\n        /**\r\n         * @internal\r\n         */\r\n        _internal_createPaneView: createPaneView$2,\r\n    };\r\n    return definition;\r\n};\r\nconst barSeries = createSeries$2();\r\n\r\nclass PaneRendererCandlesticks extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__data = null;\r\n        // scaled with pixelRatio\r\n        this._private__barWidth = 0;\r\n    }\r\n    _internal_setData(data) {\r\n        this._private__data = data;\r\n    }\r\n    _internal__drawImpl(renderingScope) {\r\n        if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {\r\n            return;\r\n        }\r\n        const { horizontalPixelRatio } = renderingScope;\r\n        // now we know pixelRatio and we could calculate barWidth effectively\r\n        this._private__barWidth = optimalCandlestickWidth(this._private__data._internal_barSpacing, horizontalPixelRatio);\r\n        // grid and crosshair have line width = Math.floor(pixelRatio)\r\n        // if this value is odd, we have to make candlesticks' width odd\r\n        // if this value is even, we have to make candlesticks' width even\r\n        // in order of keeping crosshair-over-candlesticks drawing symmetric\r\n        if (this._private__barWidth >= 2) {\r\n            const wickWidth = Math.floor(horizontalPixelRatio);\r\n            if ((wickWidth % 2) !== (this._private__barWidth % 2)) {\r\n                this._private__barWidth--;\r\n            }\r\n        }\r\n        const bars = this._private__data._internal_bars;\r\n        if (this._private__data._internal_wickVisible) {\r\n            this._private__drawWicks(renderingScope, bars, this._private__data._internal_visibleRange);\r\n        }\r\n        if (this._private__data._internal_borderVisible) {\r\n            this._private__drawBorder(renderingScope, bars, this._private__data._internal_visibleRange);\r\n        }\r\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\r\n        if (!this._private__data._internal_borderVisible || this._private__barWidth > borderWidth * 2) {\r\n            this._private__drawCandles(renderingScope, bars, this._private__data._internal_visibleRange);\r\n        }\r\n    }\r\n    _private__drawWicks(renderingScope, bars, visibleRange) {\r\n        if (this._private__data === null) {\r\n            return;\r\n        }\r\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\r\n        let prevWickColor = '';\r\n        let wickWidth = Math.min(Math.floor(horizontalPixelRatio), Math.floor(this._private__data._internal_barSpacing * horizontalPixelRatio));\r\n        wickWidth = Math.max(Math.floor(horizontalPixelRatio), Math.min(wickWidth, this._private__barWidth));\r\n        const wickOffset = Math.floor(wickWidth * 0.5);\r\n        let prevEdge = null;\r\n        for (let i = visibleRange.from; i < visibleRange.to; i++) {\r\n            const bar = bars[i];\r\n            if (bar._internal_barWickColor !== prevWickColor) {\r\n                ctx.fillStyle = bar._internal_barWickColor;\r\n                prevWickColor = bar._internal_barWickColor;\r\n            }\r\n            const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\r\n            const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\r\n            const high = Math.round(bar._internal_highY * verticalPixelRatio);\r\n            const low = Math.round(bar._internal_lowY * verticalPixelRatio);\r\n            const scaledX = Math.round(horizontalPixelRatio * bar._internal_x);\r\n            let left = scaledX - wickOffset;\r\n            const right = left + wickWidth - 1;\r\n            if (prevEdge !== null) {\r\n                left = Math.max(prevEdge + 1, left);\r\n                left = Math.min(left, right);\r\n            }\r\n            const width = right - left + 1;\r\n            ctx.fillRect(left, high, width, top - high);\r\n            ctx.fillRect(left, bottom + 1, width, low - bottom);\r\n            prevEdge = right;\r\n        }\r\n    }\r\n    _private__calculateBorderWidth(pixelRatio) {\r\n        let borderWidth = Math.floor(1 /* Constants.BarBorderWidth */ * pixelRatio);\r\n        if (this._private__barWidth <= 2 * borderWidth) {\r\n            borderWidth = Math.floor((this._private__barWidth - 1) * 0.5);\r\n        }\r\n        const res = Math.max(Math.floor(pixelRatio), borderWidth);\r\n        if (this._private__barWidth <= res * 2) {\r\n            // do not draw bodies, restore original value\r\n            return Math.max(Math.floor(pixelRatio), Math.floor(1 /* Constants.BarBorderWidth */ * pixelRatio));\r\n        }\r\n        return res;\r\n    }\r\n    _private__drawBorder(renderingScope, bars, visibleRange) {\r\n        if (this._private__data === null) {\r\n            return;\r\n        }\r\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\r\n        let prevBorderColor = '';\r\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\r\n        let prevEdge = null;\r\n        for (let i = visibleRange.from; i < visibleRange.to; i++) {\r\n            const bar = bars[i];\r\n            if (bar._internal_barBorderColor !== prevBorderColor) {\r\n                ctx.fillStyle = bar._internal_barBorderColor;\r\n                prevBorderColor = bar._internal_barBorderColor;\r\n            }\r\n            let left = Math.round(bar._internal_x * horizontalPixelRatio) - Math.floor(this._private__barWidth * 0.5);\r\n            // this is important to calculate right before patching left\r\n            const right = left + this._private__barWidth - 1;\r\n            const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\r\n            const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\r\n            if (prevEdge !== null) {\r\n                left = Math.max(prevEdge + 1, left);\r\n                left = Math.min(left, right);\r\n            }\r\n            if (this._private__data._internal_barSpacing * horizontalPixelRatio > 2 * borderWidth) {\r\n                fillRectInnerBorder(ctx, left, top, right - left + 1, bottom - top + 1, borderWidth);\r\n            }\r\n            else {\r\n                const width = right - left + 1;\r\n                ctx.fillRect(left, top, width, bottom - top + 1);\r\n            }\r\n            prevEdge = right;\r\n        }\r\n    }\r\n    _private__drawCandles(renderingScope, bars, visibleRange) {\r\n        if (this._private__data === null) {\r\n            return;\r\n        }\r\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\r\n        let prevBarColor = '';\r\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\r\n        for (let i = visibleRange.from; i < visibleRange.to; i++) {\r\n            const bar = bars[i];\r\n            let top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\r\n            let bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\r\n            let left = Math.round(bar._internal_x * horizontalPixelRatio) - Math.floor(this._private__barWidth * 0.5);\r\n            let right = left + this._private__barWidth - 1;\r\n            if (bar._internal_barColor !== prevBarColor) {\r\n                const barColor = bar._internal_barColor;\r\n                ctx.fillStyle = barColor;\r\n                prevBarColor = barColor;\r\n            }\r\n            if (this._private__data._internal_borderVisible) {\r\n                left += borderWidth;\r\n                top += borderWidth;\r\n                right -= borderWidth;\r\n                bottom -= borderWidth;\r\n            }\r\n            if (top > bottom) {\r\n                continue;\r\n            }\r\n            ctx.fillRect(left, top, right - left + 1, bottom - top + 1);\r\n        }\r\n    }\r\n}\r\n\r\nclass SeriesCandlesticksPaneView extends BarsPaneViewBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._internal__renderer = new PaneRendererCandlesticks();\r\n    }\r\n    _internal__createRawItem(time, bar, colorer) {\r\n        return {\r\n            ...this._internal__createDefaultItem(time, bar, colorer),\r\n            ...colorer._internal_barStyle(time),\r\n        };\r\n    }\r\n    _internal__prepareRendererData() {\r\n        const candlestickStyleProps = this._internal__series._internal_options();\r\n        this._internal__renderer._internal_setData({\r\n            _internal_bars: this._internal__items,\r\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\r\n            _internal_wickVisible: candlestickStyleProps.wickVisible,\r\n            _internal_borderVisible: candlestickStyleProps.borderVisible,\r\n            _internal_visibleRange: this._internal__itemsVisibleRange,\r\n        });\r\n    }\r\n}\r\n\r\nconst candlestickStyleDefaults = {\r\n    upColor: '#26a69a',\r\n    downColor: '#ef5350',\r\n    wickVisible: true,\r\n    borderVisible: true,\r\n    borderColor: '#378658',\r\n    borderUpColor: '#26a69a',\r\n    borderDownColor: '#ef5350',\r\n    wickColor: '#737375',\r\n    wickUpColor: '#26a69a',\r\n    wickDownColor: '#ef5350',\r\n};\r\nconst createPaneView$1 = (series, model) => new SeriesCandlesticksPaneView(series, model);\r\nconst createSeries$1 = () => {\r\n    const definition = {\r\n        type: 'Candlestick',\r\n        isBuiltIn: true,\r\n        defaultOptions: candlestickStyleDefaults,\r\n        /**\r\n         * @internal\r\n         */\r\n        _internal_createPaneView: createPaneView$1,\r\n    };\r\n    return definition;\r\n};\r\nconst candlestickSeries = createSeries$1();\r\n\r\nconst showSpacingMinimalBarWidth = 1;\r\nconst alignToMinimalWidthLimit = 4;\r\nclass PaneRendererHistogram extends BitmapCoordinatesPaneRenderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._private__data = null;\r\n        this._private__precalculatedCache = [];\r\n    }\r\n    _internal_setData(data) {\r\n        this._private__data = data;\r\n        this._private__precalculatedCache = [];\r\n    }\r\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\r\n        if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {\r\n            return;\r\n        }\r\n        if (!this._private__precalculatedCache.length) {\r\n            this._private__fillPrecalculatedCache(horizontalPixelRatio);\r\n        }\r\n        const tickWidth = Math.max(1, Math.floor(verticalPixelRatio));\r\n        const histogramBase = Math.round((this._private__data._internal_histogramBase) * verticalPixelRatio);\r\n        const topHistogramBase = histogramBase - Math.floor(tickWidth / 2);\r\n        const bottomHistogramBase = topHistogramBase + tickWidth;\r\n        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {\r\n            const item = this._private__data._internal_items[i];\r\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\r\n            const y = Math.round(item._internal_y * verticalPixelRatio);\r\n            ctx.fillStyle = item._internal_barColor;\r\n            let top;\r\n            let bottom;\r\n            if (y <= topHistogramBase) {\r\n                top = y;\r\n                bottom = bottomHistogramBase;\r\n            }\r\n            else {\r\n                top = topHistogramBase;\r\n                bottom = y - Math.floor(tickWidth / 2) + tickWidth;\r\n            }\r\n            ctx.fillRect(current._internal_left, top, current._internal_right - current._internal_left + 1, bottom - top);\r\n        }\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    _private__fillPrecalculatedCache(pixelRatio) {\r\n        if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {\r\n            this._private__precalculatedCache = [];\r\n            return;\r\n        }\r\n        const spacing = Math.ceil(this._private__data._internal_barSpacing * pixelRatio) <= showSpacingMinimalBarWidth ? 0 : Math.max(1, Math.floor(pixelRatio));\r\n        const columnWidth = Math.round(this._private__data._internal_barSpacing * pixelRatio) - spacing;\r\n        this._private__precalculatedCache = new Array(this._private__data._internal_visibleRange.to - this._private__data._internal_visibleRange.from);\r\n        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {\r\n            const item = this._private__data._internal_items[i];\r\n            // force cast to avoid ensureDefined call\r\n            const x = Math.round(item._internal_x * pixelRatio);\r\n            let left;\r\n            let right;\r\n            if (columnWidth % 2) {\r\n                const halfWidth = (columnWidth - 1) / 2;\r\n                left = x - halfWidth;\r\n                right = x + halfWidth;\r\n            }\r\n            else {\r\n                // shift pixel to left\r\n                const halfWidth = columnWidth / 2;\r\n                left = x - halfWidth;\r\n                right = x + halfWidth - 1;\r\n            }\r\n            this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from] = {\r\n                _internal_left: left,\r\n                _internal_right: right,\r\n                _internal_roundedCenter: x,\r\n                _internal_center: (item._internal_x * pixelRatio),\r\n                _internal_time: item._internal_time,\r\n            };\r\n        }\r\n        // correct positions\r\n        for (let i = this._private__data._internal_visibleRange.from + 1; i < this._private__data._internal_visibleRange.to; i++) {\r\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\r\n            const prev = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from - 1];\r\n            if (current._internal_time !== prev._internal_time + 1) {\r\n                continue;\r\n            }\r\n            if (current._internal_left - prev._internal_right !== (spacing + 1)) {\r\n                // have to align\r\n                if (prev._internal_roundedCenter > prev._internal_center) {\r\n                    // prev wasshifted to left, so add pixel to right\r\n                    prev._internal_right = current._internal_left - spacing - 1;\r\n                }\r\n                else {\r\n                    // extend current to left\r\n                    current._internal_left = prev._internal_right + spacing + 1;\r\n                }\r\n            }\r\n        }\r\n        let minWidth = Math.ceil(this._private__data._internal_barSpacing * pixelRatio);\r\n        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {\r\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\r\n            // this could happen if barspacing < 1\r\n            if (current._internal_right < current._internal_left) {\r\n                current._internal_right = current._internal_left;\r\n            }\r\n            const width = current._internal_right - current._internal_left + 1;\r\n            minWidth = Math.min(width, minWidth);\r\n        }\r\n        if (spacing > 0 && minWidth < alignToMinimalWidthLimit) {\r\n            for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {\r\n                const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\r\n                const width = current._internal_right - current._internal_left + 1;\r\n                if (width > minWidth) {\r\n                    if (current._internal_roundedCenter > current._internal_center) {\r\n                        current._internal_right -= 1;\r\n                    }\r\n                    else {\r\n                        current._internal_left += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass SeriesHistogramPaneView extends LinePaneViewBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._internal__renderer = new PaneRendererHistogram();\r\n    }\r\n    _internal__createRawItem(time, price, colorer) {\r\n        return {\r\n            ...this._internal__createRawItemBase(time, price),\r\n            ...colorer._internal_barStyle(time),\r\n        };\r\n    }\r\n    _internal__prepareRendererData() {\r\n        const data = {\r\n            _internal_items: this._internal__items,\r\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\r\n            _internal_visibleRange: this._internal__itemsVisibleRange,\r\n            _internal_histogramBase: this._internal__series._internal_priceScale()._internal_priceToCoordinate(this._internal__series._internal_options().base, ensureNotNull(this._internal__series._internal_firstValue())._internal_value),\r\n        };\r\n        this._internal__renderer._internal_setData(data);\r\n    }\r\n}\r\n\r\nconst histogramStyleDefaults = {\r\n    color: '#26a69a',\r\n    base: 0,\r\n};\r\nconst createPaneView = (series, model) => new SeriesHistogramPaneView(series, model);\r\nconst createSeries = () => {\r\n    const definition = {\r\n        type: 'Histogram',\r\n        isBuiltIn: true,\r\n        defaultOptions: histogramStyleDefaults,\r\n        /**\r\n         * @internal\r\n         */\r\n        _internal_createPaneView: createPaneView,\r\n    };\r\n    return definition;\r\n};\r\nconst histogramSeries = createSeries();\r\n\r\nclass PanePrimitiveWrapper {\r\n    constructor(pane, primitive) {\r\n        this._private__pane = pane;\r\n        this._private__primitive = primitive;\r\n        this._private__attach();\r\n    }\r\n    detach() {\r\n        this._private__pane.detachPrimitive(this._private__primitive);\r\n    }\r\n    getPane() {\r\n        return this._private__pane;\r\n    }\r\n    applyOptions(options) {\r\n        this._private__primitive._internal_applyOptions?.(options);\r\n    }\r\n    _private__attach() {\r\n        this._private__pane.attachPrimitive(this._private__primitive);\r\n    }\r\n}\r\n\r\nconst textWatermarkOptionsDefaults = {\r\n    visible: true,\r\n    horzAlign: 'center',\r\n    vertAlign: 'center',\r\n    lines: [],\r\n};\r\nconst textWatermarkLineOptionsDefaults = {\r\n    color: 'rgba(0, 0, 0, 0.5)',\r\n    fontSize: 48,\r\n    fontFamily: defaultFontFamily,\r\n    fontStyle: '',\r\n    text: '',\r\n};\r\n\r\nclass TextWatermarkRenderer {\r\n    constructor(options) {\r\n        this._private__metricsCache = new Map();\r\n        this._private__data = options;\r\n    }\r\n    draw(target) {\r\n        target.useMediaCoordinateSpace((scope) => {\r\n            if (!this._private__data.visible) {\r\n                return;\r\n            }\r\n            const { context: ctx, mediaSize } = scope;\r\n            let textHeight = 0;\r\n            for (const line of this._private__data.lines) {\r\n                if (line.text.length === 0) {\r\n                    continue;\r\n                }\r\n                ctx.font = line._internal_font;\r\n                const textWidth = this._private__metrics(ctx, line.text);\r\n                if (textWidth > mediaSize.width) {\r\n                    line._internal_zoom = mediaSize.width / textWidth;\r\n                }\r\n                else {\r\n                    line._internal_zoom = 1;\r\n                }\r\n                textHeight += line.lineHeight * line._internal_zoom;\r\n            }\r\n            let vertOffset = 0;\r\n            switch (this._private__data.vertAlign) {\r\n                case 'top':\r\n                    vertOffset = 0;\r\n                    break;\r\n                case 'center':\r\n                    vertOffset = Math.max((mediaSize.height - textHeight) / 2, 0);\r\n                    break;\r\n                case 'bottom':\r\n                    vertOffset = Math.max(mediaSize.height - textHeight, 0);\r\n                    break;\r\n            }\r\n            for (const line of this._private__data.lines) {\r\n                ctx.save();\r\n                ctx.fillStyle = line.color;\r\n                let horzOffset = 0;\r\n                switch (this._private__data.horzAlign) {\r\n                    case 'left':\r\n                        ctx.textAlign = 'left';\r\n                        horzOffset = line.lineHeight / 2;\r\n                        break;\r\n                    case 'center':\r\n                        ctx.textAlign = 'center';\r\n                        horzOffset = mediaSize.width / 2;\r\n                        break;\r\n                    case 'right':\r\n                        ctx.textAlign = 'right';\r\n                        horzOffset = mediaSize.width - 1 - line.lineHeight / 2;\r\n                        break;\r\n                }\r\n                ctx.translate(horzOffset, vertOffset);\r\n                ctx.textBaseline = 'top';\r\n                ctx.font = line._internal_font;\r\n                ctx.scale(line._internal_zoom, line._internal_zoom);\r\n                ctx.fillText(line.text, 0, line._internal_vertOffset);\r\n                ctx.restore();\r\n                vertOffset += line.lineHeight * line._internal_zoom;\r\n            }\r\n        });\r\n    }\r\n    _private__metrics(ctx, text) {\r\n        const fontCache = this._private__fontCache(ctx.font);\r\n        let result = fontCache.get(text);\r\n        if (result === undefined) {\r\n            result = ctx.measureText(text).width;\r\n            fontCache.set(text, result);\r\n        }\r\n        return result;\r\n    }\r\n    _private__fontCache(font) {\r\n        let fontCache = this._private__metricsCache.get(font);\r\n        if (fontCache === undefined) {\r\n            fontCache = new Map();\r\n            this._private__metricsCache.set(font, fontCache);\r\n        }\r\n        return fontCache;\r\n    }\r\n}\r\n\r\nclass TextWatermarkPaneView {\r\n    constructor(options) {\r\n        this._private__options = buildRendererOptions$1(options);\r\n    }\r\n    _internal_update(options) {\r\n        this._private__options = buildRendererOptions$1(options);\r\n    }\r\n    renderer() {\r\n        return new TextWatermarkRenderer(this._private__options);\r\n    }\r\n}\r\nfunction buildRendererLineOptions(lineOption) {\r\n    return {\r\n        ...lineOption,\r\n        _internal_font: makeFont(lineOption.fontSize, lineOption.fontFamily, lineOption.fontStyle),\r\n        lineHeight: lineOption.lineHeight || lineOption.fontSize * 1.2,\r\n        _internal_vertOffset: 0,\r\n        _internal_zoom: 0,\r\n    };\r\n}\r\nfunction buildRendererOptions$1(options) {\r\n    return {\r\n        ...options,\r\n        lines: options.lines.map(buildRendererLineOptions),\r\n    };\r\n}\r\n\r\nfunction mergeLineOptionsWithDefaults(options) {\r\n    return {\r\n        ...textWatermarkLineOptionsDefaults,\r\n        ...options,\r\n    };\r\n}\r\nfunction mergeOptionsWithDefaults$2(options) {\r\n    return {\r\n        ...textWatermarkOptionsDefaults,\r\n        ...options,\r\n        lines: options.lines?.map(mergeLineOptionsWithDefaults) ?? [],\r\n    };\r\n}\r\nclass TextWatermark {\r\n    constructor(options) {\r\n        this._private__options = mergeOptionsWithDefaults$2(options);\r\n        this._private__paneViews = [new TextWatermarkPaneView(this._private__options)];\r\n    }\r\n    updateAllViews() {\r\n        this._private__paneViews.forEach((pw) => pw._internal_update(this._private__options));\r\n    }\r\n    paneViews() {\r\n        return this._private__paneViews;\r\n    }\r\n    attached({ requestUpdate }) {\r\n        this._internal_requestUpdate = requestUpdate;\r\n    }\r\n    detached() {\r\n        this._internal_requestUpdate = undefined;\r\n    }\r\n    _internal_applyOptions(options) {\r\n        this._private__options = mergeOptionsWithDefaults$2({ ...this._private__options, ...options });\r\n        if (this._internal_requestUpdate) {\r\n            this._internal_requestUpdate();\r\n        }\r\n    }\r\n}\r\n/**\r\n * Creates an image watermark.\r\n *\r\n * @param pane - Target pane.\r\n * @param options - Watermark options.\r\n *\r\n * @returns Image watermark wrapper.\r\n *\r\n * @example\r\n * ```js\r\n * import { createTextWatermark } from 'lightweight-charts';\r\n *\r\n * const firstPane = chart.panes()[0];\r\n * const textWatermark = createTextWatermark(firstPane, {\r\n * \t  horzAlign: 'center',\r\n * \t  vertAlign: 'center',\r\n * \t  lines: [\r\n * \t    {\r\n * \t      text: 'Hello',\r\n * \t      color: 'rgba(255,0,0,0.5)',\r\n * \t      fontSize: 100,\r\n * \t      fontStyle: 'bold',\r\n * \t    },\r\n * \t    {\r\n * \t      text: 'This is a text watermark',\r\n * \t      color: 'rgba(0,0,255,0.5)',\r\n * \t      fontSize: 50,\r\n * \t      fontStyle: 'italic',\r\n * \t      fontFamily: 'monospace',\r\n * \t    },\r\n * \t  ],\r\n * });\r\n * // to change options\r\n * textWatermark.applyOptions({ horzAlign: 'left' });\r\n * // to remove watermark from the pane\r\n * textWatermark.detach();\r\n * ```\r\n */\r\nfunction createTextWatermark(pane, options) {\r\n    return new PanePrimitiveWrapper(pane, new TextWatermark(options));\r\n}\r\n\r\nconst imageWatermarkOptionsDefaults = {\r\n    alpha: 1,\r\n    padding: 0,\r\n};\r\n\r\nclass ImageWatermarkRenderer {\r\n    constructor(data) {\r\n        this._private__data = data;\r\n    }\r\n    draw(target) {\r\n        target.useMediaCoordinateSpace((scope) => {\r\n            const ctx = scope.context;\r\n            const pos = this._private__determinePlacement(this._private__data, scope.mediaSize);\r\n            if (!pos || !this._private__data._internal_imgElement) {\r\n                return;\r\n            }\r\n            ctx.globalAlpha = this._private__data.alpha ?? 1;\r\n            ctx.drawImage(this._private__data._internal_imgElement, pos._internal_x, pos._internal_y, pos._internal_width, pos._internal_height);\r\n        });\r\n    }\r\n    _private__determinePlacement(data, paneSize) {\r\n        const { maxHeight, maxWidth, _internal_imgHeight: imgHeight, _internal_imgWidth: imgWidth, padding } = data;\r\n        const plotCentreX = Math.round(paneSize.width / 2);\r\n        const plotCentreY = Math.round(paneSize.height / 2);\r\n        const paddingSize = padding ?? 0;\r\n        let availableWidth = paneSize.width - 2 * paddingSize;\r\n        let availableHeight = paneSize.height - 2 * paddingSize;\r\n        if (maxHeight) {\r\n            availableHeight = Math.min(availableHeight, maxHeight);\r\n        }\r\n        if (maxWidth) {\r\n            availableWidth = Math.min(availableWidth, maxWidth);\r\n        }\r\n        const scaleX = availableWidth / imgWidth;\r\n        const scaleY = availableHeight / imgHeight;\r\n        const scaleToUse = Math.min(scaleX, scaleY);\r\n        const drawWidth = imgWidth * scaleToUse;\r\n        const drawHeight = imgHeight * scaleToUse;\r\n        const x = plotCentreX - 0.5 * drawWidth;\r\n        const y = plotCentreY - 0.5 * drawHeight;\r\n        return {\r\n            _internal_x: x,\r\n            _internal_y: y,\r\n            _internal_height: drawHeight,\r\n            _internal_width: drawWidth,\r\n        };\r\n    }\r\n}\r\n\r\nclass ImageWatermarkPaneView {\r\n    constructor(options) {\r\n        this._private__image = null;\r\n        this._private__imageWidth = 0; // don't draw until loaded\r\n        this._private__imageHeight = 0;\r\n        this._private__options = options;\r\n        this._private__rendererOptions = buildRendererOptions(this._private__options, this._private__image, this._private__imageWidth, this._private__imageHeight);\r\n    }\r\n    _internal_stateUpdate(state) {\r\n        if (state._internal_imageWidth !== undefined) {\r\n            this._private__imageWidth = state._internal_imageWidth;\r\n        }\r\n        if (state._internal_imageHeight !== undefined) {\r\n            this._private__imageHeight = state._internal_imageHeight;\r\n        }\r\n        if (state._internal_image !== undefined) {\r\n            this._private__image = state._internal_image;\r\n        }\r\n        this._internal_update();\r\n    }\r\n    _internal_optionsUpdate(options) {\r\n        this._private__options = options;\r\n        this._internal_update();\r\n    }\r\n    zOrder() {\r\n        return 'bottom';\r\n    }\r\n    _internal_update() {\r\n        this._private__rendererOptions = buildRendererOptions(this._private__options, this._private__image, this._private__imageWidth, this._private__imageHeight);\r\n    }\r\n    renderer() {\r\n        return new ImageWatermarkRenderer(this._private__rendererOptions);\r\n    }\r\n}\r\nfunction buildRendererOptions(options, imgElement, imgWidth, imgHeight) {\r\n    return {\r\n        ...options,\r\n        _internal_imgElement: imgElement,\r\n        _internal_imgWidth: imgWidth,\r\n        _internal_imgHeight: imgHeight,\r\n    };\r\n}\r\n\r\nfunction mergeOptionsWithDefaults$1(options) {\r\n    return {\r\n        ...imageWatermarkOptionsDefaults,\r\n        ...options,\r\n    };\r\n}\r\nclass ImageWatermark {\r\n    constructor(imageUrl, options) {\r\n        this._private__imgElement = null;\r\n        this._private__imageUrl = imageUrl;\r\n        this._private__options = mergeOptionsWithDefaults$1(options);\r\n        this._private__paneViews = [new ImageWatermarkPaneView(this._private__options)];\r\n    }\r\n    updateAllViews() {\r\n        this._private__paneViews.forEach((pw) => pw._internal_update());\r\n    }\r\n    paneViews() {\r\n        return this._private__paneViews;\r\n    }\r\n    attached(attachedParams) {\r\n        const { requestUpdate } = attachedParams;\r\n        this._private__requestUpdate = requestUpdate;\r\n        this._private__imgElement = new Image();\r\n        this._private__imgElement.onload = () => {\r\n            const imageHeight = this._private__imgElement?.naturalHeight ?? 1;\r\n            const imageWidth = this._private__imgElement?.naturalWidth ?? 1;\r\n            this._private__paneViews.forEach((pv) => pv._internal_stateUpdate({\r\n                _internal_imageHeight: imageHeight,\r\n                _internal_imageWidth: imageWidth,\r\n                _internal_image: this._private__imgElement,\r\n            }));\r\n            if (this._private__requestUpdate) {\r\n                this._private__requestUpdate();\r\n            }\r\n        };\r\n        this._private__imgElement.src = this._private__imageUrl;\r\n    }\r\n    detached() {\r\n        this._private__requestUpdate = undefined;\r\n        this._private__imgElement = null;\r\n    }\r\n    _internal_applyOptions(options) {\r\n        this._private__options = mergeOptionsWithDefaults$1({ ...this._private__options, ...options });\r\n        this._private__updateOptions();\r\n        if (this._internal_requestUpdate) {\r\n            this._internal_requestUpdate();\r\n        }\r\n    }\r\n    _internal_requestUpdate() {\r\n        if (this._private__requestUpdate) {\r\n            this._private__requestUpdate();\r\n        }\r\n    }\r\n    _private__updateOptions() {\r\n        this._private__paneViews.forEach((pw) => pw._internal_optionsUpdate(this._private__options));\r\n    }\r\n}\r\n/**\r\n * Creates an image watermark.\r\n *\r\n * @param pane - Target pane.\r\n * @param imageUrl - Image URL.\r\n * @param options - Watermark options.\r\n *\r\n * @returns Image watermark wrapper.\r\n *\r\n * @example\r\n * ```js\r\n * import { createImageWatermark } from 'lightweight-charts';\r\n *\r\n * const firstPane = chart.panes()[0];\r\n * const imageWatermark = createImageWatermark(firstPane, '/images/my-image.png', {\r\n *   alpha: 0.5,\r\n *   padding: 20,\r\n * });\r\n * // to change options\r\n * imageWatermark.applyOptions({ padding: 10 });\r\n * // to remove watermark from the pane\r\n * imageWatermark.detach();\r\n * ```\r\n */\r\nfunction createImageWatermark(pane, imageUrl, options) {\r\n    return new PanePrimitiveWrapper(pane, new ImageWatermark(imageUrl, options));\r\n}\r\n\r\nclass SeriesPrimitiveAdapter {\r\n    constructor(series, primitive) {\r\n        this._internal__series = series;\r\n        this._internal__primitive = primitive;\r\n        this._private__attach();\r\n    }\r\n    detach() {\r\n        this._internal__series.detachPrimitive(this._internal__primitive);\r\n    }\r\n    getSeries() {\r\n        return this._internal__series;\r\n    }\r\n    applyOptions(options) {\r\n        if (this._internal__primitive && this._internal__primitive._internal_applyOptions) {\r\n            this._internal__primitive._internal_applyOptions(options);\r\n        }\r\n    }\r\n    _private__attach() {\r\n        this._internal__series.attachPrimitive(this._internal__primitive);\r\n    }\r\n}\r\n\r\nconst seriesMarkerOptionsDefaults = {\r\n    zOrder: 'normal',\r\n};\r\n\r\nfunction size(barSpacing, coeff) {\r\n    const result = Math.min(Math.max(barSpacing, 12 /* Constants.MinShapeSize */), 30 /* Constants.MaxShapeSize */) * coeff;\r\n    return ceiledOdd(result);\r\n}\r\nfunction shapeSize(shape, originalSize) {\r\n    switch (shape) {\r\n        case 'arrowDown':\r\n        case 'arrowUp':\r\n            return size(originalSize, 1);\r\n        case 'circle':\r\n            return size(originalSize, 0.8);\r\n        case 'square':\r\n            return size(originalSize, 0.7);\r\n    }\r\n}\r\nfunction calculateShapeHeight(barSpacing) {\r\n    return ceiledEven(size(barSpacing, 1));\r\n}\r\nfunction shapeMargin(barSpacing) {\r\n    return Math.max(size(barSpacing, 0.1), 3 /* Constants.MinShapeMargin */);\r\n}\r\nfunction calculateAdjustedMargin(margin, hasSide, hasInBar) {\r\n    if (hasSide) {\r\n        return margin;\r\n    }\r\n    else if (hasInBar) {\r\n        return Math.ceil(margin / 2);\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction drawArrow(up, ctx, coords, size) {\r\n    const arrowSize = shapeSize('arrowUp', size);\r\n    const halfArrowSize = ((arrowSize - 1) / 2) * coords._internal_pixelRatio;\r\n    const baseSize = ceiledOdd(size / 2);\r\n    const halfBaseSize = ((baseSize - 1) / 2) * coords._internal_pixelRatio;\r\n    ctx.beginPath();\r\n    if (up) {\r\n        ctx.moveTo(coords._internal_x - halfArrowSize, coords._internal_y);\r\n        ctx.lineTo(coords._internal_x, coords._internal_y - halfArrowSize);\r\n        ctx.lineTo(coords._internal_x + halfArrowSize, coords._internal_y);\r\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y);\r\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y + halfArrowSize);\r\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y + halfArrowSize);\r\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y);\r\n    }\r\n    else {\r\n        ctx.moveTo(coords._internal_x - halfArrowSize, coords._internal_y);\r\n        ctx.lineTo(coords._internal_x, coords._internal_y + halfArrowSize);\r\n        ctx.lineTo(coords._internal_x + halfArrowSize, coords._internal_y);\r\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y);\r\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y - halfArrowSize);\r\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y - halfArrowSize);\r\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y);\r\n    }\r\n    ctx.fill();\r\n}\r\nfunction hitTestArrow(up, centerX, centerY, size, x, y) {\r\n    const arrowSize = shapeSize('arrowUp', size);\r\n    const halfArrowSize = (arrowSize - 1) / 2;\r\n    const baseSize = ceiledOdd(size / 2);\r\n    const halfBaseSize = (baseSize - 1) / 2;\r\n    const triangleTolerance = 3;\r\n    const rectTolerance = 2;\r\n    const baseLeft = centerX - halfBaseSize - rectTolerance;\r\n    const baseRight = centerX + halfBaseSize + rectTolerance;\r\n    const baseTop = up ? centerY : centerY - halfArrowSize;\r\n    const baseBottom = up ? centerY + halfArrowSize : centerY;\r\n    if (x >= baseLeft && x <= baseRight &&\r\n        y >= baseTop - rectTolerance && y <= baseBottom + rectTolerance) {\r\n        return true;\r\n    }\r\n    const isInTriangleBounds = () => {\r\n        const headLeft = centerX - halfArrowSize - triangleTolerance;\r\n        const headRight = centerX + halfArrowSize + triangleTolerance;\r\n        const headTop = up ? centerY - halfArrowSize - triangleTolerance : centerY;\r\n        const headBottom = up ? centerY : centerY + halfArrowSize + triangleTolerance;\r\n        if (x < headLeft || x > headRight ||\r\n            y < headTop || y > headBottom) {\r\n            return false;\r\n        }\r\n        const dx = Math.abs(x - centerX);\r\n        const dy = up\r\n            ? Math.abs(y - centerY) // up arrow\r\n            : Math.abs(y - centerY); // down arrow\r\n        return dy + triangleTolerance >= dx / 2;\r\n    };\r\n    return isInTriangleBounds();\r\n}\r\n\r\nfunction drawCircle(ctx, coords, size) {\r\n    const circleSize = shapeSize('circle', size);\r\n    const halfSize = (circleSize - 1) / 2;\r\n    ctx.beginPath();\r\n    ctx.arc(coords._internal_x, coords._internal_y, halfSize * coords._internal_pixelRatio, 0, 2 * Math.PI, false);\r\n    ctx.fill();\r\n}\r\nfunction hitTestCircle(centerX, centerY, size, x, y) {\r\n    const circleSize = shapeSize('circle', size);\r\n    const tolerance = 2 + circleSize / 2;\r\n    const xOffset = centerX - x;\r\n    const yOffset = centerY - y;\r\n    const dist = Math.sqrt(xOffset * xOffset + yOffset * yOffset);\r\n    return dist <= tolerance;\r\n}\r\n\r\nfunction drawSquare(ctx, coords, size) {\r\n    const squareSize = shapeSize('square', size);\r\n    const halfSize = ((squareSize - 1) * coords._internal_pixelRatio) / 2;\r\n    const left = coords._internal_x - halfSize;\r\n    const top = coords._internal_y - halfSize;\r\n    ctx.fillRect(left, top, squareSize * coords._internal_pixelRatio, squareSize * coords._internal_pixelRatio);\r\n}\r\nfunction hitTestSquare(centerX, centerY, size, x, y) {\r\n    const squareSize = shapeSize('square', size);\r\n    const halfSize = (squareSize - 1) / 2;\r\n    const left = centerX - halfSize;\r\n    const top = centerY - halfSize;\r\n    return x >= left && x <= left + squareSize &&\r\n        y >= top && y <= top + squareSize;\r\n}\r\n\r\nfunction drawText(ctx, text, x, y, horizontalPixelRatio, verticalPixelRatio) {\r\n    ctx.save();\r\n    ctx.scale(horizontalPixelRatio, verticalPixelRatio);\r\n    ctx.fillText(text, x, y);\r\n    ctx.restore();\r\n}\r\nfunction hitTestText(textX, textY, textWidth, textHeight, x, y) {\r\n    const halfHeight = textHeight / 2;\r\n    return x >= textX && x <= textX + textWidth &&\r\n        y >= textY - halfHeight && y <= textY + halfHeight;\r\n}\r\n\r\nclass SeriesMarkersRenderer {\r\n    constructor() {\r\n        this._private__data = null;\r\n        this._private__textWidthCache = new TextWidthCache();\r\n        this._private__fontSize = -1;\r\n        this._private__fontFamily = '';\r\n        this._private__font = '';\r\n        this._private__zOrder = 'normal';\r\n    }\r\n    _internal_setData(data) {\r\n        this._private__data = data;\r\n    }\r\n    _internal_setParams(fontSize, fontFamily, zOrder) {\r\n        if (this._private__fontSize !== fontSize || this._private__fontFamily !== fontFamily) {\r\n            this._private__fontSize = fontSize;\r\n            this._private__fontFamily = fontFamily;\r\n            this._private__font = makeFont(fontSize, fontFamily);\r\n            this._private__textWidthCache._internal_reset();\r\n        }\r\n        this._private__zOrder = zOrder;\r\n    }\r\n    _internal_hitTest(x, y) {\r\n        if (this._private__data === null || this._private__data._internal_visibleRange === null) {\r\n            return null;\r\n        }\r\n        for (let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++) {\r\n            const item = this._private__data._internal_items[i];\r\n            if (item && hitTestItem(item, x, y)) {\r\n                return {\r\n                    zOrder: 'normal',\r\n                    externalId: item._internal_externalId ?? '',\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    draw(target) {\r\n        if (this._private__zOrder === 'aboveSeries') {\r\n            return;\r\n        }\r\n        target.useBitmapCoordinateSpace((scope) => {\r\n            this._internal__drawImpl(scope);\r\n        });\r\n    }\r\n    drawBackground(target) {\r\n        if (this._private__zOrder !== 'aboveSeries') {\r\n            return;\r\n        }\r\n        target.useBitmapCoordinateSpace((scope) => {\r\n            this._internal__drawImpl(scope);\r\n        });\r\n    }\r\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\r\n        if (this._private__data === null || this._private__data._internal_visibleRange === null) {\r\n            return;\r\n        }\r\n        ctx.textBaseline = 'middle';\r\n        ctx.font = this._private__font;\r\n        for (let index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++) {\r\n            const item = this._private__data._internal_items[index];\r\n            if (item._internal_text !== undefined) {\r\n                item._internal_text._internal_width = this._private__textWidthCache._internal_measureText(ctx, item._internal_text._internal_content);\r\n                item._internal_text._internal_height = this._private__fontSize;\r\n                item._internal_text._internal_x = item._internal_x - item._internal_text._internal_width / 2;\r\n            }\r\n            drawItem(item, ctx, horizontalPixelRatio, verticalPixelRatio);\r\n        }\r\n    }\r\n}\r\nfunction bitmapShapeItemCoordinates(item, horizontalPixelRatio, verticalPixelRatio) {\r\n    const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\r\n    const correction = (tickWidth % 2) / 2;\r\n    return {\r\n        _internal_x: Math.round(item._internal_x * horizontalPixelRatio) + correction,\r\n        _internal_y: item._internal_y * verticalPixelRatio,\r\n        _internal_pixelRatio: horizontalPixelRatio,\r\n    };\r\n}\r\nfunction drawItem(item, ctx, horizontalPixelRatio, verticalPixelRatio) {\r\n    ctx.fillStyle = item._internal_color;\r\n    if (item._internal_text !== undefined) {\r\n        drawText(ctx, item._internal_text._internal_content, item._internal_text._internal_x, item._internal_text._internal_y, horizontalPixelRatio, verticalPixelRatio);\r\n    }\r\n    drawShape(item, ctx, bitmapShapeItemCoordinates(item, horizontalPixelRatio, verticalPixelRatio));\r\n}\r\nfunction drawShape(item, ctx, coordinates) {\r\n    if (item._internal_size === 0) {\r\n        return;\r\n    }\r\n    switch (item._internal_shape) {\r\n        case 'arrowDown':\r\n            drawArrow(false, ctx, coordinates, item._internal_size);\r\n            return;\r\n        case 'arrowUp':\r\n            drawArrow(true, ctx, coordinates, item._internal_size);\r\n            return;\r\n        case 'circle':\r\n            drawCircle(ctx, coordinates, item._internal_size);\r\n            return;\r\n        case 'square':\r\n            drawSquare(ctx, coordinates, item._internal_size);\r\n            return;\r\n    }\r\n    ensureNever(item._internal_shape);\r\n}\r\nfunction hitTestItem(item, x, y) {\r\n    if (item._internal_text !== undefined && hitTestText(item._internal_text._internal_x, item._internal_text._internal_y, item._internal_text._internal_width, item._internal_text._internal_height, x, y)) {\r\n        return true;\r\n    }\r\n    return hitTestShape(item, x, y);\r\n}\r\nfunction hitTestShape(item, x, y) {\r\n    if (item._internal_size === 0) {\r\n        return false;\r\n    }\r\n    switch (item._internal_shape) {\r\n        case 'arrowDown':\r\n            return hitTestArrow(true, item._internal_x, item._internal_y, item._internal_size, x, y);\r\n        case 'arrowUp':\r\n            return hitTestArrow(false, item._internal_x, item._internal_y, item._internal_size, x, y);\r\n        case 'circle':\r\n            return hitTestCircle(item._internal_x, item._internal_y, item._internal_size, x, y);\r\n        case 'square':\r\n            return hitTestSquare(item._internal_x, item._internal_y, item._internal_size, x, y);\r\n    }\r\n}\r\n\r\nfunction isPriceMarker(position) {\r\n    return position === 'atPriceTop' || position === 'atPriceBottom' || position === 'atPriceMiddle';\r\n}\r\nfunction getPrice(seriesData, marker) {\r\n    if (isPriceMarker(marker.position) && marker.price !== undefined) {\r\n        return marker.price;\r\n    }\r\n    if (isValueData(seriesData)) {\r\n        return seriesData.value;\r\n    }\r\n    if (isOhlcData(seriesData)) {\r\n        if (marker.position === 'inBar') {\r\n            return seriesData.close;\r\n        }\r\n        if (marker.position === 'aboveBar') {\r\n            return seriesData.high;\r\n        }\r\n        if (marker.position === 'belowBar') {\r\n            return seriesData.low;\r\n        }\r\n    }\r\n    return;\r\n}\r\n// eslint-disable-next-line max-params, complexity\r\nfunction fillSizeAndY(rendererItem, marker, seriesData, offsets, textHeight, shapeMargin, series, chart) {\r\n    const price = getPrice(seriesData, marker);\r\n    if (price === undefined) {\r\n        return;\r\n    }\r\n    const ignoreOffset = isPriceMarker(marker.position);\r\n    const timeScale = chart.timeScale();\r\n    const sizeMultiplier = isNumber(marker.size) ? Math.max(marker.size, 0) : 1;\r\n    const shapeSize = calculateShapeHeight(timeScale.options().barSpacing) * sizeMultiplier;\r\n    const halfSize = shapeSize / 2;\r\n    rendererItem._internal_size = shapeSize;\r\n    const position = marker.position;\r\n    switch (position) {\r\n        case 'inBar':\r\n        case 'atPriceMiddle': {\r\n            rendererItem._internal_y = ensureNotNull(series.priceToCoordinate(price));\r\n            if (rendererItem._internal_text !== undefined) {\r\n                rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */);\r\n            }\r\n            return;\r\n        }\r\n        case 'aboveBar':\r\n        case 'atPriceTop': {\r\n            const offset = ignoreOffset ? 0 : offsets._internal_aboveBar;\r\n            rendererItem._internal_y = (ensureNotNull(series.priceToCoordinate(price)) - halfSize - offset);\r\n            if (rendererItem._internal_text !== undefined) {\r\n                rendererItem._internal_text._internal_y = rendererItem._internal_y - halfSize - textHeight * (0.5 + 0.1 /* Constants.TextMargin */);\r\n                offsets._internal_aboveBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */);\r\n            }\r\n            if (!ignoreOffset) {\r\n                offsets._internal_aboveBar += shapeSize + shapeMargin;\r\n            }\r\n            return;\r\n        }\r\n        case 'belowBar':\r\n        case 'atPriceBottom': {\r\n            const offset = ignoreOffset ? 0 : offsets._internal_belowBar;\r\n            rendererItem._internal_y = (ensureNotNull(series.priceToCoordinate(price)) + halfSize + offset);\r\n            if (rendererItem._internal_text !== undefined) {\r\n                rendererItem._internal_text._internal_y = (rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */));\r\n                offsets._internal_belowBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */);\r\n            }\r\n            if (!ignoreOffset) {\r\n                offsets._internal_belowBar += shapeSize + shapeMargin;\r\n            }\r\n            return;\r\n        }\r\n    }\r\n}\r\nfunction isValueData(data) {\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    return 'value' in data && typeof data.value === 'number';\r\n}\r\nfunction isOhlcData(data) {\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    return 'open' in data && 'high' in data && 'low' in data && 'close' in data;\r\n}\r\nclass SeriesMarkersPaneView {\r\n    constructor(series, chart, options) {\r\n        this._private__markers = [];\r\n        this._private__invalidated = true;\r\n        this._private__dataInvalidated = true;\r\n        this._private__renderer = new SeriesMarkersRenderer();\r\n        this._private__series = series;\r\n        this._private__chart = chart;\r\n        this._private__data = {\r\n            _internal_items: [],\r\n            _internal_visibleRange: null,\r\n        };\r\n        this._private__options = options;\r\n    }\r\n    renderer() {\r\n        if (!this._private__series.options().visible) {\r\n            return null;\r\n        }\r\n        if (this._private__invalidated) {\r\n            this._internal__makeValid();\r\n        }\r\n        const layout = this._private__chart.options()['layout'];\r\n        this._private__renderer._internal_setParams(layout.fontSize, layout.fontFamily, this._private__options.zOrder);\r\n        this._private__renderer._internal_setData(this._private__data);\r\n        return this._private__renderer;\r\n    }\r\n    _internal_setMarkers(markers) {\r\n        this._private__markers = markers;\r\n        this._internal_update('data');\r\n    }\r\n    _internal_update(updateType) {\r\n        this._private__invalidated = true;\r\n        if (updateType === 'data') {\r\n            this._private__dataInvalidated = true;\r\n        }\r\n    }\r\n    _internal_updateOptions(options) {\r\n        this._private__invalidated = true;\r\n        this._private__options = options;\r\n    }\r\n    zOrder() {\r\n        return this._private__options.zOrder === 'aboveSeries' ? 'top' : this._private__options.zOrder;\r\n    }\r\n    _internal__makeValid() {\r\n        const timeScale = this._private__chart.timeScale();\r\n        const seriesMarkers = this._private__markers;\r\n        if (this._private__dataInvalidated) {\r\n            this._private__data._internal_items = seriesMarkers.map((marker) => ({\r\n                _internal_time: marker.time,\r\n                _internal_x: 0,\r\n                _internal_y: 0,\r\n                _internal_size: 0,\r\n                _internal_shape: marker.shape,\r\n                _internal_color: marker.color,\r\n                _internal_externalId: marker.id,\r\n                _internal_internalId: marker._internal_internalId,\r\n                _internal_text: undefined,\r\n            }));\r\n            this._private__dataInvalidated = false;\r\n        }\r\n        const layoutOptions = this._private__chart.options()['layout'];\r\n        this._private__data._internal_visibleRange = null;\r\n        const visibleBars = timeScale.getVisibleLogicalRange();\r\n        if (visibleBars === null) {\r\n            return;\r\n        }\r\n        const visibleBarsRange = new RangeImpl(Math.floor(visibleBars.from), Math.ceil(visibleBars.to));\r\n        const firstValue = this._private__series.data()[0];\r\n        if (firstValue === null) {\r\n            return;\r\n        }\r\n        if (this._private__data._internal_items.length === 0) {\r\n            return;\r\n        }\r\n        let prevTimeIndex = NaN;\r\n        const shapeMargin$1 = shapeMargin(timeScale.options().barSpacing);\r\n        const offsets = {\r\n            _internal_aboveBar: shapeMargin$1,\r\n            _internal_belowBar: shapeMargin$1,\r\n        };\r\n        this._private__data._internal_visibleRange = visibleTimedValues(this._private__data._internal_items, visibleBarsRange, true);\r\n        for (let index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++) {\r\n            const marker = seriesMarkers[index];\r\n            if (marker.time !== prevTimeIndex) {\r\n                // new bar, reset stack counter\r\n                offsets._internal_aboveBar = shapeMargin$1;\r\n                offsets._internal_belowBar = shapeMargin$1;\r\n                prevTimeIndex = marker.time;\r\n            }\r\n            const rendererItem = this._private__data._internal_items[index];\r\n            rendererItem._internal_x = ensureNotNull(timeScale.logicalToCoordinate(marker.time));\r\n            if (marker.text !== undefined && marker.text.length > 0) {\r\n                rendererItem._internal_text = {\r\n                    _internal_content: marker.text,\r\n                    _internal_x: 0,\r\n                    _internal_y: 0,\r\n                    _internal_width: 0,\r\n                    _internal_height: 0,\r\n                };\r\n            }\r\n            const dataAt = this._private__series.dataByIndex(marker.time, 0 /* MismatchDirection.None */);\r\n            if (dataAt === null) {\r\n                continue;\r\n            }\r\n            fillSizeAndY(rendererItem, marker, dataAt, offsets, layoutOptions.fontSize, shapeMargin$1, this._private__series, this._private__chart);\r\n        }\r\n        this._private__invalidated = false;\r\n    }\r\n}\r\n\r\nfunction mergeOptionsWithDefaults(options) {\r\n    return {\r\n        ...seriesMarkerOptionsDefaults,\r\n        ...options,\r\n    };\r\n}\r\nclass SeriesMarkersPrimitive {\r\n    constructor(options) {\r\n        this._private__paneView = null;\r\n        this._private__markers = [];\r\n        this._private__indexedMarkers = [];\r\n        this._private__dataChangedHandler = null;\r\n        this._private__series = null;\r\n        this._private__chart = null;\r\n        this._private__autoScaleMarginsInvalidated = true;\r\n        this._private__autoScaleMargins = null;\r\n        this._private__markersPositions = null;\r\n        this._private__cachedBarSpacing = null;\r\n        this._private__recalculationRequired = true;\r\n        this._private__options = mergeOptionsWithDefaults(options);\r\n    }\r\n    attached(param) {\r\n        this._private__recalculateMarkers();\r\n        this._private__chart = param.chart;\r\n        this._private__series = param.series;\r\n        this._private__paneView = new SeriesMarkersPaneView(this._private__series, ensureNotNull(this._private__chart), this._private__options);\r\n        this._private__requestUpdate = param.requestUpdate;\r\n        this._private__series.subscribeDataChanged((scope) => this._private__onDataChanged(scope));\r\n        this._private__recalculationRequired = true;\r\n        this._internal_requestUpdate();\r\n    }\r\n    _internal_requestUpdate() {\r\n        if (this._private__requestUpdate) {\r\n            this._private__requestUpdate();\r\n        }\r\n    }\r\n    detached() {\r\n        if (this._private__series && this._private__dataChangedHandler) {\r\n            this._private__series.unsubscribeDataChanged(this._private__dataChangedHandler);\r\n        }\r\n        this._private__chart = null;\r\n        this._private__series = null;\r\n        this._private__paneView = null;\r\n        this._private__dataChangedHandler = null;\r\n    }\r\n    _internal_setMarkers(markers) {\r\n        this._private__recalculationRequired = true;\r\n        this._private__markers = markers;\r\n        this._private__recalculateMarkers();\r\n        this._private__autoScaleMarginsInvalidated = true;\r\n        this._private__markersPositions = null;\r\n        this._internal_requestUpdate();\r\n    }\r\n    _internal_markers() {\r\n        return this._private__markers;\r\n    }\r\n    paneViews() {\r\n        return this._private__paneView ? [this._private__paneView] : [];\r\n    }\r\n    updateAllViews() {\r\n        this._private__updateAllViews();\r\n    }\r\n    hitTest(x, y) {\r\n        if (this._private__paneView) {\r\n            return this._private__paneView.renderer()?._internal_hitTest(x, y) ?? null;\r\n        }\r\n        return null;\r\n    }\r\n    autoscaleInfo(startTimePoint, endTimePoint) {\r\n        if (this._private__paneView) {\r\n            const margins = this._private__getAutoScaleMargins();\r\n            if (margins) {\r\n                return {\r\n                    priceRange: null,\r\n                    margins: margins,\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    _internal_applyOptions(options) {\r\n        this._private__options = mergeOptionsWithDefaults({ ...this._private__options, ...options });\r\n        if (this._internal_requestUpdate) {\r\n            this._internal_requestUpdate();\r\n        }\r\n    }\r\n    _private__getAutoScaleMargins() {\r\n        const chart = ensureNotNull(this._private__chart);\r\n        const barSpacing = chart.timeScale().options().barSpacing;\r\n        if (this._private__autoScaleMarginsInvalidated || barSpacing !== this._private__cachedBarSpacing) {\r\n            this._private__cachedBarSpacing = barSpacing;\r\n            if (this._private__markers.length > 0) {\r\n                const shapeMargin$1 = shapeMargin(barSpacing);\r\n                const marginValue = calculateShapeHeight(barSpacing) * 1.5 + shapeMargin$1 * 2;\r\n                const positions = this._private__getMarkerPositions();\r\n                this._private__autoScaleMargins = {\r\n                    above: calculateAdjustedMargin(marginValue, positions.aboveBar, positions.inBar),\r\n                    below: calculateAdjustedMargin(marginValue, positions.belowBar, positions.inBar),\r\n                };\r\n            }\r\n            else {\r\n                this._private__autoScaleMargins = null;\r\n            }\r\n            this._private__autoScaleMarginsInvalidated = false;\r\n        }\r\n        return this._private__autoScaleMargins;\r\n    }\r\n    _private__getMarkerPositions() {\r\n        if (this._private__markersPositions === null) {\r\n            this._private__markersPositions = this._private__markers.reduce((acc, marker) => {\r\n                if (!acc[marker.position]) {\r\n                    acc[marker.position] = true;\r\n                }\r\n                return acc;\r\n            }, {\r\n                inBar: false,\r\n                aboveBar: false,\r\n                belowBar: false,\r\n                atPriceTop: false,\r\n                atPriceBottom: false,\r\n                atPriceMiddle: false,\r\n            });\r\n        }\r\n        return this._private__markersPositions;\r\n    }\r\n    _private__recalculateMarkers() {\r\n        if (!this._private__recalculationRequired || !this._private__chart || !this._private__series) {\r\n            return;\r\n        }\r\n        const timeScale = this._private__chart.timeScale();\r\n        const seriesData = this._private__series?.data();\r\n        if (timeScale.getVisibleLogicalRange() == null || !this._private__series || seriesData.length === 0) {\r\n            this._private__indexedMarkers = [];\r\n            return;\r\n        }\r\n        const firstDataIndex = timeScale.timeToIndex(ensureNotNull(seriesData[0].time), true);\r\n        this._private__indexedMarkers = this._private__markers.map((marker, index) => {\r\n            const timePointIndex = timeScale.timeToIndex(marker.time, true);\r\n            const searchMode = timePointIndex < firstDataIndex ? 1 /* MismatchDirection.NearestRight */ : -1 /* MismatchDirection.NearestLeft */;\r\n            const seriesDataByIndex = ensureNotNull(this._private__series).dataByIndex(timePointIndex, searchMode);\r\n            const finalIndex = timeScale.timeToIndex(ensureNotNull(seriesDataByIndex).time, false);\r\n            // You must explicitly define the types so that the minification build processes the field names correctly\r\n            const baseMarker = {\r\n                time: finalIndex,\r\n                position: marker.position,\r\n                shape: marker.shape,\r\n                color: marker.color,\r\n                id: marker.id,\r\n                _internal_internalId: index,\r\n                text: marker.text,\r\n                size: marker.size,\r\n                price: marker.price,\r\n                _internal_originalTime: marker.time,\r\n            };\r\n            if (marker.position === 'atPriceTop' ||\r\n                marker.position === 'atPriceBottom' ||\r\n                marker.position === 'atPriceMiddle') {\r\n                if (marker.price === undefined) {\r\n                    throw new Error(`Price is required for position ${marker.position}`);\r\n                }\r\n                return {\r\n                    ...baseMarker,\r\n                    position: marker.position, // TypeScript knows this is SeriesMarkerPricePosition\r\n                    price: marker.price,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    ...baseMarker,\r\n                    position: marker.position, // TypeScript knows this is SeriesMarkerBarPosition\r\n                    price: marker.price, // Optional for bar positions\r\n                };\r\n            }\r\n        });\r\n        this._private__recalculationRequired = false;\r\n    }\r\n    _private__updateAllViews(updateType) {\r\n        if (this._private__paneView) {\r\n            this._private__recalculateMarkers();\r\n            this._private__paneView._internal_setMarkers(this._private__indexedMarkers);\r\n            this._private__paneView._internal_updateOptions(this._private__options);\r\n            this._private__paneView._internal_update(updateType);\r\n        }\r\n    }\r\n    _private__onDataChanged(scope) {\r\n        this._private__recalculationRequired = true;\r\n        this._internal_requestUpdate();\r\n    }\r\n}\r\n\r\nclass SeriesMarkersPrimitiveWrapper extends SeriesPrimitiveAdapter {\r\n    constructor(series, primitive, markers) {\r\n        super(series, primitive);\r\n        if (markers) {\r\n            this.setMarkers(markers);\r\n        }\r\n    }\r\n    setMarkers(markers) {\r\n        this._internal__primitive._internal_setMarkers(markers);\r\n    }\r\n    markers() {\r\n        return this._internal__primitive._internal_markers();\r\n    }\r\n}\r\n/**\r\n * A function to create a series markers primitive.\r\n *\r\n * @param series - The series to which the primitive will be attached.\r\n *\r\n * @param markers - An array of markers to be displayed on the series.\r\n *\r\n * @param options - Options for the series markers plugin.\r\n *\r\n * @example\r\n * ```js\r\n * import { createSeriesMarkers } from 'lightweight-charts';\r\n *\r\n *\tconst seriesMarkers = createSeriesMarkers(\r\n *\t\tseries,\r\n *\t\t[\r\n *\t\t\t{\r\n *\t\t\t\tcolor: 'green',\r\n *\t\t\t\tposition: 'inBar',\r\n * \t\t\t\tshape: 'arrowDown',\r\n *\t\t\t\ttime: 1556880900,\r\n *\t\t\t},\r\n *\t\t]\r\n *\t);\r\n *  // and then you can modify the markers\r\n *  // set it to empty array to remove all markers\r\n *  seriesMarkers.setMarkers([]);\r\n *\r\n *  // `seriesMarkers.markers()` returns current markers\r\n * ```\r\n */\r\nfunction createSeriesMarkers(series, markers, options) {\r\n    const wrapper = new SeriesMarkersPrimitiveWrapper(series, new SeriesMarkersPrimitive(options ?? {}));\r\n    if (markers) {\r\n        wrapper.setMarkers(markers);\r\n    }\r\n    return wrapper;\r\n}\r\n\r\nclass ExpiringMarkerManager {\r\n    constructor(updateCallback) {\r\n        this._private__markers = new Map();\r\n        this._private__updateCallback = updateCallback;\r\n    }\r\n    _internal_setMarker(marker, key, timeout) {\r\n        this._internal_clearMarker(key);\r\n        if (timeout !== undefined) {\r\n            const timeoutId = window.setTimeout(() => {\r\n                this._private__markers.delete(key);\r\n                this._private__triggerUpdate();\r\n            }, timeout);\r\n            const markerWithTimeout = {\r\n                ...marker,\r\n                _internal_timeoutId: timeoutId,\r\n                _internal_expiresAt: Date.now() + timeout,\r\n            };\r\n            this._private__markers.set(key, markerWithTimeout);\r\n        }\r\n        else {\r\n            // For markers without timeout, we set timeoutId and expiresAt to undefined\r\n            this._private__markers.set(key, {\r\n                ...marker,\r\n                _internal_timeoutId: undefined,\r\n                _internal_expiresAt: undefined,\r\n            });\r\n        }\r\n        this._private__triggerUpdate();\r\n    }\r\n    _internal_clearMarker(key) {\r\n        const marker = this._private__markers.get(key);\r\n        if (marker && marker._internal_timeoutId !== undefined) {\r\n            window.clearTimeout(marker._internal_timeoutId);\r\n        }\r\n        this._private__markers.delete(key);\r\n        this._private__triggerUpdate();\r\n    }\r\n    _internal_clearAllMarkers() {\r\n        for (const [point] of this._private__markers) {\r\n            this._internal_clearMarker(point);\r\n        }\r\n    }\r\n    _internal_getMarkers() {\r\n        const now = Date.now();\r\n        const activeMarkers = [];\r\n        for (const [time, marker] of this._private__markers) {\r\n            if (!marker._internal_expiresAt || marker._internal_expiresAt > now) {\r\n                activeMarkers.push({ time: marker.time, sign: marker.sign, value: marker.value });\r\n            }\r\n            else {\r\n                this._internal_clearMarker(time);\r\n            }\r\n        }\r\n        return activeMarkers;\r\n    }\r\n    _internal_setUpdateCallback(callback) {\r\n        this._private__updateCallback = callback;\r\n    }\r\n    _private__triggerUpdate() {\r\n        if (this._private__updateCallback) {\r\n            this._private__updateCallback();\r\n        }\r\n    }\r\n}\r\n\r\nconst upDownMarkersPluginOptionDefaults = {\r\n    positiveColor: '#22AB94',\r\n    negativeColor: '#F7525F',\r\n    updateVisibilityDuration: 5000,\r\n};\r\n\r\nclass MarkersPrimitiveRenderer {\r\n    constructor(data, neutralColor, negativeColor, positiveColor) {\r\n        this._private__data = data;\r\n        this._private__neutralColor = neutralColor;\r\n        this._private__negativeColor = negativeColor;\r\n        this._private__positiveColor = positiveColor;\r\n    }\r\n    draw(target) {\r\n        target.useBitmapCoordinateSpace((scope) => {\r\n            const ctx = scope.context;\r\n            const tickWidth = Math.max(1, Math.floor(scope.horizontalPixelRatio));\r\n            const correction = (tickWidth % 2) / 2;\r\n            const rad = 4 /* Constants.Radius */ * scope.verticalPixelRatio + correction;\r\n            this._private__data.forEach((item) => {\r\n                const centreX = Math.round(item._internal_x * scope.horizontalPixelRatio) + correction;\r\n                ctx.beginPath();\r\n                const color = this._private__getColor(item._internal_sign);\r\n                ctx.fillStyle = color;\r\n                ctx.arc(centreX, item._internal_y * scope.verticalPixelRatio, rad, 0, 2 * Math.PI, false);\r\n                ctx.fill();\r\n                if (item._internal_sign) {\r\n                    ctx.strokeStyle = color;\r\n                    ctx.lineWidth = Math.floor(2 /* Constants.ArrowLineWidth */ * scope.horizontalPixelRatio);\r\n                    ctx.beginPath();\r\n                    ctx.moveTo((item._internal_x - 4.7 /* Constants.ArrowSize */) * scope.horizontalPixelRatio + correction, (item._internal_y - 7 /* Constants.ArrowOffset */ * item._internal_sign) *\r\n                        scope.verticalPixelRatio);\r\n                    ctx.lineTo(item._internal_x * scope.horizontalPixelRatio + correction, (item._internal_y -\r\n                        7 /* Constants.ArrowOffset */ * item._internal_sign -\r\n                        7 /* Constants.ArrowOffset */ * item._internal_sign * 0.5 /* Constants.VerticalScale */) *\r\n                        scope.verticalPixelRatio);\r\n                    ctx.lineTo((item._internal_x + 4.7 /* Constants.ArrowSize */) * scope.horizontalPixelRatio + correction, (item._internal_y - 7 /* Constants.ArrowOffset */ * item._internal_sign) *\r\n                        scope.verticalPixelRatio);\r\n                    ctx.stroke();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    _private__getColor(sign) {\r\n        if (sign === 0) {\r\n            return this._private__neutralColor;\r\n        }\r\n        return sign > 0 ? this._private__positiveColor : this._private__negativeColor;\r\n    }\r\n}\r\n\r\nfunction isAreaStyleOptions(opts, seriesType) {\r\n    return seriesType === 'Area';\r\n}\r\nfunction getNeutralColor(opts, seriesType) {\r\n    if (isAreaStyleOptions(opts, seriesType)) {\r\n        return opts.lineColor;\r\n    }\r\n    return opts.color;\r\n}\r\nclass MarkersPrimitivePaneView {\r\n    constructor(series, timeScale, options) {\r\n        this._private__data = [];\r\n        this._private__series = series;\r\n        this._private__timeScale = timeScale;\r\n        this._private__options = options;\r\n    }\r\n    _internal_update(markers) {\r\n        this._private__data = markers.map((marker) => {\r\n            const y = this._private__series.priceToCoordinate(marker.value);\r\n            if (y === null) {\r\n                return null;\r\n            }\r\n            const x = ensureNotNull(this._private__timeScale.timeToCoordinate(marker.time));\r\n            return {\r\n                _internal_x: x,\r\n                _internal_y: y,\r\n                _internal_sign: marker.sign,\r\n            };\r\n        })\r\n            .filter(notNull);\r\n    }\r\n    renderer() {\r\n        const options = this._private__series.options();\r\n        const seriesType = this._private__series.seriesType();\r\n        const neutralColor = getNeutralColor(options, seriesType);\r\n        return new MarkersPrimitiveRenderer(this._private__data, neutralColor, this._private__options.negativeColor, this._private__options.positiveColor);\r\n    }\r\n}\r\n\r\nfunction isLineData(item, type) {\r\n    return type === 'Line' || type === 'Area';\r\n}\r\nclass UpDownMarkersPrimitive {\r\n    constructor(options) {\r\n        this._private__chart = undefined;\r\n        this._private__series = undefined;\r\n        this._private__paneViews = [];\r\n        this._private__horzScaleBehavior = null;\r\n        this._private__managedDataPoints = new Map();\r\n        this._private__markersManager = new ExpiringMarkerManager(() => this._internal_requestUpdate());\r\n        this._private__options = {\r\n            ...upDownMarkersPluginOptionDefaults,\r\n            ...options,\r\n        };\r\n    }\r\n    _internal_applyOptions(options) {\r\n        this._private__options = {\r\n            ...this._private__options,\r\n            ...options,\r\n        };\r\n        this._internal_requestUpdate();\r\n    }\r\n    _internal_setMarkers(markers) {\r\n        this._private__markersManager._internal_clearAllMarkers();\r\n        const horzBehaviour = this._private__horzScaleBehavior;\r\n        if (!horzBehaviour) {\r\n            return;\r\n        }\r\n        markers.forEach((marker) => {\r\n            this._private__markersManager._internal_setMarker(marker, horzBehaviour.key(marker.time));\r\n        });\r\n    }\r\n    _internal_markers() {\r\n        return this._private__markersManager._internal_getMarkers();\r\n    }\r\n    _internal_requestUpdate() {\r\n        this._private__requestUpdate?.();\r\n    }\r\n    attached(params) {\r\n        const { chart, series, requestUpdate, horzScaleBehavior, } = params;\r\n        this._private__chart = chart;\r\n        this._private__series = series;\r\n        this._private__horzScaleBehavior = horzScaleBehavior;\r\n        const seriesType = this._private__series.seriesType();\r\n        if (seriesType !== 'Area' && seriesType !== 'Line') {\r\n            throw new Error('UpDownMarkersPrimitive is only supported for Area and Line series types');\r\n        }\r\n        this._private__paneViews = [\r\n            new MarkersPrimitivePaneView(this._private__series, this._private__chart.timeScale(), this._private__options),\r\n        ];\r\n        this._private__requestUpdate = requestUpdate;\r\n        this._internal_requestUpdate();\r\n    }\r\n    detached() {\r\n        this._private__chart = undefined;\r\n        this._private__series = undefined;\r\n        this._private__requestUpdate = undefined;\r\n    }\r\n    _internal_chart() {\r\n        return ensureDefined(this._private__chart);\r\n    }\r\n    _internal_series() {\r\n        return ensureDefined(this._private__series);\r\n    }\r\n    updateAllViews() {\r\n        this._private__paneViews.forEach((pw) => pw._internal_update(this._internal_markers()));\r\n    }\r\n    paneViews() {\r\n        return this._private__paneViews;\r\n    }\r\n    _internal_setData(data) {\r\n        if (!this._private__series) {\r\n            throw new Error('Primitive not attached to series');\r\n        }\r\n        const seriesType = this._private__series.seriesType();\r\n        this._private__managedDataPoints.clear();\r\n        const horzBehaviour = this._private__horzScaleBehavior;\r\n        if (horzBehaviour) {\r\n            data.forEach((d) => {\r\n                if (isFulfilledData(d) && isLineData(d, seriesType)) {\r\n                    this._private__managedDataPoints.set(horzBehaviour.key(d.time), d.value);\r\n                }\r\n            });\r\n        }\r\n        ensureDefined(this._private__series).setData(data);\r\n    }\r\n    _internal_update(data, historicalUpdate) {\r\n        if (!this._private__series || !this._private__horzScaleBehavior) {\r\n            throw new Error('Primitive not attached to series');\r\n        }\r\n        const seriesType = this._private__series.seriesType();\r\n        const horzKey = this._private__horzScaleBehavior.key(data.time);\r\n        if (isWhitespaceData(data)) {\r\n            this._private__managedDataPoints.delete(horzKey);\r\n        }\r\n        if (isFulfilledData(data) && isLineData(data, seriesType)) {\r\n            const existingPrice = this._private__managedDataPoints.get(horzKey);\r\n            if (existingPrice) {\r\n                this._private__markersManager._internal_setMarker({\r\n                    time: data.time,\r\n                    value: data.value,\r\n                    sign: getSign(data.value, existingPrice),\r\n                }, horzKey, this._private__options.updateVisibilityDuration);\r\n            }\r\n        }\r\n        ensureDefined(this._private__series).update(data, historicalUpdate);\r\n    }\r\n    _internal_clearMarkers() {\r\n        this._private__markersManager._internal_clearAllMarkers();\r\n    }\r\n}\r\nfunction getSign(newValue, oldValue) {\r\n    if (newValue === oldValue) {\r\n        return 0;\r\n    }\r\n    return newValue - oldValue > 0 ? 1 : -1;\r\n}\r\n\r\nclass SeriesUpDownMarkerPrimitiveWrapper extends SeriesPrimitiveAdapter {\r\n    setData(data) {\r\n        return this._internal__primitive._internal_setData(data);\r\n    }\r\n    update(data, historicalUpdate) {\r\n        return this._internal__primitive._internal_update(data, historicalUpdate);\r\n    }\r\n    markers() {\r\n        return this._internal__primitive._internal_markers();\r\n    }\r\n    setMarkers(markers) {\r\n        return this._internal__primitive._internal_setMarkers(markers);\r\n    }\r\n    clearMarkers() {\r\n        return this._internal__primitive._internal_clearMarkers();\r\n    }\r\n}\r\n/**\r\n * Creates and attaches the Series Up Down Markers Plugin.\r\n *\r\n * @param series - Series to which attach the Up Down Markers Plugin\r\n * @param options - options for the Up Down Markers Plugin\r\n *\r\n * @returns Api for Series Up Down Marker Plugin. {@link ISeriesUpDownMarkerPluginApi}\r\n *\r\n * @example\r\n * ```js\r\n * import { createUpDownMarkers, createChart, LineSeries } from 'lightweight-charts';\r\n *\r\n * const chart = createChart('container');\r\n * const lineSeries = chart.addSeries(LineSeries);\r\n * const upDownMarkers = createUpDownMarkers(lineSeries, {\r\n *     positiveColor: '#22AB94',\r\n *     negativeColor: '#F7525F',\r\n *     updateVisibilityDuration: 5000,\r\n * });\r\n * // to add some data\r\n * upDownMarkers.setData(\r\n *     [\r\n *         { time: '2020-02-02', value: 12.34 },\r\n *         //... more line series data\r\n *     ]\r\n * );\r\n * // ... Update some values\r\n * upDownMarkers.update({ time: '2020-02-02', value: 13.54 }, true);\r\n * // to remove plugin from the series\r\n * upDownMarkers.detach();\r\n * ```\r\n */\r\nfunction createUpDownMarkers(series, options = {}) {\r\n    const wrapper = new SeriesUpDownMarkerPrimitiveWrapper(series, new UpDownMarkersPrimitive(options));\r\n    return wrapper;\r\n}\r\n\r\n/// <reference types=\"_build-time-constants\" />\r\nconst customSeriesDefaultOptions = {\r\n    ...seriesOptionsDefaults,\r\n    ...customStyleDefaults$1,\r\n};\r\n/**\r\n * Returns the current version as a string. For example `'3.3.0'`.\r\n */\r\nfunction version() {\r\n    return \"5.0.8\";\r\n}\r\n\r\nexport { areaSeries as AreaSeries, barSeries as BarSeries, baselineSeries as BaselineSeries, candlestickSeries as CandlestickSeries, ColorType, CrosshairMode, histogramSeries as HistogramSeries, LastPriceAnimationMode, lineSeries as LineSeries, LineStyle, LineType, MismatchDirection, PriceLineSource, PriceScaleMode, TickMarkType, TrackingModeExitMode, createChart, createChartEx, createImageWatermark, createOptionsChart, createSeriesMarkers, createTextWatermark, createUpDownMarkers, createYieldCurveChart, customSeriesDefaultOptions, defaultHorzScaleBehavior, isBusinessDay, isUTCTimestamp, version };\r\n"],
  "mappings": ";AAAO,SAAS,KAAK,IAAI;AACrB,MAAI,QAAQ,GAAG,OAAO,SAAS,GAAG;AAClC,MAAI,QAAQ,GAAG;AACX,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC5D;AACA,MAAI,SAAS,GAAG;AACZ,UAAM,IAAI,MAAM,yCAAyC;AAAA,EAC7D;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AACJ;AACO,SAAS,WAAW,OAAO,QAAQ;AACtC,SAAQ,MAAM,UAAU,OAAO,SAC1B,MAAM,WAAW,OAAO;AACjC;;;AChBA,IAAI;AAAA;AAAA,EAA4B,WAAY;AACxC,aAASA,YAAW,KAAK;AACrB,UAAI,QAAQ;AACZ,WAAK,sBAAsB,WAAY;AAAE,eAAO,MAAM,qBAAqB;AAAA,MAAG;AAC9E,WAAK,4BAA4B;AACjC,WAAK,aAAa,CAAC;AACnB,WAAK,UAAU;AACf,WAAK,2BAA2B;AAAA,IACpC;AACA,IAAAA,YAAW,UAAU,UAAU,WAAY;AACvC,WAAK,6BAA6B;AAClC,WAAK,UAAU;AAAA,IACnB;AACA,WAAO,eAAeA,YAAW,WAAW,SAAS;AAAA,MACjD,KAAK,WAAY;AACb,eAAO,KAAK,QAAQ;AAAA,MACxB;AAAA,MACA,YAAY;AAAA,MACZ,cAAc;AAAA,IAClB,CAAC;AACD,IAAAA,YAAW,UAAU,YAAY,SAAU,MAAM;AAC7C,UAAI,QAAQ;AACZ,UAAI,WAAW,EAAE,KAAW;AAC5B,WAAK,WAAW,KAAK,QAAQ;AAC7B,aAAO;AAAA,QACH,aAAa,WAAY;AACrB,gBAAM,aAAa,MAAM,WAAW,OAAO,SAAU,GAAG;AAAE,mBAAO,MAAM;AAAA,UAAU,CAAC;AAAA,QACtF;AAAA,MACJ;AAAA,IACJ;AACA,IAAAA,YAAW,UAAU,6BAA6B,WAAY;AAC1D,UAAI,KAAK,8BAA8B,MAAM;AACzC,cAAM,IAAI,MAAM,0CAA0C;AAAA,MAC9D;AACA,UAAI,OAAO,KAAK,QAAQ;AACxB,WAAK,4BAA4B,KAAK,QAAQ,WAAW,wBAAwB,OAAO,MAAM,OAAO,CAAC;AAEtG,WAAK,0BAA0B,YAAY,KAAK,mBAAmB;AAAA,IACvE;AACA,IAAAA,YAAW,UAAU,+BAA+B,WAAY;AAC5D,UAAI,KAAK,8BAA8B,MAAM;AAEzC,aAAK,0BAA0B,eAAe,KAAK,mBAAmB;AACtE,aAAK,4BAA4B;AAAA,MACrC;AAAA,IACJ;AACA,IAAAA,YAAW,UAAU,+BAA+B,WAAY;AAC5D,WAAK,6BAA6B;AAClC,WAAK,2BAA2B;AAAA,IACpC;AACA,IAAAA,YAAW,UAAU,uBAAuB,WAAY;AACpD,UAAI,QAAQ;AACZ,WAAK,WAAW,QAAQ,SAAU,UAAU;AAAE,eAAO,SAAS,KAAK,MAAM,QAAQ,gBAAgB;AAAA,MAAG,CAAC;AACrG,WAAK,6BAA6B;AAAA,IACtC;AACA,WAAOA;AAAA,EACX,EAAE;AAAA;AACK,SAAS,iBAAiB,KAAK;AAClC,SAAO,IAAI,WAAW,GAAG;AAC7B;;;ACzDA,IAAI;AAAA;AAAA,EAA8C,WAAY;AAC1D,aAASC,8BAA6B,eAAe,qBAAqB,SAAS;AAC/E,UAAI;AACJ,WAAK,iBAAiB;AACtB,WAAK,8BAA8B,CAAC;AACpC,WAAK,uBAAuB;AAC5B,WAAK,uCAAuC,CAAC;AAE7C,WAAK,8BAA8B;AAEnC,WAAK,+BAA+B;AACpC,WAAK,iBAAiB;AACtB,WAAK,2BAA2B,KAAK;AAAA,QACjC,OAAO,KAAK,eAAe;AAAA,QAC3B,QAAQ,KAAK,eAAe;AAAA,MAChC,CAAC;AACD,WAAK,uBAAuB,wBAAwB,QAAQ,wBAAwB,SAAS,sBAAuB,SAAUC,OAAM;AAAE,eAAOA;AAAA,MAAM;AACnJ,WAAK,wBAAwB,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,yBAAyB,QAAQ,OAAO,SAAS,KAAK;AAClJ,WAAK,uBAAuB;AAAA,IAEhC;AACA,IAAAD,8BAA6B,UAAU,UAAU,WAAY;AACzD,UAAI,IAAI;AACR,UAAI,KAAK,mBAAmB,MAAM;AAC9B,cAAM,IAAI,MAAM,oBAAoB;AAAA,MACxC;AACA,OAAC,KAAK,KAAK,kCAAkC,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW;AAC5F,WAAK,+BAA+B;AACpC,OAAC,KAAK,KAAK,iCAAiC,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ;AACxF,WAAK,8BAA8B;AACnC,WAAK,qCAAqC,SAAS;AACnD,WAAK,4BAA4B,SAAS;AAC1C,WAAK,iBAAiB;AAAA,IAC1B;AACA,WAAO,eAAeA,8BAA6B,WAAW,iBAAiB;AAAA,MAC3E,KAAK,WAAY;AACb,YAAI,KAAK,mBAAmB,MAAM;AAC9B,gBAAM,IAAI,MAAM,oBAAoB;AAAA,QACxC;AACA,eAAO,KAAK;AAAA,MAChB;AAAA,MACA,YAAY;AAAA,MACZ,cAAc;AAAA,IAClB,CAAC;AACD,WAAO,eAAeA,8BAA6B,WAAW,2BAA2B;AAAA,MACrF,KAAK,WAAY;AACb,eAAO,KAAK;AAAA,MAChB;AAAA,MACA,YAAY;AAAA,MACZ,cAAc;AAAA,IAClB,CAAC;AACD,WAAO,eAAeA,8BAA6B,WAAW,cAAc;AAAA,MACxE,KAAK,WAAY;AACb,eAAO,KAAK;AAAA,UACR,OAAO,KAAK,cAAc;AAAA,UAC1B,QAAQ,KAAK,cAAc;AAAA,QAC/B,CAAC;AAAA,MACL;AAAA,MACA,YAAY;AAAA,MACZ,cAAc;AAAA,IAClB,CAAC;AAKD,IAAAA,8BAA6B,UAAU,sBAAsB,SAAU,YAAY;AAC/E,WAAK,2BAA2B,KAAK,UAAU;AAC/C,WAAK,cAAc,MAAM,QAAQ,GAAG,OAAO,KAAK,yBAAyB,OAAO,IAAI;AACpF,WAAK,cAAc,MAAM,SAAS,GAAG,OAAO,KAAK,yBAAyB,QAAQ,IAAI;AACtF,WAAK,sBAAsB;AAAA,IAC/B;AACA,IAAAA,8BAA6B,UAAU,6BAA6B,SAAU,UAAU;AACpF,WAAK,4BAA4B,KAAK,QAAQ;AAAA,IAClD;AACA,IAAAA,8BAA6B,UAAU,+BAA+B,SAAU,UAAU;AACtF,WAAK,8BAA8B,KAAK,4BAA4B,OAAO,SAAU,GAAG;AAAE,eAAO,MAAM;AAAA,MAAU,CAAC;AAAA,IACtH;AACA,WAAO,eAAeA,8BAA6B,WAAW,uBAAuB;AAAA,MACjF,KAAK,WAAY;AACb,eAAO,KAAK;AAAA,MAChB;AAAA,MACA,YAAY;AAAA,MACZ,cAAc;AAAA,IAClB,CAAC;AACD,IAAAA,8BAA6B,UAAU,sCAAsC,SAAU,UAAU;AAC7F,WAAK,qCAAqC,KAAK,QAAQ;AAAA,IAC3D;AACA,IAAAA,8BAA6B,UAAU,wCAAwC,SAAU,UAAU;AAC/F,WAAK,uCAAuC,KAAK,qCAAqC,OAAO,SAAU,GAAG;AAAE,eAAO,MAAM;AAAA,MAAU,CAAC;AAAA,IACxI;AACA,IAAAA,8BAA6B,UAAU,2BAA2B,WAAY;AAC1E,UAAI,KAAK,yBAAyB,MAAM;AAEpC;AAAA,MACJ;AACA,UAAI,mBAAmB,KAAK;AAC5B,WAAK,uBAAuB;AAC5B,WAAK,cAAc,gBAAgB;AACnC,WAAK,gCAAgC,kBAAkB,KAAK,oBAAoB;AAAA,IACpF;AACA,IAAAA,8BAA6B,UAAU,gBAAgB,SAAU,SAAS;AACtE,UAAI,UAAU,KAAK;AACnB,UAAI,WAAW,SAAS,OAAO,GAAG;AAC9B;AAAA,MACJ;AACA,WAAK,cAAc,QAAQ,QAAQ;AACnC,WAAK,cAAc,SAAS,QAAQ;AACpC,WAAK,uBAAuB,SAAS,OAAO;AAAA,IAChD;AACA,IAAAA,8BAA6B,UAAU,yBAAyB,SAAU,SAAS,SAAS;AACxF,UAAI,QAAQ;AACZ,WAAK,4BAA4B,QAAQ,SAAU,UAAU;AAAE,eAAO,SAAS,KAAK,OAAO,SAAS,OAAO;AAAA,MAAG,CAAC;AAAA,IACnH;AACA,IAAAA,8BAA6B,UAAU,wBAAwB,SAAU,SAAS;AAC9E,UAAI,mBAAmB,KAAK;AAC5B,UAAI,eAAe,KAAK,KAAK,qBAAqB,SAAS,KAAK,wBAAwB,CAAC;AACzF,UAAI,mBAAmB,WAAW,KAAK,YAAY,YAAY,IAAI,OAAO;AAC1E,UAAI,qBAAqB,QAAQ,qBAAqB,MAAM;AACxD;AAAA,MACJ;AACA,UAAI,qBAAqB,QAAQ,qBAAqB,QAC/C,WAAW,kBAAkB,gBAAgB,GAAG;AACnD;AAAA,MACJ;AACA,WAAK,uBAAuB;AAC5B,WAAK,gCAAgC,kBAAkB,gBAAgB;AAAA,IAC3E;AACA,IAAAA,8BAA6B,UAAU,kCAAkC,SAAU,SAAS,SAAS;AACjG,UAAI,QAAQ;AACZ,WAAK,qCAAqC,QAAQ,SAAU,UAAU;AAAE,eAAO,SAAS,KAAK,OAAO,SAAS,OAAO;AAAA,MAAG,CAAC;AAAA,IAC5H;AACA,IAAAA,8BAA6B,UAAU,yBAAyB,WAAY;AACxE,UAAI,QAAQ;AACZ,UAAI,CAAC,KAAK,sBAAsB;AAC5B,aAAK,gCAAgC;AACrC;AAAA,MACJ;AACA,uCAAiC,EAC5B,KAAK,SAAU,aAAa;AAC7B,eAAO,cACH,MAAM,oBAAoB,IAC1B,MAAM,gCAAgC;AAAA,MAC9C,CAAC;AAAA,IACL;AAEA,IAAAA,8BAA6B,UAAU,kCAAkC,WAAY;AACjF,UAAI,QAAQ;AACZ,UAAI,KAAK,mBAAmB,MAAM;AAE9B;AAAA,MACJ;AACA,UAAI,MAAM,oBAAoB,KAAK,cAAc;AACjD,UAAI,QAAQ,MAAM;AACd,cAAM,IAAI,MAAM,yCAAyC;AAAA,MAC7D;AACA,WAAK,8BAA8B,iBAAiC,GAAG;AACvE,WAAK,4BAA4B,UAAU,WAAY;AAAE,eAAO,MAAM,sBAAsB;AAAA,MAAG,CAAC;AAChG,WAAK,sBAAsB;AAAA,IAC/B;AACA,IAAAA,8BAA6B,UAAU,wBAAwB,WAAY;AACvE,UAAI,IAAI;AACR,UAAI,KAAK,mBAAmB,MAAM;AAE9B;AAAA,MACJ;AACA,UAAI,MAAM,oBAAoB,KAAK,cAAc;AACjD,UAAI,QAAQ,MAAM;AACd;AAAA,MACJ;AACA,UAAI,SAAS,MAAM,KAAK,KAAK,iCAAiC,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,QAAQ,OAAO,SAAS,KAAK,IAAI;AAC9I,UAAI,cAAc,KAAK,eAAe,eAAe;AACrD,UAAI;AAAA;AAAA,QAEJ,YAAY,CAAC,MAAM,SACf,oBAAoB,YAAY,CAAC,GAAG,KAAK,IACzC,KAAK;AAAA,UACD,OAAO,KAAK,yBAAyB,QAAQ;AAAA,UAC7C,QAAQ,KAAK,yBAAyB,SAAS;AAAA,QACnD,CAAC;AAAA;AACL,WAAK,sBAAsB,OAAO;AAAA,IACtC;AAEA,IAAAA,8BAA6B,UAAU,sBAAsB,WAAY;AACrE,UAAI,QAAQ;AACZ,UAAI,KAAK,mBAAmB,MAAM;AAE9B;AAAA,MACJ;AACA,WAAK,+BAA+B,IAAI,eAAe,SAAU,SAAS;AACtE,YAAI,QAAQ,QAAQ,KAAK,SAAUE,QAAO;AAAE,iBAAOA,OAAM,WAAW,MAAM;AAAA,QAAgB,CAAC;AAC3F,YAAI,CAAC,SAAS,CAAC,MAAM,6BAA6B,CAAC,MAAM,0BAA0B,CAAC,GAAG;AACnF;AAAA,QACJ;AACA,YAAI,YAAY,MAAM,0BAA0B,CAAC;AACjD,YAAI,UAAU,KAAK;AAAA,UACf,OAAO,UAAU;AAAA,UACjB,QAAQ,UAAU;AAAA,QACtB,CAAC;AACD,cAAM,sBAAsB,OAAO;AAAA,MACvC,CAAC;AACD,WAAK,6BAA6B,QAAQ,KAAK,gBAAgB,EAAE,KAAK,2BAA2B,CAAC;AAAA,IACtG;AACA,WAAOF;AAAA,EACX,EAAE;AAAA;AACK,SAAS,OAAO,eAAe,QAAQ;AAC1C,MAAI,OAAO,SAAS,4BAA4B;AAC5C,WAAO,IAAI,6BAA6B,eAAe,OAAO,WAAW,OAAO,OAAO;AAAA,EAC3F;AACA,QAAM,IAAI,MAAM,4BAA4B;AAChD;AACA,SAAS,oBAAoB,eAAe;AAIxC,SAAO,cAAc,cAAc;AACvC;AACA,SAAS,mCAAmC;AACxC,SAAO,IAAI,QAAQ,SAAU,SAAS;AAClC,QAAI,KAAK,IAAI,eAAe,SAAU,SAAS;AAC3C,cAAQ,QAAQ,MAAM,SAAU,OAAO;AAAE,eAAO,+BAA+B;AAAA,MAAO,CAAC,CAAC;AACxF,SAAG,WAAW;AAAA,IAClB,CAAC;AACD,OAAG,QAAQ,SAAS,MAAM,EAAE,KAAK,2BAA2B,CAAC;AAAA,EACjE,CAAC,EACI,MAAM,WAAY;AAAE,WAAO;AAAA,EAAO,CAAC;AAC5C;AACA,SAAS,oBAAoB,YAAY,OAAO;AAC5C,SAAO,KAAK;AAAA,IACR,OAAO,KAAK,MAAM,WAAW,OAAO,QAAQ,WAAW,QAAQ,KAAK,IAChE,KAAK,MAAM,WAAW,OAAO,KAAK;AAAA,IACtC,QAAQ,KAAK,MAAM,WAAW,MAAM,QAAQ,WAAW,SAAS,KAAK,IACjE,KAAK,MAAM,WAAW,MAAM,KAAK;AAAA,EACzC,CAAC;AACL;;;ACxOA,IAAI;AAAA;AAAA,EAAyC,WAAY;AACrD,aAASG,yBAAwB,SAAS,WAAW,YAAY;AAC7D,UAAI,UAAU,UAAU,KAAK,UAAU,WAAW,GAAG;AACjD,cAAM,IAAI,UAAU,kFAAkF;AAAA,MAC1G;AACA,WAAK,aAAa;AAElB,UAAI,WAAW,UAAU,KAAK,WAAW,WAAW,GAAG;AACnD,cAAM,IAAI,UAAU,8FAA8F;AAAA,MACtH;AACA,WAAK,cAAc;AACnB,WAAK,WAAW;AAAA,IACpB;AACA,IAAAA,yBAAwB,UAAU,0BAA0B,SAAU,GAAG;AACrE,UAAI;AACA,aAAK,SAAS,KAAK;AAEnB,aAAK,SAAS,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3C,aAAK,SAAS,MAAM,KAAK,uBAAuB,KAAK,mBAAmB;AACxE,eAAO,EAAE;AAAA,UACL,SAAS,KAAK;AAAA,UACd,WAAW,KAAK;AAAA,QACpB,CAAC;AAAA,MACL,UACA;AACI,aAAK,SAAS,QAAQ;AAAA,MAC1B;AAAA,IACJ;AACA,IAAAA,yBAAwB,UAAU,2BAA2B,SAAU,GAAG;AACtE,UAAI;AACA,aAAK,SAAS,KAAK;AAEnB,aAAK,SAAS,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3C,eAAO,EAAE;AAAA,UACL,SAAS,KAAK;AAAA,UACd,WAAW,KAAK;AAAA,UAChB,YAAY,KAAK;AAAA,UACjB,sBAAsB,KAAK;AAAA,UAC3B,oBAAoB,KAAK;AAAA,QAC7B,CAAC;AAAA,MACL,UACA;AACI,aAAK,SAAS,QAAQ;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO,eAAeA,yBAAwB,WAAW,yBAAyB;AAAA,MAC9E,KAAK,WAAY;AACb,eAAO,KAAK,YAAY,QAAQ,KAAK,WAAW;AAAA,MACpD;AAAA,MACA,YAAY;AAAA,MACZ,cAAc;AAAA,IAClB,CAAC;AACD,WAAO,eAAeA,yBAAwB,WAAW,uBAAuB;AAAA,MAC5E,KAAK,WAAY;AACb,eAAO,KAAK,YAAY,SAAS,KAAK,WAAW;AAAA,MACrD;AAAA,MACA,YAAY;AAAA,MACZ,cAAc;AAAA,IAClB,CAAC;AACD,WAAOA;AAAA,EACX,EAAE;AAAA;AAiBK,SAAS,iCAAiC,SAAS,gBAAgB;AACtE,MAAI,YAAY,QAAQ;AACxB,MAAI,UAAU,UAAU,KAAK,UAAU,WAAW,GAAG;AACjD,WAAO;AAAA,EACX;AACA,MAAI,aAAa,QAAQ;AACzB,MAAI,WAAW,UAAU,KAAK,WAAW,WAAW,GAAG;AACnD,WAAO;AAAA,EACX;AACA,MAAI,UAAU,QAAQ,cAAc,WAAW,MAAM,cAAc;AACnE,MAAI,YAAY,MAAM;AAClB,WAAO;AAAA,EACX;AACA,SAAO,IAAI,wBAAwB,SAAS,WAAW,UAAU;AACrE;;;ACtFA,IAAM,wBAAwB;AAAA,EAC1B,OAAO;AACX;AACA,IAAM,wBAAwB;AAAA,EAC1B,OAAO;AAAA,EACP,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,eAAe;AAAA,EACf,eAAe;AAAA,EACf,aAAa;AAAA,IACT,MAAM;AAAA,IACN,WAAW;AAAA,IACX,SAAS;AAAA,EACb;AACJ;AAKA,IAAI;AAAA,CACH,SAAUC,WAAU;AAIjB,EAAAA,UAASA,UAAS,QAAQ,IAAI,CAAC,IAAI;AAInC,EAAAA,UAASA,UAAS,WAAW,IAAI,CAAC,IAAI;AAItC,EAAAA,UAASA,UAAS,QAAQ,IAAI,CAAC,IAAI;AACvC,GAAG,aAAa,WAAW,CAAC,EAAE;AAI9B,IAAI;AAAA,CACH,SAAUC,YAAW;AAIlB,EAAAA,WAAUA,WAAU,OAAO,IAAI,CAAC,IAAI;AAIpC,EAAAA,WAAUA,WAAU,QAAQ,IAAI,CAAC,IAAI;AAIrC,EAAAA,WAAUA,WAAU,QAAQ,IAAI,CAAC,IAAI;AAIrC,EAAAA,WAAUA,WAAU,aAAa,IAAI,CAAC,IAAI;AAI1C,EAAAA,WAAUA,WAAU,cAAc,IAAI,CAAC,IAAI;AAC/C,GAAG,cAAc,YAAY,CAAC,EAAE;AAChC,SAAS,aAAa,KAAK,OAAO;AAC9B,QAAM,eAAe;AAAA,IACjB;AAAA,MAAC;AAAA;AAAA,IAAuB,GAAG,CAAC;AAAA,IAC5B;AAAA,MAAC;AAAA;AAAA,IAAwB,GAAG,CAAC,IAAI,WAAW,IAAI,SAAS;AAAA,IACzD;AAAA,MAAC;AAAA;AAAA,IAAwB,GAAG,CAAC,IAAI,IAAI,WAAW,IAAI,IAAI,SAAS;AAAA,IACjE;AAAA,MAAC;AAAA;AAAA,IAA6B,GAAG,CAAC,IAAI,IAAI,WAAW,IAAI,IAAI,SAAS;AAAA,IACtE;AAAA,MAAC;AAAA;AAAA,IAA8B,GAAG,CAAC,IAAI,WAAW,IAAI,IAAI,SAAS;AAAA,EACvE;AACA,QAAM,cAAc,aAAa,KAAK;AACtC,MAAI,YAAY,WAAW;AAC/B;AACA,SAAS,mBAAmB,KAAK,GAAG,MAAM,OAAO;AAC7C,MAAI,UAAU;AACd,QAAM,aAAc,IAAI,YAAY,IAAK,MAAM;AAC/C,MAAI,OAAO,MAAM,IAAI,UAAU;AAC/B,MAAI,OAAO,OAAO,IAAI,UAAU;AAChC,MAAI,OAAO;AACf;AACA,SAAS,iBAAiB,KAAK,GAAG,KAAK,QAAQ;AAC3C,MAAI,UAAU;AACd,QAAM,aAAc,IAAI,YAAY,IAAK,MAAM;AAC/C,MAAI,OAAO,IAAI,YAAY,GAAG;AAC9B,MAAI,OAAO,IAAI,YAAY,MAAM;AACjC,MAAI,OAAO;AACf;AACA,SAAS,cAAc,KAAK,cAAc;AACtC,MAAI,KAAK;AACT,MAAI,IAAI,YAAY,GAAG;AACnB,QAAI,UAAU,KAAK,GAAG;AAAA,EAC1B;AACA,eAAa;AACb,MAAI,QAAQ;AAChB;AAQA,SAAS,OAAO,WAAW,SAAS;AAChC,MAAI,CAAC,WAAW;AACZ,UAAM,IAAI,MAAM,sBAAsB,UAAU,OAAO,UAAU,GAAG;AAAA,EACxE;AACJ;AACA,SAAS,cAAc,OAAO;AAC1B,MAAI,UAAU,QAAW;AACrB,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACxC;AACA,SAAO;AACX;AACA,SAAS,cAAc,OAAO;AAC1B,MAAI,UAAU,MAAM;AAChB,UAAM,IAAI,MAAM,eAAe;AAAA,EACnC;AACA,SAAO;AACX;AACA,SAAS,OAAO,OAAO;AACnB,SAAO,cAAc,cAAc,KAAK,CAAC;AAC7C;AAIA,SAAS,YAAY,OAAO;AAAE;AAE9B,IAAM,WAAN,MAAe;AAAA,EACX,cAAc;AACV,SAAK,sBAAsB,CAAC;AAAA,EAChC;AAAA,EACA,oBAAoB,UAAU,cAAc,YAAY;AACpD,UAAM,WAAW;AAAA,MACb,oBAAoB;AAAA,MACpB,wBAAwB;AAAA,MACxB,sBAAsB,eAAe;AAAA,IACzC;AACA,SAAK,oBAAoB,KAAK,QAAQ;AAAA,EAC1C;AAAA,EACA,sBAAsB,UAAU;AAC5B,UAAM,QAAQ,KAAK,oBAAoB,UAAU,CAAC,aAAa,aAAa,SAAS,kBAAkB;AACvG,QAAI,QAAQ,IAAI;AACZ,WAAK,oBAAoB,OAAO,OAAO,CAAC;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,yBAAyB,cAAc;AACnC,SAAK,sBAAsB,KAAK,oBAAoB,OAAO,CAAC,aAAa,SAAS,2BAA2B,YAAY;AAAA,EAC7H;AAAA,EACA,eAAe,QAAQ,QAAQ,QAAQ;AACnC,UAAM,oBAAoB,CAAC,GAAG,KAAK,mBAAmB;AACtD,SAAK,sBAAsB,KAAK,oBAAoB,OAAO,CAAC,aAAa,CAAC,SAAS,oBAAoB;AACvG,sBAAkB,QAAQ,CAAC,aAAa,SAAS,mBAAmB,QAAQ,QAAQ,MAAM,CAAC;AAAA,EAC/F;AAAA,EACA,yBAAyB;AACrB,WAAO,KAAK,oBAAoB,SAAS;AAAA,EAC7C;AAAA,EACA,oBAAoB;AAChB,SAAK,sBAAsB,CAAC;AAAA,EAChC;AACJ;AAGA,SAAS,MAAM,QAAQ,SAAS;AAC5B,aAAW,OAAO,SAAS;AAEvB,eAAW,KAAK,KAAK;AACjB,UAAI,IAAI,CAAC,MAAM,UACX,CAAC,OAAO,UAAU,eAAe,KAAK,KAAK,CAAC,KAC5C,CAAC,aAAa,eAAe,WAAW,EAAE,SAAS,CAAC,GAAG;AACvD;AAAA,MACJ;AACA,UAAI,aAAa,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,UAAa,MAAM,QAAQ,IAAI,CAAC,CAAC,GAAG;AAC7E,YAAI,CAAC,IAAI,IAAI,CAAC;AAAA,MAClB,OACK;AAED,cAAM,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,SAAS,OAAO;AACrB,SAAQ,OAAO,UAAU,YAAc,SAAS,KAAK;AACzD;AACA,SAAS,UAAU,OAAO;AACtB,SAAQ,OAAO,UAAU,YAAe,QAAQ,MAAO;AAC3D;AACA,SAAS,SAAS,OAAO;AACrB,SAAO,OAAO,UAAU;AAC5B;AACA,SAAS,UAAU,OAAO;AACtB,SAAO,OAAO,UAAU;AAC5B;AACA,SAAS,MAAM,QAAQ;AAEnB,QAAM,IAAI;AACV,MAAI,CAAC,KAAK,aAAa,OAAO,GAAG;AAE7B,WAAO;AAAA,EACX;AAEA,MAAI;AACJ,MAAI,MAAM,QAAQ,CAAC,GAAG;AAClB,QAAI,CAAC;AAAA,EACT,OACK;AACD,QAAI,CAAC;AAAA,EACT;AACA,MAAI;AACJ,MAAI;AAEJ,OAAK,KAAK,GAAG;AAET,QAAI,EAAE,eAAe,CAAC,GAAG;AAErB,UAAI,EAAE,CAAC;AACP,UAAI,KAAK,aAAa,OAAO,GAAG;AAE5B,UAAE,CAAC,IAAI,MAAM,CAAC;AAAA,MAClB,OACK;AAED,UAAE,CAAC,IAAI;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAEA,SAAO;AACX;AACA,SAAS,QAAQ,GAAG;AAChB,SAAO,MAAM;AACjB;AACA,SAAS,gBAAgB,GAAG;AACxB,SAAQ,MAAM,OAAQ,SAAY;AACtC;AAMA,IAAM,oBAAoB;AAU1B,SAAS,SAASC,OAAM,QAAQ,OAAO;AACnC,MAAI,UAAU,QAAW;AACrB,YAAQ,GAAG,KAAK;AAAA,EACpB,OACK;AACD,YAAQ;AAAA,EACZ;AACA,MAAI,WAAW,QAAW;AACtB,aAAS;AAAA,EACb;AACA,SAAO,GAAG,KAAK,GAAGA,KAAI,MAAM,MAAM;AACtC;AAEA,IAAM,mCAAN,MAAuC;AAAA,EACnC,YAAY,YAAY;AACpB,SAAK,4BAA4B;AAAA,MAC7B,sBAAsB;AAAA,MACtB,sBAAsB;AAAA,MACtB,oBAAoB;AAAA,MACpB,gBAAgB;AAAA,MAChB,sBAAsB;AAAA,MACtB,iBAAiB;AAAA,MACjB,+BAA+B;AAAA,MAC/B,yBAAyB;AAAA,MACzB,wBAAwB;AAAA,MACxB,wBAAwB;AAAA,MACxB,sBAAsB;AAAA,MACtB,0BAA0B;AAAA,IAC9B;AACA,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,oBAAoB;AAChB,UAAM,kBAAkB,KAAK;AAC7B,UAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAM,oBAAoB,KAAK,qBAAqB;AACpD,QAAI,gBAAgB,uBAAuB,mBAAmB,gBAAgB,yBAAyB,mBAAmB;AACtH,sBAAgB,qBAAqB;AACrC,sBAAgB,uBAAuB;AACvC,sBAAgB,iBAAiB,SAAS,iBAAiB,iBAAiB;AAC5E,sBAAgB,uBAAuB,MAAM,KAAK;AAClD,sBAAgB,0BAA0B,gBAAgB;AAC1D,sBAAgB,yBAAyB,kBAAkB,KAAK,gBAAgB;AAChF,sBAAgB,yBAAyB,kBAAkB,KAAK,gBAAgB;AAChF,sBAAgB,2BAA2B;AAAA,IAC/C;AACA,oBAAgB,kBAAkB,KAAK,oBAAoB;AAC3D,oBAAgB,gCAAgC,KAAK,8BAA8B;AACnF,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,qBAAqB,kBAAkB,EAAE,QAAQ,EAAE;AAAA,EACnE;AAAA,EACA,gCAAgC;AAC5B,WAAO,KAAK,qBAAqB,6BAA6B;AAAA,EAClE;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK,qBAAqB,kBAAkB,EAAE,QAAQ,EAAE;AAAA,EACnE;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK,qBAAqB,kBAAkB,EAAE,QAAQ,EAAE;AAAA,EACnE;AACJ;AAEA,SAAS,sBAAsB,WAAW;AACtC,MAAI,YAAY,GAAG;AACf,WAAO;AAAA,EACX;AACA,MAAI,YAAY,KAAK;AACjB,WAAO;AAAA,EACX;AAEA,SAAQ,KAAK,MAAM,SAAS,KAAK;AACrC;AACA,SAAS,wBAAwB,WAAW;AACxC,MAAI,aAAa,KAAK,YAAY,GAAG;AACjC,WAAO,KAAK,IAAI,KAAK,IAAI,WAAW,CAAC,GAAG,CAAC;AAAA,EAC7C;AAEA,SAAQ,KAAK,MAAM,YAAY,GAAK,IAAI;AAC5C;AACA,SAAS,gBAAgB,UAAU;AAG/B,QAAM,8BAA8B;AACpC,QAAM,gCAAgC;AACtC,QAAM,+BAA+B;AACrC,SAAQ,8BAA8B,SAAS,CAAC,IAC5C,gCAAgC,SAAS,CAAC,IAC1C,+BAA+B,SAAS,CAAC;AACjD;AAUA,SAAS,uBAAuB,OAAO;AACnC,QAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,UAAQ,MAAM,UAAU;AAIxB,WAAS,KAAK,YAAY,OAAO;AACjC,UAAQ,MAAM,QAAQ;AACtB,QAAM,WAAW,OAAO,iBAAiB,OAAO,EAAE;AAClD,WAAS,KAAK,YAAY,OAAO;AACjC,SAAO;AACX;AACA,IAAM,cAAN,MAAkB;AAAA,EACd,YAAY,eAAe,cAAc;AACrC,SAAK,sBAAsB,oBAAI,IAAI;AACnC,SAAK,0BAA0B;AAC/B,QAAI,cAAc;AACd,WAAK,sBAAsB;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,qBAAqB,OAAO,OAAO;AAE/B,QAAI,UAAU,eAAe;AACzB,aAAO;AAAA,IACX;AACA,UAAM,aAAa,KAAK,qBAAqB,KAAK;AAClD,UAAM,cAAc,WAAW,CAAC;AAChC,WAAO,QAAQ,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,KAAK,QAAQ,WAAW;AAAA,EAC5F;AAAA,EACA,iCAAiC,YAAY;AACzC,UAAM,OAAO,KAAK,qBAAqB,UAAU;AACjD,WAAO;AAAA,MACH,sBAAsB,OAAO,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;AAAA;AAAA,MAC5D,sBAAsB,gBAAgB,IAAI,IAAI,MAAM,UAAU;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,iCAAiC,YAAY;AACzC,WAAO,gBAAgB,KAAK,qBAAqB,UAAU,CAAC;AAAA,EAChE;AAAA,EACA,iCAAiC,UAAU,aAAa,SAAS;AAC7D,UAAM,CAAC,MAAM,MAAM,MAAM,IAAI,IAAI,KAAK,qBAAqB,QAAQ;AACnE,UAAM,CAAC,SAAS,SAAS,SAAS,OAAO,IAAI,KAAK,qBAAqB,WAAW;AAClF,UAAM,aAAa;AAAA,MACf,sBAAuB,OAAO,WAAW,UAAU,KAAM;AAAA,MACzD,sBAAuB,OAAO,WAAW,UAAU,KAAM;AAAA,MACzD,sBAAuB,OAAO,WAAW,UAAU,KAAM;AAAA,MACzD,wBAAyB,OAAO,WAAW,UAAU,KAAM;AAAA,IAC/D;AACA,WAAO,QAAQ,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC;AAAA,EACtF;AAAA,EACA,qBAAqB,OAAO;AACxB,UAAM,SAAS,KAAK,oBAAoB,IAAI,KAAK;AACjD,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AACA,UAAM,WAAW,uBAAuB,KAAK;AAC7C,UAAM,QAAQ,SAAS,MAAM,2DAA2D;AACxF,QAAI,CAAC,OAAO;AACR,UAAI,KAAK,wBAAwB,QAAQ;AACrC,mBAAW,UAAU,KAAK,yBAAyB;AAC/C,gBAAM,SAAS,OAAO,KAAK;AAC3B,cAAI,QAAQ;AACR,iBAAK,oBAAoB,IAAI,OAAO,MAAM;AAC1C,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,IAAI,MAAM,0BAA0B,KAAK,EAAE;AAAA,IACrD;AACA,UAAM,OAAO;AAAA,MACT,SAAS,MAAM,CAAC,GAAG,EAAE;AAAA,MACrB,SAAS,MAAM,CAAC,GAAG,EAAE;AAAA,MACrB,SAAS,MAAM,CAAC,GAAG,EAAE;AAAA,MACpB,MAAM,CAAC,IAAI,WAAW,MAAM,CAAC,CAAC,IAAI;AAAA,IACvC;AACA,SAAK,oBAAoB,IAAI,OAAO,IAAI;AACxC,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,oBAAN,MAAwB;AAAA,EACpB,cAAc;AACV,SAAK,sBAAsB,CAAC;AAAA,EAChC;AAAA,EACA,uBAAuB,WAAW;AAC9B,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,eAAe,QAAQ,WAAW,aAAa;AAC3C,SAAK,oBAAoB,QAAQ,CAAC,MAAM;AACpC,QAAE,eAAe,QAAQ,WAAW,WAAW;AAAA,IACnD,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,gCAAN,MAAoC;AAAA,EAChC,eAAe,QAAQ,WAAW,aAAa;AAC3C,WAAO,yBAAyB,CAAC,UAAU,KAAK,oBAAoB,OAAO,WAAW,WAAW,CAAC;AAAA,EACtG;AACJ;AAEA,IAAM,oBAAN,cAAgC,8BAA8B;AAAA,EAC1D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,oBAAoB,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,GAAG;AAC5E,QAAI,KAAK,oBAAoB,QAAQ,KAAK,gBAAgB,2BAA2B,MAAM;AACvF;AAAA,IACJ;AACA,UAAM,eAAe,KAAK,gBAAgB;AAC1C,UAAM,OAAO,KAAK;AAClB,UAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,oBAAoB,CAAC;AAC9D,UAAM,aAAc,YAAY,IAAK;AACrC,UAAM,OAAO,CAAC,gBAAgB;AAC1B,UAAI,UAAU;AACd,eAAS,IAAI,aAAa,KAAK,GAAG,KAAK,aAAa,MAAM,EAAE,GAAG;AAC3D,cAAM,QAAQ,KAAK,gBAAgB,CAAC;AACpC,cAAM,UAAU,KAAK,MAAM,MAAM,cAAc,oBAAoB,IAAI;AACvE,cAAM,UAAU,MAAM,cAAc;AACpC,cAAMC,UAAS,cAAc,qBAAqB;AAClD,YAAI,OAAO,SAAS,OAAO;AAC3B,YAAI,IAAI,SAAS,SAASA,SAAQ,GAAG,KAAK,KAAK,CAAC;AAAA,MACpD;AACA,UAAI,KAAK;AAAA,IACb;AACA,QAAI,KAAK,sBAAsB,GAAG;AAC9B,UAAI,YAAY,KAAK;AACrB,WAAK,KAAK,mBAAmB,KAAK,mBAAmB;AAAA,IACzD;AACA,QAAI,YAAY,KAAK;AACrB,SAAK,KAAK,gBAAgB;AAAA,EAC9B;AACJ;AAEA,SAAS,wBAAwB;AAC7B,SAAO;AAAA,IACH,iBAAiB,CAAC;AAAA,MACV,aAAa;AAAA,MACb,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,IACrB,CAAC;AAAA,IACL,qBAAqB;AAAA,IACrB,qBAAqB;AAAA,IACrB,kBAAkB;AAAA,IAClB,qBAAqB;AAAA,IACrB,wBAAwB;AAAA,EAC5B;AACJ;AACA,IAAM,sBAAsB,EAAE,MAAM,GAAG,IAAI,EAAE;AAC7C,IAAM,yBAAN,MAA6B;AAAA,EACzB,YAAY,YAAY,WAAW,MAAM;AACrC,SAAK,8BAA8B,IAAI,kBAAkB;AACzD,SAAK,6BAA6B,CAAC;AACnC,SAAK,wBAAwB,CAAC;AAC9B,SAAK,wBAAwB;AAC7B,SAAK,uBAAuB;AAC5B,SAAK,sBAAsB;AAC3B,SAAK,iBAAiB;AACtB,SAAK,4BAA4B,uBAAuB,KAAK,0BAA0B;AAAA,EAC3F;AAAA,EACA,iBAAiB,YAAY;AACzB,SAAK,wCAAwC;AAC7C,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,qBAAqB;AACjB,QAAI,KAAK,uBAAuB;AAC5B,WAAK,qBAAqB;AAC1B,WAAK,wBAAwB;AAAA,IACjC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,0CAA0C;AACtC,UAAM,WAAW,KAAK,eAAe,yBAAyB;AAC9D,QAAI,SAAS,WAAW,KAAK,2BAA2B,QAAQ;AAC5D,WAAK,wBAAwB,SAAS,IAAI,qBAAqB;AAC/D,WAAK,6BAA6B,KAAK,sBAAsB,IAAI,CAAC,SAAS;AACvE,cAAM,MAAM,IAAI,kBAAkB;AAClC,YAAI,kBAAkB,IAAI;AAC1B,eAAO;AAAA,MACX,CAAC;AACD,WAAK,4BAA4B,uBAAuB,KAAK,0BAA0B;AAAA,IAC3F;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,UAAM,cAAc,KAAK,oBAAoB,kBAAkB,EAAE,SAAS,KAAgC,CAAC,KAAK,oBAAoB,kBAAkB;AACtJ,UAAM,WAAW,KAAK,eAAe,wBAAwB;AAC7D,UAAM,iBAAiB,KAAK,oBAAoB,uBAAuB;AACvE,UAAM,YAAY,KAAK,qBAAqB,oBAAoB;AAChE,SAAK,wCAAwC;AAC7C,aAAS,QAAQ,CAAC,GAAG,UAAU;AAC3B,YAAM,OAAO,KAAK,sBAAsB,KAAK;AAC7C,YAAM,aAAa,EAAE,4BAA4B,cAAc;AAC/D,YAAM,aAAa,EAAE,qBAAqB;AAC1C,UAAI,eAAe,eAAe,QAAQ,CAAC,EAAE,kBAAkB,KAAK,eAAe,MAAM;AACrF,aAAK,yBAAyB;AAC9B;AAAA,MACJ;AACA,WAAK,sBAAsB,WAAW;AACtC,WAAK,mBAAmB,WAAW;AACnC,WAAK,sBAAsB,WAAW;AACtC,WAAK,gBAAgB,CAAC,EAAE,kBAAkB,WAAW;AACrD,WAAK,gBAAgB,CAAC,EAAE,cAAc,EAAE,qBAAqB,EAAE,4BAA4B,WAAW,iBAAiB,WAAW,eAAe;AACjJ,WAAK,sBAAsB,WAAW,yBAAyB,KAAK,qBAAqB,2CAA2C,KAAK,gBAAgB,CAAC,EAAE,cAAc,EAAE,qBAAqB,EAAE,iBAAiB,CAAC;AACrN,WAAK,gBAAgB,CAAC,EAAE,iBAAiB;AACzC,WAAK,gBAAgB,CAAC,EAAE,cAAc,UAAU,4BAA4B,cAAc;AAC1F,WAAK,yBAAyB;AAAA,IAClC,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,oBAAN,cAAgC,8BAA8B;AAAA,EAC1D,YAAY,MAAM;AACd,UAAM;AACN,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,oBAAoB,EAAE,SAAS,KAAK,YAAY,sBAAsB,mBAAmB,GAAG;AACxF,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AACA,UAAM,mBAAmB,KAAK,eAAe,mBAAmB;AAChE,UAAM,mBAAmB,KAAK,eAAe,mBAAmB;AAChE,QAAI,CAAC,oBAAoB,CAAC,kBAAkB;AACxC;AAAA,IACJ;AACA,UAAM,IAAI,KAAK,MAAM,KAAK,eAAe,cAAc,oBAAoB;AAC3E,UAAM,IAAI,KAAK,MAAM,KAAK,eAAe,cAAc,kBAAkB;AACzE,QAAI,UAAU;AACd,QAAI,oBAAoB,KAAK,GAAG;AAC5B,UAAI,YAAY,KAAK,MAAM,KAAK,eAAe,mBAAmB,sBAAsB,oBAAoB;AAC5G,UAAI,cAAc,KAAK,eAAe,mBAAmB;AACzD,UAAI,YAAY,KAAK,eAAe,mBAAmB;AACvD,mBAAa,KAAK,KAAK,eAAe,mBAAmB,mBAAmB;AAC5E,uBAAiB,KAAK,GAAG,GAAG,WAAW,MAAM;AAAA,IACjD;AACA,QAAI,oBAAoB,KAAK,GAAG;AAC5B,UAAI,YAAY,KAAK,MAAM,KAAK,eAAe,mBAAmB,sBAAsB,kBAAkB;AAC1G,UAAI,cAAc,KAAK,eAAe,mBAAmB;AACzD,UAAI,YAAY,KAAK,eAAe,mBAAmB;AACvD,mBAAa,KAAK,KAAK,eAAe,mBAAmB,mBAAmB;AAC5E,yBAAmB,KAAK,GAAG,GAAG,WAAW,KAAK;AAAA,IAClD;AAAA,EACJ;AACJ;AAEA,IAAM,oBAAN,MAAwB;AAAA,EACpB,YAAY,QAAQ,MAAM;AACtB,SAAK,wBAAwB;AAC7B,SAAK,yBAAyB;AAAA,MAC1B,oBAAoB;AAAA,QAChB,qBAAqB;AAAA,QACrB,qBAAqB;AAAA,QACrB,iBAAiB;AAAA,QACjB,mBAAmB;AAAA,MACvB;AAAA,MACA,oBAAoB;AAAA,QAChB,qBAAqB;AAAA,QACrB,qBAAqB;AAAA,QACrB,iBAAiB;AAAA,QACjB,mBAAmB;AAAA,MACvB;AAAA,MACA,aAAa;AAAA,MACb,aAAa;AAAA,IACjB;AACA,SAAK,qBAAqB,IAAI,kBAAkB,KAAK,sBAAsB;AAC3E,SAAK,mBAAmB;AACxB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,mBAAmB;AACf,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,mBAAmB,MAAM;AACrB,QAAI,KAAK,uBAAuB;AAC5B,WAAK,qBAAqB;AAC1B,WAAK,wBAAwB;AAAA,IACjC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,UAAM,UAAU,KAAK,iBAAiB,kBAAkB;AACxD,UAAM,mBAAmB,KAAK,eAAe,gBAAgB,EAAE,kBAAkB,EAAE;AACnF,UAAM,OAAO,KAAK;AAClB,QAAI,iBAAiB,SAAS,GAA8B;AACxD,WAAK,mBAAmB,oBAAoB;AAC5C,WAAK,mBAAmB,oBAAoB;AAC5C;AAAA,IACJ;AACA,SAAK,mBAAmB,oBAAoB,WAAW,KAAK,iBAAiB,0BAA0B,KAAK,cAAc;AAC1H,SAAK,mBAAmB,oBAAoB,WAAW,KAAK,iBAAiB,0BAA0B;AACvG,SAAK,mBAAmB,sBAAsB,iBAAiB,SAAS;AACxE,SAAK,mBAAmB,sBAAsB,iBAAiB,SAAS;AACxE,SAAK,mBAAmB,kBAAkB,iBAAiB,SAAS;AACpE,SAAK,mBAAmB,sBAAsB,iBAAiB,SAAS;AACxE,SAAK,mBAAmB,sBAAsB,iBAAiB,SAAS;AACxE,SAAK,mBAAmB,kBAAkB,iBAAiB,SAAS;AACpE,SAAK,cAAc,KAAK,iBAAiB,mBAAmB;AAC5D,SAAK,cAAc,KAAK,iBAAiB,mBAAmB;AAAA,EAChE;AACJ;AA+BA,SAAS,oBAAoB,KAAK,GAAG,GAAG,OAAO,QAAQ,aAAa;AAEhE,MAAI,SAAS,IAAI,aAAa,GAAG,QAAQ,cAAc,GAAG,WAAW;AACrE,MAAI,SAAS,IAAI,aAAa,IAAI,SAAS,aAAa,QAAQ,cAAc,GAAG,WAAW;AAE5F,MAAI,SAAS,GAAG,GAAG,aAAa,MAAM;AACtC,MAAI,SAAS,IAAI,QAAQ,aAAa,GAAG,aAAa,MAAM;AAChE;AACA,SAAS,UAAU,KAAK,GAAG,GAAG,GAAG,GAAG,YAAY;AAC5C,MAAI,KAAK;AACT,MAAI,2BAA2B;AAC/B,MAAI,YAAY;AAChB,MAAI,SAAS,GAAG,GAAG,GAAG,CAAC;AACvB,MAAI,QAAQ;AAChB;AACA,SAAS,mBAAmB,cAAc,QAAQ;AAC9C,SAAO,aAAa,IAAI,CAAC,MAAM,MAAM,IAAI,IAAI,IAAI,MAAM;AAC3D;AACA,SAAS,cAET,KAAK,GAAG,GAAG,GAAG,GAAG,OAAO;AAKpB,MAAI,UAAU;AACd,MAAI,IAAI,WAAW;AACf,QAAI,UAAU,GAAG,GAAG,GAAG,GAAG,KAAK;AAC/B;AAAA,EACJ;AAIA,MAAI,OAAO,IAAI,IAAI,MAAM,CAAC,GAAG,CAAC;AAC9B,MAAI,MAAM,CAAC,MAAM,GAAG;AAChB,QAAI,MAAM,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,EACrD;AACA,MAAI,OAAO,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,CAAC;AAClC,MAAI,MAAM,CAAC,MAAM,GAAG;AAChB,QAAI,MAAM,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC;AAAA,EAC7D;AACA,MAAI,OAAO,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC;AAC9B,MAAI,MAAM,CAAC,MAAM,GAAG;AAChB,QAAI,MAAM,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,EACrD;AACA,MAAI,OAAO,GAAG,IAAI,MAAM,CAAC,CAAC;AAC1B,MAAI,MAAM,CAAC,MAAM,GAAG;AAChB,QAAI,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC;AAAA,EAC7C;AACJ;AAUA,SAAS,wBAAwB,KAAK,MAAM,KAAK,OAAO,QAAQ,iBAAiB,cAAc,GAAG,oBAAoB,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,cAAc,IAAI;AAClJ,MAAI,KAAK;AACT,MAAI,CAAC,eAAe,CAAC,eAAe,gBAAgB,iBAAiB;AACjE,kBAAc,KAAK,MAAM,KAAK,OAAO,QAAQ,iBAAiB;AAC9D,QAAI,YAAY;AAChB,QAAI,KAAK;AACT,QAAI,QAAQ;AACZ;AAAA,EACJ;AACA,QAAM,kBAAkB,cAAc;AACtC,QAAM,QAAQ,mBAAmB,mBAAmB,CAAC,eAAe;AACpE,gBAAc,KAAK,OAAO,iBAAiB,MAAM,iBAAiB,QAAQ,aAAa,SAAS,aAAa,KAAK;AAClH,MAAI,oBAAoB,eAAe;AACnC,QAAI,YAAY;AAChB,QAAI,KAAK;AAAA,EACb;AACA,MAAI,gBAAgB,eAAe;AAC/B,QAAI,YAAY;AAChB,QAAI,cAAc;AAClB,QAAI,UAAU;AACd,QAAI,OAAO;AAAA,EACf;AACA,MAAI,QAAQ;AAChB;AAEA,SAAS,sBAAsB,KAAK,GAAG,GAAG,GAAG,GAAG,UAAU,aAAa;AACnE,MAAI,KAAK;AACT,MAAI,2BAA2B;AAC/B,QAAM,WAAW,IAAI,qBAAqB,GAAG,GAAG,GAAG,CAAC;AACpD,WAAS,aAAa,GAAG,QAAQ;AACjC,WAAS,aAAa,GAAG,WAAW;AACpC,MAAI,YAAY;AAChB,MAAI,SAAS,GAAG,GAAG,GAAG,CAAC;AACvB,MAAI,QAAQ;AAChB;AAEA,IAAM,wBAAN,MAA4B;AAAA,EACxB,YAAY,MAAM,YAAY;AAC1B,SAAK,kBAAkB,MAAM,UAAU;AAAA,EAC3C;AAAA,EACA,kBAAkB,MAAM,YAAY;AAChC,SAAK,iBAAiB;AACtB,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,iBAAiB,iBAAiB,eAAe;AAC7C,QAAI,CAAC,KAAK,eAAe,mBAAmB;AACxC,aAAO;AAAA,IACX;AACA,WAAO,gBAAgB,qBAAqB,gBAAgB,uBAAuB,gBAAgB;AAAA,EACvG;AAAA,EACA,eAAe,QAAQ,iBAAiB,gBAAgB,OAAO;AAC3D,QAAI,CAAC,KAAK,eAAe,qBAAqB,KAAK,eAAe,eAAe,WAAW,GAAG;AAC3F;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,eAAe;AACtC,UAAM,kBAAkB,KAAK,qBAAqB;AAClD,UAAM,WAAW,OAAO,yBAAyB,CAAC,UAAU;AACxD,YAAM,MAAM,MAAM;AAClB,UAAI,OAAO,gBAAgB;AAC3B,YAAM,OAAO,KAAK,4BAA4B,OAAO,iBAAiB,gBAAgB,KAAK;AAC3F,YAAM,KAAK,KAAK;AAKhB,UAAI,KAAK,sBAAsB;AAC3B,gCAAwB,KAAK,GAAG,oBAAoB,GAAG,gBAAgB,GAAG,sBAAsB,GAAG,uBAAuB,iBAAiB,GAAG,sBAAsB,CAAC,GAAG,kBAAkB,GAAG,GAAG,GAAG,gBAAgB,GAAG,eAAe;AAAA,MACzO,OACK;AACD,gCAAwB,KAAK,GAAG,mBAAmB,GAAG,gBAAgB,GAAG,sBAAsB,GAAG,uBAAuB,iBAAiB,GAAG,sBAAsB,CAAC,GAAG,GAAG,kBAAkB,GAAG,kBAAkB,CAAC,GAAG,eAAe;AAAA,MACxO;AAEA,UAAI,KAAK,eAAe,uBAAuB;AAC3C,YAAI,YAAY;AAChB,YAAI,SAAS,GAAG,mBAAmB,GAAG,gBAAgB,GAAG,kBAAkB,GAAG,mBAAmB,GAAG,oBAAoB;AAAA,MAC5H;AAEA,UAAI,KAAK,eAAe,yBAAyB;AAC7C,YAAI,YAAY,gBAAgB;AAChC,YAAI,SAAS,KAAK,uBAAuB,GAAG,kBAAkB,GAAG,uBAAuB,GAAG,GAAG,gBAAgB,GAAG,sBAAsB,GAAG,oBAAoB,GAAG,cAAc;AAAA,MACnL;AACA,aAAO;AAAA,IACX,CAAC;AACD,WAAO,wBAAwB,CAAC,EAAE,SAAS,IAAI,MAAM;AACjD,YAAM,KAAK,SAAS;AACpB,UAAI,OAAO,gBAAgB;AAC3B,UAAI,YAAY,SAAS,uBAAuB,UAAU;AAC1D,UAAI,eAAe;AACnB,UAAI,YAAY;AAChB,UAAI,SAAS,KAAK,eAAe,gBAAgB,GAAG,kBAAkB,GAAG,iBAAiB,GAAG,qBAAqB,IAAI,GAAG,2BAA2B;AAAA,IACxJ,CAAC;AAAA,EACL;AAAA,EACA,4BAA4B,OAAO,iBAAiB,gBAAgB,OAAO;AACvE,UAAM,EAAE,SAAS,KAAK,YAAY,WAAW,sBAAsB,mBAAmB,IAAI;AAC1F,UAAM,WAAY,KAAK,eAAe,yBAAyB,CAAC,KAAK,eAAe,oCAAqC,gBAAgB,uBAAuB;AAChK,UAAM,aAAa,KAAK,eAAe,6BAA6B,gBAAgB,uBAAuB;AAC3G,UAAM,aAAa,gBAAgB,uBAAuB,KAAK,qBAAqB;AACpF,UAAM,gBAAgB,gBAAgB,0BAA0B,KAAK,qBAAqB;AAC1F,UAAM,eAAe,gBAAgB;AACrC,UAAM,eAAe,gBAAgB;AACrC,UAAM,OAAO,KAAK,eAAe;AACjC,UAAM,mBAAmB,gBAAgB;AACzC,UAAM,oBAAoB,eAAe,yBAAyB,KAAK,IAAI;AAC3E,UAAM,YAAY,KAAK,KAAK,eAAe,sBAAsB,KAAK,IAAI,CAAC;AAC3E,UAAM,cAAc,mBAAmB,aAAa;AACpD,UAAM,aAAa,gBAAgB,uBAAuB,eAAe,eAAe,YAAY;AACpG,UAAM,mBAAmB,KAAK,IAAI,GAAG,KAAK,MAAM,kBAAkB,CAAC;AACnE,QAAI,oBAAoB,KAAK,MAAM,cAAc,kBAAkB;AACnE,QAAI,oBAAoB,MAAM,mBAAmB,GAAG;AAChD,2BAAqB;AAAA,IACzB;AACA,UAAM,mBAAmB,aAAa,IAAI,KAAK,IAAI,GAAG,KAAK,MAAM,aAAa,oBAAoB,CAAC,IAAI;AACvG,UAAM,mBAAmB,KAAK,MAAM,aAAa,oBAAoB;AAErE,UAAM,iBAAiB,KAAK,MAAM,WAAW,oBAAoB;AACjE,UAAM,OAAO,KAAK,qBAAqB,6BAA6B,KAAK,qBAAqB;AAC9F,UAAM,aAAa,KAAK,MAAM,OAAO,kBAAkB,IAAI,KAAK,MAAM,qBAAqB,GAAG;AAC9F,UAAM,aAAa,KAAK,MAAM,aAAa,mBAAmB,IAAI,oBAAoB,CAAC;AACvF,UAAM,gBAAgB,aAAa;AACnC,UAAM,aAAa,UAAU;AAC7B,UAAM,UAAU,aAAa,UAAU,QAAQ,aAAa;AAC5D,UAAM,gBAAgB,aAAa,WAAW,QAAQ,mBAAmB;AACzE,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,YAAY;AAMZ,uBAAiB,gBAAgB;AACjC,oBAAc,gBAAgB;AAC9B,cAAQ,UAAU,WAAW,eAAe;AAAA,IAChD,OACK;AAMD,uBAAiB,gBAAgB;AACjC,oBAAc,gBAAgB;AAC9B,cAAQ,UAAU,WAAW;AAAA,IACjC;AACA,WAAO;AAAA,MACH,sBAAsB;AAAA,MACtB,kBAAkB;AAAA,QACd,gBAAgB;AAAA,QAChB,gBAAgB;AAAA,QAChB,mBAAmB;AAAA,QACnB,sBAAsB;AAAA,QACtB,uBAAuB;AAAA;AAAA,QAEvB,kBAAkB,IAAI;AAAA,QACtB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,mBAAmB;AAAA,QACnB,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,iBAAiB,WAAW;AAAA,MAChC;AAAA,MACA,iBAAiB;AAAA,QACb,gBAAgB,aAAa;AAAA,QAC7B,mBAAmB,gBAAgB;AAAA,QACnC,iBAAiB;AAAA,QACjB,6BAA6B;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAChB,YAAY,MAAM;AACd,SAAK,+BAA+B;AAAA,MAChC,sBAAsB;AAAA,MACtB,sBAAsB;AAAA,MACtB,mCAAmC;AAAA,MACnC,gCAAgC;AAAA,IACpC;AACA,SAAK,6BAA6B;AAAA,MAC9B,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,MACnB,uBAAuB;AAAA,MACvB,mCAAmC;AAAA,MACnC,uBAAuB;AAAA,MACvB,iBAAiB;AAAA,MACjB,yBAAyB;AAAA,MACzB,4BAA4B;AAAA,IAChC;AACA,SAAK,6BAA6B;AAAA,MAC9B,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,MACnB,uBAAuB;AAAA,MACvB,mCAAmC;AAAA,MACnC,uBAAuB;AAAA,MACvB,iBAAiB;AAAA,MACjB,yBAAyB;AAAA,MACzB,4BAA4B;AAAA,IAChC;AACA,SAAK,wBAAwB;AAC7B,SAAK,yBAAyB,KAAK,QAAQ,uBAAuB,KAAK,4BAA4B,KAAK,4BAA4B;AACpI,SAAK,yBAAyB,KAAK,QAAQ,uBAAuB,KAAK,4BAA4B,KAAK,4BAA4B;AAAA,EACxI;AAAA,EACA,iBAAiB;AACb,SAAK,qCAAqC;AAC1C,WAAO,KAAK,2BAA2B;AAAA,EAC3C;AAAA,EACA,uBAAuB;AACnB,SAAK,qCAAqC;AAC1C,WAAO,KAAK,6BAA6B;AAAA,EAC7C;AAAA,EACA,mBAAmB;AACf,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,iBAAiB,iBAAiB,gBAAgB,OAAO;AACrD,WAAO,KAAK,IAAI,KAAK,uBAAuB,iBAAiB,iBAAiB,aAAa,GAAG,KAAK,uBAAuB,iBAAiB,iBAAiB,aAAa,CAAC;AAAA,EAC9K;AAAA,EACA,+BAA+B;AAC3B,WAAO,KAAK,6BAA6B,6BAA6B;AAAA,EAC1E;AAAA,EACA,6BAA6B,OAAO;AAChC,SAAK,6BAA6B,4BAA4B;AAAA,EAClE;AAAA,EACA,sBAAsB;AAClB,SAAK,qCAAqC;AAC1C,WAAO,KAAK,2BAA2B,qBAAqB,KAAK,2BAA2B;AAAA,EAChG;AAAA,EACA,+BAA+B;AAC3B,SAAK,qCAAqC;AAC1C,WAAO,KAAK,2BAA2B;AAAA,EAC3C;AAAA,EACA,mBAAmB,YAAY;AAC3B,SAAK,qCAAqC;AAI1C,SAAK,2BAA2B,wBAAwB,KAAK,2BAA2B,yBAAyB,WAAW,kBAAkB,EAAE;AAChJ,SAAK,2BAA2B,wBAAwB,KAAK,2BAA2B,yBAAyB,WAAW,kBAAkB,EAAE;AAChJ,SAAK,uBAAuB,kBAAkB,KAAK,4BAA4B,KAAK,4BAA4B;AAChH,SAAK,uBAAuB,kBAAkB,KAAK,4BAA4B,KAAK,4BAA4B;AAChH,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,yBAAyB;AACrB,SAAK,qCAAqC;AAC1C,SAAK,uBAAuB,kBAAkB,KAAK,4BAA4B,KAAK,4BAA4B;AAChH,SAAK,uBAAuB,kBAAkB,KAAK,4BAA4B,KAAK,4BAA4B;AAChH,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uCAAuC;AACnC,QAAI,KAAK,uBAAuB;AAC5B,WAAK,2BAA2B,wBAAwB;AACxD,WAAK,2BAA2B,wBAAwB;AACxD,WAAK,8BAA8B,KAAK,4BAA4B,KAAK,4BAA4B,KAAK,4BAA4B;AAAA,IAC1I;AAAA,EACJ;AACJ;AAEA,IAAM,yBAAN,cAAqC,cAAc;AAAA,EAC/C,YAAY,QAAQ,YAAY,eAAe;AAC3C,UAAM;AACN,SAAK,mBAAmB;AACxB,SAAK,uBAAuB;AAC5B,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,8BAA8B,kBAAkB,kBAAkB,oBAAoB;AAClF,qBAAiB,oBAAoB;AACrC,QAAI,KAAK,iBAAiB,kBAAkB,EAAE,SAAS,GAA8B;AACjF;AAAA,IACJ;AACA,UAAM,UAAU,KAAK,iBAAiB,kBAAkB,EAAE;AAC1D,QAAI,CAAC,QAAQ,cAAc;AACvB;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,qBAAqB,qBAAqB;AAClE,QAAI,CAAC,KAAK,iBAAiB,kBAAkB,KAAK,KAAK,qBAAqB,kBAAkB,KAAM,eAAe,MAAO;AACtH;AAAA,IACJ;AACA,UAAM,SAAS,KAAK,qBAAqB,sBAAsB,EAAE,iCAAiC,QAAQ,oBAAoB;AAC9H,uBAAmB,uBAAuB,OAAO;AACjD,qBAAiB,kBAAkB,OAAO;AAC1C,UAAM,oBAAoB,IAAI,KAAK,KAAK,qBAAqB,mBAAmB;AAChF,uBAAmB,iCAAiC;AACpD,uBAAmB,oCAAoC;AACvD,UAAM,QAAQ,KAAK,wBAAwB,KAAK,oBAAoB;AACpE,uBAAmB,uBAAuB,MAAM;AAChD,qBAAiB,iBAAiB,KAAK,qBAAqB,sBAAsB,MAAM,iBAAiB,UAAU;AACnH,qBAAiB,oBAAoB;AAAA,EACzC;AACJ;AAEA,IAAM,4BAA4B;AAClC,IAAM,WAAW;AACjB,IAAM,uBAAN,MAA2B;AAAA,EACvB,cAAc;AACV,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,eAAe,QAAQ,iBAAiB;AACpC,QAAI,KAAK,mBAAmB,QAAQ,KAAK,eAAe,sBAAsB,SAAS,KAAK,eAAe,eAAe,WAAW,GAAG;AACpI;AAAA,IACJ;AACA,UAAM,YAAY,OAAO,wBAAwB,CAAC,EAAE,SAAS,IAAI,MAAM;AACnE,UAAI,OAAO,gBAAgB;AAC3B,aAAO,KAAK,MAAM,gBAAgB,qBAAqB,sBAAsB,KAAK,cAAc,KAAK,cAAc,EAAE,gBAAgB,yBAAyB,CAAC;AAAA,IACnK,CAAC;AACD,QAAI,aAAa,GAAG;AAChB;AAAA,IACJ;AACA,UAAM,aAAa,gBAAgB;AACnC,UAAM,aAAa,YAAY,IAAI;AACnC,UAAM,iBAAiB,aAAa;AACpC,UAAM,iBAAiB,KAAK,eAAe;AAC3C,QAAI,aAAa,KAAK,eAAe;AACrC,QAAI,KAAK,KAAK,MAAM,aAAa,cAAc,IAAI;AACnD,QAAI,KAAK,GAAG;AACR,mBAAa,aAAa,KAAK,IAAI,IAAI,EAAE;AACzC,WAAK,KAAK,MAAM,aAAa,cAAc,IAAI;AAAA,IACnD,WACS,KAAK,aAAa,gBAAgB;AACvC,mBAAa,aAAa,KAAK,IAAI,kBAAkB,KAAK,WAAW;AACrE,WAAK,KAAK,MAAM,aAAa,cAAc,IAAI;AAAA,IACnD;AACA,UAAM,KAAK,KAAK;AAChB,UAAM,KAAK;AACX,UAAM,KAAK,KAAK,KAAK,KACjB,gBAAgB,uBAChB,gBAAgB,uBAChB,gBAAgB,uBAChB,gBAAgB,qBAChB,gBAAgB,uBAAuB;AAC3C,WAAO,yBAAyB,CAAC,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,MAAM;AAC5F,YAAM,OAAO,cAAc,KAAK,cAAc;AAC9C,UAAI,YAAY,KAAK;AACrB,YAAM,WAAW,KAAK,MAAM,KAAK,oBAAoB;AACrD,YAAM,WAAW,KAAK,MAAM,KAAK,kBAAkB;AACnD,YAAM,WAAW,KAAK,MAAM,KAAK,oBAAoB;AACrD,YAAM,WAAW,KAAK,MAAM,KAAK,kBAAkB;AACnD,YAAM,eAAe,KAAK,MAAM,WAAW,oBAAoB;AAC/D,UAAI,UAAU;AACd,UAAI,OAAO,UAAU,QAAQ;AAC7B,UAAI,OAAO,UAAU,WAAW,YAAY;AAC5C,UAAI,MAAM,UAAU,UAAU,WAAW,cAAc,UAAU,YAAY;AAC7E,UAAI,OAAO,WAAW,cAAc,QAAQ;AAC5C,UAAI,MAAM,UAAU,UAAU,UAAU,WAAW,cAAc,YAAY;AAC7E,UAAI,OAAO,UAAU,QAAQ;AAC7B,UAAI,KAAK;AACT,UAAI,KAAK,uBAAuB;AAC5B,cAAM,QAAQ,KAAK,MAAM,KAAK,uBAAuB,oBAAoB;AACzE,cAAM,UAAU;AAChB,cAAM,aAAa,KAAK,OAAO,UAAU,gBAAgB,wBAAwB,kBAAkB;AACnG,YAAI,YAAY,KAAK;AACrB,cAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,oBAAoB,CAAC;AAC9D,cAAM,aAAa,KAAK,MAAM,uBAAuB,GAAG;AACxD,YAAI,SAAS,QAAQ,YAAY,SAAS,WAAW,aAAa,OAAO;AAAA,MAC7E;AAAA,IACJ,CAAC;AACD,WAAO,wBAAwB,CAAC,EAAE,SAAS,IAAI,MAAM;AACjD,YAAM,OAAO,cAAc,KAAK,cAAc;AAC9C,YAAM,QAAQ,KACV,gBAAgB,uBAChB,gBAAgB,uBAChB,gBAAgB,uBAChB,gBAAgB,qBAAqB;AACzC,UAAI,OAAO,gBAAgB;AAC3B,UAAI,YAAY;AAChB,UAAI,eAAe;AACnB,UAAI,YAAY,KAAK;AACrB,YAAM,kBAAkB,gBAAgB,qBAAqB,yBAAyB,KAAK,MAAM;AACjG,UAAI,UAAU,KAAK,YAAY,QAAQ,eAAe;AACtD,UAAI,SAAS,KAAK,gBAAgB,GAAG,CAAC;AAAA,IAC1C,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,wBAAN,MAA4B;AAAA,EACxB,YAAY,WAAW,OAAO,eAAe;AACzC,SAAK,wBAAwB;AAC7B,SAAK,qBAAqB,IAAI,qBAAqB;AACnD,SAAK,yBAAyB;AAAA,MAC1B,mBAAmB;AAAA,MACnB,sBAAsB;AAAA,MACtB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,sBAAsB;AAAA,MACtB,uBAAuB;AAAA,IAC3B;AACA,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB;AACvB,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,mBAAmB;AACf,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,qBAAqB;AACjB,QAAI,KAAK,uBAAuB;AAC5B,WAAK,qBAAqB;AAC1B,WAAK,wBAAwB;AAAA,IACjC;AACA,SAAK,mBAAmB,kBAAkB,KAAK,sBAAsB;AACrE,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,UAAM,OAAO,KAAK;AAClB,SAAK,oBAAoB;AACzB,QAAI,KAAK,oBAAoB,kBAAkB,EAAE,SAAS,GAA8B;AACpF;AAAA,IACJ;AACA,UAAM,UAAU,KAAK,oBAAoB,kBAAkB,EAAE;AAC7D,QAAI,CAAC,QAAQ,cAAc;AACvB;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,gBAAgB,oBAAoB;AAC3D,QAAI,UAAU,kBAAkB,GAAG;AAC/B;AAAA,IACJ;AACA,SAAK,kBAAkB,UAAU,gBAAgB;AACjD,UAAM,QAAQ,KAAK,wBAAwB;AAC3C,QAAI,UAAU,MAAM;AAChB;AAAA,IACJ;AACA,SAAK,uBAAuB,MAAM;AAClC,UAAM,cAAc,UAAU,gCAAgC,KAAK,oBAAoB,uBAAuB,CAAC;AAC/G,SAAK,iBAAiB,UAAU,yBAAyB,cAAc,WAAW,CAAC;AACnF,SAAK,oBAAoB;AACzB,UAAM,SAAS,KAAK,gBAAgB,sBAAsB,EAAE,iCAAiC,QAAQ,oBAAoB;AACzH,SAAK,uBAAuB,OAAO;AACnC,SAAK,kBAAkB,OAAO;AAC9B,SAAK,wBAAwB,UAAU,kBAAkB,EAAE;AAAA,EAC/D;AACJ;AAEA,IAAM,aAAN,MAAiB;AAAA,EACb,cAAc;AACV,SAAK,wBAAwB;AAC7B,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB,QAAQ;AACxB,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,wBAAwB,YAAY;AAChC,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,yBAAyB,MAAM;AAC3B,WAAO,CAAC;AAAA,EACZ;AAAA,EACA,0BAA0B;AACtB,WAAO,CAAC;AAAA,EACZ;AAAA,EACA,oBAAoB;AAChB,WAAO;AAAA,EACX;AACJ;AAKA,IAAI;AAAA,CACH,SAAUC,gBAAe;AAItB,EAAAA,eAAcA,eAAc,QAAQ,IAAI,CAAC,IAAI;AAI7C,EAAAA,eAAcA,eAAc,QAAQ,IAAI,CAAC,IAAI;AAI7C,EAAAA,eAAcA,eAAc,QAAQ,IAAI,CAAC,IAAI;AAI7C,EAAAA,eAAcA,eAAc,YAAY,IAAI,CAAC,IAAI;AACrD,GAAG,kBAAkB,gBAAgB,CAAC,EAAE;AACxC,IAAM,YAAN,cAAwB,WAAW;AAAA,EAC/B,YAAY,OAAO,SAAS;AACxB,UAAM;AACN,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,SAAK,2BAA2B,oBAAI,IAAI;AACxC,SAAK,uBAAuB;AAC5B,SAAK,mCAAmC,oBAAI,QAAQ;AACpD,SAAK,iCAAiC,oBAAI,QAAQ;AAClD,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AACzB,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,UAAM,qBAAqB,CAAC,kBAAkB,0BAA0B;AACpE,aAAO,CAAC,eAAe;AACnB,cAAM,aAAa,sBAAsB;AACzC,cAAM,WAAW,iBAAiB;AAClC,YAAI,eAAe,cAAc,KAAK,cAAc,EAAE,4BAA4B,GAAG;AAEjF,iBAAO,EAAE,iBAAiB,UAAU,sBAAsB,WAAW;AAAA,QACzE,OACK;AAED,gBAAM,aAAa,cAAc,WAAW,qBAAqB,CAAC;AAClE,gBAAM,QAAQ,WAAW,4BAA4B,YAAY,UAAU;AAC3E,iBAAO,EAAE,iBAAiB,OAAO,sBAAsB,WAAW;AAAA,QACtE;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,oBAAoB,CAAC,kBAAkB,0BAA0B;AACnE,aAAO,MAAM;AACT,cAAM,OAAO,KAAK,gBAAgB,oBAAoB,EAAE,sBAAsB,iBAAiB,CAAC;AAChG,cAAM,aAAa,sBAAsB;AACzC,YAAI,CAAC,QAAQ,CAAC,OAAO,SAAS,UAAU,GAAG;AACvC,iBAAO;AAAA,QACX;AACA,eAAO;AAAA,UACH,gBAAgB;AAAA,UAChB,sBAAsB;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK,oCAAoC,mBAAmB,MAAM,KAAK,iBAAiB,MAAM,KAAK,WAAW;AAC9G,UAAM,yBAAyB,kBAAkB,MAAM,KAAK,iBAAiB,MAAM,KAAK,mBAAmB,CAAC;AAC5G,SAAK,yBAAyB,IAAI,sBAAsB,MAAM,OAAO,sBAAsB;AAAA,EAC/F;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,0BAA0B,GAAG,GAAG;AAC5B,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,6BAA6B;AACzB,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,yBAAyB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,yBAAyB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sBAAsB,OAAO,OAAO,MAAM;AACtC,QAAI,CAAC,KAAK,sBAAsB;AAC5B,WAAK,uBAAuB;AAAA,IAChC;AACA,SAAK,oBAAoB;AACzB,SAAK,2BAA2B,OAAO,OAAO,IAAI;AAAA,EACtD;AAAA,EACA,yBAAyB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,0BAA0B;AACtB,SAAK,oBAAoB;AACzB,SAAK,uCAAuC;AAC5C,SAAK,kBAAkB;AACvB,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AACtB,SAAK,2BAA2B;AAChC,SAAK,yBAAyB;AAAA,EAClC;AAAA,EACA,oBAAoB,MAAM;AACtB,QAAI,oBAAoB,KAAK,iCAAiC,IAAI,IAAI;AACtE,QAAI,CAAC,mBAAmB;AACpB,0BAAoB,IAAI,kBAAkB,MAAM,IAAI;AACpD,WAAK,iCAAiC,IAAI,MAAM,iBAAiB;AAAA,IACrE;AACA,QAAI,kBAAkB,KAAK,+BAA+B,IAAI,IAAI;AAClE,QAAI,CAAC,iBAAiB;AAClB,wBAAkB,IAAI,uBAAuB,KAAK,iBAAiB,MAAM,IAAI;AAC7E,WAAK,+BAA+B,IAAI,MAAM,eAAe;AAAA,IACjE;AACA,WAAO,CAAC,mBAAmB,eAAe;AAAA,EAC9C;AAAA,EACA,0BAA0B,MAAM;AAC5B,WAAO,SAAS,KAAK,kBAAkB,KAAK,kBAAkB,SAAS;AAAA,EAC3E;AAAA,EACA,4BAA4B;AACxB,WAAO,KAAK,kBAAkB,SAAS;AAAA,EAC3C;AAAA,EACA,yBAAyB,MAAM,YAAY;AACvC,QAAI,CAAC,KAAK,qBAAqB,KAAK,mBAAmB,MAAM;AACzD,WAAK,yBAAyB,MAAM;AAAA,IACxC;AACA,UAAM,QAAQ,CAAC;AACf,QAAI,KAAK,mBAAmB,MAAM;AAC9B,YAAM,KAAK,KAAK,sCAAsC,KAAK,0BAA0B,YAAY,KAAK,iCAAiC,CAAC;AAAA,IAC5I;AACA,WAAO;AAAA,EACX;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK,oBAAoB,CAAC,KAAK,sBAAsB,IAAI,CAAC;AAAA,EACrE;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,SAAK,gBAAgB,gBAAgB,EAAE,QAAQ,CAAC,SAAS;AACrD,WAAK,iCAAiC,IAAI,IAAI,GAAG,iBAAiB;AAClE,WAAK,+BAA+B,IAAI,IAAI,GAAG,iBAAiB;AAAA,IACpE,CAAC;AACD,SAAK,yBAAyB,QAAQ,CAAC,UAAU,MAAM,iBAAiB,CAAC;AACzE,SAAK,uBAAuB,iBAAiB;AAAA,EACjD;AAAA,EACA,2BAA2B,MAAM;AAC7B,QAAI,QAAQ,CAAC,KAAK,4BAA4B,EAAE,kBAAkB,GAAG;AACjE,aAAO,KAAK,4BAA4B;AAAA,IAC5C;AACA,WAAO;AAAA,EACX;AAAA,EACA,2BAA2B,OAAO,OAAO,MAAM;AAC3C,QAAI,KAAK,0BAA0B,OAAO,OAAO,IAAI,GAAG;AACpD,WAAK,yBAAyB;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,0BAA0B,UAAU,UAAU,SAAS;AACnD,UAAM,OAAO,KAAK;AAClB,UAAM,OAAO,KAAK;AAClB,UAAM,WAAW,KAAK;AACtB,UAAM,WAAW,KAAK;AACtB,UAAM,UAAU,KAAK;AACrB,UAAM,aAAa,KAAK,2BAA2B,OAAO;AAC1D,SAAK,kBAAkB;AACvB,SAAK,cAAc,MAAM,QAAQ,IAAI,MAAM,KAAK,gBAAgB,oBAAoB,EAAE,4BAA4B,QAAQ;AAC1H,SAAK,iBAAiB;AACtB,UAAM,aAAa,eAAe,OAAO,WAAW,qBAAqB,IAAI;AAC7E,QAAI,eAAe,QAAQ,eAAe,MAAM;AAC5C,WAAK,kBAAkB;AACvB,WAAK,cAAc,WAAW,4BAA4B,UAAU,UAAU;AAAA,IAClF,OACK;AACD,WAAK,kBAAkB;AACvB,WAAK,cAAc;AAAA,IACvB;AACA,WAAQ,SAAS,KAAK,eAAe,SAAS,KAAK,eAAe,aAAa,KAAK,mBAChF,aAAa,KAAK,mBAAmB,YAAY,KAAK;AAAA,EAC9D;AAAA,EACA,yCAAyC;AACrC,UAAM,cAAc,KAAK,gBAAgB,mBAAmB,EACvD,IAAI,CAAC,MAAM,EAAE,eAAe,EAAE,oBAAoB,CAAC,EACnD,OAAO,OAAO;AACnB,UAAM,eAAgB,YAAY,WAAW,IAAK,OAAO,KAAK,IAAI,GAAG,WAAW;AAChF,SAAK,kBAAkB,iBAAiB,OAAO,eAAe;AAAA,EAClE;AAAA,EACA,sCAAsC,KAAK,YAAY,eAAe;AAClE,QAAI,OAAO,IAAI,IAAI,UAAU;AAC7B,QAAI,SAAS,QAAW;AACpB,aAAO,IAAI,uBAAuB,MAAM,YAAY,aAAa;AACjE,UAAI,IAAI,YAAY,IAAI;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,oBAAoB,cAAc;AAEvC,SAAO,iBAAiB,UAAyC,iBAAiB;AACtF;AAEA,SAAS,sBAAsB,aAAa,UAAU;AAClD,MAAI,gBAAgB,QAAW;AAC3B,WAAO;AAAA,EACX;AACA,QAAM,QAAQ,KAAK,IAAI,YAAY,iBAAiB,SAAS,eAAe;AAC5E,QAAM,YAAY,YAAY,uBAAuB,SAAS;AAC9D,SAAO,EAAE,iBAAiB,OAAO,qBAAqB,UAAU;AACpE;AACA,IAAM,iBAAN,MAAM,gBAAe;AAAA,EACjB,YAAY,aAAa;AACrB,SAAK,6BAA6B,oBAAI,IAAI;AAC1C,SAAK,mCAAmC,CAAC;AACzC,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,yBAAyB,WAAW,cAAc;AAC9C,UAAM,YAAY,KAAK,2BAA2B,IAAI,SAAS;AAC/D,UAAM,WAAW,sBAAsB,WAAW,YAAY;AAC9D,SAAK,2BAA2B,IAAI,WAAW,QAAQ;AAAA,EAC3D;AAAA,EACA,6BAA6B;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,4BAA4B,WAAW;AACnC,UAAM,mBAAmB,KAAK,2BAA2B,IAAI,SAAS;AACtE,QAAI,qBAAqB,QAAW;AAChC,aAAO;AAAA,QACH,iBAAiB,KAAK;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO;AAAA,MACH,iBAAiB,KAAK,IAAI,KAAK,uBAAuB,iBAAiB,eAAe;AAAA,MACtF,qBAAqB,iBAAiB;AAAA,IAC1C;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,SAAK,iCAAiC;AAEtC,SAAK,mCAAmC,CAAC;AAAA,MAAE,gBAAgB;AAAA;AAAA,IAA6C,CAAC;AAAA,EAC7G;AAAA,EACA,qBAAqB,OAAO;AACxB,SAAK,iCAAiC;AAEtC,SAAK,mCAAmC,CAAC,EAAE,gBAAgB,GAA8C,iBAAiB,MAAM,CAAC;AAAA,EACrI;AAAA,EACA,gCAAgC,WAAW;AACvC,SAAK,mCAAmC;AACxC,SAAK,iCAAiC,KAAK,EAAE,gBAAgB,GAA6C,iBAAiB,UAAU,CAAC;AAAA,EAC1I;AAAA,EACA,mCAAmC;AAC/B,SAAK,mCAAmC;AACxC,SAAK,iCAAiC,KAAK;AAAA,MAAE,gBAAgB;AAAA;AAAA,IAAgD,CAAC;AAAA,EAClH;AAAA,EACA,2BAA2B;AACvB,SAAK,iCAAiC;AAEtC,SAAK,mCAAmC,CAAC;AAAA,MAAE,gBAAgB;AAAA;AAAA,IAAwC,CAAC;AAAA,EACxG;AAAA,EACA,wBAAwB,YAAY;AAChC,SAAK,iCAAiC;AACtC,SAAK,iCAAiC,KAAK,EAAE,gBAAgB,GAAmD,iBAAiB,WAAW,CAAC;AAAA,EACjJ;AAAA,EACA,yBAAyB,QAAQ;AAC7B,SAAK,iCAAiC;AACtC,SAAK,iCAAiC,KAAK,EAAE,gBAAgB,GAAoD,iBAAiB,OAAO,CAAC;AAAA,EAC9I;AAAA,EACA,mCAAmC;AAC/B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,gBAAgB,OAAO;AACnB,eAAW,kBAAkB,MAAM,kCAAkC;AACjE,WAAK,qCAAqC,cAAc;AAAA,IAC5D;AACA,SAAK,wBAAwB,KAAK,IAAI,KAAK,uBAAuB,MAAM,qBAAqB;AAC7F,UAAM,2BAA2B,QAAQ,CAAC,cAAc,UAAU;AAC9D,WAAK,yBAAyB,OAAO,YAAY;AAAA,IACrD,CAAC;AAAA,EACL;AAAA,EACA,OAAO,kBAAkB;AACrB,WAAO,IAAI;AAAA,MAAe;AAAA;AAAA,IAA+B;AAAA,EAC7D;AAAA,EACA,OAAO,iBAAiB;AACpB,WAAO,IAAI;AAAA,MAAe;AAAA;AAAA,IAA8B;AAAA,EAC5D;AAAA,EACA,qCAAqC,cAAc;AAC/C,YAAQ,aAAa,gBAAgB;AAAA,MACjC,KAAK;AACD,aAAK,wBAAwB;AAC7B;AAAA,MACJ,KAAK;AACD,aAAK,qBAAqB,aAAa,eAAe;AACtD;AAAA,MACJ,KAAK;AACD,aAAK,wBAAwB,aAAa,eAAe;AACzD;AAAA,MACJ,KAAK;AACD,aAAK,yBAAyB,aAAa,eAAe;AAC1D;AAAA,MACJ,KAAK;AACD,aAAK,yBAAyB;AAC9B;AAAA,MACJ,KAAK;AACD,aAAK,gCAAgC,aAAa,eAAe;AACjE;AAAA,MACJ,KAAK;AACD,aAAK,mCAAmC;AAAA,IAChD;AAAA,EACJ;AAAA,EACA,qCAAqC;AACjC,UAAM,QAAQ,KAAK,iCAAiC;AAAA,MAAU,CAAC,QAAQ,IAAI,mBAAmB;AAAA;AAAA,IAA2C;AACzI,QAAI,UAAU,IAAI;AACd,WAAK,iCAAiC,OAAO,OAAO,CAAC;AAAA,IACzD;AAAA,EACJ;AACJ;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAChB,gBAAgB,QAAQ;AACpB,WAAO,OAAO,IAAI,CAAC,UAAU,KAAK,OAAO,KAAK,CAAC;AAAA,EACnD;AACJ;AAEA,IAAM,mBAAmB;AAAA,EACrB,uBAAuB;AAAG;AAK9B,SAAS,8BAA8B,OAAO,QAAQ;AAClD,MAAI,CAAC,SAAS,KAAK,GAAG;AAClB,WAAO;AAAA,EACX;AACA,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,UAAM,IAAI,UAAU,gBAAgB;AAAA,EACxC;AACA,MAAI,SAAS,KAAK,SAAS,IAAI;AAC3B,UAAM,IAAI,UAAU,gBAAgB;AAAA,EACxC;AACA,MAAI,WAAW,GAAG;AACd,WAAO,MAAM,SAAS;AAAA,EAC1B;AACA,QAAM,cAAc;AACpB,UAAQ,cAAc,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM;AACzD;AACA,IAAM,iBAAN,cAA6B,cAAc;AAAA,EACvC,YAAY,YAAY,SAAS;AAC7B,UAAM;AACN,QAAI,CAAC,SAAS;AACV,gBAAU;AAAA,IACd;AACA,QAAI,CAAC,SAAS,UAAU,KAAK,CAAC,UAAU,UAAU,GAAG;AACjD,mBAAa;AAAA,IACjB;AACA,QAAI,aAAa,GAAG;AAChB,YAAM,IAAI,UAAU,cAAc;AAAA,IACtC;AACA,SAAK,uBAAuB;AAC5B,SAAK,oBAAoB;AACzB,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,OAAO,OAAO;AAGV,UAAM,OAAO,QAAQ,IAAI,MAAW;AACpC,YAAQ,KAAK,IAAI,KAAK;AACtB,WAAO,OAAO,KAAK,0BAA0B,KAAK;AAAA,EACtD;AAAA,EACA,6BAA6B;AAGzB,SAAK,8BAA8B;AACnC,QAAI,KAAK,uBAAuB,KAAK,KAAK,oBAAoB,GAAG;AAC7D,UAAI,OAAO,KAAK;AAChB,aAAO,OAAO,GAAG;AACb,gBAAQ;AACR,aAAK;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,0BAA0B,OAAO;AAC7B,UAAM,OAAO,KAAK,uBAAuB,KAAK;AAC9C,QAAI,UAAU,KAAK,MAAM,KAAK;AAC9B,QAAI,aAAa;AACjB,UAAM,aAAa,KAAK,gCAAgC,SAAY,KAAK,8BAA8B;AACvG,QAAI,OAAO,GAAG;AACV,UAAI,WAAW,EAAE,KAAK,MAAM,QAAQ,IAAI,IAAI,UAAU,MAAM,QAAQ,KAAK,2BAA2B;AACpG,UAAI,YAAY,MAAM;AAClB,oBAAY;AACZ,mBAAW;AAAA,MACf;AACA,mBAAa,iBAAiB,wBAAwB,8BAA8B,CAAC,SAAS,QAAQ,KAAK,2BAA2B,IAAI,KAAK,mBAAmB,UAAU;AAAA,IAChL,OACK;AAED,gBAAU,KAAK,MAAM,UAAU,IAAI,IAAI;AAEvC,UAAI,aAAa,GAAG;AAChB,qBAAa,iBAAiB,wBAAwB,8BAA8B,GAAG,UAAU;AAAA,MACrG;AAAA,IACJ;AACA,WAAO,QAAQ,QAAQ,CAAC,IAAI;AAAA,EAChC;AACJ;AAEA,IAAM,sBAAN,cAAkC,eAAe;AAAA,EAC7C,YAAY,aAAa,KAAK;AAC1B,UAAM,UAAU;AAAA,EACpB;AAAA,EACA,OAAO,OAAO;AACV,WAAO,GAAG,MAAM,OAAO,KAAK,CAAC;AAAA,EACjC;AACJ;AAEA,IAAM,kBAAN,cAA8B,cAAc;AAAA,EACxC,YAAY,WAAW;AACnB,UAAM;AACN,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,OAAO,KAAK;AACR,QAAI,OAAO;AACX,QAAI,MAAM,GAAG;AACT,aAAO;AACP,YAAM,CAAC;AAAA,IACX;AACA,QAAI,MAAM,KAAK;AACX,aAAO,OAAO,KAAK,uBAAuB,GAAG;AAAA,IACjD,WACS,MAAM,QAAQ;AACnB,aAAO,OAAO,KAAK,uBAAuB,MAAM,GAAI,IAAI;AAAA,IAC5D,WACS,MAAM,WAAW;AACtB,YAAM,MAAO,KAAK,MAAM,MAAM,GAAI;AAClC,aAAO,OAAO,KAAK,uBAAuB,MAAM,GAAO,IAAI;AAAA,IAC/D,OACK;AACD,YAAM,MAAU,KAAK,MAAM,MAAM,GAAO;AACxC,aAAO,OAAO,KAAK,uBAAuB,MAAM,GAAU,IAAI;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,uBAAuB,OAAO;AAC1B,QAAI;AACJ,UAAM,aAAa,KAAK,IAAI,IAAI,KAAK,mBAAmB;AACxD,YAAQ,KAAK,MAAM,QAAQ,UAAU,IAAI;AACzC,QAAI,SAAS,SAAS,QAAQ,GAAG;AAC7B,YAAM,MAAM,QAAQ,KAAK,mBAAmB,EAAE,QAAQ,UAAU,EAAE;AAAA,IACtE,OACK;AACD,YAAM,OAAO,KAAK;AAAA,IACtB;AACA,WAAO,IAAI,QAAQ,iBAAiB,CAAC,GAAG,OAAO,EAAE;AAAA,EACrD;AACJ;AAEA,IAAM,uBAAuB;AAC7B,IAAM,iBAAN,MAAqB;AAAA,EACjB,YAAYF,QAAO,IAAI;AACnB,SAAK,uBAAuB;AAC5B,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB;AAC5B,SAAK,wBAAwB,CAAC;AAC9B,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,oBAAoBA;AAAA,EAC7B;AAAA,EACA,kBAAkB;AACd,SAAK,uBAAuB;AAC5B,SAAK,gBAAgB,MAAM;AAC3B,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB;AAC5B,SAAK,wBAAwB,CAAC;AAAA,EAClC;AAAA,EACA,sBAAsB,KAAK,MAAMG,4BAA2B;AACxD,WAAO,KAAK,qBAAqB,KAAK,MAAMA,0BAAyB,EAAE;AAAA,EAC3E;AAAA,EACA,yBAAyB,KAAK,MAAMA,4BAA2B;AAC3D,UAAM,UAAU,KAAK,qBAAqB,KAAK,MAAMA,0BAAyB;AAE9E,aAAS,QAAQ,2BAA2B,MAAM,QAAQ,4BAA4B,MAAM;AAAA,EAChG;AAAA,EACA,qBAAqB,KAAK,MAAMA,4BAA2B;AACvD,UAAM,KAAKA,8BAA6B;AACxC,UAAM,cAAc,OAAO,IAAI,EAAE,QAAQ,IAAI,GAAG;AAChD,QAAI,KAAK,gBAAgB,IAAI,WAAW,GAAG;AACvC,aAAO,cAAc,KAAK,gBAAgB,IAAI,WAAW,CAAC,EAAE;AAAA,IAChE;AACA,QAAI,KAAK,yBAAyB,KAAK,mBAAmB;AACtD,YAAM,cAAc,KAAK,sBAAsB,KAAK,oBAAoB;AACxE,aAAO,KAAK,sBAAsB,KAAK,oBAAoB;AAC3D,WAAK,gBAAgB,OAAO,WAAW;AACvC,WAAK;AACL,WAAK;AAAA,IACT;AACA,QAAI,KAAK;AACT,QAAI,eAAe;AACnB,UAAM,UAAU,IAAI,YAAY,WAAW;AAC3C,QAAI,QAAQ;AACZ,QAAI,QAAQ,UAAU,KAAK,CAAC,CAAC,KAAK,QAAQ;AAEtC,aAAO;AAAA,IACX;AACA,SAAK,gBAAgB,IAAI,aAAa,EAAE,mBAAmB,SAAS,gBAAgB,KAAK,oBAAoB,CAAC;AAC9G,SAAK,sBAAsB,KAAK,mBAAmB,IAAI;AACvD,SAAK;AACL,SAAK;AACL,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,4BAAN,MAAgC;AAAA,EAC5B,YAAY,gBAAgB;AACxB,SAAK,kCAAkC;AACvC,SAAK,4BAA4B;AACjC,SAAK,kBAAkB;AACvB,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,oBAAoB,uBAAuB,iBAAiB,OAAO;AAC/D,SAAK,kCAAkC;AACvC,SAAK,4BAA4B;AACjC,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,eAAe,QAAQ;AACnB,QAAI,KAAK,8BAA8B,QAAQ,KAAK,oCAAoC,MAAM;AAC1F;AAAA,IACJ;AACA,SAAK,gCAAgC,eAAe,QAAQ,KAAK,2BAA2B,KAAK,0BAA0B,KAAK,eAAe;AAAA,EACnJ;AACJ;AACA,IAAM,oBAAN,MAAwB;AAAA,EACpB,YAAY,eAAe,YAAY,YAAY;AAC/C,SAAK,0BAA0B;AAC/B,SAAK,2BAA2B,IAAI,eAAe,EAAE;AACrD,SAAK,uBAAuB;AAC5B,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB,IAAI,0BAA0B,KAAK,wBAAwB;AAAA,EACzF;AAAA,EACA,qBAAqB;AACjB,UAAM,OAAO,KAAK,qBAAqB,wBAAwB,KAAK,oBAAoB;AACxF,QAAI,SAAS,MAAM;AACf,aAAO;AAAA,IACX;AAEA,UAAM,aAAa,KAAK,oBAAoB,KAAK,oBAAoB,IAAI,KAAK,mCAAmC,IAAI,KAAK,qBAAqB,qBAAqB;AACpK,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AACA,UAAM,WAAW,KAAK,6BAA6B,UAAU;AAC7D,QAAI,aAAa,WAAW;AACxB,aAAO;AAAA,IACX;AACA,UAAM,UAAU,KAAK,qBAAqB,mCAAmC;AAC7E,QAAI,QAAQ,uBAAuB,KAAK,oBAAoB;AACxD,WAAK,qBAAqB,QAAQ;AAClC,WAAK,yBAAyB,gBAAgB;AAAA,IAClD;AACA,SAAK,mBAAmB,oBAAoB,KAAK,wBAAwB,uBAAuB,GAAG,SAAS,QAAQ;AACpH,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,yBAAN,cAAqC,8BAA8B;AAAA,EAC/D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,kBAAkB,GAAG,GAAG;AACpB,QAAI,CAAC,KAAK,gBAAgB,mBAAmB;AACzC,aAAO;AAAA,IACX;AACA,UAAM,EAAE,aAAa,OAAO,qBAAqB,WAAW,sBAAsB,WAAW,IAAI,KAAK;AAEtG,QAAI,KAAK,QAAQ,YAAY,KAAsC,KAAK,QAAQ,YAAY,GAAoC;AAC5H,aAAO;AAAA,QACH,uBAAuB,KAAK;AAAA,QAC5B,sBAAsB;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,EAAE,SAAS,KAAK,YAAY,sBAAsB,mBAAmB,GAAG;AACxF,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AACA,QAAI,KAAK,eAAe,sBAAsB,OAAO;AACjD;AAAA,IACJ;AACA,UAAM,IAAI,KAAK,MAAM,KAAK,eAAe,cAAc,kBAAkB;AACzE,QAAI,IAAI,KAAK,IAAI,WAAW,QAAQ;AAChC;AAAA,IACJ;AACA,QAAI,UAAU;AACd,QAAI,cAAc,KAAK,eAAe;AACtC,QAAI,YAAY,KAAK,MAAM,KAAK,eAAe,sBAAsB,oBAAoB;AACzF,iBAAa,KAAK,KAAK,eAAe,mBAAmB;AACzD,uBAAmB,KAAK,GAAG,GAAG,WAAW,KAAK;AAAA,EAClD;AACJ;AAEA,IAAM,+BAAN,MAAmC;AAAA,EAC/B,YAAY,QAAQ;AAChB,SAAK,8BAA8B;AAAA,MAC/B,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,mBAAmB;AAAA,IACvB;AACA,SAAK,0BAA0B,IAAI,uBAAuB;AAC1D,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB;AACzB,SAAK,mBAAmB,OAAO,gBAAgB;AAC/C,SAAK,wBAAwB,kBAAkB,KAAK,2BAA2B;AAAA,EACnF;AAAA,EACA,mBAAmB;AACf,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,qBAAqB;AACjB,QAAI,CAAC,KAAK,kBAAkB,kBAAkB,GAAG;AAC7C,aAAO;AAAA,IACX;AACA,QAAI,KAAK,uBAAuB;AAC5B,WAAK,sBAAsB;AAC3B,WAAK,wBAAwB;AAAA,IACjC;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,mCAAN,cAA+C,6BAA6B;AAAA;AAAA,EAExE,YAAY,QAAQ;AAChB,UAAM,MAAM;AAAA,EAChB;AAAA,EACA,wBAAwB;AACpB,SAAK,4BAA4B,oBAAoB;AACrD,UAAM,aAAa,KAAK,kBAAkB,qBAAqB;AAC/D,UAAM,OAAO,WAAW,eAAe,EAAE;AACzC,QAAI,SAAS,KAAqC,SAAS,GAAqC;AAC5F;AAAA,IACJ;AACA,UAAM,gBAAgB,KAAK,kBAAkB,kBAAkB;AAC/D,QAAI,CAAC,cAAc,mBAAmB,CAAC,KAAK,kBAAkB,kBAAkB,GAAG;AAC/E;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,kBAAkB,qBAAqB;AAC/D,QAAI,eAAe,MAAM;AACrB;AAAA,IACJ;AACA,SAAK,4BAA4B,oBAAoB;AACrD,SAAK,4BAA4B,cAAc,WAAW,4BAA4B,WAAW,iBAAiB,WAAW,eAAe;AAC5I,SAAK,4BAA4B,kBAAkB,cAAc;AACjE,SAAK,4BAA4B,sBAAsB,cAAc;AACrE,SAAK,4BAA4B,sBAAsB,cAAc;AAAA,EACzE;AACJ;AAEA,IAAM,mCAAN,cAA+C,8BAA8B;AAAA,EACzE,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,GAAG;AAC5E,UAAM,OAAO,KAAK;AAClB,QAAI,SAAS,MAAM;AACf;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,oBAAoB,CAAC;AAC9D,UAAM,aAAc,YAAY,IAAK;AACrC,UAAM,UAAU,KAAK,MAAM,KAAK,iBAAiB,IAAI,oBAAoB,IAAI;AAC7E,UAAM,UAAU,KAAK,iBAAiB,IAAI;AAC1C,QAAI,YAAY,KAAK;AACrB,QAAI,UAAU;AAEd,UAAM,oBAAoB,KAAK,IAAI,GAAG,KAAK,4BAA4B,GAAG,IAAI;AAC9E,QAAI,IAAI,SAAS,SAAS,mBAAmB,GAAG,IAAI,KAAK,IAAI,KAAK;AAClE,QAAI,KAAK;AACT,QAAI,YAAY,KAAK;AACrB,QAAI,UAAU;AACd,QAAI,IAAI,SAAS,SAAS,KAAK,mBAAmB,sBAAsB,GAAG,IAAI,KAAK,IAAI,KAAK;AAC7F,QAAI,KAAK;AACT,QAAI,YAAY;AAChB,QAAI,cAAc,KAAK;AACvB,QAAI,UAAU;AACd,QAAI,IAAI,SAAS,SAAS,KAAK,mBAAmB,uBAAuB,YAAY,GAAG,GAAG,IAAI,KAAK,IAAI,KAAK;AAC7G,QAAI,OAAO;AAAA,EACf;AACJ;AAEA,IAAM,sBAAsB;AAAA,EACxB;AAAA,IACI,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,qBAAqB;AAAA,IACrB,0BAA0B;AAAA,IAC1B,wBAAwB;AAAA,IACxB,4BAA4B;AAAA,IAC5B,0BAA0B;AAAA,EAC9B;AAAA,EACA;AAAA,IACI,iBAAiB;AAAA,IACjB,eAAe,OAAoC;AAAA,IACnD,uBAAuB;AAAA,IACvB,qBAAqB;AAAA,IACrB,0BAA0B;AAAA,IAC1B,wBAAwB;AAAA,IACxB,4BAA4B;AAAA,IAC5B,0BAA0B;AAAA,EAC9B;AAAA,EACA;AAAA,IACI,iBAAiB,OAAoC;AAAA,IACrD,eAAe,OAAoC,QAAqC;AAAA,IACxF,uBAAuB;AAAA,IACvB,qBAAqB;AAAA,IACrB,0BAA0B;AAAA,IAC1B,wBAAwB;AAAA,IACxB,4BAA4B;AAAA,IAC5B,0BAA0B;AAAA,EAC9B;AACJ;AACA,SAAS,OAAO,OAAO,aAAa,WAAW;AAC3C,SAAO,eAAe,YAAY,eAAe;AACrD;AACA,IAAM,mCAAN,MAAuC;AAAA,EACnC,YAAY,QAAQ;AAChB,SAAK,qBAAqB,IAAI,iCAAiC;AAC/D,SAAK,wBAAwB;AAC7B,SAAK,6BAA6B;AAClC,SAAK,sBAAsB,YAAY,IAAI;AAC3C,SAAK,oBAAoB,KAAK,sBAAsB;AACpD,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,0BAA0B;AACtB,SAAK,oBAAoB,KAAK,sBAAsB;AACpD,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,sCAAsC;AAClC,SAAK,iBAAiB;AACtB,QAAI,KAAK,iBAAiB,kBAAkB,EAAE,uBAAuB,GAA6C;AAC9G,YAAM,MAAM,YAAY,IAAI;AAC5B,YAAM,qBAAqB,KAAK,oBAAoB;AACpD,UAAI,qBAAqB,GAAG;AACxB,YAAI,qBAAqB,OAAuC,GAAG;AAC/D,eAAK,qBAAqB;AAAA,QAC9B;AACA;AAAA,MACJ;AACA,WAAK,sBAAsB;AAC3B,WAAK,oBAAoB,MAAM;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,4BAA4B;AACxB,SAAK,6BAA6B;AAAA,EACtC;AAAA,EACA,oBAAoB;AAEhB,WAAO,KAAK,iBAAiB,kBAAkB,EAAE,uBAAuB;AAAA,EAC5E;AAAA,EACA,4BAA4B;AACxB,YAAQ,KAAK,iBAAiB,kBAAkB,EAAE,oBAAoB;AAAA,MAClE,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO,YAAY,IAAI,KAAK,KAAK;AAAA,IACzC;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,QAAI,KAAK,uBAAuB;AAC5B,WAAK,qBAAqB;AAC1B,WAAK,wBAAwB;AAC7B,WAAK,6BAA6B;AAAA,IACtC,WACS,KAAK,4BAA4B;AACtC,WAAK,kCAAkC;AACvC,WAAK,6BAA6B;AAAA,IACtC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,SAAK,mBAAmB,kBAAkB,IAAI;AAC9C,UAAM,YAAY,KAAK,iBAAiB,gBAAgB,EAAE,oBAAoB;AAC9E,UAAM,eAAe,UAAU,6BAA6B;AAC5D,UAAM,aAAa,KAAK,iBAAiB,qBAAqB;AAC9D,QAAI,iBAAiB,QAAQ,eAAe,MAAM;AAC9C;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,iBAAiB,wBAAwB,IAAI;AACpE,QAAI,UAAU,oBAAoB,CAAC,aAAa,mBAAmB,UAAU,eAAe,GAAG;AAC3F;AAAA,IACJ;AACA,UAAM,iBAAiB;AAAA,MACnB,GAAG,UAAU,4BAA4B,UAAU,eAAe;AAAA,MAClE,GAAG,KAAK,iBAAiB,qBAAqB,EAAE,4BAA4B,UAAU,iBAAiB,WAAW,eAAe;AAAA,IACrI;AACA,UAAM,kBAAkB,UAAU;AAClC,UAAM,kBAAkB,KAAK,iBAAiB,kBAAkB,EAAE;AAClE,UAAM,OAAO,KAAK,wBAAwB,KAAK,mBAAmB,GAAG,eAAe;AACpF,SAAK,mBAAmB,kBAAkB;AAAA,MACtC,2BAA2B;AAAA,MAC3B,2BAA2B;AAAA,MAC3B,qBAAqB,KAAK;AAAA,MAC1B,uBAAuB,KAAK;AAAA,MAC5B,kBAAkB,KAAK;AAAA,MACvB,kBAAkB;AAAA,IACtB,CAAC;AAAA,EACL;AAAA,EACA,oCAAoC;AAChC,UAAM,eAAe,KAAK,mBAAmB,eAAe;AAC5D,QAAI,iBAAiB,MAAM;AACvB,YAAM,OAAO,KAAK,wBAAwB,KAAK,mBAAmB,GAAG,aAAa,yBAAyB;AAC3G,mBAAa,sBAAsB,KAAK;AACxC,mBAAa,wBAAwB,KAAK;AAC1C,mBAAa,mBAAmB,KAAK;AAAA,IACzC;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK,0BAA0B,IAAI,YAAY,IAAI,IAAI,KAAK,sBAAsB,OAAuC;AAAA,EACpI;AAAA,EACA,gBAAgB,iBAAiB,OAAO,YAAY,UAAU;AAC1D,UAAM,QAAQ,cAAc,WAAW,cAAc;AACrD,WAAO,KAAK,iBAAiB,gBAAgB,EAAE,sBAAsB,EAAE,qBAAqB,iBAAiB,KAAK;AAAA,EACtH;AAAA,EACA,wBAAwB,oBAAoB,WAAW;AACnD,UAAM,cAAe,qBAAqB,OAAwC;AAClF,QAAI;AACJ,eAAW,aAAa,qBAAqB;AACzC,UAAI,eAAe,UAAU,mBAAmB,eAAe,UAAU,eAAe;AACpF,2BAAmB;AACnB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,qBAAqB,QAAW,2CAA2C;AAClF,UAAM,YAAY,cAAc,iBAAiB,oBAAoB,iBAAiB,gBAAgB,iBAAiB;AACvH,WAAO;AAAA,MACH,qBAAqB,KAAK,gBAAgB,WAAW,UAAU,iBAAiB,0BAA0B,iBAAiB,sBAAsB;AAAA,MACjJ,uBAAuB,KAAK,gBAAgB,WAAW,UAAU,iBAAiB,4BAA4B,iBAAiB,wBAAwB;AAAA,MACvJ,kBAAkB,OAAO,UAAU,iBAAiB,uBAAuB,iBAAiB,mBAAmB;AAAA,IACnH;AAAA,EACJ;AACJ;AAEA,IAAM,0BAAN,cAAsC,6BAA6B;AAAA;AAAA,EAE/D,YAAY,QAAQ;AAChB,UAAM,MAAM;AAAA,EAChB;AAAA,EACA,wBAAwB;AACpB,UAAM,OAAO,KAAK;AAClB,SAAK,oBAAoB;AACzB,UAAM,gBAAgB,KAAK,kBAAkB,kBAAkB;AAC/D,QAAI,CAAC,cAAc,oBAAoB,CAAC,KAAK,kBAAkB,kBAAkB,GAAG;AAChF;AAAA,IACJ;AACA,UAAM,gBAAgB,KAAK,kBAAkB;AAAA,MAAwB,cAAc,oBAAoB;AAAA;AAAA,IAA+B;AACtI,QAAI,cAAc,kBAAkB;AAChC;AAAA,IACJ;AACA,SAAK,oBAAoB;AACzB,SAAK,cAAc,cAAc;AACjC,SAAK,kBAAkB,KAAK,kBAAkB,yBAAyB,cAAc,eAAe;AACpG,SAAK,sBAAsB,cAAc;AACzC,SAAK,sBAAsB,cAAc;AAAA,EAC7C;AACJ;AAEA,IAAM,sBAAN,cAAkC,cAAc;AAAA,EAC5C,YAAY,QAAQ;AAChB,UAAM;AACN,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,8BAA8B,kBAAkB,kBAAkB,oBAAoB;AAClF,qBAAiB,oBAAoB;AACrC,qBAAiB,oBAAoB;AACrC,UAAM,SAAS,KAAK;AACpB,QAAI,CAAC,OAAO,kBAAkB,GAAG;AAC7B;AAAA,IACJ;AACA,UAAM,gBAAgB,OAAO,kBAAkB;AAC/C,UAAM,sBAAsB,cAAc;AAC1C,UAAM,kBAAkB,OAAO,gBAAgB,MAAM;AACrD,UAAM,yBAAyB,cAAc,wBAAwB;AACrE,UAAM,gBAAgB,OAAO,wBAAwB,KAAK;AAC1D,QAAI,cAAc,kBAAkB;AAChC;AAAA,IACJ;AACA,QAAI,qBAAqB;AACrB,uBAAiB,iBAAiB,KAAK,oBAAoB,eAAe,qBAAqB,sBAAsB;AACrH,uBAAiB,oBAAoB,iBAAiB,eAAe,WAAW;AAAA,IACpF;AACA,QAAI,mBAAmB,wBAAwB;AAC3C,uBAAiB,iBAAiB,KAAK,oBAAoB,eAAe,qBAAqB,iBAAiB,sBAAsB;AACtI,uBAAiB,oBAAoB,iBAAiB,eAAe,SAAS;AAAA,IAClF;AACA,UAAM,iBAAiB,OAAO,yBAAyB,cAAc,eAAe;AACpF,UAAM,SAAS,KAAK,iBAAiB,gBAAgB,EAAE,sBAAsB,EAAE,iCAAiC,cAAc;AAC9H,uBAAmB,uBAAuB,OAAO;AACjD,uBAAmB,uBAAuB,cAAc;AACxD,qBAAiB,wBAAwB,OAAO,gBAAgB,EAAE,2CAA2C,cAAc,uBAAuB,OAAO,qBAAqB,EAAE,iBAAiB,CAAC;AAClM,qBAAiB,wBAAwB;AACzC,qBAAiB,kBAAkB,OAAO;AAC1C,qBAAiB,kBAAkB,OAAO;AAAA,EAC9C;AAAA,EACA,oBAAoB,WAAW,qBAAqB,iBAAiB,wBAAwB;AACzF,QAAI,SAAS;AACb,UAAM,QAAQ,KAAK,iBAAiB,gBAAgB;AACpD,QAAI,mBAAmB,MAAM,WAAW,GAAG;AACvC,gBAAU,GAAG,KAAK;AAAA,IACtB;AACA,QAAI,uBAAuB,wBAAwB;AAC/C,gBAAU,KAAK,iBAAiB,qBAAqB,EAAE,uBAAuB,IAC1E,UAAU,mCAAmC,UAAU;AAAA,IAC/D;AACA,WAAO,OAAO,KAAK;AAAA,EACvB;AAAA,EACA,oBAAoB,eAAe,qBAAqB,wBAAwB;AAC5E,QAAI,CAAC,qBAAqB;AACtB,aAAO;AAAA,IACX;AACA,QAAI,CAAC,wBAAwB;AACzB,aAAO,cAAc;AAAA,IACzB;AACA,WAAO,KAAK,iBAAiB,qBAAqB,EAAE,uBAAuB,IACvE,cAAc,qCAAqC,cAAc;AAAA,EACzE;AACJ;AAEA,SAAS,oBAAoB,QAAQ,UAAU,UAAU,UAAU;AAC/D,QAAM,cAAc,OAAO,SAAS,QAAQ;AAC5C,QAAM,eAAe,OAAO,SAAS,QAAQ;AAC7C,MAAI,eAAe,cAAc;AAC7B,WAAO,OAAO,UAAU,QAAQ;AAAA,EACpC;AACA,SAAO,CAAC,eAAe,CAAC,eAAe,WAAY,cAAc,WAAW;AAChF;AACA,IAAM,iBAAN,MAAM,gBAAe;AAAA,EACjB,YAAY,UAAU,UAAU;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,iBAAiB,IAAI;AACjB,QAAI,OAAO,MAAM;AACb,aAAO;AAAA,IACX;AACA,WAAO,KAAK,uBAAuB,GAAG,sBAAsB,KAAK,uBAAuB,GAAG;AAAA,EAC/F;AAAA,EACA,kBAAkB;AACd,WAAO,IAAI,gBAAe,KAAK,oBAAoB,KAAK,kBAAkB;AAAA,EAC9E;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK,qBAAqB,KAAK;AAAA,EAC1C;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK,uBAAuB,KAAK,sBAAsB,OAAO,MAAM,KAAK,kBAAkB,KAAK,OAAO,MAAM,KAAK,kBAAkB;AAAA,EAC/I;AAAA,EACA,gBAAgB,cAAc;AAC1B,QAAI,iBAAiB,MAAM;AACvB,aAAO;AAAA,IACX;AACA,WAAO,IAAI,gBAAe,oBAAoB,KAAK,KAAK,KAAK,mBAAmB,GAAG,aAAa,mBAAmB,GAAG,SAAS,GAAG,oBAAoB,KAAK,KAAK,KAAK,mBAAmB,GAAG,aAAa,mBAAmB,GAAG,QAAQ,CAAC;AAAA,EAC3O;AAAA,EACA,4BAA4B,OAAO;AAC/B,QAAI,CAAC,SAAS,KAAK,GAAG;AAClB;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,qBAAqB,KAAK;AAC7C,QAAI,UAAU,GAAG;AACb;AAAA,IACJ;AACA,UAAM,UAAU,KAAK,qBAAqB,KAAK,sBAAsB;AACrE,QAAI,WAAW,KAAK,qBAAqB;AACzC,QAAI,WAAW,KAAK,qBAAqB;AACzC,gBAAY;AACZ,gBAAY;AACZ,SAAK,qBAAqB,SAAS;AACnC,SAAK,qBAAqB,SAAS;AAAA,EACvC;AAAA,EACA,gBAAgB,OAAO;AACnB,QAAI,CAAC,SAAS,KAAK,GAAG;AAClB;AAAA,IACJ;AACA,SAAK,sBAAsB;AAC3B,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,kBAAkB;AACd,WAAO;AAAA,MACH,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,OAAO,kBAAkB,KAAK;AAC1B,WAAQ,QAAQ,OAAQ,OAAO,IAAI,gBAAe,IAAI,UAAU,IAAI,QAAQ;AAAA,EAChF;AACJ;AAEA,IAAM,oBAAN,MAAM,mBAAkB;AAAA,EACpB,YAAY,YAAY,SAAS;AAC7B,SAAK,uBAAuB;AAC5B,SAAK,oBAAoB,WAAW;AAAA,EACxC;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB;AACd,WAAO;AAAA,MACH,YAAY,KAAK,yBAAyB,OAAO,OAAO,KAAK,qBAAqB,gBAAgB;AAAA,MAClG,SAAS,KAAK,qBAAqB;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,OAAO,kBAAkB,KAAK;AAC1B,WAAQ,QAAQ,OAAQ,OAAO,IAAI,mBAAkB,eAAe,kBAAkB,IAAI,UAAU,GAAG,IAAI,OAAO;AAAA,EACtH;AACJ;AAEA,IAAM,0BAAN,cAAsC,6BAA6B;AAAA,EAC/D,YAAY,QAAQ,WAAW;AAC3B,UAAM,MAAM;AACZ,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,wBAAwB;AACpB,UAAM,OAAO,KAAK;AAClB,SAAK,oBAAoB;AACzB,UAAM,cAAc,KAAK,oBAAoB,kBAAkB;AAC/D,QAAI,CAAC,KAAK,kBAAkB,kBAAkB,KAAK,CAAC,YAAY,aAAa;AACzE;AAAA,IACJ;AACA,UAAM,IAAI,KAAK,oBAAoB,iBAAiB;AACpD,QAAI,MAAM,MAAM;AACZ;AAAA,IACJ;AACA,SAAK,oBAAoB;AACzB,SAAK,cAAc;AACnB,SAAK,kBAAkB,YAAY;AACnC,SAAK,sBAAsB,YAAY;AACvC,SAAK,sBAAsB,YAAY;AACvC,SAAK,uBAAuB,KAAK,oBAAoB,kBAAkB,EAAE;AAAA,EAC7E;AACJ;AAEA,IAAM,+BAAN,cAA2C,cAAc;AAAA,EACrD,YAAY,QAAQ,WAAW;AAC3B,UAAM;AACN,SAAK,mBAAmB;AACxB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,8BAA8B,kBAAkB,kBAAkB,YAAY;AAC1E,qBAAiB,oBAAoB;AACrC,qBAAiB,oBAAoB;AACrC,UAAM,UAAU,KAAK,oBAAoB,kBAAkB;AAC3D,UAAM,eAAe,QAAQ;AAC7B,UAAM,gBAAgB,QAAQ,UAAU;AACxC,UAAM,SAAS,KAAK;AACpB,QAAI,CAAC,gBAAgB,CAAC,OAAO,kBAAkB,GAAG;AAC9C;AAAA,IACJ;AACA,UAAM,IAAI,KAAK,oBAAoB,iBAAiB;AACpD,QAAI,MAAM,MAAM;AACZ;AAAA,IACJ;AACA,QAAI,eAAe;AACf,uBAAiB,iBAAiB,QAAQ;AAC1C,uBAAiB,oBAAoB;AAAA,IACzC;AACA,qBAAiB,wBAAwB,OAAO,gBAAgB,EAAE,2CAA2C,IAAI,OAAO,qBAAqB,EAAE,iBAAiB,CAAC;AACjK,qBAAiB,iBAAiB,KAAK,sBAAsB,QAAQ,KAAK;AAC1E,qBAAiB,oBAAoB;AACrC,UAAM,SAAS,KAAK,iBAAiB,gBAAgB,EAAE,sBAAsB,EAAE,iCAAiC,QAAQ,kBAAkB,QAAQ,KAAK;AACvJ,eAAW,uBAAuB,OAAO;AACzC,UAAM,YAAY,QAAQ,sBAAsB,OAAO;AACvD,qBAAiB,kBAAkB;AACnC,qBAAiB,kBAAkB;AACnC,eAAW,uBAAuB;AAAA,EACtC;AAAA,EACA,sBAAsB,OAAO;AACzB,UAAM,aAAa,KAAK,iBAAiB,qBAAqB;AAC9D,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,iBAAiB,qBAAqB,EAAE,sBAAsB,OAAO,WAAW,eAAe;AAAA,EAC/G;AACJ;AAEA,IAAM,kBAAN,MAAsB;AAAA,EAClB,YAAY,QAAQ,SAAS;AACzB,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AACzB,SAAK,0BAA0B,IAAI,wBAAwB,QAAQ,IAAI;AACvE,SAAK,0BAA0B,IAAI,6BAA6B,QAAQ,IAAI;AAC5E,SAAK,8BAA8B,IAAI,kBAAkB,KAAK,yBAAyB,QAAQ,OAAO,gBAAgB,CAAC;AAAA,EAC3H;AAAA,EACA,uBAAuB,SAAS;AAC5B,UAAM,KAAK,mBAAmB,OAAO;AACrC,SAAK,iBAAiB;AACtB,SAAK,iBAAiB,gBAAgB,EAAE,sBAAsB;AAAA,EAClE;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB;AACf,SAAK,wBAAwB,iBAAiB;AAC9C,SAAK,wBAAwB,iBAAiB;AAAA,EAClD;AAAA,EACA,mBAAmB;AACf,UAAM,SAAS,KAAK;AACpB,UAAM,aAAa,OAAO,qBAAqB;AAC/C,UAAM,YAAY,OAAO,gBAAgB,EAAE,oBAAoB;AAC/D,QAAI,UAAU,kBAAkB,KAAK,WAAW,kBAAkB,GAAG;AACjE,aAAO;AAAA,IACX;AACA,UAAM,aAAa,OAAO,qBAAqB;AAC/C,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AACA,WAAO,WAAW,4BAA4B,KAAK,kBAAkB,OAAO,WAAW,eAAe;AAAA,EAC1G;AACJ;AAEA,IAAM,kBAAN,cAA8B,WAAW;AAAA,EACrC,YAAY,OAAO;AACf,UAAM;AACN,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,gBAAgB;AAAA;AAAA,EAElB,KAAK,CAAC,SAAS,UAAU,UAAU,oBAAoB;AACnD,UAAM,UAAU,SAAS;AACzB,UAAM,YAAY,SAAS;AAC3B,UAAM,aAAa,cAAc,QAAQ,UAAU,eAAe,CAAC;AACnE,UAAM,OAAO,OAAO,WAAW;AAAA,MAAgB;AAAA;AAAA,IAA8B,CAAC,KAAK,OAAO,WAAW;AAAA,MAAgB;AAAA;AAAA,IAA+B,CAAC;AACrJ,WAAO;AAAA,MACH,oBAAoB,WAAW,oBAAoB,OAAO,UAAU;AAAA,IACxE;AAAA,EACJ;AAAA;AAAA,EAEA,aAAa,CAAC,SAAS,kBAAkB,UAAU,oBAAoB;AACnE,UAAM,UAAU,iBAAiB;AACjC,UAAM,YAAY,iBAAiB;AACnC,UAAM,gBAAgB,iBAAiB;AACvC,UAAM,kBAAkB,iBAAiB;AACzC,UAAM,cAAc,iBAAiB;AACrC,UAAM,gBAAgB,iBAAiB;AACvC,UAAM,aAAa,cAAc,QAAQ,UAAU,eAAe,CAAC;AACnE,UAAM,OAAO,OAAO,WAAW;AAAA,MAAgB;AAAA;AAAA,IAA8B,CAAC,KAAK,OAAO,WAAW;AAAA,MAAgB;AAAA;AAAA,IAA+B,CAAC;AACrJ,WAAO;AAAA,MACH,oBAAoB,WAAW,oBAAoB,OAAO,UAAU;AAAA,MACpE,0BAA0B,WAAW,0BAA0B,OAAO,gBAAgB;AAAA,MACtF,wBAAwB,WAAW,wBAAwB,OAAO,cAAc;AAAA,IACpF;AAAA,EACJ;AAAA;AAAA,EAEA,QAAQ,CAAC,SAAS,aAAa,UAAU,oBAAoB;AACzD,UAAM,aAAa,cAAc,QAAQ,UAAU,eAAe,CAAC;AACnE,WAAO;AAAA,MACH,oBAAoB,WAAW,mBAAmB,YAAY;AAAA,IAClE;AAAA,EACJ;AAAA;AAAA,EAEA,MAAM,CAAC,SAAS,WAAW,UAAU,oBAAoB;AACrD,UAAM,aAAa,cAAc,QAAQ,UAAU,eAAe,CAAC;AACnE,WAAO;AAAA,MACH,oBAAoB,WAAW,uBAAuB,UAAU;AAAA,MAChE,qBAAqB,WAAW,uBAAuB,UAAU;AAAA,MACjE,oBAAoB,WAAW,sBAAsB,UAAU;AAAA,MAC/D,uBAAuB,WAAW,yBAAyB,UAAU;AAAA,IACzE;AAAA,EACJ;AAAA;AAAA,EAEA,UAAU,CAAC,SAAS,eAAe,UAAU,oBAAoB;AAC7D,UAAM,aAAa,cAAc,QAAQ,UAAU,eAAe,CAAC;AACnE,UAAM,kBAAkB,WAAW;AAAA,MAAgB;AAAA;AAAA,IAA+B,KAAK,cAAc,UAAU;AAC/G,WAAO;AAAA,MACH,oBAAoB,kBAAkB,cAAc,eAAe,cAAc;AAAA,MACjF,wBAAwB,WAAW,0BAA0B,cAAc;AAAA,MAC3E,2BAA2B,WAAW,6BAA6B,cAAc;AAAA,MACjF,yBAAyB,WAAW,2BAA2B,cAAc;AAAA,MAC7E,yBAAyB,WAAW,2BAA2B,cAAc;AAAA,MAC7E,4BAA4B,WAAW,8BAA8B,cAAc;AAAA,MACnF,4BAA4B,WAAW,8BAA8B,cAAc;AAAA,IACvF;AAAA,EACJ;AAAA;AAAA,EAEA,MAAM,CAAC,SAAS,WAAW,UAAU,oBAAoB;AACrD,UAAM,aAAa,cAAc,QAAQ,UAAU,eAAe,CAAC;AACnE,WAAO;AAAA,MACH,oBAAoB,WAAW,mBAAmB,UAAU;AAAA,MAC5D,qBAAqB,WAAW,mBAAmB,UAAU;AAAA,IACjE;AAAA,EACJ;AAAA;AAAA,EAEA,WAAW,CAAC,SAAS,gBAAgB,UAAU,oBAAoB;AAC/D,UAAM,aAAa,cAAc,QAAQ,UAAU,eAAe,CAAC;AACnE,WAAO;AAAA,MACH,oBAAoB,WAAW,mBAAmB,eAAe;AAAA,IACrE;AAAA,EACJ;AACJ;AACA,IAAM,mBAAN,MAAuB;AAAA,EACnB,YAAY,QAAQ;AAChB,SAAK,oBAAoB,CAAC,UAAU,oBAAoB;AACpD,UAAI,oBAAoB,QAAW;AAC/B,eAAO,gBAAgB;AAAA,MAC3B;AACA,aAAO,KAAK,iBAAiB,eAAe,EAAE,kBAAkB,QAAQ;AAAA,IAC5E;AACA,SAAK,mBAAmB;AACxB,SAAK,wBAAwB,cAAc,OAAO,qBAAqB,CAAC;AAAA,EAC5E;AAAA,EACA,mBAAmB,UAAU,iBAAiB;AAG1C,WAAO,KAAK,sBAAsB,KAAK,mBAAmB,KAAK,iBAAiB,kBAAkB,GAAG,UAAU,eAAe;AAAA,EAClI;AACJ;AAOA,SAAS,aAAa,OAAO,KAAK,OAAO,SAAS,QAAQ,GAAG,KAAK,IAAI,QAAQ;AAC1E,MAAI,QAAQ,KAAK;AACjB,SAAO,IAAI,OAAO;AACd,UAAM,SAAU,SAAS;AACzB,UAAM,MAAM,QAAQ;AACpB,QAAI,QAAQ,IAAI,GAAG,GAAG,KAAK,MAAM,OAAO;AACpC,cAAQ,MAAM;AACd,eAAS,SAAS;AAAA,IACtB,OACK;AACD,cAAQ;AAAA,IACZ;AAAA,EACJ;AACA,SAAO;AACX;AACA,IAAM,aAAa,aAAa,KAAK,MAAM,IAAI;AAC/C,IAAM,aAAa,aAAa,KAAK,MAAM,KAAK;AAKhD,IAAI;AAAA,CACH,SAAUC,oBAAmB;AAI1B,EAAAA,mBAAkBA,mBAAkB,aAAa,IAAI,EAAE,IAAI;AAI3D,EAAAA,mBAAkBA,mBAAkB,MAAM,IAAI,CAAC,IAAI;AAInD,EAAAA,mBAAkBA,mBAAkB,cAAc,IAAI,CAAC,IAAI;AAC/D,GAAG,sBAAsB,oBAAoB,CAAC,EAAE;AAEhD,IAAM,aAAa;AAKnB,IAAM,WAAN,MAAe;AAAA,EACX,cAAc;AACV,SAAK,kBAAkB,CAAC;AACxB,SAAK,wBAAwB,oBAAI,IAAI;AACrC,SAAK,2BAA2B,oBAAI,IAAI;AACxC,SAAK,oBAAoB,CAAC;AAAA,EAC9B;AAAA;AAAA,EAEA,iBAAiB;AACb,WAAO,KAAK,eAAe,IAAI,IAAI,KAAK,gBAAgB,KAAK,gBAAgB,SAAS,CAAC,IAAI;AAAA,EAC/F;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK,eAAe,IAAI,IAAI,KAAK,kBAAkB,CAAC,IAAI;AAAA,EACnE;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,eAAe,IAAI,IAAI,KAAK,kBAAmB,KAAK,gBAAgB,SAAS,CAAE,IAAI;AAAA,EACnG;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,gBAAgB;AAAA,EAChC;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK,eAAe,MAAM;AAAA,EACrC;AAAA,EACA,mBAAmB,OAAO;AACtB,WAAO,KAAK;AAAA,MAAiB;AAAA,MAAO;AAAA;AAAA,IAA8B,MAAM;AAAA,EAC5E;AAAA,EACA,kBAAkB,OAAO;AACrB,WAAO,KAAK,iBAAiB,KAAK;AAAA,EACtC;AAAA,EACA,iBAAiB,OAAO,aAAa,GAAgC;AACjE,UAAM,MAAM,KAAK,iBAAiB,OAAO,UAAU;AACnD,QAAI,QAAQ,MAAM;AACd,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,GAAG,KAAK,kBAAkB,GAAG;AAAA,MAC7B,iBAAiB,KAAK,kBAAkB,GAAG;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,8BAA8B,OAAO,KAAK,OAAO;AAG7C,QAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,QAAI,SAAS;AACb,eAAW,QAAQ,OAAO;AACtB,YAAM,aAAa,KAAK,kCAAkC,OAAO,KAAK,IAAI;AAC1E,eAAS,YAAY,QAAQ,UAAU;AAAA,IAC3C;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB,UAAU;AACxB,SAAK,yBAAyB,MAAM;AACpC,SAAK,sBAAsB,MAAM;AACjC,SAAK,kBAAkB;AACvB,SAAK,oBAAoB,SAAS,IAAI,CAAC,YAAY,QAAQ,eAAe;AAAA,EAC9E;AAAA;AAAA,EAEA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB,QAAQ;AACtB,WAAO,KAAK,gBAAgB,MAAM,EAAE;AAAA,EACxC;AAAA,EACA,kBAAkB,QAAQ;AACtB,WAAO,KAAK,gBAAgB,MAAM;AAAA,EACtC;AAAA,EACA,iBAAiB,OAAO,YAAY;AAChC,UAAM,WAAW,KAAK,kBAAkB,KAAK;AAC7C,QAAI,aAAa,QAAQ,eAAe,GAAgC;AACpE,cAAQ,YAAY;AAAA,QAChB,KAAK;AACD,iBAAO,KAAK,4BAA4B,KAAK;AAAA,QACjD,KAAK;AACD,iBAAO,KAAK,6BAA6B,KAAK;AAAA,QAClD;AACI,gBAAM,IAAI,UAAU,qBAAqB;AAAA,MACjD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,4BAA4B,OAAO;AAC/B,QAAI,iBAAiB,KAAK,qBAAqB,KAAK;AACpD,QAAI,iBAAiB,GAAG;AACpB,uBAAiB,iBAAiB;AAAA,IACtC;AACA,WAAQ,mBAAmB,KAAK,gBAAgB,UAAU,KAAK,kBAAkB,cAAc,IAAI,QAAS,iBAAiB;AAAA,EACjI;AAAA,EACA,6BAA6B,OAAO;AAChC,UAAM,kBAAkB,KAAK,qBAAqB,KAAK;AACvD,WAAQ,oBAAoB,KAAK,gBAAgB,UAAU,QAAQ,KAAK,kBAAkB,eAAe,IAAK,kBAAkB;AAAA,EACpI;AAAA,EACA,kBAAkB,OAAO;AACrB,UAAM,QAAQ,KAAK,qBAAqB,KAAK;AAC7C,QAAI,UAAU,KAAK,gBAAgB,UAAU,EAAE,QAAQ,KAAK,gBAAgB,KAAK,EAAE,kBAAkB;AACjG,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,OAAO;AACxB,WAAO,WAAW,KAAK,iBAAiB,OAAO,CAAC,GAAG,MAAM,EAAE,kBAAkB,CAAC;AAAA,EAClF;AAAA,EACA,qBAAqB,OAAO;AACxB,WAAO,WAAW,KAAK,iBAAiB,OAAO,CAAC,GAAG,MAAM,EAAE,kBAAkB,CAAC;AAAA,EAClF;AAAA,EACA,qBAAqB,YAAY,mBAAmB,WAAW;AAC3D,QAAI,SAAS;AACb,aAAS,IAAI,YAAY,IAAI,mBAAmB,KAAK;AACjD,YAAM,SAAS,KAAK,gBAAgB,CAAC,EAAE;AACvC,YAAM,IAAI,OAAO,SAAS;AAC1B,UAAI,OAAO,MAAM,CAAC,GAAG;AACjB;AAAA,MACJ;AACA,UAAI,WAAW,MAAM;AACjB,iBAAS,EAAE,eAAe,GAAG,eAAe,EAAE;AAAA,MAClD,OACK;AACD,YAAI,IAAI,OAAO,eAAe;AAC1B,iBAAO,gBAAgB;AAAA,QAC3B;AACA,YAAI,IAAI,OAAO,eAAe;AAC1B,iBAAO,gBAAgB;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kCAAkC,OAAO,KAAK,WAAW;AAGrD,QAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,QAAI,SAAS;AAEb,UAAM,aAAa,cAAc,KAAK,qBAAqB,CAAC;AAC5D,UAAM,YAAY,cAAc,KAAK,oBAAoB,CAAC;AAC1D,UAAM,IAAI,KAAK,IAAI,OAAO,UAAU;AACpC,UAAM,IAAI,KAAK,IAAI,KAAK,SAAS;AACjC,UAAM,YAAY,KAAK,KAAK,IAAI,UAAU,IAAI;AAC9C,UAAM,aAAa,KAAK,IAAI,WAAW,KAAK,MAAM,IAAI,UAAU,IAAI,UAAU;AAC9E;AACI,YAAM,aAAa,KAAK,qBAAqB,CAAC;AAC9C,YAAM,WAAW,KAAK,qBAAqB,KAAK,IAAI,GAAG,WAAW,GAAG,CAAC;AACtE,YAAM,aAAa,KAAK,qBAAqB,YAAY,UAAU,SAAS;AAC5E,eAAS,YAAY,QAAQ,UAAU;AAAA,IAC3C;AACA,QAAI,cAAc,KAAK,sBAAsB,IAAI,SAAS;AAC1D,QAAI,gBAAgB,QAAW;AAC3B,oBAAc,oBAAI,IAAI;AACtB,WAAK,sBAAsB,IAAI,WAAW,WAAW;AAAA,IACzD;AAEA,aAAS,IAAI,KAAK,IAAI,YAAY,GAAG,CAAC,GAAG,IAAI,YAAY,KAAK,YAAY;AACtE,YAAM,aAAa,KAAK,MAAM,IAAI,UAAU;AAC5C,UAAI,cAAc,YAAY,IAAI,UAAU;AAC5C,UAAI,gBAAgB,QAAW;AAC3B,cAAM,aAAa,KAAK,qBAAqB,aAAa,UAAU;AACpE,cAAM,WAAW,KAAK,sBAAsB,aAAa,KAAK,aAAa,CAAC;AAC5E,sBAAc,KAAK,qBAAqB,YAAY,UAAU,SAAS;AACvE,oBAAY,IAAI,YAAY,WAAW;AAAA,MAC3C;AACA,eAAS,YAAY,QAAQ,WAAW;AAAA,IAC5C;AAEA;AACI,YAAM,aAAa,KAAK,qBAAqB,UAAU;AACvD,YAAM,WAAW,KAAK,qBAAqB,CAAC;AAC5C,YAAM,aAAa,KAAK,qBAAqB,YAAY,UAAU,SAAS;AAC5E,eAAS,YAAY,QAAQ,UAAU;AAAA,IAC3C;AACA,WAAO;AAAA,EACX;AACJ;AACA,SAAS,YAAY,OAAO,QAAQ;AAChC,MAAI,UAAU,MAAM;AAChB,WAAO;AAAA,EACX,OACK;AACD,QAAI,WAAW,MAAM;AACjB,aAAO;AAAA,IACX,OACK;AAED,YAAMC,OAAM,KAAK,IAAI,MAAM,eAAe,OAAO,aAAa;AAC9D,YAAM,MAAM,KAAK,IAAI,MAAM,eAAe,OAAO,aAAa;AAC9D,aAAO,EAAE,eAAeA,MAAK,eAAe,IAAI;AAAA,IACpD;AAAA,EACJ;AACJ;AAEA,SAAS,uBAAuB;AAC5B,SAAO,IAAI,SAAS;AACxB;AAEA,IAAM,2BAAN,MAA+B;AAAA,EAC3B,YAAY,cAAc;AACtB,SAAK,yBAAyB;AAAA,EAClC;AAAA,EACA,eAAe,QAAQ,WAAW,aAAa;AAC3C,SAAK,uBAAuB,KAAK,MAAM;AAAA,EAC3C;AAAA,EACA,yBAAyB,QAAQ,WAAW,aAAa;AACrD,SAAK,uBAAuB,iBAAiB,MAAM;AAAA,EACvD;AACJ;AACA,IAAM,2BAAN,MAA+B;AAAA,EAC3B,YAAY,UAAU;AAClB,SAAK,kBAAkB;AACvB,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,qBAAqB;AACjB,UAAM,eAAe,KAAK,mBAAmB,SAAS;AACtD,QAAI,iBAAiB,MAAM;AACvB,aAAO;AAAA,IACX;AACA,QAAI,KAAK,iBAAiB,mBAAmB,cAAc;AACvD,aAAO,KAAK,gBAAgB;AAAA,IAChC;AACA,UAAM,UAAU,IAAI,yBAAyB,YAAY;AACzD,SAAK,kBAAkB;AAAA,MACnB,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK,mBAAmB,SAAS,KAAK;AAAA,EACjD;AACJ;AACA,IAAM,mBAAN,MAAuB;AAAA,EACnB,YAAY,WAAW;AACnB,SAAK,2BAA2B;AAChC,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,SAAK,qBAAqB,iBAAiB;AAAA,EAC/C;AAAA,EACA,sBAAsB;AAClB,UAAM,OAAO,KAAK,qBAAqB,YAAY,KAAK,CAAC;AACzD,QAAI,KAAK,0BAA0B,mBAAmB,MAAM;AACxD,aAAO,KAAK,yBAAyB;AAAA,IACzC;AACA,UAAM,UAAU,KAAK,IAAI,CAAC,OAAO,IAAI,yBAAyB,EAAE,CAAC;AACjE,SAAK,2BAA2B;AAAA,MAC5B,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB,GAAG,GAAG;AACpB,WAAO,KAAK,qBAAqB,UAAU,GAAG,CAAC,KAAK;AAAA,EACxD;AACJ;AACA,IAAI,yBAAyB,MAAM,6BAA6B,iBAAiB;AAAA,EAC7E,2BAA2B;AACvB,WAAO,CAAC;AAAA,EACZ;AACJ;AAEA,IAAM,iCAAN,MAAqC;AAAA,EACjC,YAAY,cAAc;AACtB,SAAK,yBAAyB;AAAA,EAClC;AAAA,EACA,eAAe,QAAQ,WAAW,aAAa;AAC3C,SAAK,uBAAuB,KAAK,MAAM;AAAA,EAC3C;AAAA,EACA,yBAAyB,QAAQ,WAAW,aAAa;AACrD,SAAK,uBAAuB,iBAAiB,MAAM;AAAA,EACvD;AACJ;AACA,IAAM,iCAAN,MAAqC;AAAA,EACjC,YAAY,UAAU;AAClB,SAAK,kBAAkB;AACvB,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,qBAAqB;AACjB,UAAM,eAAe,KAAK,mBAAmB,SAAS;AACtD,QAAI,iBAAiB,MAAM;AACvB,aAAO;AAAA,IACX;AACA,QAAI,KAAK,iBAAiB,mBAAmB,cAAc;AACvD,aAAO,KAAK,gBAAgB;AAAA,IAChC;AACA,UAAM,UAAU,IAAI,+BAA+B,YAAY;AAC/D,SAAK,kBAAkB;AAAA,MACnB,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK,mBAAmB,SAAS,KAAK;AAAA,EACjD;AACJ;AACA,SAAS,gBAAgB,UAAU;AAC/B,SAAO;AAAA,IACH,gBAAgB,SAAS,KAAK;AAAA,IAC9B,sBAAsB,SAAS,WAAW;AAAA,IAC1C,2BAA2B,SAAS,kBAAkB;AAAA,IACtD,iBAAiB,SAAS,UAAU;AAAA,IACpC,sBAAsB,SAAS,UAAU;AAAA,IACzC,mBAAmB,SAAS,UAAU,KAAK;AAAA,IAC3C,uBAAuB,SAAS,cAAc,KAAK;AAAA,EACvD;AACJ;AACA,IAAM,qCAAN,MAAyC;AAAA,EACrC,YAAY,UAAU,WAAW;AAC7B,SAAK,qBAAqB,IAAI,qBAAqB;AACnD,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,qBAAqB;AACjB,SAAK,mBAAmB,kBAAkB;AAAA,MACtC,iBAAiB,KAAK,oBAAoB,gBAAgB;AAAA,MAC1D,GAAG,gBAAgB,KAAK,kBAAkB;AAAA,IAC9C,CAAC;AACD,WAAO,KAAK;AAAA,EAChB;AACJ;AACA,IAAM,sCAAN,cAAkD,cAAc;AAAA,EAC5D,YAAY,UAAU,YAAY;AAC9B,UAAM;AACN,SAAK,qBAAqB;AAC1B,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,8BAA8B,kBAAkB,kBAAkB,oBAAoB;AAClF,UAAM,OAAO,gBAAgB,KAAK,kBAAkB;AACpD,uBAAmB,uBAAuB,KAAK;AAC/C,qBAAiB,kBAAkB,KAAK;AACxC,UAAM,oBAAoB,IAAI,KAAK,KAAK,qBAAqB,mBAAmB;AAChF,uBAAmB,iCAAiC;AACpD,uBAAmB,oCAAoC;AACvD,uBAAmB,uBAAuB,KAAK;AAC/C,uBAAmB,4BAA4B,KAAK;AACpD,qBAAiB,iBAAiB,KAAK;AACvC,qBAAiB,oBAAoB,KAAK;AAC1C,qBAAiB,wBAAwB,KAAK;AAAA,EAClD;AACJ;AACA,IAAM,yBAAN,cAAqC,iBAAiB;AAAA,EAClD,YAAY,WAAW,QAAQ;AAC3B,UAAM,SAAS;AACf,SAAK,+BAA+B;AACpC,SAAK,gCAAgC;AACrC,SAAK,oCAAoC;AACzC,SAAK,mCAAmC;AACxC,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,0BAA0B;AACtB,UAAM,OAAO,KAAK,qBAAqB,gBAAgB,KAAK,CAAC;AAC7D,QAAI,KAAK,8BAA8B,mBAAmB,MAAM;AAC5D,aAAO,KAAK,6BAA6B;AAAA,IAC7C;AACA,UAAM,YAAY,KAAK,iBAAiB,gBAAgB,EAAE,oBAAoB;AAC9E,UAAM,UAAU,KAAK,IAAI,CAAC,OAAO,IAAI,mCAAmC,IAAI,SAAS,CAAC;AACtF,SAAK,+BAA+B;AAAA,MAChC,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,2BAA2B;AACvB,UAAM,OAAO,KAAK,qBAAqB,iBAAiB,KAAK,CAAC;AAC9D,QAAI,KAAK,+BAA+B,mBAAmB,MAAM;AAC7D,aAAO,KAAK,8BAA8B;AAAA,IAC9C;AACA,UAAM,aAAa,KAAK,iBAAiB,qBAAqB;AAC9D,UAAM,UAAU,KAAK,IAAI,CAAC,OAAO,IAAI,oCAAoC,IAAI,UAAU,CAAC;AACxF,SAAK,gCAAgC;AAAA,MACjC,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,+BAA+B;AAC3B,UAAM,OAAO,KAAK,qBAAqB,qBAAqB,KAAK,CAAC;AAClE,QAAI,KAAK,mCAAmC,mBAAmB,MAAM;AACjE,aAAO,KAAK,kCAAkC;AAAA,IAClD;AACA,UAAM,UAAU,KAAK,IAAI,CAAC,OAAO,IAAI,+BAA+B,EAAE,CAAC;AACvE,SAAK,oCAAoC;AAAA,MACrC,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,8BAA8B;AAC1B,UAAM,OAAO,KAAK,qBAAqB,oBAAoB,KAAK,CAAC;AACjE,QAAI,KAAK,kCAAkC,mBAAmB,MAAM;AAChE,aAAO,KAAK,iCAAiC;AAAA,IACjD;AACA,UAAM,UAAU,KAAK,IAAI,CAAC,OAAO,IAAI,+BAA+B,EAAE,CAAC;AACvE,SAAK,mCAAmC;AAAA,MACpC,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EACA,wBAAwB,gBAAgB,cAAc;AAClD,WAAQ,KAAK,qBAAqB,gBAAgB,gBAAgB,YAAY,KAAK;AAAA,EACvF;AACJ;AAEA,SAAS,0BAA0B,YAAY,WAAW,QAAQ,aAAa;AAC3E,aAAW,QAAQ,CAAC,YAAY;AAC5B,cAAU,OAAO,EAAE,QAAQ,CAAC,aAAa;AACrC,UAAI,SAAS,iBAAiB,MAAM,QAAQ;AACxC;AAAA,MACJ;AACA,kBAAY,KAAK,QAAQ;AAAA,IAC7B,CAAC;AAAA,EACL,CAAC;AACL;AACA,SAAS,4BAA4B,SAAS;AAC1C,SAAO,QAAQ,oBAAoB;AACvC;AACA,SAAS,iCAAiC,SAAS;AAC/C,SAAO,QAAQ,6BAA6B;AAChD;AACA,SAAS,gCAAgC,SAAS;AAC9C,SAAO,QAAQ,4BAA4B;AAC/C;AACA,IAAM,kBAAkB,CAAC,QAAQ,QAAQ,UAAU;AACnD,IAAM,SAAN,cAAqB,gBAAgB;AAAA,EACjC,YAAY,OAAO,YAAY,SAASC,iBAAgB,gBAAgB;AACpE,UAAM,KAAK;AACX,SAAK,iBAAiB,qBAAqB;AAC3C,SAAK,0BAA0B,IAAI,wBAAwB,IAAI;AAC/D,SAAK,6BAA6B,CAAC;AACnC,SAAK,mCAAmC,IAAI,iCAAiC,IAAI;AACjF,SAAK,uCAAuC;AAC5C,SAAK,4BAA4B;AACjC,SAAK,+BAA+B;AACpC,SAAK,uBAAuB,CAAC;AAC7B,SAAK,oBAAoB;AACzB,SAAK,uBAAuB;AAC5B,UAAM,gBAAgB,IAAI,oBAAoB,IAAI;AAClD,SAAK,2BAA2B,CAAC,aAAa;AAC9C,SAAK,8BAA8B,IAAI,kBAAkB,eAAe,MAAM,KAAK;AACnF,QAAI,gBAAgB,SAAS,KAAK,oBAAoB,GAAG;AACrD,WAAK,uCAAuC,IAAI,iCAAiC,IAAI;AAAA,IACzF;AACA,SAAK,4BAA4B;AACjC,SAAK,qBAAqBA,gBAAe,MAAM,KAAK,gBAAgB,GAAG,cAAc;AAAA,EACzF;AAAA,EACA,oBAAoB;AAChB,QAAI,KAAK,iCAAiC,MAAM;AAC5C,mBAAa,KAAK,4BAA4B;AAAA,IAClD;AAAA,EACJ;AAAA,EACA,yBAAyB,cAAc;AACnC,WAAO,KAAK,kBAAkB,kBAAkB;AAAA,EACpD;AAAA,EACA,wBAAwB,YAAY;AAChC,UAAM,YAAY,EAAE,kBAAkB,KAAK;AAC3C,UAAM,aAAa,KAAK,qBAAqB;AAC7C,QAAI,KAAK,gBAAgB,EAAE,oBAAoB,EAAE,kBAAkB,KAAK,WAAW,kBAAkB,KAAK,KAAK,eAAe,kBAAkB,GAAG;AAC/I,aAAO;AAAA,IACX;AACA,UAAM,cAAc,KAAK,gBAAgB,EAAE,oBAAoB,EAAE,6BAA6B;AAC9F,UAAM,aAAa,KAAK,qBAAqB;AAC7C,QAAI,gBAAgB,QAAQ,eAAe,MAAM;AAC7C,aAAO;AAAA,IACX;AAGA,QAAI;AACJ,QAAI;AACJ,QAAI,YAAY;AACZ,YAAM,UAAU,KAAK,eAAe,eAAe;AACnD,UAAI,YAAY,MAAM;AAClB,eAAO;AAAA,MACX;AACA,YAAM;AACN,kBAAY,QAAQ;AAAA,IACxB,OACK;AACD,YAAM,SAAS,KAAK,eAAe;AAAA,QAAiB,YAAY,gBAAgB;AAAA,QAAG;AAAA;AAAA,MAAsC;AACzH,UAAI,WAAW,MAAM;AACjB,eAAO;AAAA,MACX;AACA,YAAM,KAAK,eAAe,kBAAkB,OAAO,eAAe;AAClE,UAAI,QAAQ,MAAM;AACd,eAAO;AAAA,MACX;AACA,kBAAY,OAAO;AAAA,IACvB;AACA,UAAM,QAAQ,IAAI;AAAA,MAAgB;AAAA;AAAA,IAA+B;AACjE,UAAM,aAAa,KAAK,qBAAqB;AAC7C,UAAM,QAAQ,WAAW,mBAAmB,WAAW,EAAE,iBAAiB,IAAI,CAAC;AAC/E,UAAM,aAAa,WAAW,4BAA4B,OAAO,WAAW,eAAe;AAC3F,WAAO;AAAA,MACH,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,MACjB,gBAAgB,WAAW,sBAAsB,OAAO,WAAW,eAAe;AAAA,MAClF,kCAAkC,WAAW,8BAA8B,KAAK;AAAA,MAChF,oCAAoC,WAAW,gCAAgC,OAAO,WAAW,eAAe;AAAA,MAChH,iBAAiB,MAAM;AAAA,MACvB,sBAAsB;AAAA,MACtB,iBAAiB;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,QAAI,KAAK,8BAA8B,MAAM;AACzC,aAAO,KAAK;AAAA,IAChB;AACA,SAAK,4BAA4B,IAAI,iBAAiB,IAAI;AAC1D,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB,SAAS;AAC5B,UAAM,qBAAqB,QAAQ;AACnC,QAAI,uBAAuB,UAAa,uBAAuB,KAAK,kBAAkB,cAAc;AAEhG,WAAK,gBAAgB,EAAE,4BAA4B,MAAM,kBAAkB;AAAA,IAC/E;AACA,UAAM,KAAK,mBAAmB,OAAO;AACrC,QAAI,QAAQ,gBAAgB,QAAW;AACnC,WAAK,4BAA4B;AAKjC,WAAK,gBAAgB,EAAE,qBAAqB;AAAA,IAChD;AACA,SAAK,gBAAgB,EAAE,uBAAuB,IAAI;AAGlD,SAAK,gBAAgB,EAAE,0BAA0B;AACjD,SAAK,mBAAmB,iBAAiB,SAAS;AAAA,EACtD;AAAA,EACA,kBAAkB,MAAM,YAAY;AAChC,SAAK,eAAe,kBAAkB,IAAI;AAC1C,SAAK,mBAAmB,iBAAiB,MAAM;AAC/C,QAAI,KAAK,yCAAyC,MAAM;AACpD,UAAI,cAAc,WAAW,kDAAkD;AAC3E,aAAK,qCAAqC,oCAAoC;AAAA,MAClF,WACS,KAAK,WAAW,GAAG;AACxB,aAAK,qCAAqC,wBAAwB;AAAA,MACtE;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,gBAAgB,EAAE,wBAAwB,IAAI;AACtE,SAAK,gBAAgB,EAAE,0BAA0B,UAAU;AAC3D,SAAK,gBAAgB,EAAE,uBAAuB,IAAI;AAClD,SAAK,gBAAgB,EAAE,0BAA0B;AACjD,SAAK,gBAAgB,EAAE,sBAAsB;AAAA,EACjD;AAAA,EACA,0BAA0B,SAAS;AAC/B,UAAM,SAAS,IAAI,gBAAgB,MAAM,OAAO;AAChD,SAAK,2BAA2B,KAAK,MAAM;AAC3C,SAAK,gBAAgB,EAAE,uBAAuB,IAAI;AAClD,WAAO;AAAA,EACX;AAAA,EACA,0BAA0B,MAAM;AAC5B,UAAM,QAAQ,KAAK,2BAA2B,QAAQ,IAAI;AAC1D,QAAI,UAAU,IAAI;AACd,WAAK,2BAA2B,OAAO,OAAO,CAAC;AAAA,IACnD;AACA,SAAK,gBAAgB,EAAE,uBAAuB,IAAI;AAAA,EACtD;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,UAAM,MAAM,KAAK,mBAAmB;AACpC,QAAI,QAAQ,MAAM;AACd,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,iBAAiB,IAAI;AAAA,QAAgB;AAAA;AAAA,MAA+B;AAAA,MACpE,qBAAqB,IAAI;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,UAAM,cAAc,KAAK,gBAAgB,EAAE,oBAAoB,EAAE,6BAA6B;AAC9F,QAAI,gBAAgB,MAAM;AACtB,aAAO;AAAA,IACX;AACA,UAAM,iBAAiB,YAAY,eAAe;AAClD,WAAO,KAAK,eAAe;AAAA,MAAiB;AAAA,MAAgB;AAAA;AAAA,IAAsC;AAAA,EACtG;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,iBAAiB,MAAM;AACnB,UAAM,SAAS,KAAK,eAAe,kBAAkB,IAAI;AACzD,QAAI,WAAW,MAAM;AACjB,aAAO;AAAA,IACX;AACA,QAAI,KAAK,yBAAyB,SAAS,KAAK,yBAAyB,iBAAiB,KAAK,yBAAyB,UAAU;AAC9H,aAAO;AAAA,QACH,gBAAgB,OAAO;AAAA,UAAgB;AAAA;AAAA,QAA8B;AAAA,QACrE,gBAAgB,OAAO;AAAA,UAAgB;AAAA;AAAA,QAA8B;AAAA,QACrE,eAAe,OAAO;AAAA,UAAgB;AAAA;AAAA,QAA6B;AAAA,QACnE,iBAAiB,OAAO;AAAA,UAAgB;AAAA;AAAA,QAA+B;AAAA,MAC3E;AAAA,IACJ,OACK;AACD,aAAO,OAAO;AAAA,QAAgB;AAAA;AAAA,MAA+B;AAAA,IACjE;AAAA,EACJ;AAAA,EACA,uBAAuB,MAAM;AACzB,UAAM,MAAM,CAAC;AACb,8BAA0B,KAAK,sBAAsB,6BAA6B,OAAO,GAAG;AAC5F,UAAM,oBAAoB,KAAK;AAC/B,QAAI,sBAAsB,QAAQ,CAAC,kBAAkB,kBAAkB,GAAG;AACtE,aAAO;AAAA,IACX;AACA,QAAI,KAAK,iCAAiC,QAAQ,kBAAkB,0BAA0B,GAAG;AAC7F,WAAK,+BAA+B,WAAW,MAAM;AACjD,aAAK,+BAA+B;AACpC,aAAK,gBAAgB,EAAE,uBAAuB;AAAA,MAClD,GAAG,CAAC;AAAA,IACR;AACA,sBAAkB,0BAA0B;AAC5C,QAAI,QAAQ,iBAAiB;AAC7B,WAAO;AAAA,EACX;AAAA,EACA,sBAAsB;AAClB,UAAM,MAAM,CAAC;AACb,QAAI,CAAC,KAAK,oBAAoB,GAAG;AAC7B,UAAI,KAAK,KAAK,gCAAgC;AAAA,IAClD;AACA,QAAI,KAAK,KAAK,oBAAoB,KAAK,uBAAuB;AAC9D,UAAM,iBAAiB,KAAK,2BAA2B,IAAI,CAAC,SAAS,KAAK,mBAAmB,CAAC;AAC9F,QAAI,KAAK,GAAG,cAAc;AAC1B,8BAA0B,KAAK,sBAAsB,6BAA6B,UAAU,GAAG;AAC/F,WAAO;AAAA,EACX;AAAA,EACA,4BAA4B;AACxB,WAAO,KAAK,2BAA2B,6BAA6B,QAAQ;AAAA,EAChF;AAAA,EACA,yBAAyB,QAAQ;AAC7B,WAAO,KAAK,2BAA2B,kCAAkC,MAAM;AAAA,EACnF;AAAA,EACA,wBAAwB,QAAQ;AAC5B,WAAO,KAAK,2BAA2B,iCAAiC,MAAM;AAAA,EAClF;AAAA,EACA,2BAA2B,GAAG,GAAG;AAC7B,WAAO,KAAK,qBACP,IAAI,CAAC,cAAc,UAAU,kBAAkB,GAAG,CAAC,CAAC,EACpD,OAAO,CAAC,WAAW,WAAW,IAAI;AAAA,EAC3C;AAAA,EACA,2BAA2B;AACvB,WAAO;AAAA,MACH,KAAK;AAAA,MACL,GAAG,KAAK,2BAA2B,IAAI,CAAC,SAAS,KAAK,wBAAwB,CAAC;AAAA,IACnF;AAAA,EACJ;AAAA,EACA,yBAAyB,MAAM,YAAY;AACvC,QAAI,eAAe,KAAK,yBAAyB,CAAC,KAAK,oBAAoB,GAAG;AAC1E,aAAO,CAAC;AAAA,IACZ;AACA,UAAM,SAAS,CAAC,GAAG,KAAK,wBAAwB;AAChD,eAAW,mBAAmB,KAAK,4BAA4B;AAC3D,aAAO,KAAK,gBAAgB,wBAAwB,CAAC;AAAA,IACzD;AACA,SAAK,qBAAqB,QAAQ,CAAC,YAAY;AAC3C,aAAO,KAAK,GAAG,QAAQ,yBAAyB,CAAC;AAAA,IACrD,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,0BAA0B;AACtB,UAAM,MAAM,CAAC;AACb,SAAK,qBAAqB,QAAQ,CAAC,YAAY;AAC3C,UAAI,KAAK,GAAG,QAAQ,wBAAwB,CAAC;AAAA,IACjD,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,wBAAwB,gBAAgB,cAAc;AAClD,QAAI,KAAK,kBAAkB,0BAA0B,QAAW;AAC5D,YAAM,gBAAgB,KAAK,kBAAkB,sBAAsB,MAAM;AACrE,cAAM,MAAM,KAAK,4BAA4B,gBAAgB,YAAY;AACzE,eAAQ,QAAQ,OAAQ,OAAO,IAAI,gBAAgB;AAAA,MACvD,CAAC;AACD,aAAO,kBAAkB,kBAAkB,aAAa;AAAA,IAC5D;AACA,WAAO,KAAK,4BAA4B,gBAAgB,YAAY;AAAA,EACxE;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK,kBAAkB,YAAY;AAAA,EAC9C;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,SAAK,mBAAmB,iBAAiB;AACzC,eAAW,iBAAiB,KAAK,0BAA0B;AACvD,oBAAc,iBAAiB;AAAA,IACnC;AACA,eAAW,mBAAmB,KAAK,4BAA4B;AAC3D,sBAAgB,iBAAiB;AAAA,IACrC;AACA,SAAK,wBAAwB,iBAAiB;AAC9C,SAAK,iCAAiC,iBAAiB;AACvD,SAAK,sCAAsC,iBAAiB;AAC5D,SAAK,qBAAqB,QAAQ,CAAC,YAAY,QAAQ,yBAAyB,CAAC;AAAA,EACrF;AAAA,EACA,uBAAuB;AACnB,WAAO,cAAc,MAAM,qBAAqB,CAAC;AAAA,EACrD;AAAA,EACA,4BAA4B,OAAO;AAC/B,UAAM,YAAY,KAAK,yBAAyB,UAAU,KAAK,yBAAyB,UAAU,KAAK,yBAAyB,eAC5H,KAAK,kBAAkB;AAC3B,QAAI,CAAC,UAAU;AACX,aAAO;AAAA,IACX;AACA,UAAM,MAAM,KAAK,eAAe,kBAAkB,KAAK;AACvD,QAAI,QAAQ,MAAM;AACd,aAAO;AAAA,IACX;AACA,UAAM,QAAQ,IAAI;AAAA,MAAgB;AAAA;AAAA,IAA+B;AACjE,UAAML,UAAS,KAAK,uBAAuB;AAC3C,UAAM,cAAc,KAAK,4BAA4B;AACrD,UAAM,cAAc,KAAK,4BAA4B;AACrD,UAAM,kBAAkB,KAAK,gCAAgC,KAAK;AAClE,WAAO,EAAE,iBAAiB,OAAO,kBAAkBA,SAAQ,uBAAuB,aAAa,uBAAuB,aAAa,2BAA2B,gBAAgB;AAAA,EAClL;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,0BAA0B,WAAW;AACjC,SAAK,qBAAqB,KAAK,IAAI,uBAAuB,WAAW,IAAI,CAAC;AAAA,EAC9E;AAAA,EACA,0BAA0B,QAAQ;AAC9B,SAAK,uBAAuB,KAAK,qBAAqB,OAAO,CAAC,YAAY,QAAQ,oBAAoB,MAAM,MAAM;AAAA,EACtH;AAAA,EACA,0CAA0C;AACtC,QAAI,KAAK,yBAAyB,UAAU;AACxC,aAAO;AAAA,IACX;AACA,WAAO,CAAC,SAAS;AACb,aAAO,KAAK,mBAAmB,4BAA4B,IAAI;AAAA,IACnE;AAAA,EACJ;AAAA,EACA,wCAAwC;AACpC,QAAI,KAAK,yBAAyB,UAAU;AACxC,aAAO;AAAA,IACX;AACA,WAAO,CAAC,SAAS;AACb,aAAO,KAAK,mBAAmB,uBAAuB,IAAI;AAAA,IAC9D;AAAA,EACJ;AAAA,EACA,6BAA6B;AACzB,WAAO,KAAK,eAAe,kBAAkB;AAAA,EACjD;AAAA,EACA,sBAAsB;AAClB,UAAM,aAAa,KAAK,qBAAqB;AAC7C,WAAO,CAAC,oBAAoB,WAAW,aAAa,CAAC;AAAA,EACzD;AAAA,EACA,4BAA4B,gBAAgB,cAAc;AACtD,QAAI,CAAC,UAAU,cAAc,KAAK,CAAC,UAAU,YAAY,KAAK,KAAK,eAAe,kBAAkB,GAAG;AACnG,aAAO;AAAA,IACX;AAGA,UAAM,QAAQ,KAAK,yBAAyB,UAAU,KAAK,yBAAyB,UAAU,KAAK,yBAAyB,cAAc,KAAK,yBAAyB,cAClK;AAAA,MAAC;AAAA;AAAA,IAA+B,IAChC;AAAA,MAAC;AAAA,MAA+B;AAAA;AAAA,IAA8B;AACpE,UAAM,aAAa,KAAK,eAAe,8BAA8B,gBAAgB,cAAc,KAAK;AACxG,QAAI,QAAQ,eAAe,OAAO,IAAI,eAAe,WAAW,eAAe,WAAW,aAAa,IAAI;AAC3G,QAAI,UAAU;AACd,QAAI,KAAK,qBAAqB,MAAM,aAAa;AAC7C,YAAM,OAAO,KAAK,kBAAkB;AACpC,YAAM,gBAAgB,IAAI,eAAe,MAAM,IAAI;AACnD,cAAQ,UAAU,OAAO,MAAM,gBAAgB,aAAa,IAAI;AAAA,IACpE;AACA,SAAK,qBAAqB,QAAQ,CAAC,cAAc;AAC7C,YAAM,qBAAqB,UAAU,wBAAwB,gBAAgB,YAAY;AACzF,UAAI,oBAAoB,YAAY;AAChC,cAAM,iBAAiB,IAAI,eAAe,mBAAmB,WAAW,UAAU,mBAAmB,WAAW,QAAQ;AACxH,gBAAQ,UAAU,OAAO,MAAM,gBAAgB,cAAc,IAAI;AAAA,MACrE;AACA,UAAI,oBAAoB,SAAS;AAC7B,kBAAU,mBAAmB;AAAA,MACjC;AAAA,IACJ,CAAC;AACD,WAAO,IAAI,kBAAkB,OAAO,OAAO;AAAA,EAC/C;AAAA,EACA,yBAAyB;AACrB,YAAQ,KAAK,sBAAsB;AAAA,MAC/B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,kBAAkB;AAAA,IACtC;AACA,WAAO;AAAA,EACX;AAAA,EACA,8BAA8B;AAC1B,YAAQ,KAAK,sBAAsB;AAAA,MAC/B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,YAAY;AACb,cAAM,6BAA6B,KAAK,kBAAkB;AAC1D,YAAI,2BAA2B,WAAW,GAAG;AACzC,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,8BAA8B;AAC1B,YAAQ,KAAK,sBAAsB;AAAA,MAC/B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,kBAAkB;AAAA,IACtC;AACA,WAAO;AAAA,EACX;AAAA,EACA,gCAAgC,OAAO;AACnC,YAAQ,KAAK,sBAAsB;AAAA,MAC/B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,YAAY;AACb,cAAM,iCAAiC,KAAK,kBAAkB;AAC9D,YAAI,+BAA+B,WAAW,GAAG;AAC7C,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,KAAK,qBAAqB,EAAE,mBAAmB,KAAK,EAAE;AAAA,EACjE;AAAA,EACA,8BAA8B;AAC1B,YAAQ,KAAK,kBAAkB,YAAY,MAAM;AAAA,MAC7C,KAAK,UAAU;AACX,cAAM,YAAY,KAAK,kBAAkB,YAAY;AACrD,aAAK,sBAAsB;AAAA,UACvB,QAAQ;AAAA,UACR,iBAAiB,KAAK,kBAAkB,YAAY,uBAAuB,CAAC,WAAW,OAAO,IAAI,SAAS;AAAA,QAC/G;AACA;AAAA,MACJ;AAAA,MACA,KAAK,UAAU;AACX,aAAK,sBAAsB,IAAI,gBAAgB,KAAK,kBAAkB,YAAY,SAAS;AAC3F;AAAA,MACJ;AAAA,MACA,KAAK,WAAW;AACZ,aAAK,sBAAsB,IAAI,oBAAoB,KAAK,kBAAkB,YAAY,SAAS;AAC/F;AAAA,MACJ;AAAA,MACA,SAAS;AACL,cAAM,aAAa,KAAK,IAAI,IAAI,KAAK,kBAAkB,YAAY,SAAS;AAC5E,aAAK,sBAAsB,IAAI,eAAe,YAAY,KAAK,kBAAkB,YAAY,UAAU,UAAU;AAAA,MACrH;AAAA,IACJ;AACA,QAAI,KAAK,0BAA0B,MAAM;AACrC,WAAK,sBAAsB,0BAA0B;AAAA,IACzD;AAAA,EACJ;AAAA,EACA,2BAA2B,WAAW,QAAQ;AAC1C,UAAM,MAAM,CAAC;AACb,8BAA0B,KAAK,sBAAsB,WAAW,QAAQ,GAAG;AAC3E,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,oBAAoB;AAAA,EACtB;AACJ;AACA,IAAM,wBAAwB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AACA,IAAM,SAAN,MAAa;AAAA,EACT,YAAY,SAAS;AACjB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,gBAAgB,OAAO,OAAO,MAAM;AAChC,QAAI,MAAM;AACV,QAAI,KAAK,kBAAkB,SAAS,GAA8B;AAC9D,aAAO;AAAA,IACX;AACA,UAAM,oBAAoB,KAAK,4BAA4B;AAC3D,UAAM,aAAa,kBAAkB,qBAAqB;AAC1D,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AACA,UAAM,IAAI,kBAAkB,4BAA4B,OAAO,UAAU;AAEzE,UAAM,WAAW,KAAK,sBAAsB,EAAE,OAAQ,CAAC,OAAQ,cAAc,MAAQ;AACrF,UAAM,aAAa,SAAS,OAAO,CAAC,KAAK,WAAW;AAChD,UAAI,KAAK,oBAAoB,MAAM,KAAK,CAAC,OAAO,kBAAkB,GAAG;AACjE,eAAO;AAAA,MACX;AACA,YAAM,KAAK,OAAO,qBAAqB;AACvC,YAAM,OAAO,OAAO,eAAe;AACnC,UAAI,GAAG,kBAAkB,KAAK,CAAC,KAAK,mBAAmB,KAAK,GAAG;AAC3D,eAAO;AAAA,MACX;AACA,YAAM,MAAM,KAAK,kBAAkB,KAAK;AACxC,UAAI,QAAQ,MAAM;AACd,eAAO;AAAA,MACX;AAEA,YAAM,aAAa,OAAO,OAAO,qBAAqB,CAAC;AACvD,YAAM,cAAc,KAAK,kBAAkB,SAAS,IAC9C,wBACA;AACN,aAAO,IAAI,OAAO,YAAY,IAAI,CAAC,QAAQ,GAAG,4BAA4B,IAAI,gBAAgB,GAAG,GAAG,WAAW,eAAe,CAAC,CAAC;AAAA,IACpI,GAAG,CAAC,CAAC;AACL,QAAI,WAAW,WAAW,GAAG;AACzB,aAAO;AAAA,IACX;AACA,eAAW,KAAK,CAAC,IAAI,OAAO,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAC/D,UAAM,UAAU,WAAW,CAAC;AAC5B,UAAM,kBAAkB,4BAA4B,SAAS,UAAU;AACvE,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,MAAM,OAAO,QAAQ,QAAQ;AAClC,SAAO,KAAK,IAAI,KAAK,IAAI,OAAO,MAAM,GAAG,MAAM;AACnD;AACA,SAAS,cAAc,OAAO;AAC1B,MAAI,QAAQ,GAAG;AACX,WAAO;AAAA,EACX;AACA,WAAS,UAAU,OAAO,UAAU,GAAG,WAAW,IAAI;AAClD,QAAK,UAAU,OAAQ,GAAG;AACtB,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,eAAe,IAAI,IAAI,SAAS;AACrC,SAAQ,KAAK,MAAO;AACxB;AACA,SAAS,MAAM,IAAI,IAAI,SAAS;AAC5B,SAAO,KAAK,IAAI,KAAK,EAAE,IAAI;AAC/B;AAEA,SAAS,IAAI,KAAK;AACd,MAAI,IAAI,SAAS,GAAG;AAChB,UAAM,MAAM,gBAAgB;AAAA,EAChC;AACA,MAAI,SAAS,IAAI,CAAC;AAClB,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACjC,QAAI,IAAI,CAAC,IAAI,QAAQ;AACjB,eAAS,IAAI,CAAC;AAAA,IAClB;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,WAAW,GAAG;AACnB,QAAM,SAAS,KAAK,KAAK,CAAC;AAC1B,SAAQ,SAAS,MAAM,IAAK,SAAS,IAAI;AAC7C;AACA,SAAS,UAAU,GAAG;AAClB,QAAM,SAAS,KAAK,KAAK,CAAC;AAC1B,SAAQ,SAAS,MAAM,IAAK,SAAS,IAAI;AAC7C;AAEA,IAAM,eAAN,cAA2B,8BAA8B;AAAA,EACrD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,oBAAoB,EAAE,SAAS,KAAK,YAAY,sBAAsB,mBAAmB,GAAG;AACxF,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,oBAAoB,CAAC;AAC9D,QAAI,YAAY;AAChB,kBAAc,KAAK,MAAM;AACrB,YAAM,OAAO,cAAc,KAAK,cAAc;AAC9C,UAAI,KAAK,4BAA4B;AACjC,YAAI,cAAc,KAAK;AACvB,qBAAa,KAAK,KAAK,uBAAuB;AAC9C,YAAI,UAAU;AACd,mBAAW,YAAY,KAAK,qBAAqB;AAC7C,gBAAM,IAAI,KAAK,MAAM,SAAS,kBAAkB,oBAAoB;AACpE,cAAI,OAAO,GAAG,CAAC,SAAS;AACxB,cAAI,OAAO,GAAG,WAAW,SAAS,SAAS;AAAA,QAC/C;AACA,YAAI,OAAO;AAAA,MACf;AACA,UAAI,KAAK,4BAA4B;AACjC,YAAI,cAAc,KAAK;AACvB,qBAAa,KAAK,KAAK,uBAAuB;AAC9C,YAAI,UAAU;AACd,mBAAW,aAAa,KAAK,sBAAsB;AAC/C,gBAAM,IAAI,KAAK,MAAM,UAAU,kBAAkB,kBAAkB;AACnE,cAAI,OAAO,CAAC,WAAW,CAAC;AACxB,cAAI,OAAO,WAAW,QAAQ,WAAW,CAAC;AAAA,QAC9C;AACA,YAAI,OAAO;AAAA,MACf;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,eAAN,MAAmB;AAAA,EACf,YAAY,MAAM;AACd,SAAK,qBAAqB,IAAI,aAAa;AAC3C,SAAK,wBAAwB;AAC7B,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,mBAAmB;AACf,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,qBAAqB;AACjB,QAAI,KAAK,uBAAuB;AAC5B,YAAM,cAAc,KAAK,eAAe,gBAAgB,EAAE,kBAAkB,EAAE;AAC9E,YAAM,OAAO;AAAA,QACT,4BAA4B,YAAY,UAAU;AAAA,QAClD,4BAA4B,YAAY,UAAU;AAAA,QAClD,0BAA0B,YAAY,UAAU;AAAA,QAChD,0BAA0B,YAAY,UAAU;AAAA,QAChD,yBAAyB,YAAY,UAAU;AAAA,QAC/C,yBAAyB,YAAY,UAAU;AAAA,QAC/C,sBAAsB,KAAK,eAAe,4BAA4B,EAAE,gBAAgB;AAAA;AAAA;AAAA,QAGxF,sBAAsB,KAAK,eAAe,gBAAgB,EAAE,oBAAoB,EAAE,gBAAgB,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO;AACnH,iBAAO,EAAE,iBAAiB,GAAG,MAAM;AAAA,QACvC,CAAC;AAAA,MACL;AACA,WAAK,mBAAmB,kBAAkB,IAAI;AAC9C,WAAK,wBAAwB;AAAA,IACjC;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,OAAN,MAAW;AAAA,EACP,YAAY,MAAM;AACd,SAAK,qBAAqB,IAAI,aAAa,IAAI;AAAA,EACnD;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,gBAAgB;AAAA,EAClB,yBAAyB;AAAA,EACzB,uBAAuB;AAC3B;AACA,SAAS,YAAY,OAAO,WAAW;AACnC,MAAI,YAAY,GAAG;AACf,YAAQ,CAAC;AAAA,EACb;AACA,SAAQ,QAAQ,MAAO,YAAY;AACvC;AACA,SAAS,UAAU,OAAO,WAAW;AACjC,QAAM,SAAS,OAAO,QAAQ,aAAa;AAC3C,SAAQ,YAAY,IAAI,CAAC,SAAS;AACtC;AACA,SAAS,eAAe,YAAY,WAAW;AAC3C,QAAM,aAAa,UAAU,WAAW,mBAAmB,GAAG,SAAS;AACvE,QAAM,aAAa,UAAU,WAAW,mBAAmB,GAAG,SAAS;AACvE,SAAO,IAAI,eAAe,YAAY,UAAU;AACpD;AACA,SAAS,iBAAiB,OAAO,WAAW;AACxC,WAAS;AACT,MAAI,YAAY,GAAG;AACf,YAAQ,CAAC;AAAA,EACb;AACA,SAAQ,QAAQ,MAAO,YAAY;AACvC;AACA,SAAS,eAAe,OAAO,WAAW;AACtC,QAAM,SAAS,OAAO,QAAQ,aAAa,YAAY;AACvD,SAAQ,YAAY,IAAI,CAAC,SAAS;AACtC;AACA,SAAS,oBAAoB,YAAY,WAAW;AAChD,QAAM,aAAa,eAAe,WAAW,mBAAmB,GAAG,SAAS;AAC5E,QAAM,aAAa,eAAe,WAAW,mBAAmB,GAAG,SAAS;AAC5E,SAAO,IAAI,eAAe,YAAY,UAAU;AACpD;AACA,SAAS,MAAM,OAAO,YAAY;AAC9B,QAAM,IAAI,KAAK,IAAI,KAAK;AACxB,MAAI,IAAI,OAAO;AACX,WAAO;AAAA,EACX;AACA,QAAM,MAAM,KAAK,MAAM,IAAI,WAAW,qBAAqB,IAAI,WAAW;AAC1E,SAAS,QAAQ,IAAK,CAAC,MAAM;AACjC;AACA,SAAS,QAAQ,SAAS,YAAY;AAClC,QAAM,IAAI,KAAK,IAAI,OAAO;AAC1B,MAAI,IAAI,OAAO;AACX,WAAO;AAAA,EACX;AACA,QAAM,MAAM,KAAK,IAAI,IAAI,IAAI,WAAW,uBAAuB,IAAI,WAAW;AAC9E,SAAQ,UAAU,IAAK,CAAC,MAAM;AAClC;AACA,SAAS,uBAAuB,YAAY,YAAY;AACpD,MAAI,eAAe,MAAM;AACrB,WAAO;AAAA,EACX;AACA,QAAMI,OAAM,MAAM,WAAW,mBAAmB,GAAG,UAAU;AAC7D,QAAM,MAAM,MAAM,WAAW,mBAAmB,GAAG,UAAU;AAC7D,SAAO,IAAI,eAAeA,MAAK,GAAG;AACtC;AACA,SAAS,4BAA4B,YAAY,YAAY;AACzD,MAAI,eAAe,MAAM;AACrB,WAAO;AAAA,EACX;AACA,QAAMA,OAAM,QAAQ,WAAW,mBAAmB,GAAG,UAAU;AAC/D,QAAM,MAAM,QAAQ,WAAW,mBAAmB,GAAG,UAAU;AAC/D,SAAO,SAASA,IAAG,KAAK,SAAS,GAAG;AACxC;AACA,SAAS,yBAAyB,YAAY,YAAY;AACtD,MAAI,eAAe,MAAM;AACrB,WAAO;AAAA,EACX;AACA,QAAMA,OAAM,QAAQ,WAAW,mBAAmB,GAAG,UAAU;AAC/D,QAAM,MAAM,QAAQ,WAAW,mBAAmB,GAAG,UAAU;AAC/D,SAAO,IAAI,eAAeA,MAAK,GAAG;AACtC;AACA,SAAS,wBAAwB,OAAO;AACpC,MAAI,UAAU,MAAM;AAChB,WAAO;AAAA,EACX;AACA,QAAM,OAAO,KAAK,IAAI,MAAM,mBAAmB,IAAI,MAAM,mBAAmB,CAAC;AAC7E,MAAI,QAAQ,KAAK,OAAO,OAAO;AAC3B,WAAO;AAAA,EACX;AACA,QAAM,SAAS,KAAK,KAAK,KAAK,IAAI,KAAK,MAAM,IAAI,CAAC,CAAC;AACnD,QAAM,gBAAgB,cAAc,0BAA0B;AAC9D,QAAM,cAAc,IAAI,KAAK,IAAI,IAAI,aAAa;AAClD,SAAO;AAAA,IACH,yBAAyB;AAAA,IACzB,uBAAuB;AAAA,EAC3B;AACJ;AACA,SAAS,mBAAmB,IAAI,IAAI;AAChC,SAAO,GAAG,4BAA4B,GAAG,2BAA2B,GAAG,0BAA0B,GAAG;AACxG;AAEA,IAAM,0BAAN,MAA8B;AAAA,EAC1B,YAAY,MAAM,kBAAkB;AAChC,SAAK,iBAAiB;AACtB,SAAK,6BAA6B;AAClC,QAAI,cAAc,KAAK,cAAc,GAAG;AACpC,WAAK,+BAA+B,CAAC,GAAG,KAAK,CAAC;AAAA,IAClD,OACK;AACD,WAAK,+BAA+B,CAAC;AACrC,eAAS,WAAW,KAAK,gBAAgB,aAAa,KAAI;AACtD,YAAK,WAAW,MAAO,GAAG;AACtB,eAAK,6BAA6B,KAAK,CAAC;AACxC,sBAAY;AAAA,QAChB,WACU,WAAW,MAAO,GAAG;AAC3B,eAAK,6BAA6B,KAAK,GAAG,GAAG;AAC7C,sBAAY;AAAA,QAChB,OACK;AACD,gBAAM,IAAI,MAAM,iBAAiB;AAAA,QACrC;AACA,YAAI,KAAK,6BAA6B,SAAS,KAAK;AAChD,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC/C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,mBAAmB,MAAM,KAAK,aAAa;AACvC,UAAM,cAAe,KAAK,mBAAmB,IAAM,IAAM,IAAI,KAAK;AAClE,QAAI,iBAAiB,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,KAAK,KAAK,KAAK,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC;AAChF,QAAI,QAAQ;AACZ,QAAI,IAAI,KAAK,2BAA2B,CAAC;AAEzC,WAAO,MAAM;AAGT,YAAM,kCAAkC;AAAA,QAAe;AAAA,QAAgB;AAAA,QAAa;AAAA;AAAA,MAAqC,KAAK,iBAAkB,cAAc;AAC9J,YAAM,kCAAkC;AAAA,QAAe;AAAA,QAAgB,cAAc;AAAA,QAAG;AAAA;AAAA,MAAqC;AAC7H,YAAM,wBAAwB;AAAA,QAAe;AAAA,QAAgB;AAAA,QAAG;AAAA;AAAA,MAAqC;AACrG,YAAM,iBAAiB,mCAAmC,mCAAmC;AAC7F,UAAI,CAAC,gBAAgB;AACjB;AAAA,MACJ;AACA,wBAAkB;AAClB,UAAI,KAAK,2BAA2B,EAAE,QAAQ,KAAK,2BAA2B,MAAM;AAAA,IACxF;AACA,QAAI,kBAAmB,cAAc,OAAwC;AACzE,uBAAiB;AAAA,IACrB;AACA,qBAAiB,KAAK,IAAI,GAAG,cAAc;AAC3C,QAAK,KAAK,6BAA6B,SAAS,KAAM;AAAA,MAAM;AAAA,MAAgB;AAAA,MAAG;AAAA;AAAA,IAAqC,GAAG;AACnH,cAAQ;AACR,UAAI,KAAK,6BAA6B,CAAC;AACvC,aAAO;AAAA,QAAe;AAAA,QAAgB,cAAc;AAAA,QAAG;AAAA;AAAA,MAAqC,KAAK,iBAAkB,cAAc,OAAwC;AACrK,0BAAkB;AAClB,YAAI,KAAK,6BAA6B,EAAE,QAAQ,KAAK,6BAA6B,MAAM;AAAA,MAC5F;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,eAAe;AACrB,IAAM,uBAAN,MAA2B;AAAA,EACvB,YAAY,YAAY,MAAM,yBAAyB,yBAAyB;AAC5E,SAAK,kBAAkB,CAAC;AACxB,SAAK,uBAAuB;AAC5B,SAAK,iBAAiB;AACtB,SAAK,oCAAoC;AACzC,SAAK,oCAAoC;AAAA,EAC7C;AAAA,EACA,mBAAmB,MAAM,KAAK;AAC1B,QAAI,OAAO,KAAK;AACZ,YAAM,IAAI,MAAM,YAAY;AAAA,IAChC;AACA,UAAM,cAAc,KAAK,qBAAqB,iBAAiB;AAC/D,UAAM,aAAa,KAAK,yBAAyB;AACjD,UAAM,eAAe,OAAO,OAAO,aAAa;AAChD,UAAM,kBAAkB,IAAI,wBAAwB,KAAK,gBAAgB,CAAC,GAAG,KAAK,CAAC,CAAC;AACpF,UAAM,kBAAkB,IAAI,wBAAwB,KAAK,gBAAgB,CAAC,GAAG,GAAG,GAAG,CAAC;AACpF,UAAM,kBAAkB,IAAI,wBAAwB,KAAK,gBAAgB,CAAC,KAAK,GAAG,CAAC,CAAC;AACpF,UAAM,QAAQ,CAAC;AACf,UAAM,KAAK,gBAAgB,mBAAmB,MAAM,KAAK,WAAW,GAAG,gBAAgB,mBAAmB,MAAM,KAAK,WAAW,GAAG,gBAAgB,mBAAmB,MAAM,KAAK,WAAW,CAAC;AAC7L,WAAO,IAAI,KAAK;AAAA,EACpB;AAAA,EACA,6BAA6B;AACzB,UAAM,aAAa,KAAK;AACxB,UAAM,aAAa,WAAW,qBAAqB;AACnD,QAAI,eAAe,MAAM;AACrB,WAAK,kBAAkB,CAAC;AACxB;AAAA,IACJ;AACA,UAAM,cAAc,WAAW,iBAAiB;AAChD,UAAM,SAAS,KAAK,kCAAkC,cAAc,GAAG,UAAU;AACjF,UAAM,MAAM,KAAK,kCAAkC,GAAG,UAAU;AAChE,UAAM,uBAAuB,KAAK,qBAAqB,kBAAkB,EAAE,iBAAiB,KAAK,qBAAqB,IAAI,IAAI;AAC9H,UAAM,WAAW;AACjB,UAAM,WAAW,cAAc,IAAI;AACnC,UAAM,OAAO,KAAK,IAAI,QAAQ,GAAG;AACjC,UAAM,MAAM,KAAK,IAAI,QAAQ,GAAG;AAChC,QAAI,SAAS,KAAK;AACd,WAAK,kBAAkB,CAAC;AACxB;AAAA,IACJ;AACA,UAAM,OAAO,KAAK,mBAAmB,MAAM,GAAG;AAC9C,SAAK,sBAAsB,YAAY,MAAM,MAAM,KAAK,UAAU,QAAQ;AAC1E,QAAI,WAAW,8BAA8B,KAAK,KAAK,+BAA+B,MAAM,KAAK,IAAI,GAAG;AACpG,YAAM,UAAU,KAAK,qBAAqB,8BAA8B;AACxE,WAAK,yBAAyB,YAAY,MAAM,UAAU,UAAU,SAAS,UAAU,CAAC;AAAA,IAC5F;AACA,UAAM,WAAW,KAAK,gBAAgB,IAAI,CAAC,SAAS,KAAK,iBAAiB;AAC1E,UAAM,SAAS,KAAK,qBAAqB,iCAAiC,QAAQ;AAClF,aAAS,IAAI,GAAG,IAAI,KAAK,gBAAgB,QAAQ,KAAK;AAClD,WAAK,gBAAgB,CAAC,EAAE,kBAAkB,OAAO,CAAC;AAAA,IACtD;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK,qBAAqB,mBAAmB;AAAA,EACxD;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK,KAAK,KAAK,qBAAqB,IAAI,YAAY;AAAA,EAC/D;AAAA,EACA,sBAAsB,YAAY,MAAM,MAAM,KAAK,UAAU,UAAU;AACnE,UAAM,QAAQ,KAAK;AACnB,UAAM,aAAa,KAAK;AACxB,QAAI,MAAM,OAAO;AACjB,WAAO,MAAM,IAAI,OAAO;AACxB,UAAM,OAAQ,QAAQ,MAAO,IAAI;AACjC,QAAI,YAAY;AAChB,QAAI,cAAc;AAClB,aAAS,UAAU,OAAO,KAAK,UAAU,KAAK,WAAW,MAAM;AAC3D,YAAM,QAAQ,KAAK,kCAAkC,SAAS,YAAY,IAAI;AAG9E,UAAI,cAAc,QAAQ,KAAK,IAAI,QAAQ,SAAS,IAAI,KAAK,yBAAyB,GAAG;AACrF;AAAA,MACJ;AAEA,UAAI,QAAQ,YAAY,QAAQ,UAAU;AACtC;AAAA,MACJ;AACA,UAAI,cAAc,MAAM,QAAQ;AAC5B,cAAM,WAAW,EAAE,kBAAkB;AACrC,cAAM,WAAW,EAAE,kBAAkB,WAAW,wBAAwB,OAAO;AAC/E,cAAM,WAAW,EAAE,oBAAoB;AAAA,MAC3C,OACK;AACD,cAAM,KAAK;AAAA,UACP,iBAAiB;AAAA,UACjB,iBAAiB,WAAW,wBAAwB,OAAO;AAAA,UAC3D,mBAAmB;AAAA,QACvB,CAAC;AAAA,MACL;AACA;AACA,kBAAY;AACZ,UAAI,WAAW,gBAAgB,GAAG;AAE9B,eAAO,KAAK,mBAAmB,UAAU,MAAM,GAAG;AAAA,MACtD;AAAA,IACJ;AACA,UAAM,SAAS;AAAA,EACnB;AAAA,EACA,yBAAyB,YAAY,MAAM,UAAU,UAAU,YAAY,YAAY;AACnF,UAAM,QAAQ,KAAK;AAEnB,UAAM,UAAU,KAAK,mCAAmC,YAAY,UAAU,YAAY,UAAU;AAEpG,UAAM,aAAa,KAAK,mCAAmC,YAAY,UAAU,CAAC,YAAY,CAAC,UAAU;AACzG,UAAM,SAAS,KAAK,kCAAkC,GAAG,YAAY,IAAI,IACnE,KAAK,kCAAkC,MAAM,YAAY,IAAI;AACnE,QAAI,MAAM,SAAS,KAAK,MAAM,CAAC,EAAE,kBAAkB,QAAQ,kBAAkB,SAAS,GAAG;AACrF,YAAM,MAAM;AAAA,IAChB;AACA,QAAI,MAAM,SAAS,KAAK,WAAW,kBAAkB,MAAM,MAAM,SAAS,CAAC,EAAE,kBAAkB,SAAS,GAAG;AACvG,YAAM,IAAI;AAAA,IACd;AACA,UAAM,QAAQ,OAAO;AACrB,UAAM,KAAK,UAAU;AAAA,EACzB;AAAA,EACA,mCAAmC,YAAY,OAAO,YAAY,YAAY;AAC1E,UAAM,cAAc,aAAa,cAAc;AAC/C,UAAM,SAAS,KAAK,kCAAkC,QAAQ,YAAY,UAAU;AACpF,UAAM,SAAS,KAAK,kCAAkC,QAAQ,YAAY,UAAU;AACpF,UAAM,WAAW,KAAK,IAAI,QAAQ,MAAM;AACxC,UAAM,WAAW,KAAK,IAAI,QAAQ,MAAM;AACxC,UAAM,YAAY,KAAK,IAAI,KAAK,KAAK,mBAAmB,UAAU,QAAQ,CAAC;AAC3E,UAAM,QAAQ,KAAK,kCAAkC,QAAQ,YAAY,UAAU;AACnF,UAAM,eAAe,QAAS,QAAQ;AACtC,UAAM,eAAe,KAAK,kCAAkC,cAAc,YAAY,IAAI;AAC1F,WAAO,EAAE,iBAAiB,KAAK,qBAAqB,wBAAwB,YAAY,GAAG,iBAAiB,cAAc,mBAAmB,aAAa;AAAA,EAC9J;AAAA,EACA,+BAA+B,MAAM,KAAK,MAAM;AAC5C,QAAI,QAAQ,OAAO,KAAK,qBAAqB,qBAAqB,CAAC;AACnE,QAAI,KAAK,qBAAqB,gBAAgB,GAAG;AAC7C,cAAQ,yBAAyB,OAAO,KAAK,qBAAqB,wBAAwB,CAAC;AAAA,IAC/F;AACA,WAAQ,MAAM,mBAAmB,IAAI,MAAM,QAAU,OAAO,MAAM,mBAAmB,IAAI;AAAA,EAC7F;AACJ;AAEA,SAAS,YAAY,SAAS;AAC1B,SAAO,QAAQ,MAAM,EAAE,KAAK,CAAC,IAAI,OAAO;AACpC,WAAQ,cAAc,GAAG,iBAAiB,CAAC,IAAI,cAAc,GAAG,iBAAiB,CAAC;AAAA,EACtF,CAAC;AACL;AAKA,IAAI;AAAA,CACH,SAAUE,iBAAgB;AAIvB,EAAAA,gBAAeA,gBAAe,QAAQ,IAAI,CAAC,IAAI;AAI/C,EAAAA,gBAAeA,gBAAe,aAAa,IAAI,CAAC,IAAI;AAKpD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AAInD,EAAAA,gBAAeA,gBAAe,cAAc,IAAI,CAAC,IAAI;AACzD,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAC1C,IAAM,sBAAsB,IAAI,oBAAoB;AACpD,IAAM,wBAAwB,IAAI,eAAe,KAAK,CAAC;AACvD,IAAM,aAAN,MAAiB;AAAA,EACb,YAAY,IAAI,SAAS,eAAe,qBAAqB,aAAa;AACtE,SAAK,mBAAmB;AACxB,SAAK,gCAAgC;AACrC,SAAK,uBAAuB;AAC5B,SAAK,+BAA+B;AACpC,SAAK,gCAAgC,EAAE,mBAAmB,OAAO,uBAAuB,KAAK;AAC7F,SAAK,+BAA+B;AACpC,SAAK,wBAAwB;AAC7B,SAAK,wBAAwB;AAC7B,SAAK,2BAA2B,IAAI,SAAS;AAC7C,SAAK,wBAAwB,IAAI,SAAS;AAC1C,SAAK,wBAAwB,CAAC;AAC9B,SAAK,4BAA4B;AACjC,SAAK,iCAAiC;AACtC,SAAK,uBAAuB;AAC5B,SAAK,4BAA4B;AACjC,SAAK,6BAA6B;AAClC,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB,wBAAwB,IAAI;AACxD,SAAK,eAAe;AACpB,SAAK,oBAAoB;AACzB,SAAK,0BAA0B;AAC/B,SAAK,gCAAgC;AACrC,SAAK,wBAAwB;AAC7B,SAAK,wBAAwB,IAAI,qBAAqB,MAAM,KAAK,KAAK,8BAA8B,KAAK,IAAI,GAAG,KAAK,8BAA8B,KAAK,IAAI,CAAC;AAAA,EACjK;AAAA,EACA,eAAe;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB,SAAS;AAC5B,UAAM,KAAK,mBAAmB,OAAO;AACrC,SAAK,0BAA0B;AAC/B,QAAI,QAAQ,SAAS,QAAW;AAC5B,WAAK,kBAAkB,EAAE,gBAAgB,QAAQ,KAAK,CAAC;AAAA,IAC3D;AACA,QAAI,QAAQ,iBAAiB,QAAW;AACpC,YAAM,MAAM,cAAc,QAAQ,aAAa,GAAG;AAClD,YAAM,SAAS,cAAc,QAAQ,aAAa,MAAM;AACxD,UAAI,MAAM,KAAK,MAAM,GAAG;AACpB,cAAM,IAAI,MAAM,4DAA4D,GAAG,EAAE;AAAA,MACrF;AACA,UAAI,SAAS,KAAK,SAAS,GAAG;AAC1B,cAAM,IAAI,MAAM,+DAA+D,MAAM,EAAE;AAAA,MAC3F;AACA,UAAI,MAAM,SAAS,GAAG;AAClB,cAAM,IAAI,MAAM,+DAA+D,MAAM,MAAM,EAAE;AAAA,MACjG;AACA,WAAK,wCAAwC;AAC7C,WAAK,uBAAuB;AAAA,IAChC;AAAA,EACJ;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,+BAA+B;AAC3B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK,kBAAkB,SAAS;AAAA,EAC3C;AAAA,EACA,yBAAyB;AACrB,WAAO,KAAK,kBAAkB,SAAS;AAAA,EAC3C;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK,kBAAkB,SAAS;AAAA,EAC3C;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,iBAAiB;AACb,WAAO;AAAA,MACH,qBAAqB,KAAK,kBAAkB;AAAA,MAC5C,sBAAsB,KAAK,kBAAkB;AAAA,MAC7C,gBAAgB,KAAK,kBAAkB;AAAA,IAC3C;AAAA,EACJ;AAAA;AAAA,EAEA,kBAAkB,SAAS;AACvB,UAAM,UAAU,KAAK,eAAe;AACpC,QAAI,aAAa;AACjB,QAAI,QAAQ,wBAAwB,QAAW;AAC3C,WAAK,kBAAkB,YAAY,QAAQ;AAAA,IAC/C;AACA,QAAI,QAAQ,mBAAmB,QAAW;AACtC,WAAK,kBAAkB,OAAO,QAAQ;AACtC,UAAI,QAAQ,mBAAmB,KAAqC,QAAQ,mBAAmB,GAAqC;AAChI,aAAK,kBAAkB,YAAY;AAAA,MACvC;AAEA,WAAK,8BAA8B,oBAAoB;AAAA,IAC3D;AAEA,QAAI,QAAQ,mBAAmB,KAAsC,QAAQ,mBAAmB,QAAQ,gBAAgB;AACpH,UAAI,4BAA4B,KAAK,sBAAsB,KAAK,oBAAoB,GAAG;AACnF,qBAAa,yBAAyB,KAAK,sBAAsB,KAAK,oBAAoB;AAC1F,YAAI,eAAe,MAAM;AACrB,eAAK,wBAAwB,UAAU;AAAA,QAC3C;AAAA,MACJ,OACK;AACD,aAAK,kBAAkB,YAAY;AAAA,MACvC;AAAA,IACJ;AAEA,QAAI,QAAQ,mBAAmB,KAAsC,QAAQ,mBAAmB,QAAQ,gBAAgB;AACpH,mBAAa,uBAAuB,KAAK,sBAAsB,KAAK,oBAAoB;AACxF,UAAI,eAAe,MAAM;AACrB,aAAK,wBAAwB,UAAU;AAAA,MAC3C;AAAA,IACJ;AACA,UAAM,cAAc,QAAQ,mBAAmB,KAAK,kBAAkB;AACtE,QAAI,gBAAgB,QAAQ,mBAAmB,KAAqC,KAAK,uBAAuB,IAAI;AAChH,WAAK,0BAA0B;AAAA,IACnC;AACA,QAAI,gBAAgB,QAAQ,mBAAmB,KAAuC,KAAK,yBAAyB,IAAI;AACpH,WAAK,0BAA0B;AAAA,IACnC;AACA,QAAI,QAAQ,yBAAyB,UAAa,QAAQ,yBAAyB,QAAQ,sBAAsB;AAC7G,WAAK,kBAAkB,cAAc,QAAQ;AAC7C,WAAK,8BAA8B;AAAA,IACvC;AACA,SAAK,sBAAsB,eAAe,SAAS,KAAK,eAAe,CAAC;AAAA,EAC5E;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB,OAAO;AACvB,QAAI,KAAK,qBAAqB,OAAO;AACjC;AAAA,IACJ;AACA,SAAK,mBAAmB;AACxB,SAAK,wCAAwC;AAC7C,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,2BAA2B;AACvB,QAAI,KAAK,+BAA+B;AACpC,aAAO,KAAK;AAAA,IAChB;AACA,UAAM,MAAM,KAAK,iBAAiB,IAAI,KAAK,sBAAsB,IAAI,KAAK,yBAAyB;AACnG,SAAK,gCAAgC;AACrC,WAAO;AAAA,EACX;AAAA,EACA,uBAAuB;AACnB,SAAK,4BAA4B;AACjC,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,wBAAwB,eAAe,iBAAiB;AACpD,UAAM,gBAAgB,KAAK;AAC3B,QAAI,CAAC,mBACD,EAAE,kBAAkB,QAAQ,kBAAkB,UAC7C,kBAAkB,QAAQ,cAAc,iBAAiB,aAAa,IAAI;AAC3E;AAAA,IACJ;AACA,SAAK,uBAAuB;AAC5B,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,8BAA8B,eAAe;AACzC,SAAK,wBAAwB,aAAa;AAC1C,SAAK,iCAAiC,kBAAkB,IAAI;AAAA,EAChE;AAAA,EACA,oBAAoB;AAChB,SAAK,4BAA4B;AACjC,WAAO,KAAK,qBAAqB,KAAK,CAAC,KAAK,wBAAwB,KAAK,qBAAqB,kBAAkB;AAAA,EACpH;AAAA,EACA,6BAA6B,YAAY;AACrC,WAAO,KAAK,qBAAqB,IAAI,aAAa,KAAK,iBAAiB,IAAI,IAAI;AAAA,EACpF;AAAA,EACA,4BAA4B,OAAO,WAAW;AAC1C,QAAI,KAAK,uBAAuB,GAAG;AAC/B,cAAQ,UAAU,OAAO,SAAS;AAAA,IACtC,WACS,KAAK,yBAAyB,GAAG;AACtC,cAAQ,eAAe,OAAO,SAAS;AAAA,IAC3C;AACA,WAAO,KAAK,8BAA8B,OAAO,SAAS;AAAA,EAC9D;AAAA,EACA,mCAAmC,QAAQ,WAAW,cAAc;AAChE,SAAK,4BAA4B;AACjC,UAAM,KAAK,KAAK,yBAAyB;AACzC,UAAM,QAAQ,cAAc,KAAK,qBAAqB,CAAC;AACvD,UAAMF,OAAM,MAAM,mBAAmB;AACrC,UAAM,MAAM,MAAM,mBAAmB;AACrC,UAAM,KAAM,KAAK,yBAAyB,IAAI;AAC9C,UAAM,aAAa,KAAK,qBAAqB;AAC7C,UAAM,MAAM,MAAM,MAAMA;AACxB,UAAM,YAAa,iBAAiB,SAAa,IAAI,aAAa;AAClE,UAAM,UAAW,iBAAiB,SAAa,OAAO,SAAS,aAAa;AAC5E,UAAM,cAAc,KAAK,mCAAmC;AAC5D,aAAS,IAAI,WAAW,IAAI,SAAS,KAAK;AACtC,YAAM,QAAQ,OAAO,CAAC;AACtB,YAAM,QAAQ,MAAM;AACpB,UAAI,MAAM,KAAK,GAAG;AACd;AAAA,MACJ;AACA,UAAI,UAAU;AACd,UAAI,gBAAgB,MAAM;AACtB,kBAAU,YAAY,MAAM,iBAAiB,SAAS;AAAA,MAC1D;AACA,YAAM,gBAAgB,KAAK,OAAO,UAAUA;AAC5C,YAAM,aAAa,aAAa,gBAAgB,KAAK,mBAAmB,IAAI;AAC5E,YAAM,cAAc;AAAA,IACxB;AAAA,EACJ;AAAA,EACA,iCAAiC,YAAY,WAAW,cAAc;AAClE,SAAK,4BAA4B;AACjC,UAAM,KAAK,KAAK,yBAAyB;AACzC,UAAM,QAAQ,cAAc,KAAK,qBAAqB,CAAC;AACvD,UAAMA,OAAM,MAAM,mBAAmB;AACrC,UAAM,MAAM,MAAM,mBAAmB;AACrC,UAAM,KAAM,KAAK,yBAAyB,IAAI;AAC9C,UAAM,aAAa,KAAK,qBAAqB;AAC7C,UAAM,MAAM,MAAM,MAAMA;AACxB,UAAM,YAAa,iBAAiB,SAAa,IAAI,aAAa;AAClE,UAAM,UAAW,iBAAiB,SAAa,WAAW,SAAS,aAAa;AAChF,UAAM,cAAc,KAAK,mCAAmC;AAC5D,aAAS,IAAI,WAAW,IAAI,SAAS,KAAK;AACtC,YAAM,MAAM,WAAW,CAAC;AACxB,UAAI,cAAc,IAAI;AACtB,UAAI,cAAc,IAAI;AACtB,UAAI,aAAa,IAAI;AACrB,UAAI,eAAe,IAAI;AACvB,UAAI,gBAAgB,MAAM;AACtB,sBAAc,YAAY,IAAI,gBAAgB,SAAS;AACvD,sBAAc,YAAY,IAAI,gBAAgB,SAAS;AACvD,qBAAa,YAAY,IAAI,eAAe,SAAS;AACrD,uBAAe,YAAY,IAAI,iBAAiB,SAAS;AAAA,MAC7D;AACA,UAAI,gBAAgB,KAAK,OAAO,cAAcA;AAC9C,UAAI,aAAa,aAAa,gBAAgB,KAAK,mBAAmB,IAAI;AAC1E,UAAI,kBAAkB;AACtB,sBAAgB,KAAK,OAAO,cAAcA;AAC1C,mBAAa,aAAa,gBAAgB,KAAK,mBAAmB,IAAI;AACtE,UAAI,kBAAkB;AACtB,sBAAgB,KAAK,OAAO,aAAaA;AACzC,mBAAa,aAAa,gBAAgB,KAAK,mBAAmB,IAAI;AACtE,UAAI,iBAAiB;AACrB,sBAAgB,KAAK,OAAO,eAAeA;AAC3C,mBAAa,aAAa,gBAAgB,KAAK,mBAAmB,IAAI;AACtE,UAAI,mBAAmB;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,4BAA4B,YAAY,WAAW;AAC/C,UAAM,UAAU,KAAK,8BAA8B,YAAY,SAAS;AACxE,WAAO,KAAK,yBAAyB,SAAS,SAAS;AAAA,EAC3D;AAAA,EACA,yBAAyB,SAAS,WAAW;AACzC,QAAI,QAAQ;AACZ,QAAI,KAAK,uBAAuB,GAAG;AAC/B,cAAQ,YAAY,OAAO,SAAS;AAAA,IACxC,WACS,KAAK,yBAAyB,GAAG;AACtC,cAAQ,iBAAiB,OAAO,SAAS;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,QAAI,CAAC,KAAK,gCAAgC;AACtC,WAAK,iCAAiC,YAAY,KAAK,qBAAqB;AAAA,IAChF;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,wBAAwB,QAAQ;AAC5B,QAAI,KAAK,sBAAsB,QAAQ,MAAM,MAAM,IAAI;AACnD;AAAA,IACJ;AACA,SAAK,sBAAsB,KAAK,MAAM;AACtC,SAAK,0BAA0B;AAC/B,SAAK,iCAAiC;AAAA,EAC1C;AAAA,EACA,2BAA2B,QAAQ;AAC/B,UAAM,QAAQ,KAAK,sBAAsB,QAAQ,MAAM;AACvD,QAAI,UAAU,IAAI;AACd,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACrD;AACA,SAAK,sBAAsB,OAAO,OAAO,CAAC;AAC1C,QAAI,KAAK,sBAAsB,WAAW,GAAG;AACzC,WAAK,kBAAkB;AAAA,QACnB,qBAAqB;AAAA,MACzB,CAAC;AAED,WAAK,wBAAwB,IAAI;AAAA,IACrC;AACA,SAAK,0BAA0B;AAC/B,SAAK,iCAAiC;AAAA,EAC1C;AAAA,EACA,uBAAuB;AAEnB,QAAI,SAAS;AACb,eAAW,UAAU,KAAK,uBAAuB;AAC7C,YAAM,aAAa,OAAO,qBAAqB;AAC/C,UAAI,eAAe,MAAM;AACrB;AAAA,MACJ;AACA,UAAI,WAAW,QAAQ,WAAW,sBAAsB,OAAO,qBAAqB;AAChF,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,WAAO,WAAW,OAAO,OAAO,OAAO;AAAA,EAC3C;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,kBAAkB;AACd,UAAM,mBAAmB,KAAK,qBAAqB,MAAM;AAQzD,QAAI,KAAK,yBAAyB,SAAS,oBAAoB,KAAK,qBAAqB,+BAA+B,mBAAmB;AACvI,aAAO,KAAK,qBAAqB;AAAA,IACrC;AACA,SAAK,sBAAsB,2BAA2B;AACtD,UAAM,QAAQ,KAAK,sBAAsB,gBAAgB;AACzD,SAAK,uBAAuB,EAAE,iBAAiB,OAAO,4BAA4B,iBAAiB;AACnG,SAAK,yBAAyB,eAAe;AAC7C,WAAO;AAAA,EACX;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB,GAAG;AACpB,QAAI,KAAK,uBAAuB,KAAK,KAAK,yBAAyB,GAAG;AAClE;AAAA,IACJ;AACA,QAAI,KAAK,8BAA8B,QAAQ,KAAK,iCAAiC,MAAM;AACvF;AAAA,IACJ;AACA,QAAI,KAAK,kBAAkB,GAAG;AAC1B;AAAA,IACJ;AAEA,SAAK,4BAA4B,KAAK,mBAAmB;AACzD,SAAK,+BAA+B,cAAc,KAAK,qBAAqB,CAAC,EAAE,gBAAgB;AAAA,EACnG;AAAA,EACA,kBAAkB,GAAG;AACjB,QAAI,KAAK,uBAAuB,KAAK,KAAK,yBAAyB,GAAG;AAClE;AAAA,IACJ;AACA,QAAI,KAAK,8BAA8B,MAAM;AACzC;AAAA,IACJ;AACA,SAAK,kBAAkB;AAAA,MACnB,qBAAqB;AAAA,IACzB,CAAC;AAED,QAAI,KAAK,mBAAmB;AAC5B,QAAI,IAAI,GAAG;AACP,UAAI;AAAA,IACR;AACA,QAAI,cAAc,KAAK,6BAA6B,KAAK,mBAAmB,KAAK,QAAQ,KAAK,KAAK,mBAAmB,KAAK;AAC3H,UAAM,gBAAgB,cAAc,KAAK,4BAA4B,EAAE,gBAAgB;AACvF,iBAAa,KAAK,IAAI,YAAY,GAAG;AACrC,kBAAc,4BAA4B,UAAU;AACpD,SAAK,wBAAwB,aAAa;AAAA,EAC9C;AAAA,EACA,qBAAqB;AACjB,QAAI,KAAK,uBAAuB,KAAK,KAAK,yBAAyB,GAAG;AAClE;AAAA,IACJ;AACA,SAAK,4BAA4B;AACjC,SAAK,+BAA+B;AAAA,EACxC;AAAA,EACA,sBAAsB,GAAG;AACrB,QAAI,KAAK,sBAAsB,GAAG;AAC9B;AAAA,IACJ;AACA,QAAI,KAAK,+BAA+B,QAAQ,KAAK,iCAAiC,MAAM;AACxF;AAAA,IACJ;AACA,QAAI,KAAK,kBAAkB,GAAG;AAC1B;AAAA,IACJ;AACA,SAAK,6BAA6B;AAClC,SAAK,+BAA+B,cAAc,KAAK,qBAAqB,CAAC,EAAE,gBAAgB;AAAA,EACnG;AAAA,EACA,mBAAmB,GAAG;AAClB,QAAI,KAAK,sBAAsB,GAAG;AAC9B;AAAA,IACJ;AACA,QAAI,KAAK,+BAA+B,MAAM;AAC1C;AAAA,IACJ;AACA,UAAM,qBAAqB,cAAc,KAAK,qBAAqB,CAAC,EAAE,iBAAiB,KAAK,KAAK,yBAAyB,IAAI;AAC9H,QAAI,aAAa,IAAI,KAAK;AAC1B,QAAI,KAAK,qBAAqB,GAAG;AAC7B,oBAAc;AAAA,IAClB;AACA,UAAM,aAAa,aAAa;AAChC,UAAM,gBAAgB,cAAc,KAAK,4BAA4B,EAAE,gBAAgB;AACvF,kBAAc,gBAAgB,UAAU;AACxC,SAAK,wBAAwB,eAAe,IAAI;AAChD,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,sBAAsB;AAClB,QAAI,KAAK,sBAAsB,GAAG;AAC9B;AAAA,IACJ;AACA,QAAI,KAAK,+BAA+B,MAAM;AAC1C;AAAA,IACJ;AACA,SAAK,6BAA6B;AAClC,SAAK,+BAA+B;AAAA,EACxC;AAAA,EACA,sBAAsB;AAClB,QAAI,CAAC,KAAK,qBAAqB;AAC3B,WAAK,0BAA0B;AAAA,IACnC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sBAAsB,OAAO,YAAY;AACrC,YAAQ,KAAK,kBAAkB,MAAM;AAAA,MACjC,KAAK;AACD,eAAO,KAAK,2BAA2B,UAAU,OAAO,UAAU,CAAC;AAAA,MACvE,KAAK;AACD,eAAO,KAAK,oBAAoB,EAAE,OAAO,eAAe,OAAO,UAAU,CAAC;AAAA,MAC9E;AACI,eAAO,KAAK,sBAAsB,KAAK;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,wBAAwB,SAAS;AAC7B,YAAQ,KAAK,kBAAkB,MAAM;AAAA,MACjC,KAAK;AACD,eAAO,KAAK,2BAA2B,OAAO;AAAA,MAClD,KAAK;AACD,eAAO,KAAK,oBAAoB,EAAE,OAAO,OAAO;AAAA,MACpD;AACI,eAAO,KAAK,sBAAsB,OAAO;AAAA,IACjD;AAAA,EACJ;AAAA,EACA,iCAAiC,UAAU;AACvC,YAAQ,KAAK,kBAAkB,MAAM;AAAA,MACjC,KAAK;AACD,eAAO,KAAK,oCAAoC,QAAQ;AAAA,MAC5D,KAAK;AACD,eAAO,KAAK,oBAAoB,EAAE,gBAAgB,QAAQ;AAAA,MAC9D;AACI,eAAO,KAAK,0BAA0B,QAAQ;AAAA,IACtD;AAAA,EACJ;AAAA,EACA,8BAA8B,OAAO;AACjC,WAAO,KAAK,sBAAsB,OAAO,cAAc,KAAK,yBAAyB,EAAE,oBAAoB,CAAC;AAAA,EAChH;AAAA,EACA,gCAAgC,OAAO,WAAW;AAC9C,YAAQ,UAAU,OAAO,SAAS;AAClC,WAAO,KAAK,2BAA2B,OAAO,mBAAmB;AAAA,EACrE;AAAA,EACA,gCAAgC;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,gCAAgC,aAAa;AACzC,SAAK,gCAAgC;AAAA,MACjC,uBAAuB;AAAA,MACvB,mBAAmB;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,2BAA2B;AACvB,SAAK,sBAAsB,QAAQ,CAAC,MAAM,EAAE,yBAAyB,CAAC;AAAA,EAC1E;AAAA,EACA,gCAAgC;AAC5B,WAAO,KAAK,kBAAkB,8BAA8B,KAAK,sBAAsB;AAAA,EAC3F;AAAA,EACA,gCAAgC;AAC5B,WAAO,KAAK,mBAAmB,IAAI;AAAA,EACvC;AAAA,EACA,4BAA4B;AACxB,SAAK,uBAAuB;AAC5B,QAAI,SAAS;AACb,SAAK,4BAA4B;AAEjC,eAAW,UAAU,KAAK,uBAAuB;AAC7C,UAAI,OAAO,iBAAiB,IAAI,QAAQ;AACpC,iBAAS,OAAO,iBAAiB;AACjC,aAAK,4BAA4B;AAAA,MACrC;AAAA,IACJ;AACA,QAAI,OAAO;AACX,QAAI,KAAK,8BAA8B,MAAM;AACzC,aAAO,KAAK,MAAM,IAAI,KAAK,0BAA0B,kBAAkB,CAAC;AAAA,IAC5E;AACA,SAAK,sBAAsB;AAC3B,QAAI,KAAK,uBAAuB,GAAG;AAC/B,WAAK,sBAAsB;AAC3B,aAAO;AAAA,IACX,WACS,KAAK,yBAAyB,GAAG;AACtC,WAAK,sBAAsB,IAAI,eAAe,KAAK,CAAC;AACpD,aAAO;AAAA,IACX,OACK;AACD,UAAI,KAAK,8BAA8B,MAAM;AAEzC,aAAK,sBAAsB,KAAK,0BAA0B,oBAAoB;AAAA,MAClF;AAAA,IACJ;AACA,SAAK,wBAAwB,IAAI,qBAAqB,MAAM,MAAM,KAAK,8BAA8B,KAAK,IAAI,GAAG,KAAK,8BAA8B,KAAK,IAAI,CAAC;AAC9J,SAAK,sBAAsB,2BAA2B;AAAA,EAC1D;AAAA,EACA,mCAAmC;AAC/B,SAAK,iCAAiC;AAAA,EAC1C;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,iCAAiC,GAAG;AAChC,SAAK,+BAA+B;AAAA,EACxC;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK,qBAAqB,IAC3B,KAAK,kBAAkB,aAAa,SAAS,KAAK,iBAAiB,IAAI,KAAK,wBAC5E,KAAK,kBAAkB,aAAa,MAAM,KAAK,iBAAiB,IAAI,KAAK;AAAA,EACnF;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK,qBAAqB,IAC3B,KAAK,kBAAkB,aAAa,MAAM,KAAK,iBAAiB,IAAI,KAAK,wBACzE,KAAK,kBAAkB,aAAa,SAAS,KAAK,iBAAiB,IAAI,KAAK;AAAA,EACtF;AAAA,EACA,8BAA8B;AAC1B,QAAI,CAAC,KAAK,8BAA8B,mBAAmB;AACvD,WAAK,8BAA8B,oBAAoB;AACvD,WAAK,oCAAoC;AAAA,IAC7C;AAAA,EACJ;AAAA,EACA,0CAA0C;AACtC,SAAK,gCAAgC;AAAA,EACzC;AAAA,EACA,8BAA8B,SAAS,WAAW;AAC9C,SAAK,4BAA4B;AACjC,QAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,cAAU,KAAK,gBAAgB,KAAK,UAAU,MAAM,SAAS,KAAK,oBAAoB,IAAI;AAC1F,UAAM,QAAQ,cAAc,KAAK,qBAAqB,CAAC;AACvD,UAAM,gBAAgB,KAAK,yBAAyB,KAC/C,KAAK,yBAAyB,IAAI,MAAM,UAAU,MAAM,mBAAmB,KAAK,MAAM,iBAAiB;AAC5G,UAAM,aAAa,KAAK,6BAA6B,aAAa;AAClE,WAAO;AAAA,EACX;AAAA,EACA,8BAA8B,YAAY,WAAW;AACjD,SAAK,4BAA4B;AACjC,QAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,UAAM,gBAAgB,KAAK,6BAA6B,UAAU;AAClE,UAAM,QAAQ,cAAc,KAAK,qBAAqB,CAAC;AACvD,UAAM,UAAU,MAAM,mBAAmB,IAAI,MAAM,iBAAiB,MAC9D,gBAAgB,KAAK,yBAAyB,MAAM,KAAK,yBAAyB,IAAI;AAC5F,WAAO,KAAK,gBAAgB,IAAI,QAAQ,SAAS,KAAK,oBAAoB,IAAI;AAAA,EAClF;AAAA,EACA,gCAAgC;AAC5B,SAAK,uBAAuB;AAC5B,SAAK,sBAAsB,2BAA2B;AAAA,EAC1D;AAAA;AAAA,EAEA,sCAAsC;AAClC,QAAI,KAAK,6BAA6B,KAAK,CAAC,KAAK,sBAAsB,GAAG;AACtE;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,8BAA8B;AACvD,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AACA,QAAI,aAAa;AACjB,UAAM,UAAU,KAAK,8BAA8B;AACnD,QAAI,cAAc;AAClB,QAAI,cAAc;AAClB,eAAW,UAAU,SAAS;AAC1B,UAAI,CAAC,OAAO,kBAAkB,GAAG;AAC7B;AAAA,MACJ;AACA,YAAM,aAAa,OAAO,qBAAqB;AAC/C,UAAI,eAAe,MAAM;AACrB;AAAA,MACJ;AACA,YAAM,gBAAgB,OAAO,wBAAwB,YAAY,eAAe,GAAG,YAAY,gBAAgB,CAAC;AAChH,UAAI,cAAc,iBAAiB,cAAc,qBAAqB;AACtE,UAAI,gBAAgB,MAAM;AACtB,gBAAQ,KAAK,kBAAkB,MAAM;AAAA,UACjC,KAAK;AACD,0BAAc,uBAAuB,aAAa,KAAK,oBAAoB;AAC3E;AAAA,UACJ,KAAK;AACD,0BAAc,eAAe,aAAa,WAAW,eAAe;AACpE;AAAA,UACJ,KAAK;AACD,0BAAc,oBAAoB,aAAa,WAAW,eAAe;AACzE;AAAA,QACR;AACA,YAAI,eAAe,MAAM;AACrB,uBAAa;AAAA,QACjB,OACK;AACD,uBAAa,WAAW,gBAAgB,cAAc,WAAW,CAAC;AAAA,QACtE;AACA,YAAI,kBAAkB,MAAM;AACxB,gBAAM,UAAU,cAAc,kBAAkB;AAChD,cAAI,YAAY,MAAM;AAClB,0BAAc,KAAK,IAAI,aAAa,QAAQ,KAAK;AACjD,0BAAc,KAAK,IAAI,aAAa,QAAQ,KAAK;AAAA,UACrD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,KAAK,8BAA8B,GAAG;AACtC,oBAAc,KAAK,IAAI,aAAa,KAAK,8BAA8B,CAAC;AACxE,oBAAc,KAAK,IAAI,aAAa,KAAK,8BAA8B,CAAC;AAAA,IAC5E;AACA,QAAI,gBAAgB,KAAK,yBAAyB,gBAAgB,KAAK,uBAAuB;AAC1F,WAAK,wBAAwB;AAC7B,WAAK,wBAAwB;AAC7B,WAAK,uBAAuB;AAC5B,WAAK,wCAAwC;AAAA,IACjD;AACA,QAAI,eAAe,MAAM;AAErB,UAAI,WAAW,mBAAmB,MAAM,WAAW,mBAAmB,GAAG;AACrE,cAAM,kBAAkB,KAAK;AAC7B,cAAM,UAAU,oBAAoB,QAAQ,KAAK,uBAAuB,KAAK,KAAK,yBAAyB,IAAI,IAAI,gBAAgB,kBAAkB;AAGrJ,cAAM,cAAc,IAAI;AACxB,YAAI,KAAK,gBAAgB,GAAG;AACxB,uBAAa,yBAAyB,YAAY,KAAK,oBAAoB;AAAA,QAC/E;AACA,qBAAa,IAAI,eAAe,WAAW,mBAAmB,IAAI,aAAa,WAAW,mBAAmB,IAAI,WAAW;AAC5H,YAAI,KAAK,gBAAgB,GAAG;AACxB,uBAAa,uBAAuB,YAAY,KAAK,oBAAoB;AAAA,QAC7E;AAAA,MACJ;AACA,UAAI,KAAK,gBAAgB,GAAG;AACxB,cAAM,WAAW,yBAAyB,YAAY,KAAK,oBAAoB;AAC/E,cAAM,gBAAgB,wBAAwB,QAAQ;AACtD,YAAI,CAAC,mBAAmB,eAAe,KAAK,oBAAoB,GAAG;AAC/D,gBAAM,cAAc,KAAK,iCAAiC,OAAO,yBAAyB,KAAK,8BAA8B,KAAK,oBAAoB,IAAI;AAC1J,eAAK,uBAAuB;AAC5B,uBAAa,uBAAuB,UAAU,aAAa;AAC3D,cAAI,gBAAgB,MAAM;AACtB,iBAAK,+BAA+B,uBAAuB,aAAa,aAAa;AAAA,UACzF;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,wBAAwB,UAAU;AAAA,IAC3C,OACK;AAED,UAAI,KAAK,yBAAyB,MAAM;AACpC,aAAK,wBAAwB,IAAI,eAAe,MAAM,GAAG,CAAC;AAC1D,aAAK,uBAAuB,wBAAwB,IAAI;AAAA,MAC5D;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,qCAAqC;AACjC,QAAI,KAAK,uBAAuB,GAAG;AAC/B,aAAO;AAAA,IACX,WACS,KAAK,yBAAyB,GAAG;AACtC,aAAO;AAAA,IACX,WACS,KAAK,gBAAgB,GAAG;AAC7B,aAAO,CAAC,UAAU,MAAM,OAAO,KAAK,oBAAoB;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA,EACA,sBAAsB,OAAO,WAAW,mBAAmB;AACvD,QAAI,cAAc,QAAW;AACzB,UAAI,sBAAsB,QAAW;AACjC,4BAAoB,KAAK,oBAAoB;AAAA,MACjD;AACA,aAAO,kBAAkB,OAAO,KAAK;AAAA,IACzC;AACA,WAAO,UAAU,KAAK;AAAA,EAC1B;AAAA,EACA,uBAAuB,QAAQ,WAAW,mBAAmB;AACzD,QAAI,cAAc,QAAW;AACzB,UAAI,sBAAsB,QAAW;AACjC,4BAAoB,KAAK,oBAAoB;AAAA,MACjD;AACA,aAAO,kBAAkB,gBAAgB,MAAM;AAAA,IACnD;AACA,WAAO,UAAU,MAAM;AAAA,EAC3B;AAAA,EACA,sBAAsB,OAAO,mBAAmB;AAC5C,WAAO,KAAK,sBAAsB,OAAO,KAAK,8BAA8B,gBAAgB,iBAAiB;AAAA,EACjH;AAAA,EACA,0BAA0B,QAAQ,mBAAmB;AACjD,UAAM,iBAAiB,KAAK,8BAA8B;AAC1D,WAAO,KAAK,uBAAuB,QAAQ,KAAK,8BAA8B,4BAA4B,iBAAiB,CAAC,WAAW,OAAO,IAAI,cAAc,IAAI,SAAY,iBAAiB;AAAA,EACrM;AAAA,EACA,2BAA2B,YAAY,mBAAmB;AACtD,WAAO,KAAK,sBAAsB,YAAY,KAAK,8BAA8B,qBAAqB,iBAAiB;AAAA,EAC3H;AAAA,EACA,oCAAoC,aAAa,mBAAmB;AAChE,UAAM,+BAA+B,KAAK,8BAA8B;AACxE,WAAO,KAAK,uBAAuB,aAAa,KAAK,8BAA8B,iCAAiC,+BAA+B,CAAC,WAAW,OAAO,IAAI,4BAA4B,IAAI,SAAY,iBAAiB;AAAA,EAC3O;AACJ;AAEA,SAAS,SAAS,QAAQ;AACtB,SAAO,kBAAkB;AAC7B;AACA,IAAM,yBAAyB;AAC/B,IAAM,kBAAkB;AACxB,IAAM,OAAN,MAAW;AAAA,EACP,YAAY,WAAW,OAAO;AAC1B,SAAK,wBAAwB,CAAC;AAC9B,SAAK,oCAAoC,oBAAI,IAAI;AACjD,SAAK,mBAAmB;AACxB,SAAK,kBAAkB;AACvB,SAAK,0BAA0B;AAC/B,SAAK,iCAAiC;AACtC,SAAK,8BAA8B;AACnC,SAAK,sBAAsB,IAAI,SAAS;AACxC,SAAK,uBAAuB,CAAC;AAC7B,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB;AACvB,SAAK,iBAAiB,IAAI,KAAK,IAAI;AACnC,UAAM,UAAU,MAAM,kBAAkB;AACxC,SAAK,2BAA2B,KAAK,2BAA2B,QAAuC,QAAQ,cAAc;AAC7H,SAAK,4BAA4B,KAAK,2BAA2B,SAAyC,QAAQ,eAAe;AACjI,SAAK,yBAAyB,sBAAsB,EAAE,oBAAoB,KAAK,kCAAkC,KAAK,MAAM,KAAK,wBAAwB,GAAG,IAAI;AAChK,SAAK,0BAA0B,sBAAsB,EAAE,oBAAoB,KAAK,kCAAkC,KAAK,MAAM,KAAK,yBAAyB,GAAG,IAAI;AAClK,SAAK,4BAA4B,OAAO;AAAA,EAC5C;AAAA,EACA,4BAA4B,SAAS;AACjC,QAAI,QAAQ,gBAAgB;AACxB,WAAK,yBAAyB,uBAAuB,QAAQ,cAAc;AAAA,IAC/E;AACA,QAAI,QAAQ,iBAAiB;AACzB,WAAK,0BAA0B,uBAAuB,QAAQ,eAAe;AAAA,IACjF;AACA,QAAI,QAAQ,cAAc;AACtB,WAAK,yBAAyB,0BAA0B;AACxD,WAAK,0BAA0B,0BAA0B;AAAA,IAC7D;AACA,QAAI,QAAQ,oBAAoB;AAC5B,YAAM,eAAe,MAAM,KAAK,KAAK,kCAAkC,OAAO,CAAC;AAC/E,iBAAW,OAAO,cAAc;AAC5B,cAAM,aAAa,cAAc,IAAI,CAAC,EAAE,qBAAqB,CAAC;AAC9D,mBAAW,uBAAuB,QAAQ,kBAAkB;AAC5D,YAAI,QAAQ,cAAc;AACtB,qBAAW,0BAA0B;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,yBAAyB,IAAI;AACzB,YAAQ,IAAI;AAAA;AAAA,MAER,KAAK,QAAuC;AACxC,eAAO,KAAK;AAAA,MAChB;AAAA;AAAA,MAEA,KAAK,SAAyC;AAC1C,eAAO,KAAK;AAAA,MAChB;AAAA,IACJ;AACA,QAAI,KAAK,kCAAkC,IAAI,EAAE,GAAG;AAChD,aAAO,cAAc,KAAK,kCAAkC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,qBAAqB;AAAA,IACjG;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB;AAChB,SAAK,gBAAgB,EAAE,oCAAoC,EAAE,yBAAyB,IAAI;AAC1F,SAAK,yBAAyB,sBAAsB,EAAE,yBAAyB,IAAI;AACnF,SAAK,0BAA0B,sBAAsB,EAAE,yBAAyB,IAAI;AACpF,SAAK,sBAAsB,QAAQ,CAAC,WAAW;AAC3C,UAAI,OAAO,mBAAmB;AAC1B,eAAO,kBAAkB;AAAA,MAC7B;AAAA,IACJ,CAAC;AACD,SAAK,uBAAuB,KAAK,qBAAqB,OAAO,CAAC,cAAc;AACxE,YAAM,IAAI,UAAU,oBAAoB;AACxC,UAAI,EAAE,UAAU;AACZ,UAAE,SAAS;AAAA,MACf;AACA,aAAO;AAAA,IACX,CAAC;AACD,SAAK,oBAAoB,eAAe;AAAA,EAC5C;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B,QAAQ;AAC/B,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB,OAAO;AACtB,SAAK,kBAAkB;AACvB,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,oBAAoB,QAAQ;AACxB,SAAK,mBAAmB;AACxB,SAAK,yBAAyB,oBAAoB,MAAM;AACxD,SAAK,0BAA0B,oBAAoB,MAAM;AAEzD,SAAK,sBAAsB,QAAQ,CAAC,OAAO;AACvC,UAAI,KAAK,oBAAoB,EAAE,GAAG;AAC9B,cAAM,aAAa,GAAG,qBAAqB;AAC3C,YAAI,eAAe,MAAM;AACrB,qBAAW,oBAAoB,MAAM;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,+BAA+B,UAAU;AACrC,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,8BAA8B;AAC1B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK,sBAAsB,OAAO,QAAQ;AAAA,EACrD;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB,QAAQ;AACxB,UAAM,aAAa,OAAO,qBAAqB;AAC/C,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,6BAA6B,cAAc,KAAK,8BAA8B;AAAA,EAC9F;AAAA,EACA,wBAAwB,QAAQ,eAAe,kBAAkB;AAC7D,SAAK,2BAA2B,QAAQ,eAAe,mBAAmB,OAAO,iBAAiB,IAAI,KAAK,sBAAsB,MAAM;AAAA,EAC3I;AAAA,EACA,2BAA2B,QAAQ,iBAAiB;AAChD,UAAM,QAAQ,KAAK,sBAAsB,QAAQ,MAAM;AACvD,WAAO,UAAU,IAAI,uCAAuC;AAC5D,SAAK,sBAAsB,OAAO,OAAO,CAAC;AAC1C,QAAI,CAAC,iBAAiB;AAClB,WAAK,sBAAsB,QAAQ,CAAC,IAAI,MAAM,GAAG,oBAAoB,CAAC,CAAC;AAAA,IAC3E;AACA,UAAM,eAAe,cAAc,OAAO,qBAAqB,CAAC,EAAE,aAAa;AAC/E,QAAI,KAAK,kCAAkC,IAAI,YAAY,GAAG;AAC1D,YAAM,iBAAiB,cAAc,KAAK,kCAAkC,IAAI,YAAY,CAAC;AAC7F,YAAM,eAAe,eAAe,QAAQ,MAAM;AAClD,UAAI,iBAAiB,IAAI;AACrB,uBAAe,OAAO,cAAc,CAAC;AACrC,YAAI,eAAe,WAAW,GAAG;AAC7B,eAAK,kCAAkC,OAAO,YAAY;AAAA,QAC9D;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,aAAa,OAAO,qBAAqB;AAG/C,QAAI,cAAc,WAAW,sBAAsB,EAAE,QAAQ,MAAM,KAAK,GAAG;AACvE,iBAAW,2BAA2B,MAAM;AAC5C,WAAK,gCAAgC,UAAU;AAAA,IACnD;AACA,SAAK,iCAAiC;AAAA,EAC1C;AAAA,EACA,6BAA6B,YAAY;AACrC,QAAI,eAAe,KAAK,0BAA0B;AAC9C,aAAO;AAAA,IACX;AACA,QAAI,eAAe,KAAK,2BAA2B;AAC/C,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,4BAA4B;AACxB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,0BAA0B,YAAY,GAAG;AACrC,eAAW,qBAAqB,CAAC;AAAA,EACrC;AAAA,EACA,uBAAuB,YAAY,GAAG;AAClC,eAAW,kBAAkB,CAAC;AAE9B,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,wBAAwB,YAAY;AAChC,eAAW,mBAAmB;AAAA,EAClC;AAAA,EACA,2BAA2B,YAAY,GAAG;AACtC,eAAW,sBAAsB,CAAC;AAAA,EACtC;AAAA,EACA,wBAAwB,YAAY,GAAG;AACnC,eAAW,mBAAmB,CAAC;AAC/B,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,yBAAyB,YAAY;AACjC,eAAW,oBAAoB;AAAA,EACnC;AAAA,EACA,6BAA6B;AACzB,SAAK,sBAAsB,QAAQ,CAAC,WAAW;AAC3C,aAAO,yBAAyB;AAAA,IACpC,CAAC;AAAA,EACL;AAAA,EACA,8BAA8B;AAC1B,QAAI,aAAa;AACjB,QAAI,KAAK,gBAAgB,kBAAkB,EAAE,gBAAgB,WAAW,KAAK,0BAA0B,sBAAsB,EAAE,WAAW,GAAG;AACzI,mBAAa,KAAK;AAAA,IACtB,WACS,KAAK,gBAAgB,kBAAkB,EAAE,eAAe,WAAW,KAAK,yBAAyB,sBAAsB,EAAE,WAAW,GAAG;AAC5I,mBAAa,KAAK;AAAA,IACtB,WACS,KAAK,sBAAsB,WAAW,GAAG;AAC9C,mBAAa,KAAK,sBAAsB,CAAC,EAAE,qBAAqB;AAAA,IACpE;AACA,QAAI,eAAe,MAAM;AACrB,mBAAa,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EACA,qCAAqC;AACjC,QAAI,aAAa;AACjB,QAAI,KAAK,gBAAgB,kBAAkB,EAAE,gBAAgB,SAAS;AAClE,mBAAa,KAAK;AAAA,IACtB,WACS,KAAK,gBAAgB,kBAAkB,EAAE,eAAe,SAAS;AACtE,mBAAa,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EACA,gCAAgC,YAAY;AACxC,QAAI,eAAe,QAAQ,CAAC,WAAW,sBAAsB,GAAG;AAC5D;AAAA,IACJ;AACA,SAAK,oCAAoC,UAAU;AAAA,EACvD;AAAA,EACA,0BAA0B,YAAY;AAClC,UAAM,cAAc,KAAK,oBAAoB,6BAA6B;AAC1E,eAAW,kBAAkB,EAAE,qBAAqB,KAAK,CAAC;AAC1D,QAAI,gBAAgB,MAAM;AACtB,iBAAW,gCAAgC,WAAW;AAAA,IAC1D;AACA,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,+BAA+B;AAC3B,SAAK,oCAAoC,KAAK,wBAAwB;AACtE,SAAK,oCAAoC,KAAK,yBAAyB;AAAA,EAC3E;AAAA,EACA,wBAAwB;AACpB,SAAK,gCAAgC,KAAK,wBAAwB;AAClE,SAAK,gCAAgC,KAAK,yBAAyB;AACnE,SAAK,sBAAsB,QAAQ,CAAC,OAAO;AACvC,UAAI,KAAK,oBAAoB,EAAE,GAAG;AAC9B,aAAK,gCAAgC,GAAG,qBAAqB,CAAC;AAAA,MAClE;AAAA,IACJ,CAAC;AACD,SAAK,2BAA2B;AAChC,SAAK,gBAAgB,sBAAsB;AAAA,EAC/C;AAAA,EACA,2BAA2B;AACvB,QAAI,KAAK,mCAAmC,MAAM;AAC9C,WAAK,iCAAiC,YAAY,KAAK,qBAAqB;AAAA,IAChF;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,yBAAyB,QAAQ,OAAO;AACpC,YAAQ,MAAM,OAAO,GAAG,KAAK,sBAAsB,SAAS,CAAC;AAC7D,UAAM,QAAQ,KAAK,sBAAsB,QAAQ,MAAM;AACvD,WAAO,UAAU,IAAI,qCAAqC;AAC1D,SAAK,sBAAsB,OAAO,OAAO,CAAC;AAC1C,SAAK,sBAAsB,OAAO,OAAO,GAAG,MAAM;AAClD,SAAK,sBAAsB,QAAQ,CAAC,IAAI,MAAM,GAAG,oBAAoB,CAAC,CAAC;AACvE,SAAK,iCAAiC;AACtC,eAAW,MAAM,CAAC,KAAK,0BAA0B,KAAK,yBAAyB,GAAG;AAC9E,SAAG,iCAAiC;AACpC,SAAG,0BAA0B;AAAA,IACjC;AACA,SAAK,gBAAgB,sBAAsB;AAAA,EAC/C;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK,yBAAyB,EAAE,OAAO,QAAQ;AAAA,EAC1D;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,0BAA0B,WAAW;AACjC,SAAK,qBAAqB,KAAK,IAAI,uBAAuB,SAAS,CAAC;AAAA,EACxE;AAAA,EACA,0BAA0B,QAAQ;AAC9B,SAAK,uBAAuB,KAAK,qBAAqB,OAAO,CAAC,YAAY,QAAQ,oBAAoB,MAAM,MAAM;AAClH,QAAI,OAAO,UAAU;AACjB,aAAO,SAAS;AAAA,IACpB;AACA,SAAK,gBAAgB,sBAAsB;AAAA,EAC/C;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B,GAAG,GAAG;AAC7B,WAAO,KAAK,qBACP,IAAI,CAAC,cAAc,UAAU,kBAAkB,GAAG,CAAC,CAAC,EACpD,OAAO,CAAC,WAAW,WAAW,IAAI;AAAA,EAC3C;AAAA,EACA,oCAAoC,YAAY;AAE5C,UAAM,qBAAqB,WAAW,8BAA8B;AACpE,QAAI,sBAAsB,mBAAmB,SAAS,KAAK,CAAC,KAAK,oBAAoB,kBAAkB,GAAG;AACtG,YAAM,cAAc,KAAK,oBAAoB,6BAA6B;AAC1E,UAAI,gBAAgB,MAAM;AACtB,mBAAW,gCAAgC,WAAW;AAAA,MAC1D;AAAA,IACJ;AACA,eAAW,yBAAyB;AAAA,EACxC;AAAA,EACA,2BAA2B,QAAQ,cAAc,OAAO;AACpD,QAAI,aAAa,KAAK,yBAAyB,YAAY;AAC3D,QAAI,eAAe,MAAM;AACrB,mBAAa,KAAK,2BAA2B,cAAc,KAAK,gBAAgB,kBAAkB,EAAE,kBAAkB;AAAA,IAC1H;AACA,SAAK,sBAAsB,OAAO,OAAO,GAAG,MAAM;AAClD,QAAI,CAAC,oBAAoB,YAAY,GAAG;AACpC,YAAM,iBAAiB,KAAK,kCAAkC,IAAI,YAAY,KAAK,CAAC;AACpF,qBAAe,KAAK,MAAM;AAC1B,WAAK,kCAAkC,IAAI,cAAc,cAAc;AAAA,IAC3E;AACA,WAAO,oBAAoB,KAAK;AAChC,eAAW,wBAAwB,MAAM;AACzC,WAAO,wBAAwB,UAAU;AACzC,SAAK,gCAAgC,UAAU;AAC/C,SAAK,iCAAiC;AAAA,EAC1C;AAAA,EACA,kCAAkC,YAAY,SAAS,SAAS;AAC5D,QAAI,QAAQ,mBAAmB,QAAQ,gBAAgB;AACnD;AAAA,IACJ;AAEA,SAAK,oCAAoC,UAAU;AAAA,EACvD;AAAA,EACA,2BAA2B,IAAI,SAAS;AACpC,UAAM,gBAAgB,EAAE,SAAS,MAAM,WAAW,MAAM,GAAG,MAAM,OAAO,EAAE;AAC1E,UAAM,aAAa,IAAI,WAAW,IAAI,eAAe,KAAK,gBAAgB,kBAAkB,EAAE,QAAQ,GAAG,KAAK,gBAAgB,kBAAkB,EAAE,cAAc,KAAK,gBAAgB,sBAAsB,CAAC;AAC5M,eAAW,oBAAoB,KAAK,iBAAiB,CAAC;AACtD,WAAO;AAAA,EACX;AACJ;AAGA,SAAS,uBAAuB,MAAM,WAAW;AAC7C,SAAQ,CAAC,aACJ,SAAS,SAAS,cAAc,SAChC,SAAS,YAAY,cAAc;AAC5C;AACA,SAAS,yBAAyB,SAAS,GAAG,GAAG;AAC7C,MAAI;AACJ,MAAI;AACJ,aAAW,UAAU,SAAS;AAC1B,UAAM,sBAAsB,OAAO,6BAA6B,GAAG,CAAC,KAAK,CAAC;AAC1E,eAAW,aAAa,qBAAqB;AACzC,UAAI,uBAAuB,UAAU,QAAQ,kBAAkB,MAAM,GAAG;AACpE,2BAAmB;AACnB,wBAAgB;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,CAAC,oBAAoB,CAAC,eAAe;AACrC,WAAO;AAAA,EACX;AACA,SAAO;AAAA,IACH,eAAe;AAAA,IACf,kBAAkB;AAAA,EACtB;AACJ;AACA,SAAS,0BAA0B,cAAc;AAC7C,SAAO;AAAA,IACH,kBAAkB,aAAa;AAAA,IAC/B,kBAAkB;AAAA,MACd,sBAAsB,aAAa,cAAc;AAAA,IACrD;AAAA,IACA,uBAAuB,aAAa,cAAc;AAAA,EACtD;AACJ;AAMA,SAAS,gBAAgB,WAAW,GAAG,GAAG,MAAM;AAC5C,aAAW,YAAY,WAAW;AAC9B,UAAM,WAAW,SAAS,mBAAmB,IAAI;AACjD,QAAI,aAAa,QAAQ,SAAS,mBAAmB;AACjD,YAAM,SAAS,SAAS,kBAAkB,GAAG,CAAC;AAC9C,UAAI,WAAW,MAAM;AACjB,eAAO;AAAA,UACH,gBAAgB;AAAA,UAChB,kBAAkB;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,aAAa,QAAQ;AAC1B,SAAO,OAAO,wBAAwB;AAC1C;AAEA,SAAS,YAAY,MAAM,GAAG,GAAG;AAC7B,QAAM,UAAU,CAAC,MAAM,GAAG,KAAK,yBAAyB,CAAC;AACzD,QAAM,mBAAmB,yBAAyB,SAAS,GAAG,CAAC;AAC/D,MAAI,kBAAkB,cAAc,WAAW,OAAO;AAGlD,WAAO,0BAA0B,gBAAgB;AAAA,EACrD;AACA,aAAW,UAAU,SAAS;AAC1B,QAAI,oBAAoB,iBAAiB,qBAAqB,UAAU,iBAAiB,cAAc,WAAW,YAAY,CAAC,iBAAiB,cAAc,cAAc;AAGxK,aAAO,0BAA0B,gBAAgB;AAAA,IACrD;AACA,QAAI,aAAa,MAAM,GAAG;AACtB,YAAM,eAAe,gBAAgB,OAAO,oBAAoB,IAAI,GAAG,GAAG,GAAG,IAAI;AACjF,UAAI,iBAAiB,MAAM;AACvB,eAAO;AAAA,UACH,kBAAkB;AAAA,UAClB,gBAAgB,aAAa;AAAA,UAC7B,kBAAkB,aAAa;AAAA,QACnC;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,oBAAoB,iBAAiB,qBAAqB,UAAU,iBAAiB,cAAc,WAAW,YAAY,iBAAiB,cAAc,cAAc;AACvK,aAAO,0BAA0B,gBAAgB;AAAA,IACrD;AAAA,EACJ;AACA,MAAI,kBAAkB,eAAe;AAEjC,WAAO,0BAA0B,gBAAgB;AAAA,EACrD;AACA,SAAO;AACX;AAEA,IAAM,uBAAN,MAA2B;AAAA,EACvB,YAAY,QAAQ,mBAAmBL,QAAO,IAAI;AAC9C,SAAK,uBAAuB;AAC5B,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB;AAC5B,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,wBAAwB,oBAAI,IAAI;AACrC,SAAK,mBAAmB;AACxB,SAAK,8BAA8B;AACnC,SAAK,oBAAoBA;AAAA,EAC7B;AAAA,EACA,iBAAiB,UAAU;AACvB,UAAM,OAAO,SAAS;AACtB,UAAM,WAAW,KAAK,4BAA4B,SAAS,IAAI;AAC/D,UAAM,OAAO,KAAK,gBAAgB,IAAI,QAAQ;AAC9C,QAAI,SAAS,QAAW;AACpB,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,KAAK,yBAAyB,KAAK,mBAAmB;AACtD,YAAM,cAAc,KAAK,sBAAsB,IAAI,KAAK,oBAAoB;AAC5E,WAAK,sBAAsB,OAAO,KAAK,oBAAoB;AAC3D,WAAK,gBAAgB,OAAO,cAAc,WAAW,CAAC;AACtD,WAAK;AACL,WAAK;AAAA,IACT;AACA,UAAM,MAAM,KAAK,iBAAiB,QAAQ;AAC1C,SAAK,gBAAgB,IAAI,UAAU,EAAE,kBAAkB,KAAK,gBAAgB,KAAK,oBAAoB,CAAC;AACtG,SAAK,sBAAsB,IAAI,KAAK,qBAAqB,QAAQ;AACjE,SAAK;AACL,SAAK;AACL,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,YAAN,MAAgB;AAAA,EACZ,YAAY,MAAM,OAAO;AACrB,WAAO,QAAQ,OAAO,yBAAyB;AAC/C,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK,kBAAkB,KAAK,iBAAiB;AAAA,EACxD;AAAA,EACA,mBAAmB,OAAO;AACtB,WAAO,KAAK,kBAAkB,SAAS,SAAS,KAAK;AAAA,EACzD;AAAA,EACA,iBAAiB,OAAO;AACpB,WAAO,KAAK,mBAAmB,MAAM,eAAe,KAAK,KAAK,oBAAoB,MAAM,gBAAgB;AAAA,EAC5G;AACJ;AACA,SAAS,eAAe,OAAO,QAAQ;AACnC,MAAI,UAAU,QAAQ,WAAW,MAAM;AACnC,WAAO,UAAU;AAAA,EACrB;AACA,SAAO,MAAM,iBAAiB,MAAM;AACxC;AAEA,IAAM,YAAN,MAAgB;AAAA,EACZ,cAAc;AACV,SAAK,0BAA0B,oBAAI,IAAI;AACvC,SAAK,kBAAkB;AACvB,SAAK,gCAAgC;AAAA,EACzC;AAAA,EACA,iCAAiC,KAAK;AAClC,SAAK,gCAAgC;AACrC,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,6BAA6B,WAAW,wBAAwB;AAC5D,SAAK,gCAAgC,sBAAsB;AAC3D,SAAK,kBAAkB;AACvB,aAAS,QAAQ,wBAAwB,QAAQ,UAAU,QAAQ,EAAE,OAAO;AACxE,YAAM,QAAQ,UAAU,KAAK;AAC7B,UAAI,iBAAiB,KAAK,wBAAwB,IAAI,MAAM,UAAU;AACtE,UAAI,mBAAmB,QAAW;AAC9B,yBAAiB,CAAC;AAClB,aAAK,wBAAwB,IAAI,MAAM,YAAY,cAAc;AAAA,MACrE;AACA,qBAAe,KAAK;AAAA,QAChB;AAAA,QACA,MAAM,MAAM;AAAA,QACZ,QAAQ,MAAM;AAAA,QACd,cAAc,MAAM;AAAA,MACxB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,gBAAgB,SAAS,UAAU,qBAAqB,oBAAoB,mBAAmB;AAC3F,UAAM,oBAAoB,KAAK,KAAK,WAAW,OAAO;AACtD,QAAI,KAAK,oBAAoB,QACzB,KAAK,gBAAgB,gCAAgC,qBACrD,sBAAsB,KAAK,gBAAgB,+BAC3C,wBAAwB,KAAK,gBAAgB,+BAA+B;AAC5E,WAAK,kBAAkB;AAAA,QACnB,6BAA6B;AAAA,QAC7B,+BAA+B;AAAA,QAC/B,iBAAiB,KAAK,yBAAyB,mBAAmB,qBAAqB,kBAAkB;AAAA,QACzG,6BAA6B;AAAA,MACjC;AAAA,IACJ;AACA,WAAO,KAAK,gBAAgB;AAAA,EAChC;AAAA,EACA,gCAAgC,YAAY;AACxC,QAAI,eAAe,GAAG;AAClB,WAAK,wBAAwB,MAAM;AACnC;AAAA,IACJ;AACA,UAAM,iBAAiB,CAAC;AACxB,SAAK,wBAAwB,QAAQ,CAAC,OAAO,eAAe;AACxD,UAAI,cAAc,MAAM,CAAC,EAAE,OAAO;AAC9B,uBAAe,KAAK,UAAU;AAAA,MAClC,OACK;AACD,cAAM,OAAO,WAAW,OAAO,YAAY,CAAC,OAAO,GAAG,QAAQ,UAAU,GAAG,QAAQ;AAAA,MACvF;AAAA,IACJ,CAAC;AACD,eAAW,UAAU,gBAAgB;AACjC,WAAK,wBAAwB,OAAO,MAAM;AAAA,IAC9C;AAAA,EACJ;AAAA,EACA,yBAAyB,mBAAmB,qBAAqB,oBAAoB;AACjF,QAAI,QAAQ,CAAC;AACb,UAAM,gBAAgB,CAAC,SAAS,CAAC,uBAAuB,mBAAmB,IAAI,KAAK,KAAK;AACzF,eAAW,UAAU,MAAM,KAAK,KAAK,wBAAwB,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG;AACxF,UAAI,CAAC,KAAK,wBAAwB,IAAI,MAAM,GAAG;AAC3C;AAAA,MACJ;AAEA,YAAM,YAAY;AAClB,cAAQ,CAAC;AACT,YAAM,kBAAkB,UAAU;AAClC,UAAI,mBAAmB;AACvB,YAAM,gBAAgB,cAAc,KAAK,wBAAwB,IAAI,MAAM,CAAC;AAC5E,YAAM,sBAAsB,cAAc;AAC1C,UAAI,aAAa;AACjB,UAAI,YAAY;AAChB,eAAS,IAAI,GAAG,IAAI,qBAAqB,KAAK;AAC1C,cAAM,OAAO,cAAc,CAAC;AAC5B,cAAM,eAAe,KAAK;AAG1B,eAAO,mBAAmB,iBAAiB;AACvC,gBAAM,WAAW,UAAU,gBAAgB;AAC3C,gBAAM,YAAY,SAAS;AAC3B,cAAI,YAAY,gBAAgB,cAAc,QAAQ,GAAG;AACrD;AACA,kBAAM,KAAK,QAAQ;AACnB,wBAAY;AACZ,yBAAa;AAAA,UACjB,OACK;AACD,yBAAa;AACb;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,aAAa,gBAAgB,qBAC7B,eAAe,aAAa,qBAC5B,cAAc,IAAI,GAAG;AAErB,gBAAM,KAAK,IAAI;AACf,sBAAY;AAAA,QAChB,OACK;AACD,cAAI,KAAK,+BAA+B;AACpC,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO,mBAAmB,iBAAiB,oBAAoB;AAC3D,YAAI,cAAc,UAAU,gBAAgB,CAAC,GAAG;AAC5C,gBAAM,KAAK,UAAU,gBAAgB,CAAC;AAAA,QAC1C;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,wBAAN,MAAM,uBAAsB;AAAA,EACxB,YAAY,cAAc;AACtB,SAAK,yBAAyB;AAAA,EAClC;AAAA,EACA,wBAAwB;AACpB,QAAI,KAAK,2BAA2B,MAAM;AACtC,aAAO;AAAA,IACX;AACA,WAAO,IAAI,UAAU,KAAK,MAAM,KAAK,uBAAuB,eAAe,CAAC,GAAG,KAAK,KAAK,KAAK,uBAAuB,gBAAgB,CAAC,CAAC;AAAA,EAC3I;AAAA,EACA,yBAAyB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,OAAO,oBAAoB;AACvB,WAAO,IAAI,uBAAsB,IAAI;AAAA,EACzC;AACJ;AAEA,IAAM,oCAAoC;AAC1C,SAAS,wBAAwB,GAAG,GAAG;AACnC,SAAO,EAAE,SAAS,EAAE,SAAS,IAAI;AACrC;AACA,IAAM,YAAN,MAAgB;AAAA,EACZ,YAAY,OAAO,SAAS,qBAAqB,mBAAmB;AAChE,SAAK,kBAAkB;AACvB,SAAK,4BAA4B;AACjC,SAAK,mBAAmB,CAAC;AACzB,SAAK,6BAA6B;AAClC,SAAK,4BAA4B;AACjC,SAAK,sBAAsB,IAAI,UAAU;AACzC,SAAK,8BAA8B,oBAAI,IAAI;AAC3C,SAAK,yBAAyB,sBAAsB,kBAAkB;AACtE,SAAK,oCAAoC;AACzC,SAAK,+BAA+B,IAAI,SAAS;AACjD,SAAK,gCAAgC,IAAI,SAAS;AAClD,SAAK,2BAA2B,IAAI,SAAS;AAC7C,SAAK,uCAAuC;AAC5C,SAAK,2BAA2B;AAChC,SAAK,4BAA4B,oBAAI,IAAI;AACzC,SAAK,oCAAoC;AACzC,SAAK,mBAAmB,CAAC;AACzB,SAAK,oBAAoB;AACzB,SAAK,gCAAgC;AACrC,SAAK,wBAAwB,QAAQ;AACrC,SAAK,uBAAuB,QAAQ;AACpC,SAAK,kBAAkB;AACvB,SAAK,8BAA8B;AACnC,SAAK,kCAAkC;AACvC,SAAK,oBAAoB,iCAAiC,QAAQ,mBAAmB;AACrF,SAAK,qCAAqC;AAAA,EAC9C;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mCAAmC,qBAAqB;AACpD,UAAM,KAAK,+BAA+B,mBAAmB;AAC7D,SAAK,8BAA8B;AACnC,SAAK,kCAAkC;AAAA,EAC3C;AAAA,EACA,uBAAuB,SAAS,qBAAqB;AACjD,UAAM,KAAK,mBAAmB,OAAO;AACrC,QAAI,KAAK,kBAAkB,aAAa;AACpC,WAAK,wBAAwB;AAAA,IACjC;AACA,QAAI,KAAK,kBAAkB,cAAc;AACrC,WAAK,yBAAyB;AAAA,IAClC;AAGA,QAAI,QAAQ,eAAe,QAAW;AAClC,WAAK,gBAAgB,wBAAwB,QAAQ,UAAU;AAAA,IACnE;AACA,QAAI,QAAQ,gBAAgB,QAAW;AACnC,WAAK,gBAAgB,yBAAyB,QAAQ,WAAW;AAAA,IACrE;AACA,QAAI,QAAQ,kBAAkB,UAAa,QAAQ,kBAAkB,QAAW;AAG5E,WAAK,gBAAgB,wBAAwB,QAAQ,cAAc,KAAK,oBAAoB;AAAA,IAChG;AACA,QAAI,QAAQ,4BAA4B,UAAa,QAAQ,4BAA4B,KAAK,kBAAkB,yBAAyB;AACrI,WAAK,qCAAqC;AAAA,IAC9C;AACA,SAAK,8BAA8B;AACnC,SAAK,kCAAkC;AACvC,SAAK,yBAAyB,eAAe;AAAA,EACjD;AAAA,EACA,sBAAsB,OAAO;AACzB,WAAO,KAAK,iBAAiB,KAAK,GAAG,QAAQ;AAAA,EACjD;AAAA,EACA,gCAAgC,OAAO;AACnC,WAAO,KAAK,iBAAiB,KAAK,KAAK;AAAA,EAC3C;AAAA,EACA,sBAAsB,MAAM,aAAa;AACrC,QAAI,KAAK,iBAAiB,SAAS,GAAG;AAElC,aAAO;AAAA,IACX;AACA,QAAI,KAAK,4BAA4B,IAAI,IAAI,IAAI,KAAK,4BAA4B,IAAI,KAAK,iBAAiB,KAAK,iBAAiB,SAAS,CAAC,EAAE,IAAI,GAAG;AAEjJ,aAAO,cAAc,KAAK,iBAAiB,SAAS,IAAI;AAAA,IAC5D;AACA,UAAM,QAAQ,WAAW,KAAK,kBAAkB,KAAK,4BAA4B,IAAI,IAAI,GAAG,CAAC,GAAG,MAAM,KAAK,4BAA4B,IAAI,EAAE,IAAI,IAAI,CAAC;AACtJ,QAAI,KAAK,4BAA4B,IAAI,IAAI,IAAI,KAAK,4BAA4B,IAAI,KAAK,iBAAiB,KAAK,EAAE,IAAI,GAAG;AACtH,aAAO,cAAc,QAAQ;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK,oBAAoB,KAAK,KAAK,iBAAiB,WAAW,KAAK,KAAK,8BAA8B;AAAA,EAClH;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,iBAAiB,SAAS;AAAA,EAC1C;AAAA;AAAA,EAEA,+BAA+B;AAC3B,SAAK,6BAA6B;AAClC,WAAO,KAAK,uBAAuB,sBAAsB;AAAA,EAC7D;AAAA,EACA,gCAAgC;AAC5B,SAAK,6BAA6B;AAClC,WAAO,KAAK,uBAAuB,uBAAuB;AAAA,EAC9D;AAAA,EACA,6BAA6B;AACzB,UAAM,cAAc,KAAK,6BAA6B;AACtD,QAAI,gBAAgB,MAAM;AACtB,aAAO;AAAA,IACX;AACA,UAAM,QAAQ;AAAA,MACV,MAAM,YAAY,eAAe;AAAA,MACjC,IAAI,YAAY,gBAAgB;AAAA,IACpC;AACA,WAAO,KAAK,mCAAmC,KAAK;AAAA,EACxD;AAAA,EACA,mCAAmC,OAAO;AACtC,UAAM,OAAO,KAAK,MAAM,MAAM,IAAI;AAClC,UAAM,KAAK,KAAK,MAAM,MAAM,EAAE;AAC9B,UAAM,aAAa,cAAc,KAAK,qBAAqB,CAAC;AAC5D,UAAM,YAAY,cAAc,KAAK,oBAAoB,CAAC;AAC1D,WAAO;AAAA,MACH,MAAM,cAAc,KAAK,gCAAgC,KAAK,IAAI,YAAY,IAAI,CAAC,CAAC;AAAA,MACpF,IAAI,cAAc,KAAK,gCAAgC,KAAK,IAAI,WAAW,EAAE,CAAC,CAAC;AAAA,IACnF;AAAA,EACJ;AAAA,EACA,mCAAmC,OAAO;AACtC,WAAO;AAAA,MACH,MAAM,cAAc,KAAK,sBAAsB,MAAM,MAAM,IAAI,CAAC;AAAA,MAChE,IAAI,cAAc,KAAK,sBAAsB,MAAM,IAAI,IAAI,CAAC;AAAA,IAChE;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB,UAAU;AACzB,QAAI,CAAC,SAAS,QAAQ,KAAK,YAAY,GAAG;AACtC;AAAA,IACJ;AACA,QAAI,KAAK,oBAAoB,UAAU;AACnC;AAAA,IACJ;AAKA,UAAM,uBAAuB,KAAK,8BAA8B;AAChE,UAAM,WAAW,KAAK;AACtB,SAAK,kBAAkB;AACvB,SAAK,oCAAoC;AACzC,QAAI,KAAK,kBAAkB,gCAAgC,aAAa,GAAG;AAEvE,YAAM,gBAAgB,KAAK,uBAAuB,WAAW;AAC7D,WAAK,uBAAuB;AAAA,IAChC;AAIA,QAAI,KAAK,kBAAkB,aAAa;AAEpC,UAAI,yBAAyB,QAAQ,qBAAqB,eAAe,KAAK,GAAG;AAC7E,cAAM,QAAQ,WAAW;AAGzB,aAAK,yBAAyB,KAAK,MAAM,QAAQ,KAAK,oBAAoB,IAAI;AAC9E,aAAK,oCAAoC;AAAA,MAC7C;AAAA,IACJ;AAEA,SAAK,4BAA4B;AACjC,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,4BAA4B,OAAO;AAC/B,QAAI,KAAK,kBAAkB,KAAK,CAAC,UAAU,KAAK,GAAG;AAC/C,aAAO;AAAA,IACX;AACA,UAAM,YAAY,KAAK,oBAAoB;AAC3C,UAAM,iBAAiB,YAAY,KAAK,wBAAwB;AAChE,UAAM,aAAa,KAAK,mBAAmB,iBAAiB,OAAO,KAAK,uBAAuB;AAC/F,WAAO;AAAA,EACX;AAAA,EACA,+BAA+B,QAAQ,cAAc;AACjD,UAAM,YAAY,KAAK,oBAAoB;AAC3C,UAAM,YAAa,iBAAiB,SAAa,IAAI,aAAa;AAClE,UAAM,UAAW,iBAAiB,SAAa,OAAO,SAAS,aAAa;AAC5E,aAAS,IAAI,WAAW,IAAI,SAAS,KAAK;AACtC,YAAM,QAAQ,OAAO,CAAC,EAAE;AACxB,YAAM,iBAAiB,YAAY,KAAK,wBAAwB;AAChE,YAAM,aAAa,KAAK,mBAAmB,iBAAiB,OAAO,KAAK,uBAAuB;AAC/F,aAAO,CAAC,EAAE,cAAc;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,4BAA4B,GAAG,0BAA0B;AACrD,UAAM,QAAQ,KAAK,KAAK,KAAK,iCAAiC,CAAC,CAAC;AAChE,QAAI,CAAC,4BACD,CAAC,KAAK,kBAAkB,2BACxB,KAAK,8BAA8B,KAAK,GAAG;AAC3C,aAAO;AAAA,IACX;AACA,WAAO,KAAK,mCAAmC,KAAK;AAAA,EACxD;AAAA,EACA,yBAAyB,QAAQ;AAC7B,SAAK,oCAAoC;AACzC,SAAK,wBAAwB;AAC7B,SAAK,wBAAwB;AAC7B,SAAK,gBAAgB,8BAA8B;AACnD,SAAK,gBAAgB,sBAAsB;AAAA,EAC/C;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,wBAAwB,eAAe;AACnC,SAAK,wBAAwB,aAAa;AAE1C,SAAK,wBAAwB;AAC7B,SAAK,gBAAgB,8BAA8B;AACnD,SAAK,gBAAgB,sBAAsB;AAAA,EAC/C;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,kBAAkB;AACd,QAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,QAAI,KAAK,6BAA6B,MAAM;AACxC,aAAO,KAAK;AAAA,IAChB;AACA,UAAM,UAAU,KAAK;AACrB,UAAM,WAAW,KAAK,gBAAgB,kBAAkB,EAAE,QAAQ,EAAE;AACpE,UAAM,wBAAwB,WAAW,KAAK;AAC9C,UAAM,qBAAqB,uBAAuB;AAClD,UAAM,gBAAgB,sBAAsB,KAAK,kBAAkB,8BAA8B;AACjG,UAAM,gBAAgB,KAAK,MAAM,gBAAgB,OAAO;AACxD,UAAM,cAAc,cAAc,KAAK,6BAA6B,CAAC;AACrE,UAAM,WAAW,KAAK,IAAI,YAAY,eAAe,GAAG,YAAY,eAAe,IAAI,aAAa;AACpG,UAAM,UAAU,KAAK,IAAI,YAAY,gBAAgB,GAAG,YAAY,gBAAgB,IAAI,aAAa;AACrG,UAAM,QAAQ,KAAK,oBAAoB,gBAAgB,SAAS,eAAe,KAAK,kBAAkB,yBAAyB,KAAK,2BAA2B,KAAK,iCAAiC;AAErM,UAAM,6BAA6B,KAAK,qBAAqB,IAAI;AAEjE,UAAM,yBAAyB,KAAK,oBAAoB,IAAI;AAC5D,UAAM,mCAAmC,KAAK,2CAA2C;AACzF,UAAM,kBAAkB,KAAK,kBAAkB,eAAe;AAC9D,UAAM,mBAAmB,KAAK,kBAAkB,gBAAgB;AAChE,QAAI,cAAc;AAClB,eAAW,MAAM,OAAO;AACpB,UAAI,EAAE,YAAY,GAAG,SAAS,GAAG,SAAS,UAAU;AAChD;AAAA,MACJ;AACA,UAAI;AACJ,UAAI,cAAc,KAAK,iBAAiB,QAAQ;AAC5C,gBAAQ,KAAK,iBAAiB,WAAW;AACzC,cAAM,QAAQ,KAAK,4BAA4B,GAAG,KAAK;AACvD,cAAM,QAAQ,KAAK,sBAAsB,EAAE;AAC3C,cAAM,SAAS,GAAG;AAAA,MACtB,OACK;AACD,gBAAQ;AAAA,UACJ,qBAAqB;AAAA,UACrB,OAAO,KAAK,4BAA4B,GAAG,KAAK;AAAA,UAChD,OAAO,KAAK,sBAAsB,EAAE;AAAA,UACpC,QAAQ,GAAG;AAAA,QACf;AACA,aAAK,iBAAiB,KAAK,KAAK;AAAA,MACpC;AACA,UAAI,KAAK,uBAAwB,gBAAgB,KAAM,CAAC,kCAAkC;AAEtF,cAAM,sBAAsB;AAAA,MAChC,OACK;AAGD,cAAM,sBAAuB,mBAAmB,GAAG,SAAS,8BAAgC,oBAAoB,GAAG,SAAS;AAAA,MAChI;AACA;AAAA,IACJ;AACA,SAAK,iBAAiB,SAAS;AAC/B,SAAK,2BAA2B,KAAK;AACrC,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,SAAK,oCAAoC;AACzC,SAAK,wBAAwB,KAAK,kBAAkB,UAAU;AAC9D,SAAK,yBAAyB,KAAK,kBAAkB,WAAW;AAAA,EACpE;AAAA,EACA,uBAAuB,WAAW;AAC9B,SAAK,oCAAoC;AACzC,SAAK,4BAA4B;AACjC,SAAK,wBAAwB;AAC7B,SAAK,wBAAwB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,WAAW,OAAO;AAC7B,UAAM,wBAAwB,KAAK,iCAAiC,SAAS;AAC7E,UAAM,aAAa,KAAK,qBAAqB;AAC7C,UAAM,gBAAgB,aAAa,SAAS,aAAa;AAEzD,SAAK,wBAAwB,aAAa;AAC1C,QAAI,CAAC,KAAK,kBAAkB,uBAAuB;AAE/C,WAAK,yBAAyB,KAAK,sBAAsB,KAAK,wBAAwB,KAAK,iCAAiC,SAAS,EAAE;AAAA,IAC3I;AAAA,EACJ;AAAA,EACA,qBAAqB,GAAG;AACpB,QAAI,KAAK,4BAA4B;AACjC,WAAK,oBAAoB;AAAA,IAC7B;AACA,QAAI,KAAK,8BAA8B,QAAQ,KAAK,yCAAyC,MAAM;AAC/F;AAAA,IACJ;AACA,QAAI,KAAK,kBAAkB,GAAG;AAC1B;AAAA,IACJ;AACA,SAAK,4BAA4B;AACjC,SAAK,0CAA0C;AAAA,EACnD;AAAA,EACA,kBAAkB,GAAG;AACjB,QAAI,KAAK,yCAAyC,MAAM;AACpD;AAAA,IACJ;AACA,UAAM,uBAAuB,MAAM,KAAK,kBAAkB,GAAG,GAAG,KAAK,eAAe;AACpF,UAAM,yBAAyB,MAAM,KAAK,kBAAkB,cAAc,KAAK,yBAAyB,GAAG,GAAG,KAAK,eAAe;AAClI,QAAI,yBAAyB,KAAK,2BAA2B,GAAG;AAC5D;AAAA,IACJ;AACA,SAAK,wBAAwB,KAAK,qCAAqC,uBAAuB,uBAAuB,sBAAsB;AAAA,EAC/I;AAAA,EACA,qBAAqB;AACjB,QAAI,KAAK,8BAA8B,MAAM;AACzC;AAAA,IACJ;AACA,SAAK,4BAA4B;AACjC,SAAK,2CAA2C;AAAA,EACpD;AAAA,EACA,sBAAsB,GAAG;AACrB,QAAI,KAAK,+BAA+B,QAAQ,KAAK,yCAAyC,MAAM;AAChG;AAAA,IACJ;AACA,QAAI,KAAK,kBAAkB,GAAG;AAC1B;AAAA,IACJ;AACA,SAAK,6BAA6B;AAClC,SAAK,0CAA0C;AAAA,EACnD;AAAA,EACA,mBAAmB,GAAG;AAClB,QAAI,KAAK,+BAA+B,MAAM;AAC1C;AAAA,IACJ;AACA,UAAM,kBAAkB,KAAK,6BAA6B,KAAK,KAAK,qBAAqB;AACzF,SAAK,wBAAwB,cAAc,KAAK,oCAAoC,EAAE,wBAAwB;AAC9G,SAAK,oCAAoC;AAEzC,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,sBAAsB;AAClB,QAAI,KAAK,+BAA+B,MAAM;AAC1C;AAAA,IACJ;AACA,SAAK,6BAA6B;AAClC,SAAK,2CAA2C;AAAA,EACpD;AAAA,EACA,6BAA6B;AACzB,SAAK,iCAAiC,KAAK,kBAAkB,WAAW;AAAA,EAC5E;AAAA,EACA,iCAAiC,QAAQ,oBAAoB,KAA8C;AACvG,QAAI,CAAC,SAAS,MAAM,GAAG;AACnB,YAAM,IAAI,WAAW,8CAA8C;AAAA,IACvE;AACA,QAAI,CAAC,SAAS,iBAAiB,KAAK,qBAAqB,GAAG;AACxD,YAAM,IAAI,WAAW,6DAA6D;AAAA,IACtF;AACA,UAAM,SAAS,KAAK;AACpB,UAAM,iBAAiB,YAAY,IAAI;AACvC,SAAK,gBAAgB,gCAAgC;AAAA,MACjD,oBAAoB,CAAC,UAAU,OAAO,kBAAkB,qBAAqB;AAAA,MAC7E,uBAAuB,CAAC,SAAS;AAC7B,cAAM,qBAAqB,OAAO,kBAAkB;AACpD,cAAM,kBAAkB,qBAAqB;AAC7C,eAAO,kBAAkB,SAAS,UAAU,SAAS,UAAU;AAAA,MACnE;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,iBAAiB,WAAW,wBAAwB;AAChD,SAAK,oCAAoC;AACzC,SAAK,mBAAmB;AACxB,SAAK,oBAAoB,6BAA6B,WAAW,sBAAsB;AACvF,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,+BAA+B;AAC3B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,gCAAgC;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sBAAsB;AAKlB,WAAO,KAAK,6BAA6B;AAAA,EAC7C;AAAA,EACA,0BAA0B,OAAO;AAC7B,UAAM,SAAS,MAAM,gBAAgB;AACrC,SAAK,wBAAwB,KAAK,kBAAkB,MAAM;AAC1D,SAAK,wBAAwB,MAAM,gBAAgB,IAAI,KAAK,oBAAoB;AAChF,SAAK,wBAAwB;AAC7B,SAAK,oCAAoC;AACzC,SAAK,gBAAgB,8BAA8B;AACnD,SAAK,gBAAgB,sBAAsB;AAAA,EAC/C;AAAA,EACA,uBAAuB;AACnB,UAAM,QAAQ,KAAK,qBAAqB;AACxC,UAAM,OAAO,KAAK,oBAAoB;AACtC,QAAI,UAAU,QAAQ,SAAS,MAAM;AACjC;AAAA,IACJ;AACA,SAAK,0BAA0B,IAAI,UAAU,OAAO,OAAO,KAAK,kBAAkB,WAAW,CAAC;AAAA,EAClG;AAAA,EACA,0BAA0B,OAAO;AAC7B,UAAM,WAAW,IAAI,UAAU,MAAM,MAAM,MAAM,EAAE;AACnD,SAAK,0BAA0B,QAAQ;AAAA,EAC3C;AAAA,EACA,yBAAyB,gBAAgB;AACrC,QAAI,KAAK,8BAA8B,kBAAkB,QAAW;AAChE,aAAO,KAAK,8BAA8B,cAAc,eAAe,YAAY;AAAA,IACvF;AACA,WAAO,KAAK,4BAA4B,eAAe,eAAe,IAAI;AAAA,EAC9E;AAAA,EACA,uCAAuC;AACnC,QAAI,CAAC,KAAK,kBAAkB,yBAAyB;AACjD;AAAA,IACJ;AACA,SAAK,0BAA0B,MAAM;AACrC,UAAM,SAAS,KAAK,gBAAgB,mBAAmB;AACvD,eAAW,KAAK,QAAQ;AACpB,iBAAW,SAAS,EAAE,2BAA2B,GAAG;AAChD,aAAK,0BAA0B,IAAI,OAAO,IAAI;AAAA,MAClD;AAAA,IACJ;AACA,SAAK;AAAA,EACT;AAAA,EACA,6CAA6C;AACzC,UAAM,eAAe,KAAK,gBAAgB,kBAAkB,EAAE,cAAc;AAC5E,UAAM,cAAc,KAAK,gBAAgB,kBAAkB,EAAE,aAAa;AAC1E,WAAO,CAAC,aAAa,iBACd,CAAC,aAAa,cACd,CAAC,aAAa,oBACd,CAAC,aAAa,iBACd,CAAC,YAAY,qBAAqB,QAClC,CAAC,YAAY,qBAAqB,QAClC,CAAC,YAAY,cACb,CAAC,YAAY;AAAA,EACxB;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK,iBAAiB,WAAW,IAAI,OAAO;AAAA,EACvD;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,iBAAiB,WAAW,IAAI,OAAQ,KAAK,iBAAiB,SAAS;AAAA,EACvF;AAAA,EACA,mCAAmC,GAAG;AAClC,YAAQ,KAAK,kBAAkB,IAAI,KAAK,KAAK;AAAA,EACjD;AAAA,EACA,iCAAiC,GAAG;AAChC,UAAM,iBAAiB,KAAK,mCAAmC,CAAC;AAChE,UAAM,YAAY,KAAK,oBAAoB;AAC3C,UAAM,QAAQ,YAAY,KAAK,wBAAwB;AAGvD,WAAO,KAAK,MAAM,QAAQ,GAAO,IAAI;AAAA,EACzC;AAAA,EACA,wBAAwB,eAAe;AACnC,UAAM,gBAAgB,KAAK;AAC3B,SAAK,uBAAuB;AAC5B,SAAK,4BAA4B;AAEjC,QAAI,kBAAkB,KAAK,sBAAsB;AAC7C,WAAK,oCAAoC;AACzC,WAAK,8BAA8B;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,+BAA+B;AAC3B,QAAI,CAAC,KAAK,mCAAmC;AACzC;AAAA,IACJ;AACA,SAAK,oCAAoC;AACzC,QAAI,KAAK,kBAAkB,GAAG;AAC1B,WAAK,0BAA0B,sBAAsB,kBAAkB,CAAC;AACxE;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,oBAAoB;AAC3C,UAAM,gBAAgB,KAAK,kBAAkB,KAAK;AAClD,UAAM,cAAc,KAAK,wBAAwB;AACjD,UAAM,aAAa,cAAc,gBAAgB;AACjD,UAAM,eAAe,IAAI,UAAU,YAAY,WAAW;AAC1D,SAAK,0BAA0B,IAAI,sBAAsB,YAAY,CAAC;AAAA,EAC1E;AAAA,EACA,8BAA8B;AAC1B,UAAM,aAAa,MAAM,KAAK,sBAAsB,KAAK,wBAAwB,GAAG,KAAK,wBAAwB,CAAC;AAClH,QAAI,KAAK,yBAAyB,YAAY;AAC1C,WAAK,uBAAuB;AAC5B,WAAK,oCAAoC;AAAA,IAC7C;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,QAAI,KAAK,kBAAkB,gBAAgB,GAAG;AAE1C,aAAO,KAAK,kBAAkB;AAAA,IAClC,OACK;AAED,aAAO,KAAK,kBAAkB;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,0BAA0B;AAGtB,QAAI,KAAK,kBAAkB,eAAe,KAAK,kBAAkB,gBAAgB,KAAK,iBAAiB,WAAW,GAAG;AACjH,aAAO,KAAK,kBAAkB,KAAK,iBAAiB;AAAA,IACxD;AACA,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,0BAA0B;AAEtB,UAAM,iBAAiB,KAAK,yBAAyB;AACrD,QAAI,mBAAmB,QAAQ,KAAK,wBAAwB,gBAAgB;AACxE,WAAK,wBAAwB;AAC7B,WAAK,oCAAoC;AAAA,IAC7C;AAEA,UAAM,iBAAiB,KAAK,yBAAyB;AACrD,QAAI,KAAK,wBAAwB,gBAAgB;AAC7C,WAAK,wBAAwB;AAC7B,WAAK,oCAAoC;AAAA,IAC7C;AAAA,EACJ;AAAA,EACA,2BAA2B;AACvB,UAAM,aAAa,KAAK,qBAAqB;AAC7C,UAAM,YAAY,KAAK;AACvB,QAAI,eAAe,QAAQ,cAAc,MAAM;AAC3C,aAAO;AAAA,IACX;AACA,UAAM,iBAAiB,KAAK,kBAAkB,cACxC,KAAK,kBAAkB,KAAK,uBAC5B,KAAK,IAAI,GAAuC,KAAK,iBAAiB,MAAM;AAClF,WAAO,aAAa,YAAY,IAAI;AAAA,EACxC;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK,kBAAkB,eACxB,IACC,KAAK,kBAAkB,KAAK,uBAAwB,KAAK,IAAI,GAAuC,KAAK,iBAAiB,MAAM;AAAA,EAC3I;AAAA,EACA,4CAA4C;AACxC,SAAK,uCAAuC;AAAA,MACxC,sBAAsB,KAAK,qBAAqB;AAAA,MAChD,uBAAuB,KAAK,sBAAsB;AAAA,IACtD;AAAA,EACJ;AAAA,EACA,6CAA6C;AACzC,SAAK,uCAAuC;AAAA,EAChD;AAAA,EACA,sBAAsB,UAAU;AAC5B,QAAI,YAAY,KAAK,4BAA4B,IAAI,SAAS,MAAM;AACpE,QAAI,cAAc,QAAW;AACzB,kBAAY,IAAI,qBAAqB,CAAC,SAAS;AAC3C,eAAO,KAAK,0BAA0B,IAAI;AAAA,MAC9C,GAAG,KAAK,2BAA2B;AACnC,WAAK,4BAA4B,IAAI,SAAS,QAAQ,SAAS;AAAA,IACnE;AACA,WAAO,UAAU,iBAAiB,QAAQ;AAAA,EAC9C;AAAA,EACA,0BAA0B,UAAU;AAChC,WAAO,KAAK,4BAA4B,eAAe,UAAU,KAAK,6BAA6B;AAAA,EACvG;AAAA,EACA,0BAA0B,iBAAiB;AACvC,UAAM,kBAAkB,KAAK;AAC7B,SAAK,yBAAyB;AAC9B,QAAI,CAAC,eAAe,gBAAgB,sBAAsB,GAAG,KAAK,uBAAuB,sBAAsB,CAAC,GAAG;AAC/G,WAAK,6BAA6B,eAAe;AAAA,IACrD;AACA,QAAI,CAAC,eAAe,gBAAgB,uBAAuB,GAAG,KAAK,uBAAuB,uBAAuB,CAAC,GAAG;AACjH,WAAK,8BAA8B,eAAe;AAAA,IACtD;AAEA,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,gCAAgC;AAC5B,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,gCAAgC;AAC5B,SAAK,8BAA8B;AACnC,SAAK,4BAA4B,MAAM;AAAA,EAC3C;AAAA,EACA,oCAAoC;AAChC,SAAK,4BAA4B,gBAAgB,KAAK,6BAA6B;AAAA,EACvF;AAAA,EACA,0BAA0B;AACtB,QAAI,CAAC,KAAK,kBAAkB,aAAa;AACrC;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,qBAAqB;AAC7C,QAAI,eAAe,MAAM;AACrB;AAAA,IACJ;AACA,UAAM,eAAe,KAAK,6BAA6B;AACvD,QAAI,iBAAiB,MAAM;AACvB;AAAA,IACJ;AACA,UAAM,QAAQ,aAAa,eAAe,IAAI;AAC9C,QAAI,QAAQ,GAAG;AACX,YAAM,iBAAiB,KAAK,wBAAwB,QAAQ;AAC5D,WAAK,yBAAyB,cAAc;AAAA,IAChD;AACA,SAAK,4BAA4B;AAAA,EACrC;AAAA,EACA,2BAA2B;AACvB,SAAK,wBAAwB;AAC7B,SAAK,4BAA4B;AAAA,EACrC;AAAA,EACA,8BAA8B,OAAO;AACjC,QAAI,CAAC,KAAK,kBAAkB,yBAAyB;AACjD,aAAO;AAAA,IACX;AACA,WAAO,KAAK,0BAA0B,IAAI,KAAK,KAAK;AAAA,EACxD;AAAA,EACA,mCAAmC,GAAG;AAClC,UAAM,MAAM,oBAAoB,CAAC;AACjC,UAAM,WAAW,KAAK,oBAAoB;AAC1C,WAAO,UAAU;AACb,YAAM,QAAQ,IAAI,KAAK,EAAE;AACzB,UAAI,KAAK,0BAA0B,IAAI,KAAK,GAAG;AAC3C,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,KAAK,QAAQ,UAAU;AAC/B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,UAAU,oBAAoB,KAAK;AAC/B,QAAM,UAAU,KAAK,MAAM,GAAG;AAC9B,QAAM,gBAAgB,UAAU;AAChC,MAAI,SAAS;AACb,SAAO,MAAM;AACT,QAAI,eAAe;AACf,YAAM,UAAU;AAChB,YAAM,UAAU;AAAA,IACpB,OACK;AACD,YAAM,UAAU;AAChB,YAAM,UAAU;AAAA,IACpB;AACA;AAAA,EACJ;AACJ;AASA,IAAI;AAAA,CACH,SAAUQ,uBAAsB;AAI7B,EAAAA,sBAAqBA,sBAAqB,YAAY,IAAI,CAAC,IAAI;AAI/D,EAAAA,sBAAqBA,sBAAqB,WAAW,IAAI,CAAC,IAAI;AAClE,GAAG,yBAAyB,uBAAuB,CAAC,EAAE;AACtD,SAAS,gBAAgB,QAAQ;AAC7B,SAAO,kBAAkB;AAC7B;AACA,IAAM,aAAN,MAAiB;AAAA,EACb,YAAY,mBAAmB,SAAS,mBAAmB;AACvD,SAAK,kBAAkB,CAAC;AACxB,SAAK,qBAAqB,CAAC;AAC3B,SAAK,kBAAkB;AACvB,SAAK,0BAA0B;AAC/B,SAAK,sCAAsC,IAAI,SAAS;AACxD,SAAK,2BAA2B,IAAI,SAAS;AAC7C,SAAK,gCAAgC;AACrC,SAAK,8BAA8B;AACnC,SAAK,oBAAoB;AACzB,SAAK,8BAA8B;AACnC,SAAK,wBAAwB,IAAI,YAAY,KAAK,kBAAkB,OAAO,YAAY;AACvF,SAAK,oCAAoC,IAAI,iCAAiC,IAAI;AAClF,SAAK,sBAAsB,IAAI,UAAU,MAAM,QAAQ,WAAW,KAAK,kBAAkB,cAAc,iBAAiB;AACxH,SAAK,sBAAsB,IAAI,UAAU,MAAM,QAAQ,SAAS;AAChE,SAAK,mBAAmB,IAAI,OAAO,QAAQ,SAAS;AACpD,QAAI,QAAQ,gBAAgB;AACxB,WAAK,0BAA0B,CAAC;AAChC,WAAK,gBAAgB,CAAC,EAAE,2BAA2B,yBAAyB,CAAC;AAAA,IACjF;AACA,SAAK,+BAA+B,KAAK;AAAA,MAA6B;AAAA;AAAA,IAA+B;AACrG,SAAK,kCAAkC,KAAK;AAAA,MAA6B;AAAA;AAAA,IAAkC;AAAA,EAC/G;AAAA,EACA,uBAAuB;AACnB,SAAK,qBAAqB,eAAe,eAAe,CAAC;AAAA,EAC7D;AAAA,EACA,wBAAwB;AACpB,SAAK,qBAAqB,eAAe,gBAAgB,CAAC;AAAA,EAC9D;AAAA,EACA,yBAAyB;AACrB,SAAK,qBAAqB,IAAI;AAAA,MAAe;AAAA;AAAA,IAAgC,CAAC;AAAA,EAClF;AAAA,EACA,uBAAuB,QAAQ;AAC3B,UAAM,MAAM,KAAK,oCAAoC,MAAM;AAC3D,SAAK,qBAAqB,GAAG;AAAA,EACjC;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B,QAAQ;AAC/B,QAAI,KAAK,yBAAyB,qBAAqB,QAAQ,oBAAoB,KAAK,yBAAyB,kBAAkB,yBAAyB,QAAQ,kBAAkB,sBAAsB;AACxM;AAAA,IACJ;AACA,UAAM,aAAa,KAAK;AACxB,SAAK,0BAA0B;AAC/B,QAAI,eAAe,MAAM;AACrB,WAAK,uBAAuB,WAAW,gBAAgB;AAAA,IAC3D;AAEA,QAAI,WAAW,QAAQ,OAAO,qBAAqB,YAAY,kBAAkB;AAC7E,WAAK,uBAAuB,OAAO,gBAAgB;AAAA,IACvD;AAAA,EACJ;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB,SAAS;AAC5B,UAAM,KAAK,mBAAmB,OAAO;AACrC,SAAK,gBAAgB,QAAQ,CAAC,MAAM,EAAE,4BAA4B,OAAO,CAAC;AAC1E,QAAI,QAAQ,cAAc,QAAW;AACjC,WAAK,oBAAoB,uBAAuB,QAAQ,SAAS;AAAA,IACrE;AACA,QAAI,QAAQ,iBAAiB,QAAW;AACpC,WAAK,oBAAoB,mCAAmC,QAAQ,YAAY;AAAA,IACpF;AACA,QAAI,QAAQ,kBAAkB,QAAQ,iBAAiB;AACnD,WAAK,oCAAoC,eAAe;AAAA,IAC5D;AACA,SAAK,+BAA+B,KAAK;AAAA,MAA6B;AAAA;AAAA,IAA+B;AACrG,SAAK,kCAAkC,KAAK;AAAA,MAA6B;AAAA;AAAA,IAAkC;AAC3G,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,iCAAiC,cAAc,SAAS,YAAY,GAAG;AACnE,UAAM,OAAO,KAAK,gBAAgB,SAAS;AAC3C,QAAI,SAAS,QAAW;AACpB;AACI,cAAM,IAAI,MAAM,kEAAkE,SAAS,EAAE;AAAA,MACjG;AAAA,IACJ;AAEA,QAAI,iBAAiB,QAAuC;AACxD,YAAM,KAAK,mBAAmB;AAAA,QAC1B,gBAAgB;AAAA,MACpB,CAAC;AACD,WAAK,4BAA4B;AAAA,QAC7B,gBAAgB;AAAA,MACpB,CAAC;AACD,WAAK,oCAAoC,eAAe;AACxD,WAAK,qBAAqB;AAC1B;AAAA,IAEJ,WACS,iBAAiB,SAAyC;AAC/D,YAAM,KAAK,mBAAmB;AAAA,QAC1B,iBAAiB;AAAA,MACrB,CAAC;AACD,WAAK,4BAA4B;AAAA,QAC7B,iBAAiB;AAAA,MACrB,CAAC;AACD,WAAK,oCAAoC,eAAe;AACxD,WAAK,qBAAqB;AAC1B;AAAA,IACJ;AACA,UAAM,MAAM,KAAK,yBAAyB,cAAc,SAAS;AACjE,QAAI,QAAQ,MAAM;AACd;AACI,cAAM,IAAI,MAAM,0DAA0D,YAAY,EAAE;AAAA,MAC5F;AAAA,IACJ;AACA,QAAI,qBAAqB,uBAAuB,OAAO;AACvD,SAAK,oCAAoC,eAAe;AAAA,EAC5D;AAAA,EACA,yBAAyB,cAAc,WAAW;AAC9C,UAAM,OAAO,KAAK,gBAAgB,SAAS;AAC3C,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AACA,UAAM,aAAa,KAAK,yBAAyB,YAAY;AAC7D,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,QACH,gBAAgB;AAAA,QAChB,sBAAsB;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,4BAA4B;AACxB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,wBAAwB,MAAM,QAAQ;AAClC,SAAK,oBAAoB,MAAM;AAC/B,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,mBAAmB,OAAO;AACtB,SAAK,kBAAkB;AACvB,SAAK,oBAAoB,mBAAmB,KAAK,eAAe;AAChE,SAAK,gBAAgB,QAAQ,CAAC,SAAS,KAAK,mBAAmB,KAAK,CAAC;AACrE,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,qBAAqB,OAAO;AACxB,QAAI,KAAK,gBAAgB,WAAW,GAAG;AACnC;AAAA,IACJ;AACA,WAAO,SAAS,KAAK,QAAQ,KAAK,gBAAgB,QAAQ,oBAAoB;AAC9E,SAAK,gBAAgB,OAAO,OAAO,CAAC;AACpC,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,4BAA4B,WAAW,QAAQ;AAC3C,QAAI,KAAK,gBAAgB,SAAS,GAAG;AACjC;AAAA,IACJ;AACA,WAAO,aAAa,KAAK,YAAY,KAAK,gBAAgB,QAAQ,oBAAoB;AACtF,UAAM,aAAa,KAAK,gBAAgB,SAAS;AACjD,UAAM,eAAe,KAAK,gBAAgB,OAAO,CAAC,WAAW,SAAS,YAAY,KAAK,wBAAwB,GAAG,CAAC;AACnH,UAAM,cAAc,KAAK,gBAAgB,OAAO,CAAC,WAAW,SAAS,YAAY,KAAK,iBAAiB,GAAG,CAAC;AAC3G,UAAM,gBAAgB,cAAc,mBAAmB,KAAK,gBAAgB,SAAS;AACrF,aAAS,KAAK,IAAI,eAAe,KAAK,IAAI,iBAAiB,MAAM,CAAC;AAClE,UAAM,qBAAqB,eAAe;AAC1C,UAAM,YAAY,WAAW,iBAAiB;AAC9C,eAAW,2BAA2B,SAAS,kBAAkB;AACjE,QAAI,mBAAmB,SAAS;AAChC,QAAI,aAAa,KAAK,gBAAgB,SAAS;AAC/C,eAAW,QAAQ,KAAK,iBAAiB;AACrC,UAAI,SAAS,YAAY;AACrB,cAAM,gBAAgB,KAAK,IAAI,eAAe,KAAK,IAAI,IAAI,KAAK,iBAAiB,IAAI,mBAAmB,UAAU,CAAC;AACnH,4BAAqB,KAAK,iBAAiB,IAAI;AAC/C,sBAAc;AACd,cAAM,mBAAmB,gBAAgB;AACzC,aAAK,2BAA2B,gBAAgB;AAAA,MACpD;AAAA,IACJ;AACA,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,oBAAoB,OAAO,QAAQ;AAC/B,WAAO,SAAS,KAAK,QAAQ,KAAK,gBAAgB,UAAU,UAAU,KAAK,SAAS,KAAK,gBAAgB,QAAQ,oBAAoB;AACrI,UAAM,YAAY,KAAK,gBAAgB,KAAK;AAC5C,UAAM,aAAa,KAAK,gBAAgB,MAAM;AAC9C,SAAK,gBAAgB,KAAK,IAAI;AAC9B,SAAK,gBAAgB,MAAM,IAAI;AAC/B,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,mBAAmB,MAAM,IAAI;AACzB,WAAO,QAAQ,KAAK,OAAO,KAAK,gBAAgB,UAAU,MAAM,KAAK,KAAK,KAAK,gBAAgB,QAAQ,oBAAoB;AAC3H,QAAI,SAAS,IAAI;AACb;AAAA,IACJ;AACA,UAAM,CAAC,UAAU,IAAI,KAAK,gBAAgB,OAAO,MAAM,CAAC;AACxD,SAAK,gBAAgB,OAAO,IAAI,GAAG,UAAU;AAC7C,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,0BAA0B,MAAM,YAAY,GAAG;AAC3C,SAAK,0BAA0B,YAAY,CAAC;AAAA,EAChD;AAAA,EACA,uBAAuB,MAAM,YAAY,GAAG;AACxC,SAAK,uBAAuB,YAAY,CAAC;AACzC,SAAK,0BAA0B;AAC/B,SAAK,qBAAqB,KAAK;AAAA,MAA+B;AAAA,MAAM;AAAA;AAAA,IAA+B,CAAC;AAAA,EACxG;AAAA,EACA,wBAAwB,MAAM,YAAY;AACtC,SAAK,wBAAwB,UAAU;AACvC,SAAK,qBAAqB,KAAK;AAAA,MAA+B;AAAA,MAAM;AAAA;AAAA,IAA+B,CAAC;AAAA,EACxG;AAAA,EACA,2BAA2B,MAAM,YAAY,GAAG;AAC5C,QAAI,WAAW,sBAAsB,GAAG;AACpC;AAAA,IACJ;AACA,SAAK,2BAA2B,YAAY,CAAC;AAAA,EACjD;AAAA,EACA,wBAAwB,MAAM,YAAY,GAAG;AACzC,QAAI,WAAW,sBAAsB,GAAG;AACpC;AAAA,IACJ;AACA,SAAK,wBAAwB,YAAY,CAAC;AAC1C,SAAK,0BAA0B;AAC/B,SAAK,qBAAqB,KAAK;AAAA,MAA+B;AAAA,MAAM;AAAA;AAAA,IAA+B,CAAC;AAAA,EACxG;AAAA,EACA,yBAAyB,MAAM,YAAY;AACvC,QAAI,WAAW,sBAAsB,GAAG;AACpC;AAAA,IACJ;AACA,SAAK,yBAAyB,UAAU;AACxC,SAAK,qBAAqB,KAAK;AAAA,MAA+B;AAAA,MAAM;AAAA;AAAA,IAA+B,CAAC;AAAA,EACxG;AAAA,EACA,0BAA0B,MAAM,YAAY;AACxC,SAAK,0BAA0B,UAAU;AACzC,SAAK,qBAAqB,KAAK;AAAA,MAA+B;AAAA,MAAM;AAAA;AAAA,IAA+B,CAAC;AAAA,EACxG;AAAA,EACA,yBAAyB,UAAU;AAC/B,SAAK,oBAAoB,qBAAqB,QAAQ;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB,QAAQ,OAAO;AAC9B,UAAM,YAAY,KAAK,oBAAoB;AAC3C,QAAI,UAAU,kBAAkB,KAAK,UAAU,GAAG;AAC9C;AAAA,IACJ;AACA,UAAM,iBAAiB,UAAU,gBAAgB;AACjD,aAAS,KAAK,IAAI,GAAG,KAAK,IAAI,QAAQ,cAAc,CAAC;AACrD,cAAU,eAAe,QAAQ,KAAK;AACtC,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,sBAAsB,GAAG;AACrB,SAAK,0BAA0B,CAAC;AAChC,SAAK,uBAAuB,CAAC;AAC7B,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,sBAAsB,GAAG;AACrB,SAAK,oBAAoB,kBAAkB,CAAC;AAC5C,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,yBAAyB;AACrB,SAAK,oBAAoB,mBAAmB;AAC5C,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,0BAA0B,GAAG;AACzB,SAAK,oBAAoB,sBAAsB,CAAC;AAAA,EACpD;AAAA,EACA,uBAAuB,GAAG;AACtB,SAAK,oBAAoB,mBAAmB,CAAC;AAC7C,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,0BAA0B;AACtB,SAAK,oBAAoB,oBAAoB;AAC7C,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oCAAoC,GAAG,GAAG,OAAO,MAAM,WAAW;AAC9D,SAAK,oBAAoB,0BAA0B,GAAG,CAAC;AACvD,QAAI,QAAQ;AACZ,QAAI,QAAQ,KAAK,oBAAoB,4BAA4B,GAAG,IAAI;AACxE,UAAM,cAAc,KAAK,oBAAoB,6BAA6B;AAC1E,QAAI,gBAAgB,MAAM;AACtB,cAAQ,KAAK,IAAI,KAAK,IAAI,YAAY,eAAe,GAAG,KAAK,GAAG,YAAY,gBAAgB,CAAC;AAAA,IACjG;AACA,UAAM,aAAa,KAAK,4BAA4B;AACpD,UAAM,aAAa,WAAW,qBAAqB;AACnD,QAAI,eAAe,MAAM;AACrB,cAAQ,WAAW,4BAA4B,GAAG,UAAU;AAAA,IAChE;AACA,YAAQ,KAAK,iBAAiB,gBAAgB,OAAO,OAAO,IAAI;AAChE,SAAK,oBAAoB,sBAAsB,OAAO,OAAO,IAAI;AACjE,SAAK,uBAAuB;AAC5B,QAAI,CAAC,WAAW;AACZ,YAAM,UAAU,YAAY,MAAM,GAAG,CAAC;AACtC,WAAK,2BAA2B,WAAW,EAAE,kBAAkB,QAAQ,kBAAkB,kBAAkB,QAAQ,kBAAkB,uBAAuB,QAAQ,yBAAyB,KAAK,CAAC;AACnM,WAAK,yBAAyB,eAAe,KAAK,oBAAoB,uBAAuB,GAAG,EAAE,GAAG,EAAE,GAAG,KAAK;AAAA,IACnH;AAAA,EACJ;AAAA;AAAA,EAEA,sCAAsC,OAAO,oBAAoB,MAAM;AACnE,UAAM,aAAa,KAAK,4BAA4B;AACpD,UAAM,aAAa,WAAW,qBAAqB;AACnD,UAAM,IAAI,WAAW,4BAA4B,OAAO,cAAc,UAAU,CAAC;AACjF,UAAM,QAAQ,KAAK,oBAAoB,sBAAsB,oBAAoB,IAAI;AACrF,UAAM,IAAI,KAAK,oBAAoB,4BAA4B,cAAc,KAAK,CAAC;AACnF,SAAK,oCAAoC,GAAG,GAAG,MAAM,MAAM,IAAI;AAAA,EACnE;AAAA,EACA,+BAA+B,WAAW;AACtC,UAAM,YAAY,KAAK,0BAA0B;AACjD,cAAU,wBAAwB;AAClC,SAAK,uBAAuB;AAC5B,QAAI,CAAC,WAAW;AACZ,WAAK,yBAAyB,eAAe,MAAM,MAAM,IAAI;AAAA,IACjE;AAAA,EACJ;AAAA,EACA,4BAA4B;AAExB,UAAM,OAAO,KAAK,oBAAoB,eAAe;AACrD,QAAI,SAAS,MAAM;AACf,YAAM,IAAI,KAAK,oBAAoB,uBAAuB;AAC1D,YAAM,IAAI,KAAK,oBAAoB,uBAAuB;AAC1D,WAAK,oCAAoC,GAAG,GAAG,MAAM,IAAI;AAAA,IAC7D;AACA,SAAK,oBAAoB,yBAAyB;AAAA,EACtD;AAAA,EACA,0BAA0B,cAAc,WAAW,wBAAwB;AACvE,UAAM,eAAe,KAAK,oBAAoB,sBAAsB,CAAC;AACrE,QAAI,cAAc,UAAa,2BAA2B,QAAW;AACjE,WAAK,oBAAoB,iBAAiB,WAAW,sBAAsB;AAAA,IAC/E;AACA,UAAM,eAAe,KAAK,oBAAoB,sBAAsB,CAAC;AACrE,UAAM,mBAAmB,KAAK,oBAAoB,oBAAoB;AACtE,UAAM,cAAc,KAAK,oBAAoB,6BAA6B;AAI1E,QAAI,gBAAgB,QAAQ,iBAAiB,QAAQ,iBAAiB,MAAM;AACxE,YAAM,yBAAyB,YAAY,mBAAmB,gBAAgB;AAC9E,YAAM,uBAAuB,KAAK,4BAA4B,IAAI,YAAY,IAAI,KAAK,4BAA4B,IAAI,YAAY;AACnI,YAAM,sBAAsB,iBAAiB,QAAQ,eAAe;AACpE,YAAM,6BAA6B,uBAAuB,CAAC;AAC3D,YAAM,oCAAoC,KAAK,oBAAoB,kBAAkB,EAAE;AACvF,YAAM,6BAA6B,2BAA2B;AAC9D,YAAM,gCAAgC,2BAA2B,CAAC,8BAA8B,sCAAsC,KAAK,oBAAoB,kBAAkB,EAAE;AACnL,UAAI,8BAA8B,CAAC,+BAA+B;AAC9D,cAAM,oBAAoB,eAAe;AACzC,aAAK,oBAAoB,yBAAyB,KAAK,oBAAoB,sBAAsB,IAAI,iBAAiB;AAAA,MAC1H;AAAA,IACJ;AACA,SAAK,oBAAoB,uBAAuB,YAAY;AAAA,EAChE;AAAA,EACA,0BAA0B,MAAM;AAC5B,QAAI,SAAS,MAAM;AACf,WAAK,sBAAsB;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,wBAAwB,QAAQ;AAC5B,QAAI,gBAAgB,MAAM,GAAG;AACzB,aAAO;AAAA,IACX;AACA,UAAM,OAAO,KAAK,gBAAgB,KAAK,CAAC,MAAM,EAAE,yBAAyB,EAAE,SAAS,MAAM,CAAC;AAC3F,WAAO,SAAS,SAAY,OAAO;AAAA,EACvC;AAAA,EACA,gCAAgC;AAC5B,SAAK,gBAAgB,QAAQ,CAAC,MAAM,EAAE,sBAAsB,CAAC;AAC7D,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,oBAAoB;AAChB,SAAK,gBAAgB,QAAQ,CAAC,MAAM,EAAE,kBAAkB,CAAC;AACzD,SAAK,gBAAgB,SAAS;AAE9B,SAAK,kBAAkB,aAAa,iBAAiB;AACrD,SAAK,kBAAkB,aAAa,sBAAsB;AAC1D,SAAK,kBAAkB,aAAa,gBAAgB;AAAA,EACxD;AAAA,EACA,oCAAoC;AAChC,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qCAAqC;AACjC,WAAO,KAAK,kCAAkC,kBAAkB;AAAA,EACpE;AAAA,EACA,sCAAsC;AAClC,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,0BAA0B,QAAQ,WAAW;AACzC,UAAM,OAAO,KAAK,0BAA0B,SAAS;AACrD,SAAK,0BAA0B,QAAQ,IAAI;AAC3C,SAAK,mBAAmB,KAAK,MAAM;AACnC,QAAI,KAAK,mBAAmB,WAAW,GAAG;AAEtC,WAAK,qBAAqB;AAAA,IAC9B,OACK;AACD,WAAK,sBAAsB;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,uBAAuB,QAAQ;AAC3B,UAAM,OAAO,KAAK,wBAAwB,MAAM;AAChD,UAAM,cAAc,KAAK,mBAAmB,QAAQ,MAAM;AAC1D,WAAO,gBAAgB,IAAI,kBAAkB;AAC7C,UAAM,WAAW,cAAc,IAAI;AACnC,SAAK,mBAAmB,OAAO,aAAa,CAAC;AAC7C,aAAS,2BAA2B,MAAM;AAC1C,QAAI,OAAO,mBAAmB;AAC1B,aAAO,kBAAkB;AAAA,IAC7B;AACA,SAAK,oBAAoB,qCAAqC;AAC9D,SAAK,+BAA+B,QAAQ;AAAA,EAChD;AAAA,EACA,4BAA4B,QAAQ,eAAe;AAC/C,UAAM,OAAO,cAAc,KAAK,wBAAwB,MAAM,CAAC;AAC/D,SAAK,2BAA2B,QAAQ,IAAI;AAC5C,SAAK,wBAAwB,QAAQ,eAAe,IAAI;AAAA,EAC5D;AAAA,EACA,uBAAuB;AACnB,UAAM,OAAO,eAAe,gBAAgB;AAC5C,SAAK,wBAAwB;AAC7B,SAAK,qBAAqB,IAAI;AAAA,EAClC;AAAA,EACA,gCAAgC,OAAO;AACnC,UAAM,OAAO,eAAe,gBAAgB;AAC5C,SAAK,qBAAqB,KAAK;AAC/B,SAAK,qBAAqB,IAAI;AAAA,EAClC;AAAA,EACA,2BAA2B;AACvB,UAAM,OAAO,eAAe,gBAAgB;AAC5C,SAAK,yBAAyB;AAC9B,SAAK,qBAAqB,IAAI;AAAA,EAClC;AAAA,EACA,wBAAwB,SAAS;AAC7B,UAAM,OAAO,eAAe,gBAAgB;AAC5C,SAAK,wBAAwB,OAAO;AACpC,SAAK,qBAAqB,IAAI;AAAA,EAClC;AAAA,EACA,yBAAyB,QAAQ;AAC7B,UAAM,OAAO,eAAe,gBAAgB;AAC5C,SAAK,yBAAyB,MAAM;AACpC,SAAK,qBAAqB,IAAI;AAAA,EAClC;AAAA,EACA,gCAAgC,WAAW;AACvC,UAAM,OAAO,eAAe,gBAAgB;AAC5C,SAAK,gCAAgC,SAAS;AAC9C,SAAK,qBAAqB,IAAI;AAAA,EAClC;AAAA,EACA,mCAAmC;AAC/B,UAAM,OAAO,eAAe,gBAAgB;AAC5C,SAAK,iCAAiC;AACtC,SAAK,qBAAqB,IAAI;AAAA,EAClC;AAAA,EACA,uCAAuC;AACnC,WAAO,KAAK,kBAAkB,gBAAgB,UAAU,UAA0C;AAAA,EACtG;AAAA,EACA,2BAA2B,QAAQ,cAAc;AAC7C,WAAO,gBAAgB,GAAG,uCAAuC;AACjE,UAAM,gBAAgB,KAAK,0BAA0B,MAAM;AAC3D,QAAI,iBAAiB,eAAe;AAChC;AAAA,IACJ;AACA,UAAM,eAAe,cAAc,KAAK,wBAAwB,MAAM,CAAC;AACvE,iBAAa,2BAA2B,MAAM;AAC9C,UAAM,UAAU,KAAK,0BAA0B,YAAY;AAC3D,SAAK,0BAA0B,QAAQ,OAAO;AAC9C,QAAI,aAAa,sBAAsB,EAAE,WAAW,GAAG;AACnD,WAAK,+BAA+B,YAAY;AAAA,IACpD;AACA,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,kCAAkC;AAC9B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,+BAA+B;AAC3B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2CAA2C,SAAS;AAChD,UAAM,cAAc,KAAK;AACzB,UAAM,WAAW,KAAK;AACtB,QAAI,gBAAgB,UAAU;AAE1B,aAAO;AAAA,IACX;AAGA,cAAU,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,KAAK,MAAM,UAAU,GAAG,CAAC,CAAC;AAC9D,QAAI,KAAK,kCAAkC,QACvC,KAAK,8BAA8B,uBAAuB,YAAY,KAAK,8BAA8B,0BAA0B,aAAa;AAChJ,WAAK,gCAAgC;AAAA,QACjC,oBAAoB;AAAA,QACpB,uBAAuB;AAAA,QACvB,kBAAkB,oBAAI,IAAI;AAAA,MAC9B;AAAA,IACJ,OACK;AACD,YAAM,cAAc,KAAK,8BAA8B,iBAAiB,IAAI,OAAO;AACnF,UAAI,gBAAgB,QAAW;AAC3B,eAAO;AAAA,MACX;AAAA,IACJ;AACA,UAAM,SAAS,KAAK,sBAAsB,iCAAiC,UAAU,aAAa,UAAU,GAAG;AAC/G,SAAK,8BAA8B,iBAAiB,IAAI,SAAS,MAAM;AACvE,WAAO;AAAA,EACX;AAAA,EACA,uBAAuB,MAAM;AACzB,WAAO,KAAK,gBAAgB,QAAQ,IAAI;AAAA,EAC5C;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,kBAAkB,OAAO;AACrB,UAAM,OAAO,IAAI,KAAK,KAAK,qBAAqB,IAAI;AACpD,SAAK,gBAAgB,KAAK,IAAI;AAC9B,UAAM,MAAM,SAAS,KAAK,gBAAgB,SAAS;AAKnD,UAAM,OAAO,eAAe,eAAe;AAC3C,SAAK,yBAAyB,KAAK;AAAA,MAC/B,iBAAiB;AAAA,MACjB,qBAAqB;AAAA,IACzB,CAAC;AACD,SAAK,qBAAqB,IAAI;AAC9B,WAAO;AAAA,EACX;AAAA,EACA,0BAA0B,OAAO;AAC7B,WAAO,SAAS,GAAG,uCAAuC;AAC1D,YAAQ,KAAK,IAAI,KAAK,gBAAgB,QAAQ,KAAK;AACnD,QAAI,QAAQ,KAAK,gBAAgB,QAAQ;AACrC,aAAO,KAAK,gBAAgB,KAAK;AAAA,IACrC;AACA,WAAO,KAAK,kBAAkB,KAAK;AAAA,EACvC;AAAA,EACA,0BAA0B,QAAQ;AAC9B,WAAO,KAAK,gBAAgB,UAAU,CAAC,SAAS,KAAK,iBAAiB,EAAE,SAAS,MAAM,CAAC;AAAA,EAC5F;AAAA,EACA,+BAA+B,MAAM,OAAO;AACxC,UAAM,MAAM,IAAI,eAAe,KAAK;AACpC,QAAI,SAAS,MAAM;AACf,YAAM,QAAQ,KAAK,gBAAgB,QAAQ,IAAI;AAC/C,UAAI,yBAAyB,OAAO;AAAA,QAChC,iBAAiB;AAAA,MACrB,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA,EACA,oCAAoC,QAAQ,gBAAgB;AACxD,QAAI,mBAAmB,QAAW;AAC9B,uBAAiB;AAAA,IACrB;AACA,WAAO,KAAK,+BAA+B,KAAK,wBAAwB,MAAM,GAAG,cAAc;AAAA,EACnG;AAAA,EACA,qBAAqB,MAAM;AACvB,QAAI,KAAK,6BAA6B;AAClC,WAAK,4BAA4B,IAAI;AAAA,IACzC;AACA,SAAK,gBAAgB,QAAQ,CAAC,SAAS,KAAK,eAAe,EAAE,mBAAmB,EAAE,iBAAiB,CAAC;AAAA,EACxG;AAAA,EACA,0BAA0B,QAAQ,MAAM;AACpC,UAAM,eAAe,OAAO,kBAAkB,EAAE;AAChD,UAAM,gBAAgB,iBAAiB,SAAY,eAAe,KAAK,qCAAqC;AAC5G,SAAK,wBAAwB,QAAQ,aAAa;AAClD,QAAI,CAAC,oBAAoB,aAAa,GAAG;AAErC,aAAO,uBAAuB,OAAO,kBAAkB,CAAC;AAAA,IAC5D;AAAA,EACJ;AAAA,EACA,6BAA6B,MAAM;AAC/B,UAAM,gBAAgB,KAAK,kBAAkB,QAAQ;AACrD,QAAI,cAAc,WAAW,SAAS,YAA6C;AAC/E,aAAO,SAAS,IACZ,cAAc,WAAW,WACzB,cAAc,WAAW;AAAA,IACjC;AACA,WAAO,cAAc,WAAW;AAAA,EACpC;AAAA,EACA,+BAA+B,MAAM;AACjC,QAAI,CAAC,KAAK,4BAA4B,MAAM,KAAK,sBAAsB,EAAE,WAAW,KAAK,KAAK,gBAAgB,SAAS,IAAI;AACvH,WAAK,gBAAgB,OAAO,KAAK,uBAAuB,IAAI,GAAG,CAAC;AAAA,IACpE;AAAA,EACJ;AACJ;AAEA,SAAS,6BAA6B,SAAS;AAC3C,MAAI,QAAQ,gBAAgB,QAAW;AACnC,YAAQ,gBAAgB,QAAQ;AAChC,YAAQ,kBAAkB,QAAQ;AAAA,EACtC;AACA,MAAI,QAAQ,cAAc,QAAW;AACjC,YAAQ,cAAc,QAAQ;AAC9B,YAAQ,gBAAgB,QAAQ;AAAA,EACpC;AACJ;AAIA,IAAI;AAAA,CACH,SAAUC,yBAAwB;AAI/B,EAAAA,wBAAuBA,wBAAuB,UAAU,IAAI,CAAC,IAAI;AAIjE,EAAAA,wBAAuBA,wBAAuB,YAAY,IAAI,CAAC,IAAI;AAInE,EAAAA,wBAAuBA,wBAAuB,cAAc,IAAI,CAAC,IAAI;AACzE,GAAG,2BAA2B,yBAAyB,CAAC,EAAE;AAC1D,SAAS,mBAAmB,SAAS;AACjC,MAAI,WAAW,GAAG;AACd,WAAO;AAAA,EACX;AACA,MAAI,IAAI;AACR,SAAO,IAAI,GAAG,KAAK;AACf,UAAM,UAAU,KAAK,MAAM,OAAO;AAClC,UAAM,YAAY,KAAK,IAAI,UAAU,OAAO;AAC5C,QAAI,YAAY,MAAM;AAClB,aAAO;AAAA,IACX;AACA,cAAU,UAAU;AAAA,EACxB;AACA,SAAO;AACX;AAIA,IAAI;AAAA,CACH,SAAUC,kBAAiB;AAIxB,EAAAA,iBAAgBA,iBAAgB,SAAS,IAAI,CAAC,IAAI;AAIlD,EAAAA,iBAAgBA,iBAAgB,aAAa,IAAI,CAAC,IAAI;AAC1D,GAAG,oBAAoB,kBAAkB,CAAC,EAAE;AAK5C,IAAI;AAAA,CACH,SAAUC,YAAW;AAElB,EAAAA,WAAU,OAAO,IAAI;AAErB,EAAAA,WAAU,kBAAkB,IAAI;AACpC,GAAG,cAAc,YAAY,CAAC,EAAE;AAQhC,SAAS,cAAc,MAAM;AACzB,SAAO,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,IAAI;AAC5C;AAOA,SAAS,eAAe,MAAM;AAC1B,SAAO,SAAS,IAAI;AACxB;AAIA,IAAI;AAAA,CACH,SAAUC,eAAc;AAIrB,EAAAA,cAAaA,cAAa,MAAM,IAAI,CAAC,IAAI;AAIzC,EAAAA,cAAaA,cAAa,OAAO,IAAI,CAAC,IAAI;AAI1C,EAAAA,cAAaA,cAAa,YAAY,IAAI,CAAC,IAAI;AAI/C,EAAAA,cAAaA,cAAa,MAAM,IAAI,CAAC,IAAI;AAIzC,EAAAA,cAAaA,cAAa,iBAAiB,IAAI,CAAC,IAAI;AACxD,GAAG,iBAAiB,eAAe,CAAC,EAAE;AAEtC,IAAM,WAAW,CAAC,SAAS,KAAK,YAAY,IAAI;AAChD,IAAM,SAAS,CAAC,SAAS,KAAK,WAAW;AACzC,IAAM,UAAU,CAAC,SAAS,KAAK,eAAe;AAC9C,IAAM,KAAK,CAAC,SAAS,8BAA8B,OAAO,IAAI,GAAG,CAAC;AAClE,IAAM,OAAO,CAAC,MAAM,WAAW,IAAI,KAAK,KAAK,eAAe,GAAG,KAAK,YAAY,GAAG,CAAC,EAC/E,eAAe,QAAQ,EAAE,OAAO,OAAO,CAAC;AAC7C,IAAM,MAAM,CAAC,MAAM,WAAW,IAAI,KAAK,KAAK,eAAe,GAAG,KAAK,YAAY,GAAG,CAAC,EAC9E,eAAe,QAAQ,EAAE,OAAO,QAAQ,CAAC;AAC9C,IAAM,KAAK,CAAC,SAAS,8BAA8B,SAAS,IAAI,GAAG,CAAC;AACpE,IAAM,KAAK,CAAC,SAAS,8BAA8B,QAAQ,IAAI,IAAI,KAAK,CAAC;AACzE,IAAM,OAAO,CAAC,SAAS,8BAA8B,QAAQ,IAAI,GAAG,CAAC;AACrE,SAAS,WAAW,MAAM,QAAQ,QAAQ;AACtC,SAAO,OACF,QAAQ,SAAS,KAAK,IAAI,CAAC,EAC3B,QAAQ,OAAO,GAAG,IAAI,CAAC,EACvB,QAAQ,SAAS,KAAK,MAAM,MAAM,CAAC,EACnC,QAAQ,QAAQ,IAAI,MAAM,MAAM,CAAC,EACjC,QAAQ,OAAO,GAAG,IAAI,CAAC,EACvB,QAAQ,OAAO,GAAG,IAAI,CAAC;AAChC;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAChB,YAAY,aAAa,cAAc,SAAS,WAAW;AACvD,SAAK,uBAAuB;AAC5B,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,iBAAiB,MAAM;AACnB,WAAO,WAAW,MAAM,KAAK,sBAAsB,KAAK,gBAAgB;AAAA,EAC5E;AACJ;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAChB,YAAY,QAAQ;AAChB,SAAK,sBAAsB,UAAU;AAAA,EACzC;AAAA,EACA,iBAAiB,MAAM;AACnB,WAAO,KAAK,oBAAoB,QAAQ,MAAM,8BAA8B,KAAK,YAAY,GAAG,CAAC,CAAC,EAC9F,QAAQ,MAAM,8BAA8B,KAAK,cAAc,GAAG,CAAC,CAAC,EACpE,QAAQ,MAAM,8BAA8B,KAAK,cAAc,GAAG,CAAC,CAAC;AAAA,EAC5E;AACJ;AAEA,IAAM,gBAAgB;AAAA,EAClB,sBAAsB;AAAA,EACtB,sBAAsB;AAAA,EACtB,6BAA6B;AAAA,EAC7B,kBAAkB;AACtB;AACA,IAAM,oBAAN,MAAwB;AAAA,EACpB,YAAY,SAAS,CAAC,GAAG;AACrB,UAAM,kBAAkB,EAAE,GAAG,eAAe,GAAG,OAAO;AACtD,SAAK,0BAA0B,IAAI,cAAc,gBAAgB,sBAAsB,gBAAgB,gBAAgB;AACvH,SAAK,0BAA0B,IAAI,cAAc,gBAAgB,oBAAoB;AACrF,SAAK,sBAAsB,gBAAgB;AAAA,EAC/C;AAAA,EACA,iBAAiB,UAAU;AACvB,WAAO,GAAG,KAAK,wBAAwB,iBAAiB,QAAQ,CAAC,GAAG,KAAK,mBAAmB,GAAG,KAAK,wBAAwB,iBAAiB,QAAQ,CAAC;AAAA,EAC1J;AACJ;AAEA,SAAS,yBAAyB,WAAW,cAAc,QAAQ;AAC/D,QAAM,gBAAgB,CAAC;AACvB,UAAQ,cAAc;AAAA,IAClB,KAAK;AACD,oBAAc,OAAO;AACrB;AAAA,IACJ,KAAK;AACD,oBAAc,QAAQ;AACtB;AAAA,IACJ,KAAK;AACD,oBAAc,MAAM;AACpB;AAAA,IACJ,KAAK;AACD,oBAAc,SAAS;AACvB,oBAAc,OAAO;AACrB,oBAAc,SAAS;AACvB;AAAA,IACJ,KAAK;AACD,oBAAc,SAAS;AACvB,oBAAc,OAAO;AACrB,oBAAc,SAAS;AACvB,oBAAc,SAAS;AACvB;AAAA,EACR;AACA,QAAM,OAAO,UAAU,0BAA0B,SAC3C,IAAI,KAAK,UAAU,sBAAsB,GAAI,IAC7C,IAAI,KAAK,KAAK,IAAI,UAAU,sBAAsB,MAAM,UAAU,sBAAsB,QAAQ,GAAG,UAAU,sBAAsB,GAAG,CAAC;AAG7I,QAAM,mBAAmB,IAAI,KAAK,KAAK,eAAe,GAAG,KAAK,YAAY,GAAG,KAAK,WAAW,GAAG,KAAK,YAAY,GAAG,KAAK,cAAc,GAAG,KAAK,cAAc,GAAG,KAAK,mBAAmB,CAAC;AACzL,SAAO,iBAAiB,eAAe,QAAQ,aAAa;AAChE;AAEA,SAAS,MAAM,OAAO;AAClB,SAAO,QAAQ,KAAK,KAAK;AAC7B;AACA,SAAS,QAAQ,OAAO;AACpB,SAAO,QAAQ,KAAK;AACxB;AACA,SAAS,QAAQ,OAAO;AACpB,SAAO,QAAQ;AACnB;AACA,IAAM,yBAAyB;AAAA,EAC3B;AAAA,IAAE,mBAAmB,QAAQ,CAAC;AAAA,IAAG,kBAAkB;AAAA;AAAA,EAA+B;AAAA,EAClF;AAAA,IAAE,mBAAmB,QAAQ,CAAC;AAAA,IAAG,kBAAkB;AAAA;AAAA,EAAgC;AAAA,EACnF;AAAA,IAAE,mBAAmB,QAAQ,CAAC;AAAA,IAAG,kBAAkB;AAAA;AAAA,EAAgC;AAAA,EACnF;AAAA,IAAE,mBAAmB,QAAQ,EAAE;AAAA,IAAG,kBAAkB;AAAA;AAAA,EAAiC;AAAA,EACrF;AAAA,IAAE,mBAAmB,MAAM,CAAC;AAAA,IAAG,kBAAkB;AAAA;AAAA,EAA8B;AAAA,EAC/E;AAAA,IAAE,mBAAmB,MAAM,CAAC;AAAA,IAAG,kBAAkB;AAAA;AAAA,EAA8B;AAAA,EAC/E;AAAA,IAAE,mBAAmB,MAAM,CAAC;AAAA,IAAG,kBAAkB;AAAA;AAAA,EAA8B;AAAA,EAC/E;AAAA,IAAE,mBAAmB,MAAM,EAAE;AAAA,IAAG,kBAAkB;AAAA;AAAA,EAA+B;AACrF;AACA,SAAS,aAAa,aAAa,UAAU;AACzC,MAAI,YAAY,eAAe,MAAM,SAAS,eAAe,GAAG;AAC5D,WAAO;AAAA,EACX,WACS,YAAY,YAAY,MAAM,SAAS,YAAY,GAAG;AAC3D,WAAO;AAAA,EACX,WACS,YAAY,WAAW,MAAM,SAAS,WAAW,GAAG;AACzD,WAAO;AAAA,EACX;AACA,WAAS,IAAI,uBAAuB,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACzD,QAAI,KAAK,MAAM,SAAS,QAAQ,IAAI,uBAAuB,CAAC,EAAE,iBAAiB,MAAM,KAAK,MAAM,YAAY,QAAQ,IAAI,uBAAuB,CAAC,EAAE,iBAAiB,GAAG;AAClK,aAAO,uBAAuB,CAAC,EAAE;AAAA,IACrC;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,KAAK,GAAG;AACb,SAAO;AACX;AACA,SAAS,qBAAqB,kBAAkB,aAAa,GAAG;AAC5D,MAAI,iBAAiB,WAAW,GAAG;AAC/B;AAAA,EACJ;AACA,MAAI,WAAW,eAAe,IAAI,OAAO,KAAK,iBAAiB,aAAa,CAAC,EAAE,IAAI,EAAE;AACrF,MAAI,WAAW,aAAa,OAAO,IAAI,KAAK,WAAW,GAAI,IAAI;AAC/D,MAAI,gBAAgB;AACpB,WAAS,QAAQ,YAAY,QAAQ,iBAAiB,QAAQ,EAAE,OAAO;AACnE,UAAM,eAAe,iBAAiB,KAAK;AAC3C,UAAM,cAAc,IAAI,KAAK,KAAK,aAAa,IAAI,EAAE,sBAAsB,GAAI;AAC/E,QAAI,aAAa,MAAM;AACnB,mBAAa,aAAa,aAAa,aAAa,QAAQ;AAAA,IAChE;AACA,qBAAiB,KAAK,aAAa,IAAI,EAAE,uBAAuB,YAAY,KAAK,aAAa,IAAI,EAAE;AACpG,eAAW,KAAK,aAAa,IAAI,EAAE;AACnC,eAAW;AAAA,EACf;AACA,MAAI,eAAe,KAAK,iBAAiB,SAAS,GAAG;AAGjD,UAAM,kBAAkB,KAAK,KAAK,iBAAiB,iBAAiB,SAAS,EAAE;AAC/E,UAAM,iBAAiB,IAAI,MAAM,KAAK,iBAAiB,CAAC,EAAE,IAAI,EAAE,sBAAsB,mBAAmB,GAAI;AAC7G,qBAAiB,CAAC,EAAE,aAAa,aAAa,IAAI,KAAK,KAAK,iBAAiB,CAAC,EAAE,IAAI,EAAE,sBAAsB,GAAI,GAAG,cAAc;AAAA,EACrI;AACJ;AAEA,SAAS,qBAAqB,MAAM;AAChC,MAAI,cAAc;AAClB,MAAI,SAAS,IAAI,GAAG;AAChB,kBAAc,oBAAoB,IAAI;AAAA,EAC1C;AACA,MAAI,CAAC,cAAc,WAAW,GAAG;AAC7B,UAAM,IAAI,MAAM,kCAAkC;AAAA,EACtD;AACA,QAAM,OAAO,IAAI,KAAK,KAAK,IAAI,YAAY,MAAM,YAAY,QAAQ,GAAG,YAAY,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC;AACpG,SAAO;AAAA,IACH,qBAAqB,KAAK,MAAM,KAAK,QAAQ,IAAI,GAAI;AAAA,IACrD,uBAAuB;AAAA,EAC3B;AACJ;AACA,SAAS,mBAAmB,MAAM;AAC9B,MAAI,CAAC,eAAe,IAAI,GAAG;AACvB,UAAM,IAAI,MAAM,qCAAqC;AAAA,EACzD;AACA,SAAO;AAAA,IACH,qBAAqB;AAAA,EACzB;AACJ;AACA,SAAS,oBAAoB,MAAM;AAC/B,MAAI,KAAK,WAAW,GAAG;AACnB,WAAO;AAAA,EACX;AACA,MAAI,cAAc,KAAK,CAAC,EAAE,IAAI,KAAK,SAAS,KAAK,CAAC,EAAE,IAAI,GAAG;AACvD,WAAO;AAAA,EACX;AACA,SAAO;AACX;AACA,IAAM,iBAAiB;AACvB,SAAS,YAAY,MAAM;AACvB,MAAI,eAAe,IAAI,GAAG;AACtB,WAAO,mBAAmB,IAAI;AAAA,EAClC;AACA,MAAI,CAAC,cAAc,IAAI,GAAG;AACtB,WAAO,qBAAqB,oBAAoB,IAAI,CAAC;AAAA,EACzD;AACA,SAAO,qBAAqB,IAAI;AACpC;AACA,SAAS,oBAAoB,OAAO;AAChC;AAOI,QAAI,CAAC,eAAe,KAAK,KAAK,GAAG;AAC7B,YAAM,IAAI,MAAM,uBAAuB,KAAK,8BAA8B;AAAA,IAC9E;AAAA,EACJ;AACA,QAAM,IAAI,IAAI,KAAK,KAAK;AACxB,MAAI,MAAM,EAAE,QAAQ,CAAC,GAAG;AACpB,UAAM,IAAI,MAAM,uBAAuB,KAAK,8BAA8B;AAAA,EAC9E;AACA,SAAO;AAAA,IACH,KAAK,EAAE,WAAW;AAAA,IAClB,OAAO,EAAE,YAAY,IAAI;AAAA,IACzB,MAAM,EAAE,eAAe;AAAA,EAC3B;AACJ;AACA,SAAS,2BAA2B,OAAO;AACvC,MAAI,SAAS,MAAM,IAAI,GAAG;AACtB,UAAM,OAAO,oBAAoB,MAAM,IAAI;AAAA,EAC/C;AACJ;AACA,SAAS,6BAA6B,MAAM;AACxC,SAAO,KAAK,QAAQ,0BAA0B;AAClD;AAGA,SAAS,qBAAqB,QAAQ,aAAa,gBAAgB;AAC/D,UAAQ,QAAQ;AAAA,IACZ,KAAK;AAAA,IACL,KAAK;AACD,aAAO,cACA,iBAAiB,IAAuC,IACzD;AAAA,IACV,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO,cAAc,IAA4B;AAAA,IACrD,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,EACf;AACJ;AACA,IAAM,wBAAN,MAA4B;AAAA,EACxB,UAAU;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,WAAW,SAAS;AAChB,SAAK,oBAAoB;AACzB,SAAK,gBAAgB,QAAQ,YAAY;AAAA,EAC7C;AAAA,EACA,eAAe,MAAM;AACjB,QAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,mCAA6B,IAAI;AAAA,IACrC,OACK;AACD,iCAA2B,IAAI;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,6BAA6B,MAAM;AAC/B,WAAO,cAAc,oBAAoB,IAAI,CAAC;AAAA,EAClD;AAAA,EACA,IAAI,MAAM;AAEN,QAAI,OAAO,SAAS,YAAY,yBAAyB,MAAM;AAC3D,aAAO,KAAK;AAAA,IAChB,OACK;AACD,aAAO,KAAK,IAAI,KAAK,0BAA0B,IAAI,CAAC;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,SAAS,MAAM;AACX,UAAM,OAAO;AACb,WAAO,KAAK,0BAA0B,SAChC,IAAI,KAAK,KAAK,sBAAsB,GAAI,EAAE,QAAQ,IAClD,IAAI,KAAK,KAAK,IAAI,KAAK,sBAAsB,MAAM,KAAK,sBAAsB,QAAQ,GAAG,KAAK,sBAAsB,GAAG,CAAC,EAAE,QAAQ;AAAA,EAC5I;AAAA,EACA,0BAA0B,MAAM;AAC5B,WAAO,YAAY,IAAI;AAAA,EAC3B;AAAA,EACA,gBAAgB,SAAS;AACrB,QAAI,CAAC,KAAK,mBAAmB;AACzB;AAAA,IACJ;AACA,UAAM,aAAa,QAAQ;AAC3B,QAAI,KAAK,kBAAkB,UAAU,aAAa;AAC9C,WAAK,8BAA8B,IAAI,kBAAkB;AAAA,QACrD,sBAAsB;AAAA,QACtB,sBAAsB,KAAK,kBAAkB,UAAU,iBAAiB,aAAa;AAAA,QACrF,6BAA6B;AAAA,QAC7B,kBAAkB,QAAQ;AAAA,MAC9B,CAAC;AAAA,IACL,OACK;AACD,WAAK,8BAA8B,IAAI,cAAc,YAAY,QAAQ,MAAM;AAAA,IACnF;AAAA,EACJ;AAAA,EACA,eAAe,MAAM;AACjB,UAAM,KAAK;AACX,WAAO,KAAK,4BAA4B,iBAAiB,IAAI,KAAK,GAAG,sBAAsB,GAAI,CAAC;AAAA,EACpG;AAAA,EACA,eAAe,UAAU,qBAAqB;AAC1C,UAAM,eAAe,qBAAqB,SAAS,QAAQ,KAAK,kBAAkB,UAAU,aAAa,KAAK,kBAAkB,UAAU,cAAc;AACxJ,UAAM,UAAU,KAAK,kBAAkB;AACvC,QAAI,QAAQ,sBAAsB,QAAW;AACzC,YAAM,iBAAiB,QAAQ,kBAAkB,SAAS,cAAc,cAAc,oBAAoB,MAAM;AAChH,UAAI,mBAAmB,MAAM;AACzB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,yBAAyB,SAAS,MAAM,cAAc,oBAAoB,MAAM;AAAA,EAC3F;AAAA,EACA,kBAAkB,WAAW;AACzB,QAAI,YAAY,UAAU,OAAO,yBAAyB,UAAU,CAAC,CAAC,EAAE;AAGxE,QAAI,YAAY,MAAiC,YAAY,IAA6B;AACtF,kBAAY;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,kBAAkB,YAAY;AAC/C,yBAAqB,kBAAkB,UAAU;AAAA,EACrD;AAAA,EACA,OAAO,wBAAwB,SAAS;AACpC,WAAO,MAAM,EAAE,cAAc,EAAE,YAAY,aAAc,EAAE,GAAG,WAAW,CAAC,CAAC;AAAA,EAC/E;AACJ;AAWA,IAAM,wBAAwB,OAAO,WAAW;AAEhD,SAAS,OAAO;AACZ,MAAI,CAAC,uBAAuB;AACxB,WAAO;AAAA,EACX;AACA,SAAO,OAAO,UAAU,UAAU,YAAY,EAAE,QAAQ,SAAS,IAAI;AACzE;AACA,SAAS,QAAQ;AACb,MAAI,CAAC,uBAAuB;AACxB,WAAO;AAAA,EACX;AAEA,SAAO,mBAAmB,KAAK,OAAO,UAAU,QAAQ;AAC5D;AACA,SAAS,WAAW;AAChB,MAAI,CAAC,uBAAuB;AACxB,WAAO;AAAA,EACX;AACA,SAAO,OAAO,WAAW;AAC7B;AAEA,SAAS,YAAY;AACjB,MAAI,CAAC,uBAAuB;AACxB,WAAO;AAAA,EACX;AAEA,MAAI,WAAW,eAAe,UAAU;AACpC,WAAO,UAAU,cAAc,aAAa;AAAA,EAChD;AACA,SAAO,UAAU,UAAU,YAAY,EAAE,QAAQ,KAAK,KAAK;AAC/D;AAEA,SAAS,kBAAkB;AACvB,MAAI,CAAC,uBAAuB;AACxB,WAAO;AAAA,EACX;AACA,MAAI,CAAC,UAAU,eAAe;AAC1B,WAAO;AAAA,EACX;AACA,SAAO,UAAU,cAAc,OAAO,KAAK,CAAC,UAAU;AAClD,WAAO,MAAM,MAAM,SAAS,UAAU;AAAA,EAC1C,CAAC;AACL;AAGA,SAAS,KAAK,KAAK;AACf;AAEI,YAAQ,KAAK,GAAG;AAAA,EACpB;AACJ;AAKA,SAAS,iBAAiB,cAAc;AACpC,QAAM,eAAe,KAAK,MAAM,aAAa,KAAK;AAClD,QAAM,gBAAgB,KAAK,MAAM,aAAa,MAAM;AACpD,QAAM,QAAQ,eAAgB,eAAe;AAC7C,QAAM,SAAS,gBAAiB,gBAAgB;AAChD,SAAO,KAAO,EAAE,OAAO,OAAO,CAAC;AACnC;AACA,SAAS,uBAAuB,gBAAgB;AAC5C,SAAO,iBAAkB,iBAAiB;AAC9C;AACA,SAAS,uBAAuB,eAAe;AAC3C,SAAO,gBAAiB,gBAAgB;AAC5C;AAEA,SAAS,0BAA0B,IAAI;AACnC,MAAI,CAAC,SAAS,GAAG;AACb;AAAA,EACJ;AACA,KAAG,iBAAiB,aAAa,CAAC,MAAM;AAEpC,QAAI,EAAE,WAAW,GAAiC;AAE9C,QAAE,eAAe;AACjB,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX,CAAC;AACL;AAGA,IAAM,oBAAN,MAAwB;AAAA,EACpB,YAAY,QAAQ,SAAS,SAAS;AAClC,SAAK,uBAAuB;AAC5B,SAAK,2BAA2B;AAChC,SAAK,0BAA0B,EAAE,aAAa,OAAO,mBAAmB,aAAa,OAAO,kBAAkB;AAC9G,SAAK,qBAAqB;AAC1B,SAAK,yBAAyB;AAC9B,SAAK,wBAAwB,EAAE,aAAa,OAAO,mBAAmB,aAAa,OAAO,kBAAkB;AAC5G,SAAK,6BAA6B;AAClC,SAAK,0BAA0B;AAC/B,SAAK,mCAAmC;AACxC,SAAK,mCAAmC;AACxC,SAAK,+CAA+C;AACpD,SAAK,wBAAwB;AAC7B,SAAK,sBAAsB;AAC3B,SAAK,0CAA0C;AAC/C,SAAK,0CAA0C;AAC/C,SAAK,0CAA0C;AAC/C,SAAK,iCAAiC;AACtC,SAAK,uCAAuC;AAC5C,SAAK,uCAAuC;AAC5C,SAAK,kCAAkC;AACvC,SAAK,+BAA+B;AACpC,SAAK,2BAA2B;AAChC,SAAK,oCAAoC;AACzC,SAAK,yBAAyB;AAC9B,SAAK,oCAAoC;AAGzC,SAAK,0BAA0B;AAG/B,SAAK,6BAA6B,CAAC,MAAM;AAMzC,SAAK,oCAAoC,CAAC,iBAAiB;AACvD,WAAK,yBAAyB,YAAY;AAAA,IAC9C;AAQA,SAAK,sCAAsC,CAAC,kBAAkB;AAC1D,UAAI,KAAK,2BAA2B,aAAa,GAAG;AAChD,cAAM,cAAc,KAAK,0BAA0B,aAAa;AAChE,UAAE,KAAK;AACP,YAAI,KAAK,0BAA0B,KAAK,qBAAqB,GAAG;AAC5D,gBAAM,EAAE,6BAA6B,kBAAkB,IAAI,KAAK,qCAAqC,YAAY,aAAa,GAAG,KAAK,qBAAqB;AAE3J,cAAI,oBAAoB,MAAiD,CAAC,KAAK,qBAAqB;AAChG,iBAAK,4BAA4B,aAAa,KAAK,kBAAkB,wBAAwB;AAAA,UACjG;AACA,eAAK,0BAA0B;AAAA,QACnC;AAAA,MACJ,OACK;AACD,cAAM,cAAc,KAAK,0BAA0B,aAAa;AAChE,UAAE,KAAK;AACP,YAAI,KAAK,4BAA4B,KAAK,uBAAuB,GAAG;AAChE,gBAAM,EAAE,6BAA6B,kBAAkB,IAAI,KAAK,qCAAqC,YAAY,aAAa,GAAG,KAAK,uBAAuB;AAE7J,cAAI,oBAAoB,KAAkD,CAAC,KAAK,uBAAuB;AACnG,iBAAK,4BAA4B,aAAa,KAAK,kBAAkB,+BAA+B;AAAA,UACxG;AACA,eAAK,4BAA4B;AAAA,QACrC;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AACzB,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,oBAAoB;AAChB,QAAI,KAAK,4CAA4C,MAAM;AACvD,WAAK,wCAAwC;AAC7C,WAAK,0CAA0C;AAAA,IACnD;AACA,QAAI,KAAK,4CAA4C,MAAM;AACvD,WAAK,wCAAwC;AAC7C,WAAK,0CAA0C;AAAA,IACnD;AACA,QAAI,KAAK,mCAAmC,MAAM;AAC9C,WAAK,+BAA+B;AACpC,WAAK,iCAAiC;AAAA,IAC1C;AACA,QAAI,KAAK,yCAAyC,MAAM;AACpD,WAAK,qCAAqC;AAC1C,WAAK,uCAAuC;AAAA,IAChD;AACA,QAAI,KAAK,yCAAyC,MAAM;AACpD,WAAK,qCAAqC;AAC1C,WAAK,uCAAuC;AAAA,IAChD;AACA,QAAI,KAAK,4CAA4C,MAAM;AACvD,WAAK,wCAAwC;AAC7C,WAAK,0CAA0C;AAAA,IACnD;AACA,SAAK,8BAA8B;AACnC,SAAK,4BAA4B;AAAA,EACrC;AAAA,EACA,4BAA4B,YAAY;AACpC,QAAI,KAAK,gCAAgC;AACrC,WAAK,+BAA+B;AAAA,IACxC;AACA,UAAM,wBAAwB,KAAK,2BAA2B,KAAK,IAAI;AACvE,SAAK,iCAAiC,MAAM;AACxC,WAAK,iBAAiB,oBAAoB,aAAa,qBAAqB;AAAA,IAChF;AACA,SAAK,iBAAiB,iBAAiB,aAAa,qBAAqB;AACzE,QAAI,KAAK,2BAA2B,UAAU,GAAG;AAC7C;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,0BAA0B,UAAU;AAC7D,SAAK,4BAA4B,aAAa,KAAK,kBAAkB,yBAAyB;AAC9F,SAAK,6BAA6B;AAAA,EACtC;AAAA,EACA,8BAA8B;AAC1B,QAAI,KAAK,6BAA6B,MAAM;AACxC,mBAAa,KAAK,wBAAwB;AAAA,IAC9C;AACA,SAAK,uBAAuB;AAC5B,SAAK,2BAA2B;AAChC,SAAK,0BAA0B,EAAE,aAAa,OAAO,mBAAmB,aAAa,OAAO,kBAAkB;AAAA,EAClH;AAAA,EACA,4BAA4B;AACxB,QAAI,KAAK,2BAA2B,MAAM;AACtC,mBAAa,KAAK,sBAAsB;AAAA,IAC5C;AACA,SAAK,qBAAqB;AAC1B,SAAK,yBAAyB;AAC9B,SAAK,wBAAwB,EAAE,aAAa,OAAO,mBAAmB,aAAa,OAAO,kBAAkB;AAAA,EAChH;AAAA,EACA,2BAA2B,WAAW;AAClC,QAAI,KAAK,0BAA0B,KAAK,qCAAqC,MAAM;AAC/E;AAAA,IACJ;AACA,QAAI,KAAK,2BAA2B,SAAS,GAAG;AAC5C;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,0BAA0B,SAAS;AAC5D,SAAK,4BAA4B,aAAa,KAAK,kBAAkB,wBAAwB;AAC7F,SAAK,6BAA6B;AAAA,EACtC;AAAA,EACA,2BAA2B,WAAW;AAClC,UAAM,QAAQ,YAAY,UAAU,gBAAgB,cAAc,KAAK,uBAAuB,CAAC;AAC/F,QAAI,UAAU,MAAM;AAChB;AAAA,IACJ;AACA,SAAK,oCAAoC,eAAe,SAAS;AACjE,QAAI,KAAK,oCAAoC,MAAM;AAC/C;AAAA,IACJ;AACA,QAAI,KAAK,mCAAmC;AACxC;AAAA,IACJ;AAEA,SAAK,2BAA2B;AAChC,UAAM,WAAW,KAAK,qCAAqC,YAAY,KAAK,GAAG,cAAc,KAAK,gCAAgC,CAAC;AACnI,UAAM,EAAE,mBAAmB,SAAS,mBAAmB,SAAS,6BAA6B,kBAAkB,IAAI;AAEnH,QAAI,CAAC,KAAK,gDAAgD,oBAAoB,GAA8C;AACxH;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,8CAA8C;AAIpD,YAAM,mBAAmB,UAAU;AAEnC,YAAM,aAAa,WAAW,oBAAoB,CAAC,KAAK,kBAAkB,yCAAyC;AACnH,YAAM,aAAa,mBAAmB,WAAW,CAAC,KAAK,kBAAkB,yCAAyC;AAIlH,UAAI,CAAC,cAAc,CAAC,YAAY;AAC5B,aAAK,oCAAoC;AAAA,MAC7C;AACA,WAAK,+CAA+C;AAEpD,WAAK,sBAAsB;AAC3B,WAAK,8BAA8B;AACnC,WAAK,0BAA0B;AAAA,IACnC;AACA,QAAI,CAAC,KAAK,mCAAmC;AACzC,YAAM,cAAc,KAAK,0BAA0B,WAAW,KAAK;AACnE,WAAK,4BAA4B,aAAa,KAAK,kBAAkB,wBAAwB;AAG7F,qBAAe,SAAS;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,mCAAmC,WAAW;AAE1C,QAAI,UAAU,WAAW,GAA+B;AACpD;AAAA,IACJ;AACA,UAAM,WAAW,KAAK,qCAAqC,YAAY,SAAS,GAAG,cAAc,KAAK,gCAAgC,CAAC;AACvI,UAAM,EAAE,6BAA6B,kBAAkB,IAAI;AAE3D,QAAI,qBAAqB,GAAgD;AAErE,WAAK,wBAAwB;AAC7B,WAAK,4BAA4B;AAAA,IACrC;AACA,QAAI,KAAK,uBAAuB;AAE5B,YAAM,cAAc,KAAK,0BAA0B,SAAS;AAC5D,WAAK,4BAA4B,aAAa,KAAK,kBAAkB,+BAA+B;AAAA,IACxG;AAAA,EACJ;AAAA,EACA,qCAAqC,iBAAiB,eAAe;AACjE,UAAM,UAAU,KAAK,IAAI,cAAc,cAAc,gBAAgB,WAAW;AAChF,UAAM,UAAU,KAAK,IAAI,cAAc,cAAc,gBAAgB,WAAW;AAChF,UAAM,oBAAoB,UAAU;AACpC,WAAO;AAAA,MACH,mBAAmB;AAAA,MACnB,mBAAmB;AAAA,MACnB,6BAA6B;AAAA,IACjC;AAAA,EACJ;AAAA;AAAA,EAEA,0BAA0B,eAAe;AACrC,QAAI,QAAQ,YAAY,cAAc,gBAAgB,cAAc,KAAK,uBAAuB,CAAC;AACjG,QAAI,UAAU,QAAQ,cAAc,QAAQ,WAAW,GAAG;AAGtD,cAAQ,cAAc,eAAe,CAAC;AAAA,IAC1C;AACA,QAAI,UAAU,MAAM;AAChB;AAAA,IACJ;AACA,SAAK,0BAA0B;AAC/B,SAAK,oCAAoC,eAAe,aAAa;AACrE,SAAK,8BAA8B;AACnC,SAAK,mCAAmC;AACxC,QAAI,KAAK,sCAAsC;AAC3C,WAAK,qCAAqC;AAC1C,WAAK,uCAAuC;AAAA,IAChD;AACA,UAAM,cAAc,KAAK,0BAA0B,eAAe,KAAK;AACvE,SAAK,4BAA4B,aAAa,KAAK,kBAAkB,uBAAuB;AAC5F,MAAE,KAAK;AACP,QAAI,KAAK,0BAA0B,KAAK,qBAAqB,GAAG;AAE5D,YAAM,EAAE,6BAA6B,kBAAkB,IAAI,KAAK,qCAAqC,YAAY,KAAK,GAAG,KAAK,qBAAqB;AAEnJ,UAAI,oBAAoB,MAAiD,CAAC,KAAK,qBAAqB;AAChG,aAAK,4BAA4B,aAAa,KAAK,kBAAkB,wBAAwB;AAAA,MACjG;AACA,WAAK,0BAA0B;AAAA,IACnC,OACK;AACD,UAAI,CAAC,KAAK,qBAAqB;AAC3B,aAAK,4BAA4B,aAAa,KAAK,kBAAkB,kBAAkB;AAGvF,YAAI,KAAK,kBAAkB,oBAAoB;AAC3C,yBAAe,aAAa;AAAA,QAChC;AAAA,MACJ;AAAA,IACJ;AAGA,QAAI,KAAK,uBAAuB,GAAG;AAC/B,qBAAe,aAAa;AAAA,IAChC;AACA,QAAI,cAAc,QAAQ,WAAW,GAAG;AACpC,UAAI,KAAK,yBAAyB;AAC9B,aAAK,0BAA0B;AAE/B,uBAAe,aAAa;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,yBAAyB,cAAc;AAEnC,QAAI,aAAa,WAAW,GAA+B;AACvD;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,0BAA0B,YAAY;AAC/D,SAAK,mCAAmC;AACxC,SAAK,yBAAyB;AAC9B,QAAI,KAAK,sCAAsC;AAC3C,WAAK,qCAAqC;AAC1C,WAAK,uCAAuC;AAAA,IAChD;AACA,QAAI,KAAK,GAAG;AACR,YAAM,cAAc,KAAK,iBAAiB,cAAc;AACxD,kBAAY,oBAAoB,cAAc,KAAK,iCAAiC;AAAA,IACxF;AACA,QAAI,KAAK,2BAA2B,YAAY,GAAG;AAC/C;AAAA,IACJ;AACA,SAAK,4BAA4B,aAAa,KAAK,kBAAkB,sBAAsB;AAC3F,MAAE,KAAK;AACP,QAAI,KAAK,4BAA4B,KAAK,uBAAuB,GAAG;AAEhE,YAAM,EAAE,6BAA6B,kBAAkB,IAAI,KAAK,qCAAqC,YAAY,YAAY,GAAG,KAAK,uBAAuB;AAE5J,UAAI,oBAAoB,KAAkD,CAAC,KAAK,uBAAuB;AACnG,aAAK,4BAA4B,aAAa,KAAK,kBAAkB,+BAA+B;AAAA,MACxG;AACA,WAAK,4BAA4B;AAAA,IACrC,OACK;AACD,UAAI,CAAC,KAAK,uBAAuB;AAC7B,aAAK,4BAA4B,aAAa,KAAK,kBAAkB,yBAAyB;AAAA,MAClG;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gCAAgC;AAC5B,QAAI,KAAK,+BAA+B,MAAM;AAC1C;AAAA,IACJ;AACA,iBAAa,KAAK,0BAA0B;AAC5C,SAAK,6BAA6B;AAAA,EACtC;AAAA,EACA,4BAA4B,WAAW;AACnC,QAAI,KAAK,4BAA4B,MAAM;AACvC;AAAA,IACJ;AACA,UAAM,QAAQ,UAAU,eAAe,CAAC;AACxC,SAAK,0BAA0B,MAAM;AACrC,SAAK,oCAAoC,eAAe,SAAS;AACjE,UAAM,cAAc,KAAK,iBAAiB,cAAc;AACxD,SAAK,sBAAsB;AAC3B,SAAK,+CAA+C;AACpD,SAAK,oCAAoC;AACzC,SAAK,mCAAmC,YAAY,KAAK;AACzD,QAAI,KAAK,sCAAsC;AAC3C,WAAK,qCAAqC;AAC1C,WAAK,uCAAuC;AAAA,IAChD;AACA;AACI,YAAM,gCAAgC,KAAK,2BAA2B,KAAK,IAAI;AAC/E,YAAM,uBAAuB,KAAK,0BAA0B,KAAK,IAAI;AACrE,WAAK,uCAAuC,MAAM;AAC9C,oBAAY,oBAAoB,aAAa,6BAA6B;AAC1E,oBAAY,oBAAoB,YAAY,oBAAoB;AAAA,MACpE;AACA,kBAAY,iBAAiB,aAAa,+BAA+B,EAAE,SAAS,MAAM,CAAC;AAC3F,kBAAY,iBAAiB,YAAY,sBAAsB,EAAE,SAAS,MAAM,CAAC;AACjF,WAAK,8BAA8B;AACnC,WAAK,6BAA6B;AAAA,QAAW,KAAK,yBAAyB,KAAK,MAAM,SAAS;AAAA,QAAG;AAAA;AAAA,MAAuB;AAAA,IAC7H;AACA,UAAM,cAAc,KAAK,0BAA0B,WAAW,KAAK;AACnE,SAAK,4BAA4B,aAAa,KAAK,kBAAkB,yBAAyB;AAC9F,QAAI,CAAC,KAAK,wBAAwB;AAC9B,WAAK,qBAAqB;AAC1B,WAAK,yBAAyB;AAAA,QAAW,KAAK,0BAA0B,KAAK,IAAI;AAAA,QAAG;AAAA;AAAA,MAA0B;AAC9G,WAAK,wBAAwB,YAAY,KAAK;AAAA,IAClD;AAAA,EACJ;AAAA,EACA,2BAA2B,WAAW;AAElC,QAAI,UAAU,WAAW,GAA+B;AACpD;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,iBAAiB,cAAc;AACxD,QAAI,KAAK,GAAG;AACR,kBAAY,iBAAiB,cAAc,KAAK,iCAAiC;AAAA,IACrF;AACA,SAAK,wBAAwB;AAC7B,SAAK,mCAAmC,YAAY,SAAS;AAC7D,QAAI,KAAK,sCAAsC;AAC3C,WAAK,qCAAqC;AAC1C,WAAK,uCAAuC;AAAA,IAChD;AACA;AACI,YAAM,gCAAgC,KAAK,mCAAmC,KAAK,IAAI;AACvF,YAAM,sBAAsB,KAAK,yBAAyB,KAAK,IAAI;AACnE,WAAK,uCAAuC,MAAM;AAC9C,oBAAY,oBAAoB,aAAa,6BAA6B;AAC1E,oBAAY,oBAAoB,WAAW,mBAAmB;AAAA,MAClE;AACA,kBAAY,iBAAiB,aAAa,6BAA6B;AACvE,kBAAY,iBAAiB,WAAW,mBAAmB;AAAA,IAC/D;AACA,SAAK,yBAAyB;AAC9B,QAAI,KAAK,2BAA2B,SAAS,GAAG;AAC5C;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,0BAA0B,SAAS;AAC5D,SAAK,4BAA4B,aAAa,KAAK,kBAAkB,wBAAwB;AAC7F,QAAI,CAAC,KAAK,0BAA0B;AAChC,WAAK,uBAAuB;AAC5B,WAAK,2BAA2B;AAAA,QAAW,KAAK,4BAA4B,KAAK,IAAI;AAAA,QAAG;AAAA;AAAA,MAA0B;AAClH,WAAK,0BAA0B,YAAY,SAAS;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,iBAAiB;AACb,SAAK,iBAAiB,iBAAiB,cAAc,KAAK,4BAA4B,KAAK,IAAI,CAAC;AAEhG,SAAK,iBAAiB,iBAAiB,eAAe,KAAK,8BAA8B,KAAK,IAAI,CAAC;AACnG;AACI,YAAM,MAAM,KAAK,iBAAiB;AAClC,YAAM,iBAAiB,CAAC,UAAU;AAC9B,YAAI,CAAC,KAAK,kBAAkB,iCAAiC;AACzD;AAAA,QACJ;AACA,YAAI,MAAM,YAAY,KAAK,iBAAiB,SAAS,MAAM,aAAa,EAAE,CAAC,CAAC,GAAG;AAC3E;AAAA,QACJ;AACA,YAAI,MAAM,UAAU,KAAK,iBAAiB,SAAS,MAAM,MAAM,GAAG;AAC9D;AAAA,QACJ;AACA,aAAK,kBAAkB,gCAAgC;AAAA,MAC3D;AACA,WAAK,0CAA0C,MAAM;AACjD,YAAI,oBAAoB,cAAc,cAAc;AAAA,MACxD;AACA,WAAK,0CAA0C,MAAM;AACjD,YAAI,oBAAoB,aAAa,cAAc;AAAA,MACvD;AACA,UAAI,iBAAiB,aAAa,cAAc;AAChD,UAAI,iBAAiB,cAAc,gBAAgB,EAAE,SAAS,KAAK,CAAC;AAAA,IACxE;AACA,QAAI,MAAM,GAAG;AACT,WAAK,0CAA0C,MAAM;AACjD,aAAK,iBAAiB,oBAAoB,YAAY,KAAK,mCAAmC;AAAA,MAClG;AACA,WAAK,iBAAiB,iBAAiB,YAAY,KAAK,mCAAmC;AAAA,IAC/F;AACA,SAAK,iBAAiB,iBAAiB,cAAc,KAAK,4BAA4B,KAAK,IAAI,CAAC;AAChG,SAAK,iBAAiB,iBAAiB,cAAc,KAAK,4BAA4B,KAAK,IAAI,GAAG,EAAE,SAAS,KAAK,CAAC;AACnH,8BAA0B,KAAK,gBAAgB;AAC/C,SAAK,iBAAiB,iBAAiB,aAAa,KAAK,2BAA2B,KAAK,IAAI,CAAC;AAC9F,SAAK,oBAAoB;AAMzB,SAAK,iBAAiB,iBAAiB,aAAa,MAAM;AAAA,IAAE,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,EACrF;AAAA,EACA,sBAAsB;AAClB,QAAI,KAAK,kBAAkB,8BAA8B,UACrD,KAAK,kBAAkB,yBAAyB,UAChD,KAAK,kBAAkB,4BAA4B,QAAW;AAC9D;AAAA,IACJ;AACA,SAAK,iBAAiB,iBAAiB,cAAc,CAAC,UAAU,KAAK,0BAA0B,MAAM,OAAO,GAAG,EAAE,SAAS,KAAK,CAAC;AAChI,SAAK,iBAAiB,iBAAiB,aAAa,CAAC,UAAU;AAC3D,UAAI,MAAM,QAAQ,WAAW,KAAK,KAAK,oCAAoC,MAAM;AAC7E;AAAA,MACJ;AACA,UAAI,KAAK,kBAAkB,yBAAyB,QAAW;AAC3D,cAAM,kBAAkB,YAAY,MAAM,QAAQ,CAAC,GAAG,MAAM,QAAQ,CAAC,CAAC;AACtE,cAAM,QAAQ,kBAAkB,KAAK;AACrC,aAAK,kBAAkB,qBAAqB,KAAK,iCAAiC,KAAK;AACvF,uBAAe,KAAK;AAAA,MACxB;AAAA,IACJ,GAAG,EAAE,SAAS,MAAM,CAAC;AACrB,SAAK,iBAAiB,iBAAiB,YAAY,CAAC,UAAU;AAC1D,WAAK,0BAA0B,MAAM,OAAO;AAAA,IAChD,CAAC;AAAA,EACL;AAAA,EACA,0BAA0B,SAAS;AAC/B,QAAI,QAAQ,WAAW,GAAG;AACtB,WAAK,2BAA2B;AAAA,IACpC;AACA,QAAI,QAAQ,WAAW,KAAK,KAAK,4BAA4B,KAAK,yBAAyB;AACvF,WAAK,oBAAoB;AAAA,IAC7B,OACK;AACD,WAAK,qBAAqB,OAAO;AAAA,IACrC;AAAA,EACJ;AAAA,EACA,qBAAqB,SAAS;AAC1B,UAAM,MAAM,sBAAsB,KAAK,gBAAgB;AACvD,SAAK,kCAAkC;AAAA,MACnC,cAAe,QAAQ,CAAC,EAAE,UAAU,IAAI,QAAS,QAAQ,CAAC,EAAE,UAAU,IAAI,SAAS;AAAA,MACnF,cAAe,QAAQ,CAAC,EAAE,UAAU,IAAI,OAAQ,QAAQ,CAAC,EAAE,UAAU,IAAI,QAAQ;AAAA,IACrF;AACA,SAAK,+BAA+B,YAAY,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;AACtE,QAAI,KAAK,kBAAkB,8BAA8B,QAAW;AAChE,WAAK,kBAAkB,0BAA0B;AAAA,IACrD;AACA,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,sBAAsB;AAClB,QAAI,KAAK,oCAAoC,MAAM;AAC/C;AAAA,IACJ;AACA,SAAK,kCAAkC;AACvC,QAAI,KAAK,kBAAkB,4BAA4B,QAAW;AAC9D,WAAK,kBAAkB,wBAAwB;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,4BAA4B,OAAO;AAC/B,QAAI,KAAK,gCAAgC;AACrC,WAAK,+BAA+B;AAAA,IACxC;AACA,QAAI,KAAK,2BAA2B,KAAK,GAAG;AACxC;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,4BAA4B;AAGlC;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,0BAA0B,KAAK;AACxD,SAAK,4BAA4B,aAAa,KAAK,kBAAkB,yBAAyB;AAE9F,SAAK,6BAA6B,CAAC,MAAM;AAAA,EAC7C;AAAA,EACA,yBAAyB,OAAO;AAC5B,UAAM,QAAQ,YAAY,MAAM,SAAS,cAAc,KAAK,uBAAuB,CAAC;AACpF,QAAI,UAAU,MAAM;AAChB;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,0BAA0B,OAAO,KAAK;AAC/D,SAAK,4BAA4B,aAAa,KAAK,kBAAkB,sBAAsB;AAC3F,SAAK,sBAAsB;AAE3B,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,2BAA2B,GAAG;AAC1B,QAAI,EAAE,sBAAsB,EAAE,mBAAmB,qBAAqB,QAAW;AAC7E,aAAO,EAAE,mBAAmB;AAAA,IAChC;AACA,WAAO,eAAe,CAAC,IAAI,KAAK,oCAAoC;AAAA,EACxE;AAAA,EACA,4BAA4B,OAAO,UAAU;AACzC,QAAI,UAAU;AACV,eAAS,KAAK,KAAK,mBAAmB,KAAK;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,4BAA4B,OAAO,UAAU;AACzC,QAAI,CAAC,UAAU;AACX;AAAA,IACJ;AACA,aAAS,KAAK,KAAK,mBAAmB,KAAK;AAAA,EAC/C;AAAA,EACA,0BAA0B,OAAO,OAAO;AAGpC,UAAM,YAAY,SAAS;AAC3B,UAAM,MAAM,KAAK,iBAAiB,sBAAsB,KAAK,EAAE,MAAM,GAAG,KAAK,EAAE;AAC/E,WAAO;AAAA,MACH,SAAS,UAAU;AAAA,MACnB,SAAS,UAAU;AAAA,MACnB,OAAO,UAAU;AAAA,MACjB,OAAO,UAAU;AAAA,MACjB,SAAS,UAAU;AAAA,MACnB,SAAS,UAAU;AAAA,MACnB,QAAS,UAAU,UAAU,IAAI;AAAA,MACjC,QAAS,UAAU,UAAU,IAAI;AAAA,MACjC,SAAS,MAAM;AAAA,MACf,QAAQ,MAAM;AAAA,MACd,UAAU,MAAM;AAAA,MAChB,SAAS,MAAM;AAAA,MACf,mBAAmB,CAAC,MAAM,KAAK,WAAW,OAAO,KAAK,MAAM,SAAS,iBAAiB,MAAM,SAAS;AAAA,MACrG,mBAAmB,MAAM;AAAA,MACzB,kBAAkB,UAAU;AAAA,MAC5B,gBAAgB,MAAM;AAAA,MACtB,0BAA0B,MAAM;AAC5B,YAAI,MAAM,SAAS,cAAc;AAE7B,yBAAe,KAAK;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,SAAS,sBAAsB,SAAS;AACpC,SAAO,QAAQ,sBAAsB,KAAK,EAAE,MAAM,GAAG,KAAK,EAAE;AAChE;AACA,SAAS,YAAY,IAAI,IAAI;AACzB,QAAM,QAAQ,GAAG,UAAU,GAAG;AAC9B,QAAM,QAAQ,GAAG,UAAU,GAAG;AAC9B,SAAO,KAAK,KAAK,QAAQ,QAAQ,QAAQ,KAAK;AAClD;AACA,SAAS,eAAe,OAAO;AAC3B,MAAI,MAAM,YAAY;AAClB,UAAM,eAAe;AAAA,EACzB;AACJ;AACA,SAAS,YAAY,WAAW;AAC5B,SAAO;AAAA,IACH,aAAa,UAAU;AAAA,IACvB,aAAa,UAAU;AAAA,EAC3B;AACJ;AACA,SAAS,eAAe,GAAG;AAEvB,SAAO,EAAE,aAAa,YAAY,IAAI;AAC1C;AACA,SAAS,YAAY,SAAS,IAAI;AAC9B,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACrC,QAAI,QAAQ,CAAC,EAAE,eAAe,IAAI;AAC9B,aAAO,QAAQ,CAAC;AAAA,IACpB;AAAA,EACJ;AACA,SAAO;AACX;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAChB,YAAY,aAAa,cAAc,iBAAiB;AACpD,SAAK,mBAAmB;AACxB,SAAK,8BAA8B;AACnC,SAAK,0BAA0B;AAC/B,SAAK,uBAAuB;AAC5B,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB,YAAY,sBAAsB,EAAE,YAAY;AACzE,SAAK,uBAAuB,YAAY,sBAAsB,EAAE,eAAe;AAC/E,SAAK,uBAAuB,SAAS,cAAc,IAAI;AACvD,SAAK,qBAAqB,MAAM,SAAS;AACzC,SAAK,iBAAiB,SAAS,cAAc,IAAI;AACjD,SAAK,eAAe,MAAM,WAAW;AACrC,SAAK,eAAe,MAAM,UAAU;AACpC,SAAK,eAAe,MAAM,SAAS;AACnC,SAAK,eAAe,aAAa,WAAW,GAAG;AAC/C,SAAK,4BAA4B;AACjC,SAAK,qBAAqB,YAAY,KAAK,cAAc;AACzD,SAAK,0BAA0B,KAAK,sBAAsB,kBAAkB,EAAE,QAAQ,EAAE,MAAM;AAC9F,QAAI,CAAC,KAAK,yBAAyB;AAC/B,WAAK,mBAAmB;AACxB,WAAK,8BAA8B;AAAA,IACvC,OACK;AACD,WAAK,6BAA6B;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,oBAAoB;AAChB,QAAI,KAAK,gCAAgC,MAAM;AAC3C,WAAK,4BAA4B,kBAAkB;AAAA,IACvD;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAO;AAAA,MACV,OAAO,KAAK,kBAAkB,kBAAkB,EAAE;AAAA,MAClD,QAAQ;AAAA,IACZ,CAAC;AAAA,EACL;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAO;AAAA,MACV,OAAO,KAAK,kBAAkB,wBAAwB,EAAE;AAAA,MACxD,QAAQ,IAA6C,OAAO;AAAA,IAChE,CAAC;AAAA,EACL;AAAA,EACA,qBAAqB,KAAK,GAAG,GAAG;AAC5B,UAAM,aAAa,KAAK,wBAAwB;AAChD,QAAI,YAAY,KAAK,sBAAsB,kBAAkB,EAAE,QAAQ,EAAE,MAAM;AAC/E,QAAI,SAAS,GAAG,GAAG,WAAW,OAAO,WAAW,MAAM;AAAA,EAC1D;AAAA,EACA,mBAAmB;AACf,SAAK,4BAA4B;AACjC,QAAI,KAAK,sBAAsB,kBAAkB,EAAE,QAAQ,EAAE,MAAM,iBAAiB,KAAK,yBAAyB;AAC9G,WAAK,0BAA0B,KAAK,sBAAsB,kBAAkB,EAAE,QAAQ,EAAE,MAAM;AAC9F,UAAI,KAAK,yBAAyB;AAC9B,aAAK,6BAA6B;AAAA,MACtC,OACK;AACD,YAAI,KAAK,qBAAqB,MAAM;AAChC,eAAK,eAAe,YAAY,KAAK,iBAAiB,2BAA2B;AACjF,eAAK,eAAe,YAAY,KAAK,iBAAiB,iBAAiB;AACvE,eAAK,mBAAmB;AAAA,QAC5B;AACA,YAAI,KAAK,gCAAgC,MAAM;AAC3C,eAAK,4BAA4B,kBAAkB;AACnD,eAAK,8BAA8B;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,+BAA+B;AAC3B,UAAM,oBAAoB,SAAS,cAAc,KAAK;AACtD,UAAM,UAAU,kBAAkB;AAClC,YAAQ,WAAW;AACnB,YAAQ,UAAU;AAClB,YAAQ,SAAS;AACjB,YAAQ,MAAM;AACd,YAAQ,OAAO;AACf,YAAQ,QAAQ;AAChB,YAAQ,SAAS;AACjB,YAAQ,SAAS;AACjB,SAAK,eAAe,YAAY,iBAAiB;AACjD,UAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,UAAM,QAAQ,QAAQ;AACtB,UAAM,WAAW;AACjB,UAAM,SAAS;AACf,UAAM,MAAM;AACZ,UAAM,SAAS;AACf,UAAM,QAAQ;AACd,UAAM,kBAAkB;AACxB,UAAM,SAAS;AACf,SAAK,eAAe,YAAY,OAAO;AACvC,UAAM,WAAW;AAAA,MACb,2BAA2B,KAAK,yBAAyB,KAAK,IAAI;AAAA,MAClE,2BAA2B,KAAK,0BAA0B,KAAK,IAAI;AAAA,MACnE,0BAA0B,KAAK,yBAAyB,KAAK,IAAI;AAAA,MACjE,2BAA2B,KAAK,yBAAyB,KAAK,IAAI;AAAA,MAClE,iCAAiC,KAAK,gCAAgC,KAAK,IAAI;AAAA,MAC/E,0BAA0B,KAAK,gCAAgC,KAAK,IAAI;AAAA,MACxE,wBAAwB,KAAK,uBAAuB,KAAK,IAAI;AAAA,MAC7D,yBAAyB,KAAK,uBAAuB,KAAK,IAAI;AAAA,IAClE;AACA,SAAK,8BAA8B,IAAI,kBAAkB,SAAS,UAAU;AAAA,MACxE,0CAA0C,MAAM;AAAA,MAChD,0CAA0C,MAAM;AAAA,IACpD,CAAC;AACD,SAAK,mBAAmB,EAAE,mBAAmB,SAAS,6BAA6B,kBAAkB;AAAA,EACzG;AAAA,EACA,8BAA8B;AAC1B,SAAK,eAAe,MAAM,aAAa,KAAK,sBAAsB,kBAAkB,EAAE,QAAQ,EAAE,MAAM;AAAA,EAC1G;AAAA,EACA,yBAAyB,OAAO;AAC5B,QAAI,KAAK,qBAAqB,MAAM;AAChC,WAAK,iBAAiB,kBAAkB,MAAM,kBAAkB,KAAK,sBAAsB,kBAAkB,EAAE,QAAQ,EAAE,MAAM;AAAA,IACnI;AAAA,EACJ;AAAA,EACA,0BAA0B,OAAO;AAC7B,QAAI,KAAK,qBAAqB,QAAQ,KAAK,yBAAyB,MAAM;AACtE,WAAK,iBAAiB,kBAAkB,MAAM,kBAAkB;AAAA,IACpE;AAAA,EACJ;AAAA,EACA,yBAAyB,OAAO;AAC5B,QAAI,KAAK,qBAAqB,MAAM;AAChC;AAAA,IACJ;AACA,UAAM,eAAe,KAAK,kBAAkB,gBAAgB,EAAE,wBAAwB,IAAI,KAAK,qBAAqB,gBAAgB,EAAE,wBAAwB;AAC9J,UAAM,cAAc,KAAK,kBAAkB,kBAAkB,EAAE,SAAS,KAAK,qBAAqB,kBAAkB,EAAE;AACtH,UAAM,qBAAqB,eAAe;AAC1C,UAAM,iBAAiB,KAA4C;AACnE,QAAI,gBAAgB,iBAAiB,GAAG;AAGpC;AAAA,IACJ;AACA,SAAK,uBAAuB;AAAA,MACxB,kBAAkB,MAAM;AAAA,MACxB,8BAA8B,KAAK,kBAAkB,gBAAgB,EAAE,wBAAwB;AAAA,MAC/F,0BAA0B,eAAe;AAAA,MACzC,wBAAwB;AAAA,MACxB,8BAA8B;AAAA,MAC9B,0BAA0B;AAAA,IAC9B;AACA,SAAK,iBAAiB,4BAA4B,MAAM,UAAU;AAAA,EACtE;AAAA,EACA,gCAAgC,OAAO;AACnC,UAAM,aAAa,KAAK;AACxB,QAAI,eAAe,MAAM;AACrB;AAAA,IACJ;AACA,UAAM,SAAS,MAAM,QAAQ,WAAW;AACxC,UAAM,qBAAqB,SAAS,WAAW;AAC/C,UAAM,sBAAsB,MAAM,WAAW,+BAA+B,oBAAoB,WAAW,0BAA0B,WAAW,wBAAwB;AACxK,SAAK,kBAAkB,gBAAgB,EAAE,2BAA2B,mBAAmB;AACvF,SAAK,qBAAqB,gBAAgB,EAAE,2BAA2B,WAAW,yBAAyB,mBAAmB;AAC9H,SAAK,sBAAsB,gBAAgB,EAAE,qBAAqB;AAAA,EACtE;AAAA,EACA,uBAAuB,OAAO;AAC1B,QAAI,KAAK,yBAAyB,QAAQ,KAAK,qBAAqB,MAAM;AACtE;AAAA,IACJ;AACA,SAAK,uBAAuB;AAC5B,SAAK,iBAAiB,4BAA4B,MAAM,UAAU;AAAA,EACtE;AACJ;AAEA,SAAS,sBAAsB,MAAM,MAAM;AACvC,SAAO,KAAK,qBAAqB,KAAK;AAC1C;AACA,SAAS,eAAe,MAAM,MAAM,UAAU;AAC1C,QAAM,SAAS,KAAK,qBAAqB,KAAK,uBAAuB,KAAK,iBAAiB,KAAK;AAChG,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,QAAQ;AAChE;AACA,SAAS,aAAa,OAAO,cAAc;AACvC,QAAM,iBAAiB,KAAK,IAAI,YAAY;AAC5C,SAAO,KAAK,IAAK,IAAoC,iBAAkB,CAAC,KAAK,IAAK;AACtF;AACA,IAAM,mBAAN,MAAuB;AAAA,EACnB,YAAY,UAAU,UAAU,cAAc,SAAS;AACnD,SAAK,sBAAsB;AAC3B,SAAK,sBAAsB;AAC3B,SAAK,sBAAsB;AAC3B,SAAK,sBAAsB;AAC3B,SAAK,mCAAmC;AACxC,SAAK,0BAA0B;AAC/B,SAAK,2BAA2B;AAChC,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,yBAAyB;AAC9B,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,sBAAsB,UAAU,MAAM;AAClC,QAAI,KAAK,wBAAwB,MAAM;AACnC,UAAI,KAAK,oBAAoB,mBAAmB,MAAM;AAClD,aAAK,oBAAoB,qBAAqB;AAC9C;AAAA,MACJ;AACA,UAAI,KAAK,IAAI,KAAK,oBAAoB,qBAAqB,QAAQ,IAAI,KAAK,mBAAmB;AAC3F;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,sBAAsB,KAAK;AAChC,SAAK,sBAAsB,KAAK;AAChC,SAAK,sBAAsB,KAAK;AAChC,SAAK,sBAAsB,EAAE,gBAAgB,MAAM,oBAAoB,SAAS;AAAA,EACpF;AAAA,EACA,gBAAgB,UAAU,MAAM;AAC5B,QAAI,KAAK,wBAAwB,QAAQ,KAAK,wBAAwB,MAAM;AACxE;AAAA,IACJ;AAEA,QAAI,OAAO,KAAK,oBAAoB,iBAAiB,IAAkC;AACnF;AAAA,IACJ;AAEA,QAAI,gBAAgB;AACpB,UAAM,SAAS,eAAe,KAAK,qBAAqB,KAAK,qBAAqB,KAAK,kBAAkB;AACzG,UAAM,YAAY,sBAAsB,KAAK,qBAAqB,KAAK,mBAAmB;AAG1F,UAAM,aAAa,CAAC,MAAM;AAC1B,UAAM,gBAAgB,CAAC,SAAS;AAChC,qBAAiB;AACjB,QAAI,KAAK,wBAAwB,MAAM;AACnC,YAAM,SAAS,eAAe,KAAK,qBAAqB,KAAK,qBAAqB,KAAK,kBAAkB;AAEzG,UAAI,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,MAAM,GAAG;AACzC,cAAM,YAAY,sBAAsB,KAAK,qBAAqB,KAAK,mBAAmB;AAC1F,mBAAW,KAAK,MAAM;AACtB,sBAAc,KAAK,SAAS;AAC5B,yBAAiB;AACjB,YAAI,KAAK,wBAAwB,MAAM;AACnC,gBAAM,SAAS,eAAe,KAAK,qBAAqB,KAAK,qBAAqB,KAAK,kBAAkB;AACzG,cAAI,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,MAAM,GAAG;AACzC,kBAAM,YAAY,sBAAsB,KAAK,qBAAqB,KAAK,mBAAmB;AAC1F,uBAAW,KAAK,MAAM;AACtB,0BAAc,KAAK,SAAS;AAC5B,6BAAiB;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,cAAc;AAClB,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,GAAG;AACxC,qBAAe,cAAc,CAAC,IAAI,gBAAgB,WAAW,CAAC;AAAA,IAClE;AACA,QAAI,KAAK,IAAI,WAAW,IAAI,KAAK,oBAAoB;AACjD;AAAA,IACJ;AACA,SAAK,mCAAmC,EAAE,oBAAoB,UAAU,gBAAgB,KAAK;AAC7F,SAAK,2BAA2B;AAChC,SAAK,0BAA0B,aAAa,KAAK,IAAI,WAAW,GAAG,KAAK,sBAAsB;AAAA,EAClG;AAAA,EACA,sBAAsB,MAAM;AACxB,UAAM,gBAAgB,cAAc,KAAK,gCAAgC;AACzE,UAAM,gBAAgB,OAAO,cAAc;AAC3C,WAAO,cAAc,qBAAqB,KAAK,4BAA4B,KAAK,IAAI,KAAK,wBAAwB,aAAa,IAAI,KAAM,KAAK,IAAI,KAAK,sBAAsB;AAAA,EAChL;AAAA,EACA,mBAAmB,MAAM;AACrB,WAAO,KAAK,qCAAqC,QAAQ,KAAK,2BAA2B,IAAI,MAAM,KAAK;AAAA,EAC5G;AAAA,EACA,2BAA2B,MAAM;AAC7B,UAAM,gBAAgB,cAAc,KAAK,gCAAgC;AACzE,UAAM,WAAW,OAAO,cAAc;AACtC,WAAO,KAAK,IAAI,UAAU,KAAK,uBAAuB;AAAA,EAC1D;AACJ;AAEA,IAAM,MAAM;AACZ,IAAM,MAAM;AAIZ,IAAM,wBAAN,MAA4B;AAAA,EACxB,YAAY,WAAW,OAAO;AAC1B,SAAK,oBAAoB;AACzB,SAAK,uBAAuB;AAC5B,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB;AACvB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,mBAAmB;AACf,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,0BAA0B;AACtB,QAAI,KAAK,mBAAmB;AACxB,WAAK,oBAAoB,YAAY,KAAK,iBAAiB;AAAA,IAC/D;AACA,QAAI,KAAK,sBAAsB;AAC3B,WAAK,oBAAoB,YAAY,KAAK,oBAAoB;AAAA,IAClE;AACA,SAAK,oBAAoB;AACzB,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,yBAAyB;AACrB,WAAO,KAAK,sBAAsB,KAAK,0BAA0B,KAAK,KAAK,oBAAoB,KAAK,qBAAqB;AAAA,EAC7H;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK,gBAAgB,gBAAgB,EAAE,sBAAsB,EAAE,iCAAiC,KAAK,gBAAgB,kBAAkB,EAAE,QAAQ,EAAE,SAAS,IAAI,MACjK,SACA;AAAA,EACV;AAAA,EACA,4BAA4B;AACxB,WAAO,KAAK,gBAAgB,kBAAkB,EAAE,QAAQ,EAAE;AAAA,EAC9D;AAAA,EACA,yBAAyB;AACrB,UAAM,MAAM,IAAI,IAAI,SAAS,IAAI;AACjC,QAAI,CAAC,IAAI,UAAU;AAEf,aAAO;AAAA,IACX;AACA,WAAO,iBAAiB,IAAI,WAAW,IAAI;AAAA,EAC/C;AAAA,EACA,mBAAmB;AACf,QAAI,CAAC,KAAK,uBAAuB,GAAG;AAChC;AAAA,IACJ;AACA,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB,KAAK,0BAA0B;AACxD,QAAI,KAAK,mBAAmB;AACxB,WAAK,kBAAkB,KAAK,qBAAqB;AACjD,WAAK,uBAAuB,SAAS,cAAc,OAAO;AAC1D,WAAK,qBAAqB,YAAY;AACtC,WAAK,oBAAoB,SAAS,cAAc,GAAG;AACnD,WAAK,kBAAkB,OAAO,0EAA0E,KAAK,uBAAuB,CAAC;AACrI,WAAK,kBAAkB,QAAQ;AAC/B,WAAK,kBAAkB,KAAK;AAC5B,WAAK,kBAAkB,SAAS;AAChC,WAAK,kBAAkB,YAAY;AACnC,WAAK,kBAAkB,gBAAgB,aAAa,KAAK,oBAAoB,MAAM;AACnF,WAAK,oBAAoB,YAAY,KAAK,oBAAoB;AAC9D,WAAK,oBAAoB,YAAY,KAAK,iBAAiB;AAAA,IAC/D;AAAA,EACJ;AACJ;AAEA,SAAS,kBAAkB,eAAeZ,OAAM;AAC5C,QAAM,MAAM,cAAc,cAAc,aAAa;AACrD,QAAM,SAAS,IAAI,cAAc,QAAQ;AACzC,gBAAc,YAAY,MAAM;AAChC,QAAM,UAAU,OAA8B,QAAQ;AAAA,IAClD,MAAM;AAAA,IACN,SAAS;AAAA,MACL,qBAAqB;AAAA,IACzB;AAAA,IACA,WAAW,CAAC,YAAY,6BAA6B;AAAA,MACjD,OAAO,KAAK,IAAI,WAAW,OAAO,wBAAwB,KAAK;AAAA,MAC/D,QAAQ,KAAK,IAAI,WAAW,QAAQ,wBAAwB,MAAM;AAAA,IACtE;AAAA,EACJ,CAAC;AACD,UAAQ,oBAAoBA,KAAI;AAChC,SAAO;AACX;AACA,SAAS,cAAc,QAAQ;AAK3B,SAAO,QAAQ;AACf,SAAO,SAAS;AAChB,SAAO,WAAW,IAAI,GAAG,UAAU,GAAG,GAAG,GAAG,CAAC;AACjD;AAEA,SAAS,eAAe,UAAU,QAAQ,WAAW,aAAa;AAC9D,MAAI,SAAS,0BAA0B;AACnC,aAAS,yBAAyB,QAAQ,WAAW,WAAW;AAAA,EACpE;AACJ;AACA,SAAS,eAAe,UAAU,QAAQ,WAAW,aAAa;AAC9D,WAAS,eAAe,QAAQ,WAAW,WAAW;AAC1D;AACA,SAAS,gBAAgB,iBAAiB,gBAAgB,QAAQ,MAAM;AACpE,QAAM,QAAQ,gBAAgB,QAAQ,IAAI;AAC1C,aAAW,QAAQ,OAAO;AACtB,UAAM,WAAW,KAAK,mBAAmB,IAAI;AAC7C,QAAI,aAAa,MAAM;AACnB,qBAAe,QAAQ;AAAA,IAC3B;AAAA,EACJ;AACJ;AAEA,SAAS,cAAc,QAAQ;AAC3B,SAAO,OAAO,yBAAyB;AAC3C;AACA,SAAS,0BAA0B,QAAQ,cAAc;AACrD,SAAO,CAAC,WAAW;AACf,QAAI,CAAC,cAAc,MAAM,GAAG;AACxB,aAAO,CAAC;AAAA,IACZ;AACA,UAAM,OAAO,OAAO,qBAAqB,GAAG,aAAa,KAAK;AAC9D,QAAI,SAAS,cAAc;AAEvB,aAAO,CAAC;AAAA,IACZ;AACA,WAAO,OAAO,2BAA2B,MAAM,KAAK,CAAC;AAAA,EACzD;AACJ;AACA,SAAS,uBAAuB,OAAO,WAAW,aAAa,iBAAiB;AAC5E,MAAI,CAAC,MAAM,QAAQ;AACf;AAAA,EACJ;AACA,MAAI,oBAAoB;AACxB,QAAM,kBAAkB,MAAM,CAAC,EAAE,iBAAiB,iBAAiB,IAAI;AACvE,MAAI,0BAA0B,cAAc,IACtC,cAAc,KAAK,MAAM,CAAC,EAAE,6BAA6B,IAAI,kBAAkB,KAC/E,MAAM,CAAC,EAAE,6BAA6B,IAAI,kBAAkB,IAAI,cAAc;AACpF,4BAA0B,KAAK,IAAI,GAAG,uBAAuB;AAC7D,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,UAAM,OAAO,MAAM,CAAC;AACpB,UAAM,OAAO,MAAM,IAAI,CAAC;AACxB,UAAM,SAAS,KAAK,iBAAiB,iBAAiB,KAAK;AAC3D,UAAM,aAAa,KAAK,6BAA6B;AACrD,UAAM,sBAAsB,KAAK,6BAA6B;AAC9D,UAAM,UAAU,cAAc,IACxB,aAAa,sBAAsB,SACnC,aAAa,sBAAsB;AACzC,QAAI,SAAS;AACT,YAAM,kBAAkB,sBAAsB,SAAS;AACvD,WAAK,6BAA6B,eAAe;AACjD,YAAM,YAAY,kBAAkB,YAAY,SAAS;AACzD,YAAM,gBAAgB,cAAc,IAAI,YAAY,IAAI,YAAY;AACpE,UAAI,iBAAiB,0BAA0B,GAAG;AAE9C,cAAM,oBAAoB,cAAc,IAAI,KAAK,YAAY,YAAY;AACzE,cAAM,gBAAgB,KAAK,IAAI,mBAAmB,uBAAuB;AACzE,iBAAS,IAAI,mBAAmB,IAAI,MAAM,QAAQ,KAAK;AACnD,gBAAM,CAAC,EAAE,6BAA6B,MAAM,CAAC,EAAE,6BAA6B,IAAI,YAAY,aAAa;AAAA,QAC7G;AACA,mCAA2B;AAAA,MAC/B;AAAA,IACJ,OACK;AACD,0BAAoB;AACpB,gCAA0B,cAAc,IAClC,sBAAsB,SAAS,aAC/B,cAAc,sBAAsB;AAAA,IAC9C;AAAA,EACJ;AACJ;AACA,SAAS,gCAAgC,WAAW;AAChD,SAAO,UAAU,SAAS,KAAgC,UAAU,SAAS,WAAW,UAAU,SAAS;AAC/G;AACA,IAAM,kBAAN,MAAsB;AAAA,EAClB,YAAY,MAAM,SAAS,yBAAyB,MAAM;AACtD,SAAK,uBAAuB;AAC5B,SAAK,iBAAiB;AACtB,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB,IAAI,eAAe,GAAG;AAClD,SAAK,iBAAiB;AACtB,SAAK,6BAA6B;AAClC,SAAK,0BAA0B;AAC/B,SAAK,oDAAoD,MAAM;AAC3D,UAAI,KAAK,yBAAyB;AAC9B;AAAA,MACJ;AACA,WAAK,eAAe,gBAAgB,EAAE,gBAAgB,EAAE,sBAAsB;AAAA,IAClF;AACA,SAAK,uDAAuD,MAAM;AAC9D,UAAI,KAAK,yBAAyB;AAC9B;AAAA,MACJ;AACA,WAAK,eAAe,gBAAgB,EAAE,gBAAgB,EAAE,sBAAsB;AAAA,IAClF;AACA,SAAK,iBAAiB;AACtB,SAAK,oBAAoB;AACzB,SAAK,0BAA0B,QAAQ,QAAQ;AAC/C,SAAK,oCAAoC;AACzC,SAAK,mBAAmB,SAAS;AACjC,SAAK,4BAA4B,0BAA0B,UAAU,IAAI;AACzE,SAAK,+BAA+B,0BAA0B,OAAO,IAAI;AACzE,SAAK,kCAAkC,0BAA0B,UAAU,IAAI;AAC/E,SAAK,iBAAiB,SAAS,cAAc,KAAK;AAClD,SAAK,eAAe,MAAM,SAAS;AACnC,SAAK,eAAe,MAAM,WAAW;AACrC,SAAK,eAAe,MAAM,QAAQ;AAClC,SAAK,eAAe,MAAM,OAAO;AACjC,SAAK,eAAe,MAAM,WAAW;AACrC,SAAK,0BAA0B,kBAAkB,KAAK,gBAAgB,KAAO,EAAE,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC;AACvG,SAAK,wBAAwB,oCAAoC,KAAK,iDAAiD;AACvH,UAAM,SAAS,KAAK,wBAAwB;AAC5C,WAAO,MAAM,WAAW;AACxB,WAAO,MAAM,SAAS;AACtB,WAAO,MAAM,OAAO;AACpB,WAAO,MAAM,MAAM;AACnB,SAAK,6BAA6B,kBAAkB,KAAK,gBAAgB,KAAO,EAAE,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC;AAC1G,SAAK,2BAA2B,oCAAoC,KAAK,oDAAoD;AAC7H,UAAM,YAAY,KAAK,2BAA2B;AAClD,cAAU,MAAM,WAAW;AAC3B,cAAU,MAAM,SAAS;AACzB,cAAU,MAAM,OAAO;AACvB,cAAU,MAAM,MAAM;AACtB,UAAM,UAAU;AAAA,MACZ,0BAA0B,KAAK,yBAAyB,KAAK,IAAI;AAAA,MACjE,2BAA2B,KAAK,yBAAyB,KAAK,IAAI;AAAA,MAClE,iCAAiC,KAAK,gCAAgC,KAAK,IAAI;AAAA,MAC/E,0BAA0B,KAAK,gCAAgC,KAAK,IAAI;AAAA,MACxE,iCAAiC,KAAK,gCAAgC,KAAK,IAAI;AAAA,MAC/E,wBAAwB,KAAK,uBAAuB,KAAK,IAAI;AAAA,MAC7D,yBAAyB,KAAK,uBAAuB,KAAK,IAAI;AAAA,MAC9D,iCAAiC,KAAK,gCAAgC,KAAK,IAAI;AAAA,MAC/E,0BAA0B,KAAK,gCAAgC,KAAK,IAAI;AAAA,MACxE,2BAA2B,KAAK,0BAA0B,KAAK,IAAI;AAAA,MACnE,2BAA2B,KAAK,0BAA0B,KAAK,IAAI;AAAA,IACvE;AACA,SAAK,8BAA8B,IAAI,kBAAkB,KAAK,2BAA2B,eAAe,SAAS;AAAA,MAC7G,0CAA0C,MAAM,CAAC,KAAK,kBAAkB,cAAc,EAAE;AAAA,MACxF,0CAA0C,MAAM;AAAA,IACpD,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,SAAK,4BAA4B,kBAAkB;AACnD,SAAK,2BAA2B,sCAAsC,KAAK,oDAAoD;AAC/H,kBAAc,KAAK,2BAA2B,aAAa;AAC3D,SAAK,2BAA2B,QAAQ;AACxC,SAAK,wBAAwB,sCAAsC,KAAK,iDAAiD;AACzH,kBAAc,KAAK,wBAAwB,aAAa;AACxD,SAAK,wBAAwB,QAAQ;AACrC,QAAI,KAAK,yBAAyB,MAAM;AACpC,WAAK,qBAAqB,yBAAyB,EAAE,yBAAyB,IAAI;AAAA,IACtF;AACA,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAAA,EACA,4BAA4B;AACxB,UAAM,UAAU,KAAK,kCAAkC,kBAAkB;AACzE,UAAM,gBAAgB,KAAK,mBAAmB,QAAQ;AACtD,QAAI,eAAe;AACf,WAAK,qBAAqB,gBAAgB;AAC1C,WAAK,iBAAiB,QAAQ;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AAAA,EACA,yBAAyB;AACrB,QAAI,KAAK,yBAAyB,MAAM;AACpC,aAAO;AAAA,IACX;AACA,QAAI,mBAAmB;AACvB,UAAM,kBAAkB,KAAK,0BAA0B;AACvD,UAAM,MAAM,cAAc,KAAK,wBAAwB,cAAc,WAAW,MAAM;AAAA,MAClF,YAAY,KAAK,eAAe,gBAAgB,EAAE,kBAAkB,EAAE,OAAO;AAAA,IACjF,CAAC,CAAC;AACF,QAAI,KAAK;AACT,UAAM,YAAY,KAAK,qBAAqB,gBAAgB;AAC5D,QAAI,OAAO,KAAK,mBAAmB;AACnC,QAAI,UAAU,SAAS,GAAG;AACtB,yBAAmB,KAAK,IAAI,KAAK,qBAAqB,sBAAsB,KAAK,UAAU,CAAC,EAAE,eAAe,GAAG,KAAK,qBAAqB,sBAAsB,KAAK,UAAU,UAAU,SAAS,CAAC,EAAE,eAAe,CAAC;AAAA,IACzN;AACA,UAAM,QAAQ,KAAK,qBAAqB;AACxC,aAAS,IAAI,MAAM,QAAQ,OAAM;AAC7B,YAAM,QAAQ,KAAK,qBAAqB,sBAAsB,KAAK,MAAM,CAAC,EAAE,eAAe,CAAC;AAC5F,UAAI,QAAQ,kBAAkB;AAC1B,2BAAmB;AAAA,MACvB;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,qBAAqB,qBAAqB;AAClE,QAAI,eAAe,QACf,KAAK,mBAAmB,QACxB,gCAAgC,KAAK,kBAAkB,SAAS,GAAG;AACnE,YAAM,WAAW,KAAK,qBAAqB,4BAA4B,GAAG,UAAU;AACpF,YAAM,cAAc,KAAK,qBAAqB,4BAA4B,KAAK,eAAe,SAAS,GAAG,UAAU;AACpH,yBAAmB,KAAK,IAAI,kBAAkB,KAAK,qBAAqB,sBAAsB,KAAK,KAAK,qBAAqB,sBAAsB,KAAK,MAAM,KAAK,IAAI,UAAU,WAAW,CAAC,IAAI,kBAAkB,UAAU,CAAC,GAAG,KAAK,qBAAqB,sBAAsB,KAAK,KAAK,qBAAqB,sBAAsB,KAAK,KAAK,KAAK,IAAI,UAAU,WAAW,CAAC,IAAI,kBAAkB,UAAU,CAAC,CAAC;AAAA,IACrZ;AACA,QAAI,QAAQ;AACZ,UAAM,0BAA0B,oBAAoB;AACpD,UAAM,MAAM,KAAK,KAAK,gBAAgB,uBAClC,gBAAgB,uBAChB,gBAAgB,yBAChB,gBAAgB,yBAChB,IACA,uBAAuB;AAE3B,WAAO,uBAAuB,GAAG;AAAA,EACrC;AAAA,EACA,kBAAkB,SAAS;AACvB,QAAI,KAAK,mBAAmB,QAAQ,CAAC,WAAW,KAAK,gBAAgB,OAAO,GAAG;AAC3E,WAAK,iBAAiB;AACtB,WAAK,0BAA0B;AAC/B,WAAK,wBAAwB,oBAAoB,OAAO;AACxD,WAAK,2BAA2B,oBAAoB,OAAO;AAC3D,WAAK,0BAA0B;AAC/B,WAAK,eAAe,MAAM,QAAQ,GAAG,QAAQ,KAAK;AAClD,WAAK,eAAe,MAAM,SAAS,GAAG,QAAQ,MAAM;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,WAAO,cAAc,KAAK,cAAc,EAAE;AAAA,EAC9C;AAAA,EACA,wBAAwB,YAAY;AAChC,QAAI,KAAK,yBAAyB,YAAY;AAC1C;AAAA,IACJ;AACA,QAAI,KAAK,yBAAyB,MAAM;AACpC,WAAK,qBAAqB,yBAAyB,EAAE,yBAAyB,IAAI;AAAA,IACtF;AACA,SAAK,uBAAuB;AAC5B,eAAW,yBAAyB,EAAE,oBAAoB,KAAK,yBAAyB,KAAK,IAAI,GAAG,IAAI;AAAA,EAC5G;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB;AACd,UAAM,OAAO,KAAK,eAAe,gBAAgB;AACjD,UAAM,QAAQ,KAAK,eAAe,gBAAgB,EAAE,gBAAgB;AACpE,UAAM,0BAA0B,MAAM,cAAc,KAAK,qBAAqB,CAAC,CAAC;AAAA,EACpF;AAAA,EACA,gBAAgB,MAAM;AAClB,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AACA,UAAM,gBAAgB;AAAA,MAClB,YAAY,KAAK,eAAe,gBAAgB,EAAE,kBAAkB,EAAE,OAAO;AAAA,IACjF;AACA,QAAI,SAAS,GAAkC;AAC3C,WAAK,sBAAsB;AAC3B,WAAK,wBAAwB,yBAAyB;AACtD,YAAM,SAAS,iCAAiC,KAAK,yBAAyB,aAAa;AAC3F,UAAI,WAAW,MAAM;AACjB,eAAO,yBAAyB,CAAC,UAAU;AACvC,eAAK,yBAAyB,KAAK;AACnC,eAAK,qBAAqB,KAAK;AAAA,QACnC,CAAC;AACD,aAAK,eAAe,gCAAgC,QAAQ,KAAK,+BAA+B;AAChG,aAAK,wBAAwB,MAAM;AACnC,aAAK,eAAe,gCAAgC,QAAQ,KAAK,yBAAyB;AAC1F,aAAK,yBAAyB,MAAM;AAAA,MACxC;AAAA,IACJ;AACA,SAAK,2BAA2B,yBAAyB;AACzD,UAAM,YAAY,iCAAiC,KAAK,4BAA4B,aAAa;AACjG,QAAI,cAAc,MAAM;AACpB,gBAAU,yBAAyB,CAAC,EAAE,SAAS,KAAK,WAAW,MAAM;AACjE,YAAI,UAAU,GAAG,GAAG,WAAW,OAAO,WAAW,MAAM;AAAA,MAC3D,CAAC;AACD,WAAK,6BAA6B,SAAS;AAC3C,WAAK,eAAe,gCAAgC,WAAW,KAAK,4BAA4B;AAAA,IACpG;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAAA,EACA,qBAAqB,KAAK,GAAG,GAAG;AAC5B,UAAM,aAAa,KAAK,wBAAwB;AAChD,QAAI,WAAW,QAAQ,KAAK,WAAW,SAAS,GAAG;AAC/C,UAAI,UAAU,KAAK,wBAAwB,eAAe,GAAG,CAAC;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,mBAAmB;AAEf,SAAK,sBAAsB,gBAAgB;AAAA,EAC/C;AAAA,EACA,yBAAyB,GAAG;AACxB,QAAI,KAAK,yBAAyB,QAAQ,KAAK,qBAAqB,kBAAkB,KAAK,CAAC,KAAK,kBAAkB,aAAa,EAAE,qBAAqB,OAAO;AAC1J;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,eAAe,gBAAgB,EAAE,gBAAgB;AACpE,UAAM,OAAO,KAAK,eAAe,gBAAgB;AACjD,SAAK,sBAAsB;AAC3B,UAAM,0BAA0B,MAAM,KAAK,sBAAsB,EAAE,MAAM;AAAA,EAC7E;AAAA,EACA,gCAAgC,GAAG;AAC/B,QAAI,KAAK,yBAAyB,QAAQ,CAAC,KAAK,kBAAkB,aAAa,EAAE,qBAAqB,OAAO;AACzG;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,eAAe,gBAAgB,EAAE,gBAAgB;AACpE,UAAM,OAAO,KAAK,eAAe,gBAAgB;AACjD,UAAM,aAAa,KAAK;AACxB,UAAM,uBAAuB,MAAM,YAAY,EAAE,MAAM;AAAA,EAC3D;AAAA,EACA,kCAAkC;AAC9B,QAAI,KAAK,yBAAyB,QAAQ,CAAC,KAAK,kBAAkB,aAAa,EAAE,qBAAqB,OAAO;AACzG;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,eAAe,gBAAgB,EAAE,gBAAgB;AACpE,UAAM,OAAO,KAAK,eAAe,gBAAgB;AACjD,UAAM,aAAa,KAAK;AACxB,QAAI,KAAK,qBAAqB;AAC1B,WAAK,sBAAsB;AAC3B,YAAM,wBAAwB,MAAM,UAAU;AAAA,IAClD;AAAA,EACJ;AAAA,EACA,uBAAuB,GAAG;AACtB,QAAI,KAAK,yBAAyB,QAAQ,CAAC,KAAK,kBAAkB,aAAa,EAAE,qBAAqB,OAAO;AACzG;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,eAAe,gBAAgB,EAAE,gBAAgB;AACpE,UAAM,OAAO,KAAK,eAAe,gBAAgB;AACjD,SAAK,sBAAsB;AAC3B,UAAM,wBAAwB,MAAM,KAAK,oBAAoB;AAAA,EACjE;AAAA,EACA,gCAAgC,GAAG;AAC/B,QAAI,KAAK,kBAAkB,aAAa,EAAE,qBAAqB,OAAO;AAClE,WAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,0BAA0B,GAAG;AACzB,QAAI,KAAK,yBAAyB,MAAM;AACpC;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,eAAe,gBAAgB,EAAE,gBAAgB;AACpE,QAAI,MAAM,kBAAkB,EAAE,aAAa,EAAE,qBAAqB,SAAS,CAAC,KAAK,qBAAqB,uBAAuB,KAAK,CAAC,KAAK,qBAAqB,yBAAyB,GAAG;AACrL,WAAK;AAAA,QAAoB;AAAA;AAAA,MAA2B;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,0BAA0B,GAAG;AACzB,SAAK;AAAA,MAAoB;AAAA;AAAA,IAA0B;AAAA,EACvD;AAAA,EACA,uBAAuB;AACnB,UAAM,MAAM,CAAC;AACb,UAAM,aAAc,KAAK,yBAAyB,OAAQ,SAAY,KAAK;AAC3E,UAAM,qBAAqB,CAAC,YAAY;AACpC,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACrC,cAAM,SAAS,QAAQ,CAAC;AACxB,cAAM,QAAQ,OAAO,yBAAyB,KAAK,eAAe,gBAAgB,GAAG,UAAU;AAC/F,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,cAAI,KAAK,MAAM,CAAC,CAAC;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AAGA,uBAAmB,KAAK,eAAe,gBAAgB,EAAE,yBAAyB,CAAC;AACnF,WAAO;AAAA,EACX;AAAA,EACA,yBAAyB,EAAE,SAAS,KAAK,WAAW,GAAG;AACnD,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,QAAQ,KAAK,eAAe,gBAAgB,EAAE,gBAAgB;AACpE,UAAM,WAAW,MAAM,6BAA6B;AACpD,UAAM,cAAc,MAAM,gCAAgC;AAC1D,QAAI,aAAa,aAAa;AAC1B,gBAAU,KAAK,GAAG,GAAG,OAAO,QAAQ,QAAQ;AAAA,IAChD,OACK;AACD,4BAAsB,KAAK,GAAG,GAAG,OAAO,QAAQ,UAAU,WAAW;AAAA,IACzE;AAAA,EACJ;AAAA,EACA,qBAAqB,EAAE,SAAS,KAAK,YAAY,qBAAqB,GAAG;AACrE,QAAI,KAAK,mBAAmB,QAAQ,KAAK,yBAAyB,QAAQ,CAAC,KAAK,qBAAqB,kBAAkB,EAAE,eAAe;AACpI;AAAA,IACJ;AACA,QAAI,YAAY,KAAK,qBAAqB,kBAAkB,EAAE;AAC9D,UAAM,aAAa,KAAK,IAAI,GAAG,KAAK,MAAM,KAAK,0BAA0B,EAAE,uBAAuB,oBAAoB,CAAC;AACvH,QAAI;AACJ,QAAI,KAAK,kBAAkB;AACvB,aAAO,WAAW,QAAQ;AAAA,IAC9B,OACK;AACD,aAAO;AAAA,IACX;AACA,QAAI,SAAS,MAAM,GAAG,YAAY,WAAW,MAAM;AAAA,EACvD;AAAA,EACA,wBAAwB,QAAQ;AAC5B,QAAI,KAAK,mBAAmB,QAAQ,KAAK,yBAAyB,MAAM;AACpE;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,qBAAqB,gBAAgB;AAC5D,UAAM,oBAAoB,KAAK,qBAAqB,kBAAkB;AACtE,UAAM,kBAAkB,KAAK,0BAA0B;AACvD,UAAM,gBAAgB,KAAK,mBACtB,KAAK,eAAe,QAAQ,gBAAgB,uBAC7C;AACJ,QAAI,kBAAkB,iBAAiB,kBAAkB,cAAc;AACnE,aAAO,yBAAyB,CAAC,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,MAAM;AAC5F,YAAI,YAAY,kBAAkB;AAClC,cAAM,aAAa,KAAK,IAAI,GAAG,KAAK,MAAM,kBAAkB,CAAC;AAC7D,cAAM,aAAa,KAAK,MAAM,qBAAqB,GAAG;AACtD,cAAM,aAAa,KAAK,MAAM,gBAAgB,uBAAuB,oBAAoB;AACzF,YAAI,UAAU;AACd,mBAAW,YAAY,WAAW;AAC9B,cAAI,KAAK,KAAK,MAAM,gBAAgB,oBAAoB,GAAG,KAAK,MAAM,SAAS,kBAAkB,kBAAkB,IAAI,YAAY,YAAY,UAAU;AAAA,QAC7J;AACA,YAAI,KAAK;AAAA,MACb,CAAC;AAAA,IACL;AACA,WAAO,wBAAwB,CAAC,EAAE,SAAS,IAAI,MAAM;AACjD,UAAI,OAAO,KAAK,mBAAmB;AACnC,UAAI,YAAY,kBAAkB,aAAa,KAAK,wBAAwB;AAC5E,UAAI,YAAY,KAAK,mBAAmB,UAAU;AAClD,UAAI,eAAe;AACnB,YAAM,YAAY,KAAK,mBACnB,KAAK,MAAM,gBAAgB,gBAAgB,sBAAsB,IACjE,KAAK,MAAM,gBAAgB,gBAAgB,uBAAuB,gBAAgB,sBAAsB;AAC5G,YAAM,kBAAkB,UAAU,IAAI,CAAC,SAAS,KAAK,qBAAqB,yBAAyB,KAAK,KAAK,eAAe,CAAC;AAC7H,eAAS,IAAI,UAAU,QAAQ,OAAM;AACjC,cAAM,WAAW,UAAU,CAAC;AAC5B,YAAI,SAAS,SAAS,iBAAiB,WAAW,SAAS,kBAAkB,gBAAgB,CAAC,CAAC;AAAA,MACnG;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,wBAAwB;AACpB,QAAI,KAAK,mBAAmB,QAAQ,KAAK,yBAAyB,MAAM;AACpE;AAAA,IACJ;AACA,QAAI,SAAS,KAAK,eAAe,SAAS;AAC1C,UAAM,QAAQ,CAAC;AACf,UAAM,iBAAiB,KAAK,qBAAqB,yBAAyB,EAAE,MAAM;AAClF,UAAM,OAAO,KAAK;AAClB,UAAM,YAAY,KAAK,gBAAgB;AACvC,UAAM,kBAAkB,KAAK,0BAA0B;AAEvD,UAAM,YAAY,KAAK,yBAAyB,UAAU,mCAAmC;AAC7F,QAAI,WAAW;AACX,WAAK,eAAe,gBAAgB,EAAE,yBAAyB,EAAE,QAAQ,CAAC,WAAW;AACjF,YAAI,UAAU,oBAAoB,MAAM,GAAG;AACvC,yBAAe,KAAK,MAAM;AAAA,QAC9B;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,UAAM,eAAe,KAAK,qBAAqB,sBAAsB,EAAE,CAAC;AACxE,UAAM,aAAa,KAAK;AACxB,UAAM,mBAAmB,CAAC,YAAY;AAClC,cAAQ,QAAQ,CAAC,WAAW;AACxB,cAAM,cAAc,OAAO,yBAAyB,WAAW,UAAU;AAEzE,oBAAY,QAAQ,CAAC,SAAS;AAC1B,eAAK,6BAA6B,IAAI;AACtC,cAAI,KAAK,oBAAoB,GAAG;AAC5B,kBAAM,KAAK,IAAI;AAAA,UACnB;AAAA,QACJ,CAAC;AACD,YAAI,iBAAiB,UAAU,YAAY,SAAS,GAAG;AACnD,mBAAS,YAAY,CAAC,EAAE,qBAAqB;AAAA,QACjD;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,qBAAiB,cAAc;AAC/B,UAAM,QAAQ,CAAC,SAAS,KAAK,6BAA6B,KAAK,qBAAqB,CAAC,CAAC;AACtF,UAAM,UAAU,KAAK,qBAAqB,kBAAkB;AAC5D,QAAI,CAAC,QAAQ,aAAa;AACtB;AAAA,IACJ;AACA,SAAK,0BAA0B,OAAO,iBAAiB,MAAM;AAAA,EACjE;AAAA,EACA,0BAA0B,OAAO,iBAAiB,QAAQ;AACtD,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AAEA,UAAM,MAAM,MAAM,OAAO,CAAC,SAAS,KAAK,qBAAqB,KAAK,MAAM;AACxE,UAAM,SAAS,MAAM,OAAO,CAAC,SAAS,KAAK,qBAAqB,IAAI,MAAM;AAE1E,QAAI,KAAK,CAAC,GAAG,MAAM,EAAE,qBAAqB,IAAI,EAAE,qBAAqB,CAAC;AAEtE,QAAI,IAAI,UAAU,OAAO,QAAQ;AAC7B,aAAO,KAAK,IAAI,CAAC,CAAC;AAAA,IACtB;AACA,WAAO,KAAK,CAAC,GAAG,MAAM,EAAE,qBAAqB,IAAI,EAAE,qBAAqB,CAAC;AACzE,eAAW,QAAQ,OAAO;AACtB,YAAM,aAAa,KAAK,MAAM,KAAK,iBAAiB,eAAe,IAAI,CAAC;AACxE,YAAM,aAAa,KAAK,qBAAqB;AAC7C,UAAI,aAAa,CAAC,cAAc,aAAa,YAAY;AACrD,aAAK,6BAA6B,UAAU;AAAA,MAChD;AACA,UAAI,aAAc,KAAK,eAAe,SAAS,cAAe,aAAa,KAAK,eAAe,SAAS,YAAY;AAChH,aAAK,6BAA6B,KAAK,eAAe,SAAS,UAAU;AAAA,MAC7E;AAAA,IACJ;AACA,2BAAuB,KAAK,GAAG,KAAK,eAAe,QAAQ,eAAe;AAC1E,2BAAuB,QAAQ,IAAI,KAAK,eAAe,QAAQ,eAAe;AAAA,EAClF;AAAA,EACA,yBAAyB,QAAQ;AAC7B,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,qBAAqB;AACxC,UAAM,kBAAkB,KAAK,0BAA0B;AACvD,UAAM,QAAQ,KAAK,mBAAmB,UAAU;AAChD,UAAM,QAAQ,CAAC,SAAS;AACpB,UAAI,KAAK,6BAA6B,GAAG;AACrC,cAAM,WAAW,KAAK,mBAAmB,cAAc,KAAK,oBAAoB,CAAC;AACjF,iBAAS,eAAe,QAAQ,iBAAiB,KAAK,sBAAsB,KAAK;AAAA,MACrF;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,6BAA6B,QAAQ;AACjC,QAAI,KAAK,mBAAmB,QAAQ,KAAK,yBAAyB,MAAM;AACpE;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,eAAe,gBAAgB,EAAE,gBAAgB;AACpE,UAAM,QAAQ,CAAC;AACf,UAAM,OAAO,KAAK,eAAe,gBAAgB;AACjD,UAAM,IAAI,MAAM,0BAA0B,EAAE,yBAAyB,MAAM,KAAK,oBAAoB;AACpG,QAAI,EAAE,QAAQ;AACV,YAAM,KAAK,CAAC;AAAA,IAChB;AACA,UAAM,KAAK,KAAK,0BAA0B;AAC1C,UAAM,QAAQ,KAAK,mBAAmB,UAAU;AAChD,UAAM,QAAQ,CAAC,QAAQ;AACnB,UAAI,QAAQ,CAAC,SAAS;AAClB,aAAK,mBAAmB,cAAc,KAAK,oBAAoB,CAAC,EAAE,eAAe,QAAQ,IAAI,KAAK,sBAAsB,KAAK;AAAA,MACjI,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB,MAAM;AACtB,SAAK,eAAe,MAAM,SAAS,SAAS,IAA8B,cAAc;AAAA,EAC5F;AAAA,EACA,2BAA2B;AACvB,UAAM,QAAQ,KAAK,uBAAuB;AAG1C,QAAI,KAAK,6BAA6B,OAAO;AACzC,WAAK,eAAe,gBAAgB,EAAE,gBAAgB,EAAE,qBAAqB;AAAA,IACjF;AACA,SAAK,6BAA6B;AAAA,EACtC;AAAA,EACA,qBAAqB;AACjB,WAAO,SAAS,KAAK,wBAAwB,UAAU,KAAK,wBAAwB,UAAU;AAAA,EAClG;AACJ;AAEA,SAAS,wBAAwB,QAAQ,MAAM;AAC3C,SAAO,OAAO,4BAA4B,IAAI,KAAK,CAAC;AACxD;AACA,SAAS,kBAAkB,QAAQ,MAAM;AACrC,SAAO,OAAO,sBAAsB,IAAI,KAAK,CAAC;AAClD;AACA,SAAS,qBAAqB,QAAQ,MAAM;AACxC,SAAO,OAAO,2BAA2B,IAAI,KAAK,CAAC;AACvD;AACA,SAAS,qBAAqB,QAAQ,MAAM;AACxC,SAAO,OAAO,yBAAyB,IAAI,KAAK,CAAC;AACrD;AACA,IAAM,aAAN,MAAM,YAAW;AAAA,EACb,YAAY,OAAO,OAAO;AACtB,SAAK,iBAAiB,KAAO,EAAE,OAAO,GAAG,QAAQ,EAAE,CAAC;AACpD,SAAK,gCAAgC;AACrC,SAAK,iCAAiC;AACtC,SAAK,kCAAkC;AACvC,SAAK,8BAA8B;AACnC,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB,IAAI,SAAS;AACtC,SAAK,uBAAuB,IAAI,SAAS;AACzC,SAAK,2BAA2B;AAChC,SAAK,oBAAoB;AACzB,SAAK,4BAA4B;AACjC,SAAK,sCAAsC;AAC3C,SAAK,kCAAkC;AACvC,SAAK,6BAA6B;AAClC,SAAK,0BAA0B;AAC/B,SAAK,oDAAoD,MAAM;AAC3D,UAAI,KAAK,2BAA2B,KAAK,oBAAoB,MAAM;AAC/D;AAAA,MACJ;AACA,WAAK,gBAAgB,EAAE,sBAAsB;AAAA,IACjD;AACA,SAAK,uDAAuD,MAAM;AAC9D,UAAI,KAAK,2BAA2B,KAAK,oBAAoB,MAAM;AAC/D;AAAA,MACJ;AACA,WAAK,gBAAgB,EAAE,sBAAsB;AAAA,IACjD;AACA,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,gBAAgB,sBAAsB,EAAE,oBAAoB,KAAK,2BAA2B,KAAK,IAAI,GAAG,MAAM,IAAI;AACvH,SAAK,qBAAqB,SAAS,cAAc,IAAI;AACrD,SAAK,mBAAmB,MAAM,UAAU;AACxC,SAAK,mBAAmB,MAAM,WAAW;AACzC,UAAM,cAAc,SAAS,cAAc,KAAK;AAChD,gBAAY,MAAM,QAAQ;AAC1B,gBAAY,MAAM,SAAS;AAC3B,gBAAY,MAAM,WAAW;AAC7B,gBAAY,MAAM,WAAW;AAC7B,SAAK,yBAAyB,SAAS,cAAc,IAAI;AACzD,SAAK,uBAAuB,MAAM,UAAU;AAC5C,SAAK,0BAA0B,SAAS,cAAc,IAAI;AAC1D,SAAK,wBAAwB,MAAM,UAAU;AAC7C,SAAK,mBAAmB,YAAY,WAAW;AAC/C,SAAK,0BAA0B,kBAAkB,aAAa,KAAO,EAAE,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC;AAC/F,SAAK,wBAAwB,oCAAoC,KAAK,iDAAiD;AACvH,UAAM,SAAS,KAAK,wBAAwB;AAC5C,WAAO,MAAM,WAAW;AACxB,WAAO,MAAM,SAAS;AACtB,WAAO,MAAM,OAAO;AACpB,WAAO,MAAM,MAAM;AACnB,SAAK,6BAA6B,kBAAkB,aAAa,KAAO,EAAE,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC;AAClG,SAAK,2BAA2B,oCAAoC,KAAK,oDAAoD;AAC7H,UAAM,YAAY,KAAK,2BAA2B;AAClD,cAAU,MAAM,WAAW;AAC3B,cAAU,MAAM,SAAS;AACzB,cAAU,MAAM,OAAO;AACvB,cAAU,MAAM,MAAM;AACtB,SAAK,uBAAuB,SAAS,cAAc,IAAI;AACvD,SAAK,qBAAqB,YAAY,KAAK,sBAAsB;AACjE,SAAK,qBAAqB,YAAY,KAAK,kBAAkB;AAC7D,SAAK,qBAAqB,YAAY,KAAK,uBAAuB;AAClE,SAAK,uCAAuC;AAC5C,SAAK,8BAA8B,IAAI,kBAAkB,KAAK,2BAA2B,eAAe,MAAM;AAAA,MAC1G,0CAA0C,MAAM,KAAK,8BAA8B,QAAQ,CAAC,KAAK,gBAAgB,kBAAkB,EAAE,cAAc,EAAE;AAAA,MACrJ,0CAA0C,MAAM,KAAK,8BAA8B,QAAQ,CAAC,KAAK,gBAAgB,kBAAkB,EAAE,cAAc,EAAE;AAAA,IACzJ,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,QAAI,KAAK,kCAAkC,MAAM;AAC7C,WAAK,8BAA8B,kBAAkB;AAAA,IACzD;AACA,QAAI,KAAK,mCAAmC,MAAM;AAC9C,WAAK,+BAA+B,kBAAkB;AAAA,IAC1D;AACA,SAAK,kCAAkC;AACvC,SAAK,2BAA2B,sCAAsC,KAAK,oDAAoD;AAC/H,kBAAc,KAAK,2BAA2B,aAAa;AAC3D,SAAK,2BAA2B,QAAQ;AACxC,SAAK,wBAAwB,sCAAsC,KAAK,iDAAiD;AACzH,kBAAc,KAAK,wBAAwB,aAAa;AACxD,SAAK,wBAAwB,QAAQ;AACrC,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,gBAAgB,sBAAsB,EAAE,yBAAyB,IAAI;AAC1E,WAAK,gBAAgB,kBAAkB;AAAA,IAC3C;AACA,SAAK,4BAA4B,kBAAkB;AAAA,EACvD;AAAA,EACA,kBAAkB;AACd,WAAO,cAAc,KAAK,eAAe;AAAA,EAC7C;AAAA,EACA,mBAAmB,MAAM;AACrB,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,gBAAgB,sBAAsB,EAAE,yBAAyB,IAAI;AAAA,IAC9E;AACA,SAAK,kBAAkB;AACvB,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,gBAAgB,sBAAsB,EAAE,oBAAoB,YAAW,UAAU,2BAA2B,KAAK,IAAI,GAAG,MAAM,IAAI;AAAA,IAC3I;AACA,SAAK,uCAAuC;AAC5C,QAAI,KAAK,gBAAgB,sBAAsB,EAAE,QAAQ,IAAI,MAAM,KAAK,gBAAgB,sBAAsB,EAAE,SAAS,GAAG;AACxH,WAAK,kCAAkC,KAAK,mCAAmC,IAAI,sBAAsB,KAAK,oBAAoB,KAAK,eAAe;AACtJ,WAAK,gCAAgC,iBAAiB;AAAA,IAC1D,OACK;AACD,WAAK,iCAAiC,wBAAwB;AAC9D,WAAK,kCAAkC;AAAA,IAC3C;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,yCAAyC;AACrC,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,SAAK,mCAAmC;AACxC,QAAI,KAAK,gBAAgB,EAAE,mBAAmB,EAAE,WAAW,GAAG;AAC1D;AAAA,IACJ;AACA,QAAI,KAAK,kCAAkC,MAAM;AAC7C,YAAM,iBAAiB,KAAK,gBAAgB,yBAAyB;AACrE,WAAK,8BAA8B,wBAAwB,cAAc,cAAc,CAAC;AAAA,IAC5F;AACA,QAAI,KAAK,mCAAmC,MAAM;AAC9C,YAAM,kBAAkB,KAAK,gBAAgB,0BAA0B;AACvE,WAAK,+BAA+B,wBAAwB,cAAc,eAAe,CAAC;AAAA,IAC9F;AAAA,EACJ;AAAA,EACA,mCAAmC;AAC/B,QAAI,KAAK,kCAAkC,MAAM;AAC7C,WAAK,8BAA8B,iBAAiB;AAAA,IACxD;AACA,QAAI,KAAK,mCAAmC,MAAM;AAC9C,WAAK,+BAA+B,iBAAiB;AAAA,IACzD;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK,oBAAoB,OAAO,KAAK,gBAAgB,wBAAwB,IAAI;AAAA,EAC5F;AAAA,EACA,2BAA2B,eAAe;AACtC,QAAI,KAAK,iBAAiB;AACtB,WAAK,gBAAgB,2BAA2B,aAAa;AAAA,IACjE;AAAA,EACJ;AAAA,EACA,0BAA0B,OAAO;AAC7B,QAAI,CAAC,KAAK,iBAAiB;AACvB;AAAA,IACJ;AACA,SAAK,uBAAuB;AAC5B,UAAM,IAAI,MAAM;AAChB,UAAM,IAAI,MAAM;AAChB,SAAK,+BAA+B,GAAG,GAAG,KAAK;AAAA,EACnD;AAAA,EACA,yBAAyB,OAAO;AAC5B,SAAK,uBAAuB;AAC5B,SAAK,8BAA8B;AACnC,SAAK,+BAA+B,MAAM,QAAQ,MAAM,QAAQ,KAAK;AAAA,EACzE;AAAA,EACA,yBAAyB,OAAO;AAC5B,QAAI,CAAC,KAAK,iBAAiB;AACvB;AAAA,IACJ;AACA,SAAK,uBAAuB;AAC5B,UAAM,IAAI,MAAM;AAChB,UAAM,IAAI,MAAM;AAChB,SAAK,+BAA+B,GAAG,GAAG,KAAK;AAAA,EACnD;AAAA,EACA,0BAA0B,OAAO;AAC7B,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,SAAK,uBAAuB;AAC5B,SAAK,8BAA8B,KAAK;AAAA,EAC5C;AAAA,EACA,gCAAgC,OAAO;AACnC,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,SAAK,iCAAiC,KAAK,sBAAsB,KAAK;AAAA,EAC1E;AAAA,EACA,yBAAyB,OAAO;AAC5B,SAAK,gCAAgC,KAAK;AAAA,EAC9C;AAAA,EACA,gCAAgC,OAAO;AACnC,SAAK,uBAAuB;AAC5B,SAAK,qCAAqC,KAAK;AAC/C,SAAK,+BAA+B,MAAM,QAAQ,MAAM,QAAQ,KAAK;AAAA,EACzE;AAAA,EACA,uBAAuB,OAAO;AAC1B,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,SAAK,uBAAuB;AAC5B,SAAK,oBAAoB;AACzB,SAAK,oBAAoB,KAAK;AAAA,EAClC;AAAA,EACA,mBAAmB,OAAO;AACtB,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,SAAK,8BAA8B,KAAK;AAAA,EAC5C;AAAA,EACA,uBAAuB,OAAO;AAC1B,SAAK,oBAAoB;AACzB,QAAI,KAAK,8BAA8B,MAAM;AACzC,YAAM,QAAQ,EAAE,GAAG,MAAM,QAAQ,GAAG,MAAM,OAAO;AACjD,WAAK,4BAA4B,OAAO,OAAO,KAAK;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,0BAA0B,OAAO;AAC7B,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,SAAK,uBAAuB;AAC5B,SAAK,gBAAgB,gBAAgB,EAAE,2BAA2B,IAAI;AACtE,SAAK,iCAAiC;AAAA,EAC1C;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,4BAA4B;AACxB,SAAK,2BAA2B;AAChC,SAAK,gBAAgB,EAAE,iCAAiC;AAAA,EAC5D;AAAA,EACA,qBAAqB,aAAa,OAAO;AACrC,QAAI,CAAC,KAAK,gBAAgB,kBAAkB,EAAE,aAAa,EAAE,OAAO;AAChE;AAAA,IACJ;AACA,UAAM,aAAa,QAAQ,KAAK,4BAA4B;AAC5D,SAAK,2BAA2B;AAChC,SAAK,gBAAgB,EAAE,mBAAmB,YAAY,aAAa,SAAS;AAAA,EAChF;AAAA,EACA,0BAA0B,OAAO;AAC7B,SAAK,oBAAoB;AACzB,SAAK,sCAAsC,KAAK,8BAA8B;AAC9E,SAAK,8BAA8B;AACnC,UAAM,YAAY,KAAK,gBAAgB,EAAE,0BAA0B;AACnE,QAAI,KAAK,8BAA8B,QAAQ,UAAU,kBAAkB,GAAG;AAC1E,WAAK,kCAAkC,EAAE,GAAG,UAAU,mBAAmB,GAAG,GAAG,UAAU,mBAAmB,EAAE;AAC9G,WAAK,4BAA4B,EAAE,GAAG,MAAM,QAAQ,GAAG,MAAM,OAAO;AAAA,IACxE;AAAA,EACJ;AAAA,EACA,yBAAyB,OAAO;AAC5B,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,UAAM,IAAI,MAAM;AAChB,UAAM,IAAI,MAAM;AAChB,QAAI,KAAK,8BAA8B,MAAM;AAEzC,WAAK,sCAAsC;AAC3C,YAAM,YAAY,cAAc,KAAK,+BAA+B;AACpE,YAAM,OAAO,UAAU,KAAK,IAAI,KAAK,0BAA0B;AAC/D,YAAM,OAAO,UAAU,KAAK,IAAI,KAAK,0BAA0B;AAC/D,WAAK,+BAA+B,MAAM,MAAM,KAAK;AACrD;AAAA,IACJ;AACA,SAAK,qCAAqC,KAAK;AAAA,EACnD;AAAA,EACA,wBAAwB,OAAO;AAC3B,QAAI,KAAK,gBAAgB,EAAE,kBAAkB,EAAE,aAAa,aAAa,GAAyC;AAC9G,WAAK,sCAAsC;AAAA,IAC/C;AACA,SAAK,8BAA8B;AACnC,SAAK,oBAAoB,KAAK;AAAA,EAClC;AAAA,EACA,kBAAkB,GAAG,GAAG;AACpB,UAAM,QAAQ,KAAK;AACnB,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,IACX;AACA,WAAO,YAAY,OAAO,GAAG,CAAC;AAAA,EAClC;AAAA,EACA,2BAA2B,OAAO,UAAU;AACxC,UAAM,kBAAkB,aAAa,SAAS,KAAK,gCAAgC,KAAK;AACxF,kBAAc,eAAe,EAAE,kBAAkB,KAAO,EAAE,OAAO,QAAQ,KAAK,eAAe,OAAO,CAAC,CAAC;AAAA,EAC1G;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB,SAAS;AACvB,QAAI,WAAW,KAAK,gBAAgB,OAAO,GAAG;AAC1C;AAAA,IACJ;AACA,SAAK,iBAAiB;AACtB,SAAK,0BAA0B;AAC/B,SAAK,wBAAwB,oBAAoB,OAAO;AACxD,SAAK,2BAA2B,oBAAoB,OAAO;AAC3D,SAAK,0BAA0B;AAC/B,SAAK,mBAAmB,MAAM,QAAQ,QAAQ,QAAQ;AACtD,SAAK,mBAAmB,MAAM,SAAS,QAAQ,SAAS;AAAA,EAC5D;AAAA,EACA,mCAAmC;AAC/B,UAAM,OAAO,cAAc,KAAK,eAAe;AAC/C,SAAK,gCAAgC,KAAK,yBAAyB,CAAC;AACpE,SAAK,gCAAgC,KAAK,0BAA0B,CAAC;AACrE,eAAW,UAAU,KAAK,sBAAsB,GAAG;AAC/C,UAAI,KAAK,oBAAoB,MAAM,GAAG;AAClC,cAAM,aAAa,OAAO,qBAAqB;AAC/C,YAAI,eAAe,MAAM;AACrB,eAAK,gCAAgC,UAAU;AAAA,QACnD;AAGA,eAAO,yBAAyB;AAAA,MACpC;AAAA,IACJ;AACA,eAAW,aAAa,KAAK,qBAAqB,GAAG;AACjD,gBAAU,yBAAyB;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAAA,EACA,qBAAqB,KAAK,GAAG,GAAG;AAC5B,UAAM,aAAa,KAAK,wBAAwB;AAChD,QAAI,WAAW,QAAQ,KAAK,WAAW,SAAS,GAAG;AAC/C,UAAI,UAAU,KAAK,wBAAwB,eAAe,GAAG,CAAC;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,gBAAgB,MAAM;AAClB,QAAI,SAAS,GAAgC;AACzC;AAAA,IACJ;AACA,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,QAAI,OAAO,GAAkC;AACzC,WAAK,iCAAiC;AAAA,IAC1C;AACA,QAAI,KAAK,kCAAkC,MAAM;AAC7C,WAAK,8BAA8B,gBAAgB,IAAI;AAAA,IAC3D;AACA,QAAI,KAAK,mCAAmC,MAAM;AAC9C,WAAK,+BAA+B,gBAAgB,IAAI;AAAA,IAC5D;AACA,UAAM,gBAAgB;AAAA,MAClB,YAAY,KAAK,gBAAgB,kBAAkB,EAAE,OAAO;AAAA,IAChE;AACA,QAAI,SAAS,GAAkC;AAC3C,WAAK,wBAAwB,yBAAyB;AACtD,YAAM,SAAS,iCAAiC,KAAK,yBAAyB,aAAa;AAC3F,UAAI,WAAW,MAAM;AACjB,eAAO,yBAAyB,CAAC,UAAU;AACvC,eAAK,yBAAyB,KAAK;AAAA,QACvC,CAAC;AACD,YAAI,KAAK,iBAAiB;AACtB,eAAK,sBAAsB,QAAQ,uBAAuB;AAC1D,eAAK,mBAAmB,MAAM;AAC9B,eAAK,sBAAsB,QAAQ,iBAAiB;AACpD,eAAK,sBAAsB,QAAQ,oBAAoB;AAAA,QAC3D;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,2BAA2B,yBAAyB;AACzD,UAAM,YAAY,iCAAiC,KAAK,4BAA4B,aAAa;AACjG,QAAI,cAAc,MAAM;AACpB,gBAAU,yBAAyB,CAAC,EAAE,SAAS,KAAK,WAAW,MAAM;AACjE,YAAI,UAAU,GAAG,GAAG,WAAW,OAAO,WAAW,MAAM;AAAA,MAC3D,CAAC;AACD,WAAK,wBAAwB,SAAS;AACtC,WAAK,sBAAsB,WAAW,oBAAoB;AAC1D,WAAK,sBAAsB,WAAW,oBAAoB;AAAA,IAC9D;AAAA,EACJ;AAAA,EACA,gCAAgC;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,iCAAiC;AAC7B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,gCAAgC,QAAQ,iBAAiB;AACrD,SAAK,sBAAsB,QAAQ,eAAe;AAAA,EACtD;AAAA,EACA,6BAA6B;AACzB,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,gBAAgB,sBAAsB,EAAE,yBAAyB,IAAI;AAAA,IAC9E;AACA,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,8BAA8B,OAAO;AACjC,SAAK,iCAAiC,KAAK,mBAAmB,KAAK;AAAA,EACvE;AAAA,EACA,iCAAiC,UAAU,OAAO;AAC9C,UAAM,IAAI,MAAM;AAChB,UAAM,IAAI,MAAM;AAChB,QAAI,SAAS,uBAAuB,GAAG;AACnC,eAAS,eAAe,KAAK,gBAAgB,EAAE,oBAAoB,EAAE,4BAA4B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,KAAK;AAAA,IACxH;AAAA,EACJ;AAAA,EACA,yBAAyB,EAAE,SAAS,KAAK,WAAW,GAAG;AACnD,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,QAAQ,KAAK,gBAAgB;AACnC,UAAM,WAAW,MAAM,6BAA6B;AACpD,UAAM,cAAc,MAAM,gCAAgC;AAC1D,QAAI,aAAa,aAAa;AAC1B,gBAAU,KAAK,GAAG,GAAG,OAAO,QAAQ,WAAW;AAAA,IACnD,OACK;AACD,4BAAsB,KAAK,GAAG,GAAG,OAAO,QAAQ,UAAU,WAAW;AAAA,IACzE;AAAA,EACJ;AAAA,EACA,mBAAmB,QAAQ;AACvB,UAAM,QAAQ,cAAc,KAAK,eAAe;AAChD,UAAM,WAAW,MAAM,eAAe,EAAE,mBAAmB;AAC3D,UAAM,WAAW,SAAS,mBAAmB,KAAK;AAClD,QAAI,aAAa,MAAM;AACnB,eAAS,eAAe,QAAQ,KAAK;AAAA,IACzC;AAAA,EACJ;AAAA,EACA,wBAAwB,QAAQ;AAC5B,SAAK,yBAAyB,QAAQ,mBAAmB,gBAAgB,KAAK,gBAAgB,EAAE,0BAA0B,CAAC;AAAA,EAC/H;AAAA,EACA,sBAAsB,QAAQ,iBAAiB;AAC3C,UAAM,QAAQ,cAAc,KAAK,eAAe;AAChD,UAAM,UAAU,MAAM,yBAAyB;AAC/C,UAAM,iBAAiB,MAAM,qBAAqB;AAClD,eAAW,iBAAiB,gBAAgB;AACxC,WAAK,yBAAyB,QAAQ,iBAAiB,gBAAgB,aAAa;AAAA,IACxF;AACA,eAAW,UAAU,SAAS;AAC1B,WAAK,yBAAyB,QAAQ,iBAAiB,gBAAgB,MAAM;AAAA,IACjF;AACA,eAAW,iBAAiB,gBAAgB;AACxC,WAAK,yBAAyB,QAAQ,iBAAiB,gBAAgB,aAAa;AAAA,IACxF;AACA,eAAW,UAAU,SAAS;AAC1B,WAAK,yBAAyB,QAAQ,iBAAiB,gBAAgB,MAAM;AAAA,IACjF;AAAA,EACJ;AAAA,EACA,yBAAyB,QAAQ,iBAAiB,QAAQ,QAAQ;AAC9D,UAAM,QAAQ,cAAc,KAAK,eAAe;AAChD,UAAM,gBAAgB,MAAM,gBAAgB,EAAE,wBAAwB;AACtE,UAAM,YAAY,kBAAkB,QAAQ,cAAc,qBAAqB;AAC/E,UAAM,UAAU,kBAAkB,QAAQ,aAAa,cAAc,qBAAqB,SACpF,cAAc,iBAAiB,wBAC/B;AACN,UAAM,iBAAiB,CAAC,aAAa,OAAO,UAAU,QAAQ,WAAW,OAAO;AAChF,oBAAgB,iBAAiB,gBAAgB,QAAQ,KAAK;AAAA,EAClE;AAAA,EACA,qCAAqC;AACjC,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK;AACnB,UAAM,kBAAkB,KAAK,gBAAgB,yBAAyB,EAAE,kBAAkB,EAAE;AAC5F,UAAM,mBAAmB,KAAK,gBAAgB,0BAA0B,EAAE,kBAAkB,EAAE;AAC9F,QAAI,CAAC,mBAAmB,KAAK,kCAAkC,MAAM;AACjE,WAAK,uBAAuB,YAAY,KAAK,8BAA8B,qBAAqB,CAAC;AACjG,WAAK,8BAA8B,kBAAkB;AACrD,WAAK,gCAAgC;AAAA,IACzC;AACA,QAAI,CAAC,oBAAoB,KAAK,mCAAmC,MAAM;AACnE,WAAK,wBAAwB,YAAY,KAAK,+BAA+B,qBAAqB,CAAC;AACnG,WAAK,+BAA+B,kBAAkB;AACtD,WAAK,iCAAiC;AAAA,IAC1C;AACA,UAAM,0BAA0B,MAAM,gBAAgB,EAAE,kCAAkC;AAC1F,QAAI,mBAAmB,KAAK,kCAAkC,MAAM;AAChE,WAAK,gCAAgC,IAAI,gBAAgB,MAAM,MAAM,kBAAkB,GAAG,yBAAyB,MAAM;AACzH,WAAK,uBAAuB,YAAY,KAAK,8BAA8B,qBAAqB,CAAC;AAAA,IACrG;AACA,QAAI,oBAAoB,KAAK,mCAAmC,MAAM;AAClE,WAAK,iCAAiC,IAAI,gBAAgB,MAAM,MAAM,kBAAkB,GAAG,yBAAyB,OAAO;AAC3H,WAAK,wBAAwB,YAAY,KAAK,+BAA+B,qBAAqB,CAAC;AAAA,IACvG;AAAA,EACJ;AAAA,EACA,wBAAwB,OAAO;AAC3B,WAAO,MAAM,qBAAqB,KAAK,qBAAqB,KAAK,8BAA8B;AAAA,EACnG;AAAA,EACA,wBAAwB,GAAG;AACvB,WAAO,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,eAAe,QAAQ,CAAC,CAAC;AAAA,EACjE;AAAA,EACA,wBAAwB,GAAG;AACvB,WAAO,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,eAAe,SAAS,CAAC,CAAC;AAAA,EAClE;AAAA,EACA,+BAA+B,GAAG,GAAG,OAAO;AACxC,SAAK,gBAAgB,EAAE,oCAAoC,KAAK,wBAAwB,CAAC,GAAG,KAAK,wBAAwB,CAAC,GAAG,OAAO,cAAc,KAAK,eAAe,CAAC;AAAA,EAC3K;AAAA,EACA,mCAAmC;AAC/B,SAAK,gBAAgB,EAAE,+BAA+B;AAAA,EAC1D;AAAA,EACA,gCAAgC;AAC5B,QAAI,KAAK,qCAAqC;AAC1C,WAAK,4BAA4B;AACjC,WAAK,iCAAiC;AAAA,IAC1C;AAAA,EACJ;AAAA,EACA,4BAA4B,iBAAiB,mBAAmB,OAAO;AACnE,SAAK,4BAA4B;AACjC,SAAK,sCAAsC;AAC3C,SAAK,+BAA+B,kBAAkB,GAAG,kBAAkB,GAAG,KAAK;AACnF,UAAM,YAAY,KAAK,gBAAgB,EAAE,0BAA0B;AACnE,SAAK,kCAAkC,EAAE,GAAG,UAAU,mBAAmB,GAAG,GAAG,UAAU,mBAAmB,EAAE;AAAA,EAClH;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK,gBAAgB,gBAAgB;AAAA,EAChD;AAAA,EACA,oBAAoB,OAAO;AACvB,QAAI,CAAC,KAAK,uBAAuB;AAC7B;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,gBAAgB;AACnC,UAAM,QAAQ,KAAK,gBAAgB;AACnC,UAAM,yBAAyB,OAAO,MAAM,4BAA4B,CAAC;AACzE,SAAK,8BAA8B;AACnC,SAAK,wBAAwB;AAC7B,UAAM,wBAAwB;AAC9B,QAAI,KAAK,+BAA+B,MAAM;AAC1C,YAAM,qBAAqB,YAAY,IAAI;AAC3C,YAAM,YAAY,MAAM,oBAAoB;AAC5C,WAAK,2BAA2B,gBAAgB,UAAU,sBAAsB,GAAG,kBAAkB;AACrG,UAAI,CAAC,KAAK,2BAA2B,mBAAmB,kBAAkB,GAAG;AACzE,cAAM,gCAAgC,KAAK,0BAA0B;AAAA,MACzE;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,yBAAyB;AACrB,SAAK,4BAA4B;AAAA,EACrC;AAAA,EACA,gCAAgC;AAC5B,QAAI,CAAC,KAAK,iBAAiB;AACvB;AAAA,IACJ;AACA,SAAK,gBAAgB,EAAE,iCAAiC;AACxD,QAAI,SAAS,kBAAkB,SAAS,QAAQ,SAAS,kBAAkB,SAAS,iBAAiB;AAEjG,oBAAc,SAAS,aAAa,EAAE,KAAK;AAAA,IAC/C,OACK;AAED,YAAM,YAAY,SAAS,aAAa;AACxC,UAAI,cAAc,MAAM;AACpB,kBAAU,gBAAgB;AAAA,MAC9B;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,gBAAgB,4BAA4B;AACpE,QAAI,WAAW,kBAAkB,KAAK,KAAK,gBAAgB,EAAE,oBAAoB,EAAE,kBAAkB,GAAG;AACpG;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,qCAAqC,OAAO;AACxC,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,gBAAgB;AACnC,UAAM,YAAY,MAAM,oBAAoB;AAC5C,QAAI,UAAU,kBAAkB,GAAG;AAC/B;AAAA,IACJ;AACA,UAAM,eAAe,KAAK,gBAAgB,kBAAkB;AAC5D,UAAM,gBAAgB,aAAa,cAAc;AACjD,UAAM,uBAAuB,aAAa;AAC1C,SAAK,CAAC,cAAc,oBAAoB,MAAM,uBACzC,CAAC,cAAc,iBAAiB,CAAC,cAAc,iBAAiB,CAAC,MAAM,oBAAoB;AAC5F;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,gBAAgB,4BAA4B;AACpE,UAAM,MAAM,YAAY,IAAI;AAC5B,QAAI,KAAK,gCAAgC,QAAQ,CAAC,KAAK,wBAAwB,KAAK,GAAG;AACnF,WAAK,8BAA8B;AAAA,QAC/B,GAAG,MAAM;AAAA,QACT,GAAG,MAAM;AAAA,QACT,qBAAqB;AAAA,QACrB,kBAAkB,MAAM;AAAA,QACxB,kBAAkB,MAAM;AAAA,MAC5B;AAAA,IACJ;AACA,QAAI,KAAK,gCAAgC,QACrC,CAAC,KAAK,0BACL,KAAK,4BAA4B,MAAM,MAAM,WAAW,KAAK,4BAA4B,MAAM,MAAM,UAAU;AAChH,UAAI,MAAM,qBAAqB,qBAAqB,SAAS,CAAC,MAAM,qBAAqB,qBAAqB,OAAO;AACjH,cAAM,aAAa,UAAU,qBAAqB;AAClD,aAAK,6BAA6B,IAAI,iBAAiB,MAAkD,YAAY,IAAgD,YAAY,OAAiD,KAAgD,UAAU;AAC5R,aAAK,2BAA2B,sBAAsB,UAAU,sBAAsB,GAAG,KAAK,4BAA4B,mBAAmB;AAAA,MACjJ,OACK;AACD,aAAK,6BAA6B;AAAA,MACtC;AACA,UAAI,CAAC,WAAW,kBAAkB,GAAG;AACjC,cAAM,2BAA2B,KAAK,iBAAiB,YAAY,MAAM,MAAM;AAAA,MACnF;AACA,YAAM,0BAA0B,MAAM,MAAM;AAC5C,WAAK,wBAAwB;AAAA,IACjC;AACA,QAAI,KAAK,uBAAuB;AAE5B,UAAI,CAAC,WAAW,kBAAkB,GAAG;AACjC,cAAM,wBAAwB,KAAK,iBAAiB,YAAY,MAAM,MAAM;AAAA,MAChF;AACA,YAAM,uBAAuB,MAAM,MAAM;AACzC,UAAI,KAAK,+BAA+B,MAAM;AAC1C,aAAK,2BAA2B,sBAAsB,UAAU,sBAAsB,GAAG,GAAG;AAAA,MAChG;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAChB,YAAY,MAAM,SAAS,QAAQ,eAAe,aAAa;AAC3D,SAAK,wBAAwB;AAC7B,SAAK,iBAAiB,KAAO,EAAE,OAAO,GAAG,QAAQ,EAAE,CAAC;AACpD,SAAK,oDAAoD,MAAM,KAAK;AAAA,MAAgB;AAAA;AAAA,IAA8B;AAClH,SAAK,mBAAmB,SAAS;AACjC,SAAK,oCAAoC,OAAO;AAChD,SAAK,oBAAoB;AACzB,SAAK,0BAA0B;AAC/B,SAAK,wBAAwB;AAC7B,SAAK,iBAAiB,SAAS,cAAc,KAAK;AAClD,SAAK,eAAe,MAAM,QAAQ;AAClC,SAAK,eAAe,MAAM,SAAS;AACnC,SAAK,eAAe,MAAM,WAAW;AACrC,SAAK,0BAA0B,kBAAkB,KAAK,gBAAgB,KAAO,EAAE,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC;AACvG,SAAK,wBAAwB,oCAAoC,KAAK,iDAAiD;AAAA,EAC3H;AAAA,EACA,oBAAoB;AAChB,SAAK,wBAAwB,sCAAsC,KAAK,iDAAiD;AACzH,kBAAc,KAAK,wBAAwB,aAAa;AACxD,SAAK,wBAAwB,QAAQ;AAAA,EACzC;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB,SAAS;AACvB,QAAI,CAAC,WAAW,KAAK,gBAAgB,OAAO,GAAG;AAC3C,WAAK,iBAAiB;AACtB,WAAK,wBAAwB,oBAAoB,OAAO;AACxD,WAAK,eAAe,MAAM,QAAQ,GAAG,QAAQ,KAAK;AAClD,WAAK,eAAe,MAAM,SAAS,GAAG,QAAQ,MAAM;AACpD,WAAK,wBAAwB;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,gBAAgB,MAAM;AAClB,QAAI,OAAO,KAAkC,CAAC,KAAK,uBAAuB;AACtE;AAAA,IACJ;AACA,QAAI,KAAK,eAAe,UAAU,KAAK,KAAK,eAAe,WAAW,GAAG;AACrE;AAAA,IACJ;AACA,SAAK,wBAAwB;AAC7B,SAAK,wBAAwB,yBAAyB;AACtD,UAAM,SAAS,iCAAiC,KAAK,yBAAyB;AAAA,MAC1E,YAAY,KAAK,kBAAkB,OAAO;AAAA,IAC9C,CAAC;AACD,QAAI,WAAW,MAAM;AACjB,aAAO,yBAAyB,CAAC,UAAU;AACvC,aAAK,yBAAyB,KAAK;AACnC,aAAK,qBAAqB,KAAK;AAAA,MACnC,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAAA,EACA,qBAAqB,KAAK,GAAG,GAAG;AAC5B,UAAM,aAAa,KAAK,wBAAwB;AAChD,QAAI,WAAW,QAAQ,KAAK,WAAW,SAAS,GAAG;AAC/C,UAAI,UAAU,KAAK,wBAAwB,eAAe,GAAG,CAAC;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,qBAAqB,EAAE,SAAS,KAAK,YAAY,sBAAsB,mBAAmB,GAAG;AACzF,QAAI,CAAC,KAAK,wBAAwB,GAAG;AACjC;AAAA,IACJ;AACA,QAAI,YAAY,KAAK,kBAAkB,UAAU;AACjD,UAAM,iBAAiB,KAAK,MAAM,KAAK,kCAAkC,kBAAkB,EAAE,uBAAuB,oBAAoB;AACxI,UAAM,iBAAiB,KAAK,MAAM,KAAK,kCAAkC,kBAAkB,EAAE,uBAAuB,kBAAkB;AACtI,UAAM,OAAQ,KAAK,mBAAoB,WAAW,QAAQ,iBAAiB;AAC3E,QAAI,SAAS,MAAM,GAAG,gBAAgB,cAAc;AAAA,EACxD;AAAA,EACA,yBAAyB,EAAE,SAAS,KAAK,WAAW,GAAG;AACnD,cAAU,KAAK,GAAG,GAAG,WAAW,OAAO,WAAW,QAAQ,KAAK,sBAAsB,CAAC;AAAA,EAC1F;AACJ;AAEA,SAAS,yBAAyB,QAAQ;AACtC,SAAO,CAAC,WAAW,OAAO,0BAA0B,MAAM,KAAK,CAAC;AACpE;AACA,IAAM,kBAAkB,yBAAyB,QAAQ;AACzD,IAAM,qBAAqB,yBAAyB,KAAK;AACzD,IAAM,wBAAwB,yBAAyB,QAAQ;AAC/D,IAAM,iBAAN,MAAqB;AAAA,EACjB,YAAY,aAAa,mBAAmB;AACxC,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB;AAC3B,SAAK,4BAA4B;AACjC,SAAK,sBAAsB;AAC3B,SAAK,iBAAiB,KAAO,EAAE,OAAO,GAAG,QAAQ,EAAE,CAAC;AACpD,SAAK,wBAAwB,IAAI,SAAS;AAC1C,SAAK,uBAAuB,IAAI,eAAe,CAAC;AAChD,SAAK,0BAA0B;AAC/B,SAAK,oDAAoD,MAAM;AAC3D,UAAI,CAAC,KAAK,yBAAyB;AAC/B,aAAK,gBAAgB,gBAAgB,EAAE,sBAAsB;AAAA,MACjE;AAAA,IACJ;AACA,SAAK,uDAAuD,MAAM;AAC9D,UAAI,CAAC,KAAK,yBAAyB;AAC/B,aAAK,gBAAgB,gBAAgB,EAAE,sBAAsB;AAAA,MACjE;AAAA,IACJ;AACA,SAAK,kBAAkB;AACvB,SAAK,8BAA8B;AACnC,SAAK,oBAAoB,YAAY,kBAAkB,EAAE,QAAQ;AACjE,SAAK,oBAAoB,SAAS,cAAc,IAAI;AACpD,SAAK,yBAAyB,SAAS,cAAc,IAAI;AACzD,SAAK,uBAAuB,MAAM,UAAU;AAC5C,SAAK,0BAA0B,SAAS,cAAc,IAAI;AAC1D,SAAK,wBAAwB,MAAM,UAAU;AAC7C,SAAK,iBAAiB,SAAS,cAAc,IAAI;AACjD,SAAK,eAAe,MAAM,SAAS;AACnC,SAAK,eAAe,MAAM,UAAU;AACpC,SAAK,eAAe,SAAS,cAAc,KAAK;AAChD,SAAK,aAAa,MAAM,QAAQ;AAChC,SAAK,aAAa,MAAM,SAAS;AACjC,SAAK,aAAa,MAAM,WAAW;AACnC,SAAK,aAAa,MAAM,WAAW;AACnC,SAAK,eAAe,YAAY,KAAK,YAAY;AACjD,SAAK,0BAA0B,kBAAkB,KAAK,cAAc,KAAO,EAAE,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC;AACrG,SAAK,wBAAwB,oCAAoC,KAAK,iDAAiD;AACvH,UAAM,SAAS,KAAK,wBAAwB;AAC5C,WAAO,MAAM,WAAW;AACxB,WAAO,MAAM,SAAS;AACtB,WAAO,MAAM,OAAO;AACpB,WAAO,MAAM,MAAM;AACnB,SAAK,6BAA6B,kBAAkB,KAAK,cAAc,KAAO,EAAE,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC;AACxG,SAAK,2BAA2B,oCAAoC,KAAK,oDAAoD;AAC7H,UAAM,YAAY,KAAK,2BAA2B;AAClD,cAAU,MAAM,WAAW;AAC3B,cAAU,MAAM,SAAS;AACzB,cAAU,MAAM,OAAO;AACvB,cAAU,MAAM,MAAM;AACtB,SAAK,kBAAkB,YAAY,KAAK,sBAAsB;AAC9D,SAAK,kBAAkB,YAAY,KAAK,cAAc;AACtD,SAAK,kBAAkB,YAAY,KAAK,uBAAuB;AAC/D,SAAK,wBAAwB;AAC7B,SAAK,gBAAgB,gBAAgB,EAAE,oCAAoC,EAAE,oBAAoB,KAAK,wBAAwB,KAAK,IAAI,GAAG,IAAI;AAC9I,SAAK,8BAA8B,IAAI,kBAAkB,KAAK,2BAA2B,eAAe,MAAM;AAAA,MAC1G,0CAA0C,MAAM;AAAA,MAChD,0CAA0C,MAAM,CAAC,KAAK,gBAAgB,kBAAkB,EAAE,cAAc,EAAE;AAAA,IAC9G,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,SAAK,4BAA4B,kBAAkB;AACnD,QAAI,KAAK,uBAAuB,MAAM;AAClC,WAAK,mBAAmB,kBAAkB;AAAA,IAC9C;AACA,QAAI,KAAK,wBAAwB,MAAM;AACnC,WAAK,oBAAoB,kBAAkB;AAAA,IAC/C;AACA,SAAK,2BAA2B,sCAAsC,KAAK,oDAAoD;AAC/H,kBAAc,KAAK,2BAA2B,aAAa;AAC3D,SAAK,2BAA2B,QAAQ;AACxC,SAAK,wBAAwB,sCAAsC,KAAK,iDAAiD;AACzH,kBAAc,KAAK,wBAAwB,aAAa;AACxD,SAAK,wBAAwB,QAAQ;AAAA,EACzC;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,yBAAyB,OAAO;AAC5B,QAAI,KAAK,qBAAqB;AAC1B;AAAA,IACJ;AACA,SAAK,sBAAsB;AAC3B,UAAM,QAAQ,KAAK,gBAAgB,gBAAgB;AACnD,QAAI,MAAM,oBAAoB,EAAE,kBAAkB,KAAK,CAAC,KAAK,gBAAgB,kBAAkB,EAAE,aAAa,EAAE,qBAAqB,MAAM;AACvI;AAAA,IACJ;AACA,UAAM,yBAAyB,MAAM,MAAM;AAAA,EAC/C;AAAA,EACA,0BAA0B,OAAO;AAC7B,SAAK,yBAAyB,KAAK;AAAA,EACvC;AAAA,EACA,kCAAkC;AAC9B,UAAM,QAAQ,KAAK,gBAAgB,gBAAgB;AACnD,QAAI,CAAC,MAAM,oBAAoB,EAAE,kBAAkB,KAAK,KAAK,qBAAqB;AAC9E,WAAK,sBAAsB;AAC3B,UAAI,KAAK,gBAAgB,kBAAkB,EAAE,aAAa,EAAE,qBAAqB,MAAM;AACnF,cAAM,uBAAuB;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gCAAgC,OAAO;AACnC,UAAM,QAAQ,KAAK,gBAAgB,gBAAgB;AACnD,QAAI,MAAM,oBAAoB,EAAE,kBAAkB,KAAK,CAAC,KAAK,gBAAgB,kBAAkB,EAAE,aAAa,EAAE,qBAAqB,MAAM;AACvI;AAAA,IACJ;AACA,UAAM,sBAAsB,MAAM,MAAM;AAAA,EAC5C;AAAA,EACA,yBAAyB,OAAO;AAC5B,SAAK,gCAAgC,KAAK;AAAA,EAC9C;AAAA,EACA,yBAAyB;AACrB,SAAK,sBAAsB;AAC3B,UAAM,QAAQ,KAAK,gBAAgB,gBAAgB;AACnD,QAAI,MAAM,oBAAoB,EAAE,kBAAkB,KAAK,CAAC,KAAK,gBAAgB,kBAAkB,EAAE,aAAa,EAAE,qBAAqB,MAAM;AACvI;AAAA,IACJ;AACA,UAAM,uBAAuB;AAAA,EACjC;AAAA,EACA,0BAA0B;AACtB,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,kCAAkC;AAC9B,QAAI,KAAK,gBAAgB,kBAAkB,EAAE,aAAa,EAAE,qBAAqB,MAAM;AACnF,WAAK,gBAAgB,gBAAgB,EAAE,yBAAyB;AAAA,IACpE;AAAA,EACJ;AAAA,EACA,2BAA2B;AACvB,SAAK,gCAAgC;AAAA,EACzC;AAAA,EACA,4BAA4B;AACxB,QAAI,KAAK,gBAAgB,gBAAgB,EAAE,kBAAkB,EAAE,aAAa,EAAE,qBAAqB,MAAM;AACrG,WAAK;AAAA,QAAoB;AAAA;AAAA,MAA2B;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,4BAA4B;AACxB,SAAK;AAAA,MAAoB;AAAA;AAAA,IAA0B;AAAA,EACvD;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB,cAAc,eAAe,gBAAgB;AAC5D,QAAI,CAAC,WAAW,KAAK,gBAAgB,YAAY,GAAG;AAChD,WAAK,iBAAiB;AACtB,WAAK,0BAA0B;AAC/B,WAAK,wBAAwB,oBAAoB,YAAY;AAC7D,WAAK,2BAA2B,oBAAoB,YAAY;AAChE,WAAK,0BAA0B;AAC/B,WAAK,eAAe,MAAM,QAAQ,GAAG,aAAa,KAAK;AACvD,WAAK,eAAe,MAAM,SAAS,GAAG,aAAa,MAAM;AACzD,WAAK,sBAAsB,eAAe,YAAY;AAAA,IAC1D;AACA,QAAI,KAAK,uBAAuB,MAAM;AAClC,WAAK,mBAAmB,kBAAkB,KAAO,EAAE,OAAO,eAAe,QAAQ,aAAa,OAAO,CAAC,CAAC;AAAA,IAC3G;AACA,QAAI,KAAK,wBAAwB,MAAM;AACnC,WAAK,oBAAoB,kBAAkB,KAAO,EAAE,OAAO,gBAAgB,QAAQ,aAAa,OAAO,CAAC,CAAC;AAAA,IAC7G;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,UAAM,kBAAkB,KAAK,6BAA6B;AAC1D,WAAO,KAAK;AAAA;AAAA,MAEZ,gBAAgB,uBACZ,gBAAgB,uBAChB,gBAAgB,qBAChB,gBAAgB,uBAChB,gBAAgB,0BAChB,gBAAgB;AAAA,IAA2B;AAAA,EACnD;AAAA,EACA,mBAAmB;AAEf,SAAK,gBAAgB,gBAAgB,EAAE,oBAAoB,EAAE,gBAAgB;AAAA,EACjF;AAAA,EACA,0BAA0B;AACtB,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAAA,EACA,qBAAqB,KAAK,GAAG,GAAG;AAC5B,UAAM,aAAa,KAAK,wBAAwB;AAChD,QAAI,WAAW,QAAQ,KAAK,WAAW,SAAS,GAAG;AAC/C,UAAI,UAAU,KAAK,wBAAwB,eAAe,GAAG,CAAC;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,gBAAgB,MAAM;AAClB,QAAI,SAAS,GAAgC;AACzC;AAAA,IACJ;AACA,UAAM,gBAAgB;AAAA,MAClB,YAAY,KAAK,kBAAkB;AAAA,IACvC;AACA,QAAI,SAAS,GAAkC;AAC3C,WAAK,wBAAwB,yBAAyB;AACtD,YAAM,SAAS,iCAAiC,KAAK,yBAAyB,aAAa;AAC3F,UAAI,WAAW,MAAM;AACjB,eAAO,yBAAyB,CAAC,UAAU;AACvC,eAAK,yBAAyB,KAAK;AACnC,eAAK,qBAAqB,KAAK;AAC/B,eAAK,gCAAgC,QAAQ,qBAAqB;AAAA,QACtE,CAAC;AACD,aAAK,wBAAwB,MAAM;AACnC,aAAK,gCAAgC,QAAQ,eAAe;AAAA,MAIhE;AACA,UAAI,KAAK,uBAAuB,MAAM;AAClC,aAAK,mBAAmB,gBAAgB,IAAI;AAAA,MAChD;AACA,UAAI,KAAK,wBAAwB,MAAM;AACnC,aAAK,oBAAoB,gBAAgB,IAAI;AAAA,MACjD;AAAA,IACJ;AACA,SAAK,2BAA2B,yBAAyB;AACzD,UAAM,YAAY,iCAAiC,KAAK,4BAA4B,aAAa;AACjG,QAAI,cAAc,MAAM;AACpB,gBAAU,yBAAyB,CAAC,EAAE,SAAS,KAAK,WAAW,MAAM;AACjE,YAAI,UAAU,GAAG,GAAG,WAAW,OAAO,WAAW,MAAM;AAAA,MAC3D,CAAC;AACD,WAAK,qBAAqB,CAAC,GAAG,KAAK,gBAAgB,gBAAgB,EAAE,mBAAmB,GAAG,KAAK,gBAAgB,gBAAgB,EAAE,0BAA0B,CAAC,GAAG,SAAS;AACzK,WAAK,gCAAgC,WAAW,kBAAkB;AAAA,IACtE;AAAA,EACJ;AAAA,EACA,gCAAgC,QAAQ,iBAAiB;AACrD,UAAM,UAAU,KAAK,gBAAgB,gBAAgB,EAAE,mBAAmB;AAC1E,eAAW,UAAU,SAAS;AAC1B,sBAAgB,iBAAiB,CAAC,aAAa,eAAe,UAAU,QAAQ,OAAO,MAAS,GAAG,QAAQ,MAAS;AAAA,IACxH;AACA,eAAW,UAAU,SAAS;AAC1B,sBAAgB,iBAAiB,CAAC,aAAa,eAAe,UAAU,QAAQ,OAAO,MAAS,GAAG,QAAQ,MAAS;AAAA,IACxH;AAAA,EACJ;AAAA,EACA,yBAAyB,EAAE,SAAS,KAAK,WAAW,GAAG;AACnD,cAAU,KAAK,GAAG,GAAG,WAAW,OAAO,WAAW,QAAQ,KAAK,gBAAgB,gBAAgB,EAAE,gCAAgC,CAAC;AAAA,EACtI;AAAA,EACA,qBAAqB,EAAE,SAAS,KAAK,YAAY,mBAAmB,GAAG;AACnE,QAAI,KAAK,gBAAgB,kBAAkB,EAAE,UAAU,eAAe;AAClE,UAAI,YAAY,KAAK,oBAAoB;AACzC,YAAM,aAAa,KAAK,IAAI,GAAG,KAAK,MAAM,KAAK,6BAA6B,EAAE,uBAAuB,kBAAkB,CAAC;AACxH,UAAI,SAAS,GAAG,GAAG,WAAW,OAAO,UAAU;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,wBAAwB,QAAQ;AAC5B,UAAM,YAAY,KAAK,gBAAgB,gBAAgB,EAAE,oBAAoB;AAC7E,UAAM,YAAY,UAAU,gBAAgB;AAC5C,QAAI,CAAC,aAAa,UAAU,WAAW,GAAG;AACtC;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,4BAA4B,kBAAkB,SAAS;AAC9E,UAAM,kBAAkB,KAAK,6BAA6B;AAC1D,UAAM,UAAU,UAAU,kBAAkB;AAC5C,QAAI,QAAQ,iBAAiB,QAAQ,cAAc;AAC/C,aAAO,yBAAyB,CAAC,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,MAAM;AAC5F,YAAI,cAAc,KAAK,oBAAoB;AAC3C,YAAI,YAAY,KAAK,oBAAoB;AACzC,cAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,oBAAoB,CAAC;AAC9D,cAAM,aAAa,KAAK,MAAM,uBAAuB,GAAG;AACxD,YAAI,UAAU;AACd,cAAM,UAAU,KAAK,MAAM,gBAAgB,uBAAuB,kBAAkB;AACpF,iBAAS,QAAQ,UAAU,QAAQ,WAAU;AACzC,gBAAM,IAAI,KAAK,MAAM,UAAU,KAAK,EAAE,QAAQ,oBAAoB;AAClE,cAAI,KAAK,IAAI,YAAY,GAAG,WAAW,OAAO;AAAA,QAClD;AACA,YAAI,KAAK;AAAA,MACb,CAAC;AAAA,IACL;AACA,WAAO,wBAAwB,CAAC,EAAE,SAAS,IAAI,MAAM;AACjD,YAAM,QAAS,gBAAgB,uBAC3B,gBAAgB,uBAChB,gBAAgB,uBAChB,gBAAgB,qBAAqB;AACzC,UAAI,YAAY;AAChB,UAAI,eAAe;AACnB,UAAI,YAAY,KAAK,oBAAoB;AAEzC,UAAI,OAAO,KAAK,mBAAmB;AACnC,iBAAW,YAAY,WAAW;AAC9B,YAAI,SAAS,SAAS,WAAW;AAC7B,gBAAM,aAAa,SAAS,sBAAsB,KAAK,uCAAuC,KAAK,SAAS,OAAO,SAAS,KAAK,IAAI,SAAS;AAC9I,cAAI,SAAS,SAAS,OAAO,YAAY,KAAK;AAAA,QAClD;AAAA,MACJ;AACA,UAAI,KAAK,gBAAgB,kBAAkB,EAAE,UAAU,iBAAiB;AACpE,YAAI,OAAO,KAAK,uBAAuB;AAAA,MAC3C;AACA,iBAAW,YAAY,WAAW;AAC9B,YAAI,SAAS,UAAU,WAAW;AAC9B,gBAAM,aAAa,SAAS,sBAAsB,KAAK,uCAAuC,KAAK,SAAS,OAAO,SAAS,KAAK,IAAI,SAAS;AAC9I,cAAI,SAAS,SAAS,OAAO,YAAY,KAAK;AAAA,QAClD;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,uCAAuC,KAAK,YAAY,WAAW;AAC/D,UAAM,aAAa,KAAK,qBAAqB,sBAAsB,KAAK,SAAS;AACjF,UAAM,iBAAiB,aAAa;AACpC,UAAM,qBAAqB,KAAK,MAAM,aAAa,cAAc,IAAI;AACrE,QAAI,qBAAqB,GAAG;AACxB,mBAAa,aAAa,KAAK,IAAI,IAAI,kBAAkB;AAAA,IAC7D,WACS,qBAAqB,aAAa,KAAK,eAAe,OAAO;AAClE,mBAAa,aAAa,KAAK,IAAI,KAAK,eAAe,SAAS,qBAAqB,WAAW;AAAA,IACpG;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,SAAS,QAAQ;AAClC,UAAM,kBAAkB,KAAK,6BAA6B;AAC1D,eAAW,UAAU,SAAS;AAC1B,iBAAW,QAAQ,OAAO,wBAAwB,GAAG;AACjD,aAAK,mBAAmB,EAAE,eAAe,QAAQ,eAAe;AAAA,MACpE;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,gBAAgB,kBAAkB,EAAE,UAAU;AAAA,EAC9D;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,qBAAqB;AACjB,WAAO,SAAS,KAAK,mBAAmB,GAAG,KAAK,kBAAkB,UAAU;AAAA,EAChF;AAAA,EACA,yBAAyB;AACrB,WAAO,SAAS,KAAK,mBAAmB,GAAG,KAAK,kBAAkB,YAAY,MAAM;AAAA,EACxF;AAAA,EACA,+BAA+B;AAC3B,QAAI,KAAK,8BAA8B,MAAM;AACzC,WAAK,4BAA4B;AAAA,QAC7B,sBAAsB;AAAA,QACtB,0BAA0B;AAAA,QAC1B,sBAAsB;AAAA,QACtB,yBAAyB;AAAA,QACzB,6BAA6B;AAAA,QAC7B,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,gBAAgB;AAAA,QAChB,sBAAsB,IAAI,eAAe;AAAA,QACzC,6BAA6B;AAAA,MACjC;AAAA,IACJ;AACA,UAAM,kBAAkB,KAAK;AAC7B,UAAM,UAAU,KAAK,mBAAmB;AACxC,QAAI,gBAAgB,mBAAmB,SAAS;AAC5C,YAAM,WAAW,KAAK,mBAAmB;AACzC,sBAAgB,qBAAqB;AACrC,sBAAgB,iBAAiB;AACjC,sBAAgB,uBAAuB,IAAI,WAAW;AACtD,sBAAgB,0BAA0B,IAAI,WAAW;AACzD,sBAAgB,8BAA8B,IAAI,WAAW;AAC7D,sBAAgB,2BAA2B;AAC3C,sBAAgB,8BAA8B,IAAI,WAAW;AAC7D,sBAAgB,qBAAqB,gBAAgB;AAAA,IACzD;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB,MAAM;AACtB,SAAK,eAAe,MAAM,SAAS,SAAS,IAA8B,cAAc;AAAA,EAC5F;AAAA,EACA,0BAA0B;AACtB,UAAM,QAAQ,KAAK,gBAAgB,gBAAgB;AACnD,UAAM,UAAU,MAAM,kBAAkB;AACxC,QAAI,CAAC,QAAQ,eAAe,WAAW,KAAK,uBAAuB,MAAM;AACrE,WAAK,uBAAuB,YAAY,KAAK,mBAAmB,qBAAqB,CAAC;AACtF,WAAK,mBAAmB,kBAAkB;AAC1C,WAAK,qBAAqB;AAAA,IAC9B;AACA,QAAI,CAAC,QAAQ,gBAAgB,WAAW,KAAK,wBAAwB,MAAM;AACvE,WAAK,wBAAwB,YAAY,KAAK,oBAAoB,qBAAqB,CAAC;AACxF,WAAK,oBAAoB,kBAAkB;AAC3C,WAAK,sBAAsB;AAAA,IAC/B;AACA,UAAM,0BAA0B,KAAK,gBAAgB,gBAAgB,EAAE,kCAAkC;AACzG,UAAM,SAAS;AAAA,MACX,mCAAmC;AAAA,IACvC;AACA,UAAM,sBAAsB,MAAM;AAC9B,aAAO,QAAQ,eAAe,iBAAiB,MAAM,oBAAoB,EAAE,kBAAkB,EAAE;AAAA,IACnG;AACA,UAAM,oBAAoB,MAAM,MAAM,gCAAgC;AACtE,QAAI,QAAQ,eAAe,WAAW,KAAK,uBAAuB,MAAM;AACpE,WAAK,qBAAqB,IAAI,cAAc,QAAQ,SAAS,QAAQ,qBAAqB,iBAAiB;AAC3G,WAAK,uBAAuB,YAAY,KAAK,mBAAmB,qBAAqB,CAAC;AAAA,IAC1F;AACA,QAAI,QAAQ,gBAAgB,WAAW,KAAK,wBAAwB,MAAM;AACtE,WAAK,sBAAsB,IAAI,cAAc,SAAS,SAAS,QAAQ,qBAAqB,iBAAiB;AAC7G,WAAK,wBAAwB,YAAY,KAAK,oBAAoB,qBAAqB,CAAC;AAAA,IAC5F;AAAA,EACJ;AACJ;AAEA,IAAM,gBAAgB,gBAAgB,KAAK,UAAU;AACrD,IAAM,cAAN,MAAkB;AAAA,EACd,YAAY,WAAW,SAAS,mBAAmB;AAC/C,SAAK,wBAAwB,CAAC;AAC9B,SAAK,2BAA2B,CAAC;AACjC,SAAK,sBAAsB;AAC3B,SAAK,mBAAmB;AACxB,SAAK,kBAAkB;AACvB,SAAK,+BAA+B;AACpC,SAAK,gCAAgC;AACrC,SAAK,2BAA2B;AAChC,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB,IAAI,SAAS;AACtC,SAAK,uBAAuB,IAAI,SAAS;AACzC,SAAK,2BAA2B,IAAI,SAAS;AAC7C,SAAK,qBAAqB;AAC1B,SAAK,gCAAgC;AACrC,SAAK,sBAAsB;AAC3B,SAAK,oBAAoB;AACzB,SAAK,8BAA8B;AACnC,SAAK,oBAAoB,SAAS,cAAc,KAAK;AACrD,SAAK,kBAAkB,UAAU,IAAI,uBAAuB;AAC5D,SAAK,kBAAkB,MAAM,WAAW;AACxC,SAAK,kBAAkB,MAAM,YAAY;AACzC,SAAK,kBAAkB,MAAM,QAAQ;AACrC,SAAK,kBAAkB,MAAM,SAAS;AACtC,qBAAiB,KAAK,iBAAiB;AACvC,SAAK,yBAAyB,SAAS,cAAc,OAAO;AAC5D,SAAK,uBAAuB,aAAa,eAAe,GAAG;AAC3D,SAAK,kBAAkB,YAAY,KAAK,sBAAsB;AAC9D,SAAK,yBAAyB,KAAK,uBAAuB,KAAK,IAAI;AACnE,QAAI,0BAA0B,KAAK,iBAAiB,GAAG;AACnD,WAAK,qCAAqC,IAAI;AAAA,IAClD;AACA,SAAK,kBAAkB,IAAI,WAAW,KAAK,4BAA4B,KAAK,IAAI,GAAG,KAAK,mBAAmB,iBAAiB;AAC5H,SAAK,gBAAgB,EAAE,yBAAyB,EAAE,oBAAoB,KAAK,qCAAqC,KAAK,IAAI,GAAG,IAAI;AAChI,SAAK,2BAA2B,IAAI,eAAe,MAAM,KAAK,2BAA2B;AACzF,SAAK,uBAAuB,YAAY,KAAK,yBAAyB,qBAAqB,CAAC;AAC5F,UAAM,eAAe,QAAQ,YAAY,KAAK,0BAA0B;AAGxE,QAAI,QAAQ,KAAK,kBAAkB;AACnC,QAAI,SAAS,KAAK,kBAAkB;AAGpC,QAAI,gBAAgB,UAAU,KAAK,WAAW,GAAG;AAC7C,YAAM,gBAAgB,UAAU,sBAAsB;AACtD,cAAQ,SAAS,cAAc;AAC/B,eAAS,UAAU,cAAc;AAAA,IACrC;AAGA,SAAK,iBAAiB,OAAO,MAAM;AACnC,SAAK,2BAA2B;AAChC,cAAU,YAAY,KAAK,iBAAiB;AAC5C,SAAK,mCAAmC;AACxC,SAAK,gBAAgB,oBAAoB,EAAE,yBAAyB,EAAE,oBAAoB,KAAK,gBAAgB,qBAAqB,KAAK,KAAK,eAAe,GAAG,IAAI;AACpK,SAAK,gBAAgB,oCAAoC,EAAE,oBAAoB,KAAK,gBAAgB,qBAAqB,KAAK,KAAK,eAAe,GAAG,IAAI;AAAA,EAC7J;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,SAAK,qCAAqC,KAAK;AAC/C,QAAI,KAAK,wBAAwB,GAAG;AAChC,aAAO,qBAAqB,KAAK,mBAAmB;AAAA,IACxD;AACA,SAAK,gBAAgB,yBAAyB,EAAE,yBAAyB,IAAI;AAC7E,SAAK,gBAAgB,oBAAoB,EAAE,yBAAyB,EAAE,yBAAyB,IAAI;AACnG,SAAK,gBAAgB,oCAAoC,EAAE,yBAAyB,IAAI;AACxF,SAAK,gBAAgB,kBAAkB;AACvC,eAAW,cAAc,KAAK,uBAAuB;AACjD,WAAK,uBAAuB,YAAY,WAAW,qBAAqB,CAAC;AACzE,iBAAW,kBAAkB,EAAE,yBAAyB,IAAI;AAC5D,iBAAW,qBAAqB,EAAE,yBAAyB,IAAI;AAC/D,iBAAW,kBAAkB;AAAA,IACjC;AACA,SAAK,wBAAwB,CAAC;AAC9B,eAAW,iBAAiB,KAAK,0BAA0B;AACvD,WAAK,2BAA2B,aAAa;AAAA,IACjD;AACA,SAAK,2BAA2B,CAAC;AACjC,kBAAc,KAAK,wBAAwB,EAAE,kBAAkB;AAC/D,QAAI,KAAK,kBAAkB,kBAAkB,MAAM;AAC/C,WAAK,kBAAkB,cAAc,YAAY,KAAK,iBAAiB;AAAA,IAC3E;AACA,SAAK,yBAAyB,kBAAkB;AAChD,SAAK,kBAAkB,kBAAkB;AACzC,SAAK,qBAAqB,kBAAkB;AAC5C,SAAK,4BAA4B;AAAA,EACrC;AAAA,EACA,iBAAiB,OAAO,QAAQ,eAAe,OAAO;AAClD,QAAI,KAAK,qBAAqB,UAAU,KAAK,oBAAoB,OAAO;AACpE;AAAA,IACJ;AACA,UAAM,WAAW,iBAAiB,KAAO,EAAE,OAAO,OAAO,CAAC,CAAC;AAC3D,SAAK,mBAAmB,SAAS;AACjC,SAAK,kBAAkB,SAAS;AAChC,UAAM,YAAY,KAAK,mBAAmB;AAC1C,UAAM,WAAW,KAAK,kBAAkB;AACxC,kBAAc,KAAK,iBAAiB,EAAE,MAAM,SAAS;AACrD,kBAAc,KAAK,iBAAiB,EAAE,MAAM,QAAQ;AACpD,SAAK,uBAAuB,MAAM,SAAS;AAC3C,SAAK,uBAAuB,MAAM,QAAQ;AAC1C,QAAI,cAAc;AACd,WAAK,mBAAmB,eAAe,eAAe,GAAG,YAAY,IAAI,CAAC;AAAA,IAC9E,OACK;AACD,WAAK,gBAAgB,qBAAqB;AAAA,IAC9C;AAAA,EACJ;AAAA,EACA,gBAAgB,gBAAgB;AAC5B,QAAI,mBAAmB,QAAW;AAC9B,uBAAiB,eAAe,eAAe;AAAA,IACnD;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,sBAAsB,QAAQ,KAAK;AACxD,WAAK,sBAAsB,CAAC,EAAE,gBAAgB,eAAe,4BAA4B,CAAC,EAAE,eAAe;AAAA,IAC/G;AACA,QAAI,KAAK,kBAAkB,UAAU,SAAS;AAC1C,WAAK,yBAAyB,gBAAgB,eAAe,2BAA2B,CAAC;AAAA,IAC7F;AAAA,EACJ;AAAA,EACA,uBAAuB,SAAS;AAC5B,UAAM,iCAAiC,0BAA0B,KAAK,iBAAiB;AAIvF,SAAK,gBAAgB,uBAAuB,OAAO;AACnD,UAAM,+BAA+B,0BAA0B,KAAK,iBAAiB;AACrF,QAAI,iCAAiC,gCAAgC;AACjE,WAAK,qCAAqC,4BAA4B;AAAA,IAC1E;AACA,QAAI,QAAQ,QAAQ,GAAG,OAAO;AAC1B,WAAK,4BAA4B;AAAA,IACrC;AACA,SAAK,mCAAmC;AACxC,SAAK,+BAA+B,OAAO;AAAA,EAC/C;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B;AACvB,QAAI,KAAK,6BAA6B,MAAM;AACxC,WAAK,mBAAmB,KAAK,0BAA0B,YAAY,IAAI,CAAC;AACxE,WAAK,2BAA2B;AAAA,IACpC;AACA,UAAM,sBAAsB,KAAK,yBAAyB,IAAI;AAC9D,UAAM,mBAAmB,SAAS,cAAc,QAAQ;AACxD,qBAAiB,QAAQ,oBAAoB;AAC7C,qBAAiB,SAAS,oBAAoB;AAC9C,UAAM,MAAM,cAAc,iBAAiB,WAAW,IAAI,CAAC;AAC3D,SAAK,yBAAyB,GAAG;AACjC,WAAO;AAAA,EACX;AAAA,EACA,4BAA4B,UAAU;AAClC,QAAI,aAAa,UAAyC,CAAC,KAAK,4BAA4B,GAAG;AAC3F,aAAO;AAAA,IACX;AACA,QAAI,aAAa,WAA2C,CAAC,KAAK,6BAA6B,GAAG;AAC9F,aAAO;AAAA,IACX;AACA,QAAI,KAAK,sBAAsB,WAAW,GAAG;AACzC,aAAO;AAAA,IACX;AAIA,UAAM,kBAAkB,aAAa,SAC/B,KAAK,sBAAsB,CAAC,EAAE,8BAA8B,IAC5D,KAAK,sBAAsB,CAAC,EAAE,+BAA+B;AACnE,WAAO,cAAc,eAAe,EAAE,mBAAmB;AAAA,EAC7D;AAAA,EACA,2BAA2B;AACvB,WAAO,KAAK,kBAAkB,YAAY,KAAK,uBAAuB;AAAA,EAC1E;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,yBAAyB,OAAO;AAC5B,SAAK,gCAAgC;AACrC,QAAI,KAAK,+BAA+B;AACpC,WAAK,kBAAkB,EAAE,MAAM,YAAY,UAAU,KAAK;AAAA,IAC9D,OACK;AACD,WAAK,kBAAkB,EAAE,MAAM,eAAe,QAAQ;AAAA,IAC1D;AAAA,EACJ;AAAA,EACA,mCAAmC;AAC/B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB,WAAW;AAC1B,WAAO,cAAc,KAAK,sBAAsB,SAAS,CAAC,EAAE,kBAAkB;AAAA,EAClF;AAAA,EACA,8BAA8B;AAC1B,SAAK,yBAAyB,QAAQ,CAAC,cAAc;AACjD,gBAAU,iBAAiB;AAAA,IAC/B,CAAC;AAAA,EACL;AAAA;AAAA,EAEA,+BAA+B,SAAS;AACpC,QAAI,QAAQ,aAAa,UAAa,KAAK,uBAAuB,QAAQ,UAAU,UAAa,QAAQ,WAAW,SAAY;AAC5H,WAAK,oHAAoH;AACzH;AAAA,IACJ;AACA,QAAI,QAAQ,YAAY,CAAC,KAAK,oBAAoB;AAE9C,WAAK,0BAA0B;AAAA,IACnC;AACA,QAAI,QAAQ,aAAa,SAAS,KAAK,uBAAuB,MAAM;AAChE,WAAK,4BAA4B;AAAA,IACrC;AACA,QAAI,CAAC,QAAQ,aAAa,QAAQ,UAAU,UAAa,QAAQ,WAAW,SAAY;AACpF,WAAK,iBAAiB,QAAQ,SAAS,KAAK,iBAAiB,QAAQ,UAAU,KAAK,gBAAgB;AAAA,IACxG;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,yBAAyB,KAAK;AAC1B,QAAI,aAAa;AACjB,QAAI,cAAc;AAClB,UAAM,YAAY,KAAK,sBAAsB,CAAC;AAC9C,UAAM,kBAAkB,CAAC,UAAU,YAAY;AAC3C,UAAI,UAAU;AACd,eAAS,YAAY,GAAG,YAAY,KAAK,sBAAsB,QAAQ,aAAa;AAChF,cAAM,aAAa,KAAK,sBAAsB,SAAS;AACvD,cAAM,kBAAkB,cAAc,aAAa,SAAS,WAAW,8BAA8B,IAAI,WAAW,+BAA+B,CAAC;AACpJ,cAAM,aAAa,gBAAgB,wBAAwB;AAC3D,YAAI,QAAQ,MAAM;AACd,0BAAgB,qBAAqB,KAAK,SAAS,OAAO;AAAA,QAC9D;AACA,mBAAW,WAAW;AACtB,YAAI,YAAY,KAAK,sBAAsB,SAAS,GAAG;AACnD,gBAAM,YAAY,KAAK,yBAAyB,SAAS;AACzD,gBAAM,sBAAsB,UAAU,wBAAwB;AAC9D,cAAI,QAAQ,MAAM;AACd,sBAAU,qBAAqB,KAAK,SAAS,OAAO;AAAA,UACxD;AACA,qBAAW,oBAAoB;AAAA,QACnC;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,KAAK,4BAA4B,GAAG;AACpC,sBAAgB,QAAQ,CAAC;AACzB,YAAM,sBAAsB,cAAc,UAAU,8BAA8B,CAAC,EAAE,wBAAwB,EAAE;AAC/G,oBAAc;AAAA,IAClB;AACA,aAAS,YAAY,GAAG,YAAY,KAAK,sBAAsB,QAAQ,aAAa;AAChF,YAAM,aAAa,KAAK,sBAAsB,SAAS;AACvD,YAAM,aAAa,WAAW,wBAAwB;AACtD,UAAI,QAAQ,MAAM;AACd,mBAAW,qBAAqB,KAAK,YAAY,WAAW;AAAA,MAChE;AACA,qBAAe,WAAW;AAC1B,UAAI,YAAY,KAAK,sBAAsB,SAAS,GAAG;AACnD,cAAM,YAAY,KAAK,yBAAyB,SAAS;AACzD,cAAM,sBAAsB,UAAU,wBAAwB;AAC9D,YAAI,QAAQ,MAAM;AACd,oBAAU,qBAAqB,KAAK,YAAY,WAAW;AAAA,QAC/D;AACA,uBAAe,oBAAoB;AAAA,MACvC;AAAA,IACJ;AACA,UAAM,uBAAuB,UAAU,wBAAwB,EAAE;AACjE,kBAAc;AAEd,QAAI,KAAK,6BAA6B,GAAG;AACrC,sBAAgB,SAAS,UAAU;AACnC,YAAM,uBAAuB,cAAc,UAAU,+BAA+B,CAAC,EAAE,wBAAwB,EAAE;AACjH,oBAAc;AAAA,IAClB;AACA,UAAM,WAAW,CAAC,UAAU,SAAS,YAAY;AAC7C,YAAM,OAAO,cAAc,aAAa,SAAS,KAAK,yBAAyB,mBAAmB,IAAI,KAAK,yBAAyB,oBAAoB,CAAC;AACzJ,WAAK,qBAAqB,cAAc,GAAG,GAAG,SAAS,OAAO;AAAA,IAClE;AAEA,QAAI,KAAK,kBAAkB,UAAU,SAAS;AAC1C,YAAM,qBAAqB,KAAK,yBAAyB,wBAAwB;AACjF,UAAI,QAAQ,MAAM;AACd,YAAI,UAAU;AACd,YAAI,KAAK,4BAA4B,GAAG;AACpC,mBAAS,QAAQ,SAAS,WAAW;AACrC,oBAAU,cAAc,UAAU,8BAA8B,CAAC,EAAE,wBAAwB,EAAE;AAAA,QACjG;AACA,aAAK,yBAAyB,qBAAqB,KAAK,SAAS,WAAW;AAC5E,mBAAW,mBAAmB;AAC9B,YAAI,KAAK,6BAA6B,GAAG;AACrC,mBAAS,SAAS,SAAS,WAAW;AAAA,QAC1C;AAAA,MACJ;AACA,qBAAe,mBAAmB;AAAA,IACtC;AACA,WAAO,KAAO;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ,CAAC;AAAA,EACL;AAAA;AAAA,EAEA,2BAA2B;AACvB,QAAI,eAAe;AACnB,QAAI,qBAAqB;AACzB,QAAI,sBAAsB;AAC1B,eAAW,cAAc,KAAK,uBAAuB;AACjD,UAAI,KAAK,4BAA4B,GAAG;AACpC,6BAAqB,KAAK,IAAI,oBAAoB,cAAc,WAAW,8BAA8B,CAAC,EAAE,uBAAuB,GAAG,KAAK,kBAAkB,eAAe,YAAY;AAAA,MAC5L;AACA,UAAI,KAAK,6BAA6B,GAAG;AACrC,8BAAsB,KAAK,IAAI,qBAAqB,cAAc,WAAW,+BAA+B,CAAC,EAAE,uBAAuB,GAAG,KAAK,kBAAkB,gBAAgB,YAAY;AAAA,MAChM;AACA,sBAAgB,WAAW,wBAAwB;AAAA,IACvD;AACA,yBAAqB,uBAAuB,kBAAkB;AAC9D,0BAAsB,uBAAuB,mBAAmB;AAChE,UAAM,QAAQ,KAAK;AACnB,UAAM,SAAS,KAAK;AACpB,UAAM,YAAY,KAAK,IAAI,QAAQ,qBAAqB,qBAAqB,CAAC;AAC9E,UAAM,iBAAiB,KAAK,yBAAyB;AACrD,UAAM,kBAAkB;AACxB,UAAM,mBAAmB,kBAAkB;AAC3C,UAAM,kBAAkB,KAAK,kBAAkB,UAAU;AACzD,QAAI,iBAAiB,kBAAkB,KAAK,IAAI,KAAK,yBAAyB,wBAAwB,GAAG,KAAK,kBAAkB,UAAU,aAAa,IAAI;AAC3J,qBAAiB,uBAAuB,cAAc;AACtD,UAAM,oBAAoB,mBAAmB;AAC7C,UAAM,kBAAkB,SAAS,oBAAoB,IAAI,SAAS;AAClE,UAAM,gBAAgB,kBAAkB;AACxC,QAAI,oBAAoB;AACxB,UAAM,aAAa,OAAO,oBAAoB;AAC9C,aAAS,YAAY,GAAG,YAAY,KAAK,sBAAsB,QAAQ,EAAE,WAAW;AAChF,YAAM,aAAa,KAAK,sBAAsB,SAAS;AACvD,iBAAW,mBAAmB,KAAK,gBAAgB,gBAAgB,EAAE,SAAS,CAAC;AAC/E,UAAI,aAAa;AACjB,UAAI,sBAAsB;AAC1B,UAAI,cAAc,KAAK,sBAAsB,SAAS,GAAG;AACrD,8BAAsB,KAAK,MAAM,kBAAkB,qBAAqB,UAAU,IAAI;AAAA,MAC1F,OACK;AACD,8BAAsB,KAAK,MAAM,WAAW,wBAAwB,IAAI,gBAAgB,UAAU,IAAI;AAAA,MAC1G;AACA,mBAAa,KAAK,IAAI,qBAAqB,CAAC;AAC5C,2BAAqB;AACrB,iBAAW,kBAAkB,KAAO,EAAE,OAAO,WAAW,QAAQ,WAAW,CAAC,CAAC;AAC7E,UAAI,KAAK,4BAA4B,GAAG;AACpC,mBAAW,2BAA2B,oBAAoB,MAAM;AAAA,MACpE;AACA,UAAI,KAAK,6BAA6B,GAAG;AACrC,mBAAW,2BAA2B,qBAAqB,OAAO;AAAA,MACtE;AACA,UAAI,WAAW,gBAAgB,GAAG;AAC9B,aAAK,gBAAgB,wBAAwB,WAAW,gBAAgB,GAAG,UAAU;AAAA,MACzF;AAAA,IACJ;AACA,SAAK,yBAAyB,mBAAmB,KAAO,EAAE,OAAO,kBAAkB,YAAY,GAAG,QAAQ,eAAe,CAAC,GAAG,kBAAkB,qBAAqB,GAAG,kBAAkB,sBAAsB,CAAC;AAChN,SAAK,gBAAgB,mBAAmB,SAAS;AACjD,QAAI,KAAK,iCAAiC,oBAAoB;AAC1D,WAAK,+BAA+B;AAAA,IACxC;AACA,QAAI,KAAK,kCAAkC,qBAAqB;AAC5D,WAAK,gCAAgC;AAAA,IACzC;AAAA,EACJ;AAAA,EACA,qCAAqCa,MAAK;AACtC,QAAIA,MAAK;AACL,WAAK,kBAAkB,iBAAiB,SAAS,KAAK,wBAAwB,EAAE,SAAS,MAAM,CAAC;AAChG;AAAA,IACJ;AACA,SAAK,kBAAkB,oBAAoB,SAAS,KAAK,sBAAsB;AAAA,EACnF;AAAA,EACA,wCAAwC,OAAO;AAC3C,YAAQ,MAAM,WAAW;AAAA,MACrB,KAAK,MAAM;AAEP,eAAO;AAAA,MACX,KAAK,MAAM;AAEP,eAAO;AAAA,IACf;AACA,QAAI,CAAC,eAAe;AAChB,aAAO;AAAA,IACX;AAMA,WAAQ,IAAI,OAAO;AAAA,EACvB;AAAA,EACA,uBAAuB,OAAO;AAC1B,SAAK,MAAM,WAAW,KAAK,CAAC,KAAK,kBAAkB,cAAc,EAAE,gBAC9D,MAAM,WAAW,KAAK,CAAC,KAAK,kBAAkB,aAAa,EAAE,aAAa;AAC3E;AAAA,IACJ;AACA,UAAM,wBAAwB,KAAK,wCAAwC,KAAK;AAChF,UAAM,SAAS,wBAAwB,MAAM,SAAS;AACtD,UAAM,SAAS,EAAE,wBAAwB,MAAM,SAAS;AACxD,QAAI,MAAM,YAAY;AAClB,YAAM,eAAe;AAAA,IACzB;AACA,QAAI,WAAW,KAAK,KAAK,kBAAkB,aAAa,EAAE,YAAY;AAClE,YAAM,YAAY,KAAK,KAAK,MAAM,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,MAAM,CAAC;AAClE,YAAM,iBAAiB,MAAM,UAAU,KAAK,kBAAkB,sBAAsB,EAAE;AACtF,WAAK,gBAAgB,EAAE,mBAAmB,gBAAgB,SAAS;AAAA,IACvE;AACA,QAAI,WAAW,KAAK,KAAK,kBAAkB,cAAc,EAAE,YAAY;AACnE,WAAK,gBAAgB,EAAE,sBAAsB,SAAS,GAAG;AAAA,IAC7D;AAAA,EACJ;AAAA,EACA,mBAAmB,gBAAgB,MAAM;AACrC,UAAM,mBAAmB,eAAe,2BAA2B;AAEnE,QAAI,qBAAqB,GAAgC;AACrD,WAAK,oBAAoB;AAAA,IAC7B;AAEA,QAAI,qBAAqB,KACrB,qBAAqB,GAAiC;AACtD,WAAK,kCAAkC,cAAc;AACrD,WAAK,sCAAsC,gBAAgB,IAAI;AAC/D,WAAK,yBAAyB,iBAAiB;AAC/C,WAAK,sBAAsB,QAAQ,CAAC,SAAS;AACzC,aAAK,iCAAiC;AAAA,MAC1C,CAAC;AAKD,UAAI,KAAK,0BAA0B,2BAA2B,MAAM,GAAgC;AAChG,aAAK,yBAAyB,gBAAgB,cAAc;AAC5D,aAAK,oBAAoB;AACzB,aAAK,kCAAkC,KAAK,wBAAwB;AACpE,aAAK,sCAAsC,KAAK,0BAA0B,IAAI;AAC9E,yBAAiB,KAAK;AACtB,aAAK,2BAA2B;AAAA,MACpC;AAAA,IACJ;AACA,SAAK,gBAAgB,cAAc;AAAA,EACvC;AAAA,EACA,sCAAsC,gBAAgB,MAAM;AACxD,eAAW,kBAAkB,eAAe,iCAAiC,GAAG;AAC5E,WAAK,qCAAqC,gBAAgB,IAAI;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,kCAAkC,gBAAgB;AAC9C,UAAM,QAAQ,KAAK,gBAAgB,gBAAgB;AACnD,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,UAAI,eAAe,4BAA4B,CAAC,EAAE,qBAAqB;AACnE,cAAM,CAAC,EAAE,6BAA6B;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,qCAAqC,cAAc,MAAM;AACrD,UAAM,YAAY,KAAK,gBAAgB,oBAAoB;AAC3D,YAAQ,aAAa,gBAAgB;AAAA,MACjC,KAAK;AACD,kBAAU,qBAAqB;AAC/B;AAAA,MACJ,KAAK;AACD,kBAAU,0BAA0B,aAAa,eAAe;AAChE;AAAA,MACJ,KAAK;AACD,kBAAU,wBAAwB,aAAa,eAAe;AAC9D;AAAA,MACJ,KAAK;AACD,kBAAU,yBAAyB,aAAa,eAAe;AAC/D;AAAA,MACJ,KAAK;AACD,kBAAU,yBAAyB;AACnC;AAAA,MACJ,KAAK;AACD,YAAI,CAAC,aAAa,gBAAgB,mBAAmB,IAAI,GAAG;AACxD,oBAAU,yBAAyB,aAAa,gBAAgB,sBAAsB,IAAI,CAAC;AAAA,QAC/F;AACA;AAAA,IACR;AAAA,EACJ;AAAA,EACA,4BAA4B,gBAAgB;AACxC,QAAI,KAAK,6BAA6B,MAAM;AACxC,WAAK,yBAAyB,gBAAgB,cAAc;AAAA,IAChE,OACK;AACD,WAAK,2BAA2B;AAAA,IACpC;AACA,QAAI,CAAC,KAAK,uBAAuB;AAC7B,WAAK,wBAAwB;AAC7B,WAAK,sBAAsB,OAAO,sBAAsB,CAAC,SAAS;AAC9D,aAAK,wBAAwB;AAC7B,aAAK,sBAAsB;AAC3B,YAAI,KAAK,6BAA6B,MAAM;AACxC,gBAAM,OAAO,KAAK;AAClB,eAAK,2BAA2B;AAChC,eAAK,mBAAmB,MAAM,IAAI;AAClC,qBAAW,kBAAkB,KAAK,iCAAiC,GAAG;AAClE,gBAAI,eAAe,mBAAmB,KAA+C,CAAC,eAAe,gBAAgB,mBAAmB,IAAI,GAAG;AAC3I,mBAAK,gBAAgB,EAAE,gCAAgC,eAAe,eAAe;AACrF;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,sBAAsB;AAClB,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,2BAA2B,WAAW;AAClC,SAAK,uBAAuB,YAAY,UAAU,qBAAqB,CAAC;AACxE,cAAU,kBAAkB;AAAA,EAChC;AAAA,EACA,6BAA6B;AACzB,UAAM,QAAQ,KAAK,gBAAgB,gBAAgB;AACnD,UAAM,yBAAyB,MAAM;AACrC,UAAM,yBAAyB,KAAK,sBAAsB;AAE1D,aAAS,IAAI,wBAAwB,IAAI,wBAAwB,KAAK;AAClE,YAAM,aAAa,cAAc,KAAK,sBAAsB,IAAI,CAAC;AACjE,WAAK,uBAAuB,YAAY,WAAW,qBAAqB,CAAC;AACzE,iBAAW,kBAAkB,EAAE,yBAAyB,IAAI;AAC5D,iBAAW,qBAAqB,EAAE,yBAAyB,IAAI;AAC/D,iBAAW,kBAAkB;AAC7B,YAAM,gBAAgB,KAAK,yBAAyB,IAAI;AACxD,UAAI,kBAAkB,QAAW;AAC7B,aAAK,2BAA2B,aAAa;AAAA,MACjD;AAAA,IACJ;AAEA,aAAS,IAAI,wBAAwB,IAAI,wBAAwB,KAAK;AAClE,YAAM,aAAa,IAAI,WAAW,MAAM,MAAM,CAAC,CAAC;AAChD,iBAAW,kBAAkB,EAAE,oBAAoB,KAAK,8BAA8B,KAAK,MAAM,UAAU,GAAG,IAAI;AAClH,iBAAW,qBAAqB,EAAE,oBAAoB,KAAK,iCAAiC,KAAK,MAAM,UAAU,GAAG,IAAI;AACxH,WAAK,sBAAsB,KAAK,UAAU;AAE1C,UAAI,IAAI,GAAG;AACP,cAAM,gBAAgB,IAAI,cAAc,MAAM,IAAI,GAAG,CAAC;AACtD,aAAK,yBAAyB,KAAK,aAAa;AAChD,aAAK,uBAAuB,aAAa,cAAc,qBAAqB,GAAG,KAAK,yBAAyB,qBAAqB,CAAC;AAAA,MACvI;AAEA,WAAK,uBAAuB,aAAa,WAAW,qBAAqB,GAAG,KAAK,yBAAyB,qBAAqB,CAAC;AAAA,IACpI;AACA,aAAS,IAAI,GAAG,IAAI,wBAAwB,KAAK;AAC7C,YAAM,QAAQ,MAAM,CAAC;AACrB,YAAM,aAAa,KAAK,sBAAsB,CAAC;AAC/C,UAAI,WAAW,gBAAgB,MAAM,OAAO;AACxC,mBAAW,mBAAmB,KAAK;AAAA,MACvC,OACK;AACD,mBAAW,uCAAuC;AAAA,MACtD;AAAA,IACJ;AACA,SAAK,mCAAmC;AACxC,SAAK,yBAAyB;AAAA,EAClC;AAAA,EACA,kCAAkC,OAAO,OAAO,OAAO,MAAM;AACzD,UAAM,aAAa,oBAAI,IAAI;AAC3B,QAAI,UAAU,MAAM;AAChB,YAAM,WAAW,KAAK,gBAAgB,mBAAmB;AACzD,eAAS,QAAQ,CAAC,MAAM;AAEpB,cAAM,OAAO,EAAE,eAAe,EAAE,iBAAiB,KAAK;AACtD,YAAI,SAAS,MAAM;AACf,qBAAW,IAAI,GAAG,IAAI;AAAA,QAC1B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,QAAI;AACJ,QAAI,UAAU,MAAM;AAChB,YAAM,YAAY,KAAK,gBAAgB,oBAAoB,EAAE,gCAAgC,KAAK,GAAG;AACrG,UAAI,cAAc,QAAW;AACzB,qBAAa;AAAA,MACjB;AAAA,IACJ;AACA,UAAM,gBAAgB,KAAK,gBAAgB,EAAE,wBAAwB;AACrE,UAAM,gBAAgB,kBAAkB,QAAQ,cAAc,4BAA4B,SACpF,cAAc,mBACd;AACN,UAAM,gBAAgB,kBAAkB,QAAQ,cAAc,qBAAqB,SAC7E,cAAc,iBAAiB,uBAC/B;AACN,UAAM,YAAY,KAAK,uBAAuB,IAAI;AAClD,WAAO;AAAA,MACH,wBAAwB;AAAA,MACxB,iBAAiB,SAAS;AAAA,MAC1B,iBAAiB,SAAS;AAAA,MAC1B,qBAAqB,cAAc,KAAK,YAAY;AAAA,MACpD,yBAAyB;AAAA,MACzB,sBAAsB;AAAA,MACtB,yBAAyB;AAAA,MACzB,+BAA+B,SAAS;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,uBAAuB,MAAM;AACzB,QAAI,YAAY;AAChB,QAAI,MAAM;AACN,kBAAY,KAAK,sBAAsB,QAAQ,IAAI;AAAA,IACvD,OACK;AACD,YAAM,gBAAgB,KAAK,gBAAgB,EAAE,0BAA0B,EAAE,eAAe;AACxF,UAAI,kBAAkB,MAAM;AACxB,oBAAY,KAAK,gBAAgB,EAAE,gBAAgB,EAAE,QAAQ,aAAa;AAAA,MAC9E;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,8BAA8B,MAAM,MAAM,OAAO,OAAO;AACpD,SAAK,kBAAkB,eAAe,MAAM,KAAK,kCAAkC,MAAM,OAAO,OAAO,IAAI,CAAC;AAAA,EAChH;AAAA,EACA,iCAAiC,MAAM,MAAM,OAAO,OAAO;AACvD,SAAK,qBAAqB,eAAe,MAAM,KAAK,kCAAkC,MAAM,OAAO,OAAO,IAAI,CAAC;AAAA,EACnH;AAAA,EACA,qCAAqC,MAAM,OAAO,OAAO;AACrD,SAAK,yBAAyB,KAAK,gBAAgB,EAAE,wBAAwB,GAAG,yBAAyB,IAAI;AAC7G,SAAK,yBAAyB,eAAe,MAAM,KAAK,kCAAkC,MAAM,OAAO,KAAK,CAAC;AAAA,EACjH;AAAA,EACA,qCAAqC;AACjC,UAAM,UAAU,KAAK,kBAAkB,UAAU,UAAU,KAAK;AAChE,SAAK,yBAAyB,qBAAqB,EAAE,MAAM,UAAU;AAAA,EACzE;AAAA,EACA,8BAA8B;AAC1B,WAAO,KAAK,sBAAsB,CAAC,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE;AAAA,EAC1G;AAAA,EACA,+BAA+B;AAC3B,WAAO,KAAK,sBAAsB,CAAC,EAAE,gBAAgB,EAAE,0BAA0B,EAAE,kBAAkB,EAAE;AAAA,EAC3G;AAAA,EACA,4BAA4B;AAExB,QAAI,EAAE,oBAAoB,SAAS;AAC/B,WAAK,qHAAqH;AAC1H,aAAO;AAAA,IACX,OACK;AACD,WAAK,qBAAqB,IAAI,eAAe,CAAC,YAAY;AAKtD,cAAM,iBAAiB,QAAQ,QAAQ,SAAS,CAAC;AACjD,YAAI,CAAC,gBAAgB;AAEjB;AAAA,QACJ;AACA,aAAK,iBAAiB,eAAe,YAAY,OAAO,eAAe,YAAY,MAAM;AAAA,MAC7F,CAAC;AACD,WAAK,mBAAmB,QAAQ,KAAK,qBAAqB,EAAE,KAAK,aAAa,CAAC;AAC/E,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,8BAA8B;AAC1B,QAAI,KAAK,uBAAuB,MAAM;AAClC,WAAK,mBAAmB,WAAW;AAAA,IACvC;AACA,SAAK,qBAAqB;AAAA,EAC9B;AACJ;AACA,SAAS,iBAAiB,SAAS;AAC/B,UAAQ,MAAM,aAAa;AAE3B,UAAQ,MAAM,mBAAmB;AAEjC,UAAQ,MAAM,eAAe;AAE7B,UAAQ,MAAM,gBAAgB;AAE9B,UAAQ,MAAM,0BAA0B;AAC5C;AACA,SAAS,0BAA0B,SAAS;AACxC,SAAO,QAAQ,QAAQ,cAAc,EAAE,cAAc,QAAQ,aAAa,EAAE,UAAU;AAC1F;AAEA,SAAS,iBAAiB,MAAM;AAC5B,SAAO,KAAK,SAAS,UAAa,KAAK,UAAU;AACrD;AACA,SAAS,gBAAgB,MAAM;AAC3B,SAAO,mBAAmB,IAAI,KAAK,oBAAoB,IAAI;AAC/D;AACA,SAAS,mBAAmB,MAAM;AAC9B,SAAO,KAAK,SAAS;AACzB;AACA,SAAS,oBAAoB,MAAM;AAC/B,SAAO,KAAK,UAAU;AAC1B;AAEA,SAAS,iCAAiC,MAAM,OAAO,MAAM,cAAc;AACvE,QAAM,MAAM,KAAK;AACjB,QAAM,MAAM,EAAE,iBAAiB,OAAO,gBAAgB,MAAM,iBAAiB,CAAC,KAAK,KAAK,KAAK,GAAG,GAAG,wBAAwB,aAAa;AACxI,MAAI,KAAK,UAAU,QAAW;AAC1B,QAAI,kBAAkB,KAAK;AAAA,EAC/B;AACA,SAAO;AACX;AACA,SAAS,qBAAqB,MAAM,OAAO,MAAM,cAAc;AAC3D,QAAM,MAAM,KAAK;AACjB,QAAM,MAAM,EAAE,iBAAiB,OAAO,gBAAgB,MAAM,iBAAiB,CAAC,KAAK,KAAK,KAAK,GAAG,GAAG,wBAAwB,aAAa;AACxI,MAAI,KAAK,cAAc,QAAW;AAC9B,QAAI,sBAAsB,KAAK;AAAA,EACnC;AACA,MAAI,KAAK,aAAa,QAAW;AAC7B,QAAI,qBAAqB,KAAK;AAAA,EAClC;AACA,MAAI,KAAK,gBAAgB,QAAW;AAChC,QAAI,wBAAwB,KAAK;AAAA,EACrC;AACA,SAAO;AACX;AACA,SAAS,yBAAyB,MAAM,OAAO,MAAM,cAAc;AAC/D,QAAM,MAAM,KAAK;AACjB,QAAM,MAAM,EAAE,iBAAiB,OAAO,gBAAgB,MAAM,iBAAiB,CAAC,KAAK,KAAK,KAAK,GAAG,GAAG,wBAAwB,aAAa;AACxI,MAAI,KAAK,iBAAiB,QAAW;AACjC,QAAI,yBAAyB,KAAK;AAAA,EACtC;AACA,MAAI,KAAK,oBAAoB,QAAW;AACpC,QAAI,4BAA4B,KAAK;AAAA,EACzC;AACA,MAAI,KAAK,kBAAkB,QAAW;AAClC,QAAI,0BAA0B,KAAK;AAAA,EACvC;AACA,MAAI,KAAK,kBAAkB,QAAW;AAClC,QAAI,0BAA0B,KAAK;AAAA,EACvC;AACA,MAAI,KAAK,qBAAqB,QAAW;AACrC,QAAI,6BAA6B,KAAK;AAAA,EAC1C;AACA,MAAI,KAAK,qBAAqB,QAAW;AACrC,QAAI,6BAA6B,KAAK;AAAA,EAC1C;AACA,SAAO;AACX;AACA,SAAS,oBAAoB,MAAM,OAAO,MAAM,cAAc;AAC1D,QAAM,MAAM,EAAE,iBAAiB,OAAO,gBAAgB,MAAM,iBAAiB,CAAC,KAAK,MAAM,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,GAAG,wBAAwB,aAAa;AAChK,MAAI,KAAK,UAAU,QAAW;AAC1B,QAAI,kBAAkB,KAAK;AAAA,EAC/B;AACA,SAAO;AACX;AACA,SAAS,4BAA4B,MAAM,OAAO,MAAM,cAAc;AAClE,QAAM,MAAM,EAAE,iBAAiB,OAAO,gBAAgB,MAAM,iBAAiB,CAAC,KAAK,MAAM,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,GAAG,wBAAwB,aAAa;AAChK,MAAI,KAAK,UAAU,QAAW;AAC1B,QAAI,kBAAkB,KAAK;AAAA,EAC/B;AACA,MAAI,KAAK,gBAAgB,QAAW;AAChC,QAAI,wBAAwB,KAAK;AAAA,EACrC;AACA,MAAI,KAAK,cAAc,QAAW;AAC9B,QAAI,sBAAsB,KAAK;AAAA,EACnC;AACA,SAAO;AACX;AACA,SAAS,uBAAuB,MAAM,OAAO,MAAM,cAAc,eAAe;AAC5E,QAAM,SAAS,cAAc,aAAa,EAAE,IAAI;AAChD,QAAM,MAAM,KAAK,IAAI,GAAG,MAAM;AAC9B,QAAMR,OAAM,KAAK,IAAI,GAAG,MAAM;AAC9B,QAAM,OAAO,OAAO,OAAO,SAAS,CAAC;AACrC,QAAM,QAAQ,CAAC,MAAM,KAAKA,MAAK,IAAI;AACnC,QAAM,EAAE,MAAM,cAAc,OAAO,GAAG,KAAK,IAAI;AAC/C,SAAO,EAAE,iBAAiB,OAAO,gBAAgB,MAAM,iBAAiB,OAAO,wBAAwB,cAAc,gBAAgB,MAAM,iBAAiB,MAAM;AACtK;AACA,SAAS,gBAAgB,KAAK;AAC1B,SAAO,IAAI,oBAAoB;AACnC;AACA,SAAS,iBAAiB,SAAS,KAAK;AACpC,MAAI,IAAI,iBAAiB,QAAW;AAChC,YAAQ,yBAAyB,IAAI;AAAA,EACzC;AACA,SAAO;AACX;AACA,SAAS,gCAAgC,KAAK,oBAAoB;AAC9D,MAAI,oBAAoB;AACpB,WAAO,mBAAmB,GAAG;AAAA,EACjC;AACA,SAAO,iBAAiB,GAAG;AAC/B;AACA,SAAS,mBAAmB,iBAAiB;AACzC,SAAO,CAAC,MAAM,OAAO,KAAK,cAAc,eAAe,uBAAuB;AAC1E,QAAI,gCAAgC,KAAK,kBAAkB,GAAG;AAC1D,aAAO,iBAAiB,EAAE,gBAAgB,MAAM,iBAAiB,OAAO,wBAAwB,aAAa,GAAG,GAAG;AAAA,IACvH;AACA,WAAO,iBAAiB,gBAAgB,MAAM,OAAO,KAAK,cAAc,aAAa,GAAG,GAAG;AAAA,EAC/F;AACJ;AACA,SAAS,wBAAwB,YAAY;AACzC,QAAM,qBAAqB;AAAA,IACvB,aAAa,mBAAmB,2BAA2B;AAAA,IAC3D,KAAK,mBAAmB,mBAAmB;AAAA,IAC3C,MAAM,mBAAmB,oBAAoB;AAAA,IAC7C,UAAU,mBAAmB,wBAAwB;AAAA,IACrD,WAAW,mBAAmB,gCAAgC;AAAA,IAC9D,MAAM,mBAAmB,gCAAgC;AAAA,IACzD,QAAQ,mBAAmB,sBAAsB;AAAA,EACrD;AACA,SAAO,mBAAmB,UAAU;AACxC;AAGA,SAAS,yBAAyB,WAAW;AACzC,SAAO,EAAE,iBAAiB,GAAG,mBAAmB,oBAAI,IAAI,GAAG,qBAAqB,UAAU;AAC9F;AACA,SAAS,2BAA2B,YAAY,IAAI;AAChD,MAAI,eAAe,UAAa,WAAW,WAAW,GAAG;AACrD,WAAO;AAAA,EACX;AACA,SAAO;AAAA,IACH,qBAAqB,GAAG,IAAI,WAAW,CAAC,EAAE,cAAc;AAAA,IACxD,oBAAoB,GAAG,IAAI,WAAW,WAAW,SAAS,CAAC,EAAE,cAAc;AAAA,EAC/E;AACJ;AACA,SAAS,iBAAiB,YAAY,gBAAgB,IAAI;AACtD,QAAM,mBAAmB,2BAA2B,YAAY,EAAE;AAClE,QAAM,uBAAuB,2BAA2B,gBAAgB,EAAE;AAC1E,MAAI,qBAAqB,UAAa,yBAAyB,QAAW;AACtE,WAAO;AAAA,MACH,4BAA4B;AAAA,MAC5B,kDAAkD,iBAAiB,sBAAsB,qBAAqB,sBAC1G,iBAAiB,uBAAuB,qBAAqB;AAAA,IACrE;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,mBAAmB,iBAAiB;AACzC,MAAI;AACJ,kBAAgB,QAAQ,CAAC,MAAM;AAC3B,QAAI,WAAW,QAAW;AACtB,eAAS,EAAE;AAAA,IACf;AAAA,EACJ,CAAC;AACD,SAAO,cAAc,MAAM;AAC/B;AACA,SAAS,iBAAiB,MAAM;AAC5B,MAAI,KAAK,2BAA2B,QAAW;AAC3C,SAAK,yBAAyB,KAAK;AAAA,EACvC;AACJ;AACA,IAAM,YAAN,MAAgB;AAAA,EACZ,YAAY,mBAAmB;AAG3B,SAAK,iCAAiC,oBAAI,IAAI;AAC9C,SAAK,+BAA+B,oBAAI,IAAI;AAC5C,SAAK,gCAAgC,oBAAI,IAAI;AAE7C,SAAK,6BAA6B,CAAC;AACnC,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,oBAAoB;AAChB,SAAK,+BAA+B,MAAM;AAC1C,SAAK,6BAA6B,MAAM;AACxC,SAAK,8BAA8B,MAAM;AACzC,SAAK,6BAA6B,CAAC;AAAA,EACvC;AAAA,EACA,wBAAwB,QAAQ,MAAM;AAClC,QAAI,oBAAoB,KAAK,+BAA+B,SAAS;AACrE,QAAI,sBAAsB;AAE1B,UAAM,iBAAiB,KAAK,6BAA6B,IAAI,MAAM;AACnE,QAAI,mBAAmB,QAAW;AAC9B,UAAI,KAAK,6BAA6B,SAAS,GAAG;AAC9C,4BAAoB;AACpB,8BAAsB;AAEtB,aAAK,+BAA+B,MAAM;AAAA,MAC9C,OACK;AAGD,mBAAW,SAAS,KAAK,4BAA4B;AACjD,cAAI,MAAM,UAAU,kBAAkB,OAAO,MAAM,GAAG;AAClD,kCAAsB;AAAA,UAC1B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,aAAa,CAAC;AAClB,QAAI,KAAK,WAAW,GAAG;AACnB,YAAM,gBAAgB,KAAK,IAAI,CAAC,MAAM,EAAE,IAAI;AAC5C,YAAM,gBAAgB,KAAK,4BAA4B,6BAA6B,IAAI;AACxF,YAAM,gBAAgB,wBAAwB,OAAO,qBAAqB,CAAC;AAC3E,YAAM,gBAAgB,OAAO,wCAAwC;AACrE,YAAM,0BAA0B,OAAO,sCAAsC;AAC7E,mBAAa,KAAK,IAAI,CAAC,MAAM,UAAU;AACnC,cAAM,OAAO,cAAc,KAAK,IAAI;AACpC,cAAM,cAAc,KAAK,4BAA4B,IAAI,IAAI;AAC7D,YAAI,gBAAgB,KAAK,+BAA+B,IAAI,WAAW;AACvE,YAAI,kBAAkB,QAAW;AAE7B,0BAAgB,yBAAyB,IAAI;AAC7C,eAAK,+BAA+B,IAAI,aAAa,aAAa;AAClE,gCAAsB;AAAA,QAC1B;AACA,cAAM,MAAM,cAAc,MAAM,cAAc,iBAAiB,MAAM,cAAc,KAAK,GAAG,eAAe,uBAAuB;AACjI,sBAAc,kBAAkB,IAAI,QAAQ,GAAG;AAC/C,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,QAAI,mBAAmB;AAGnB,WAAK,4BAA4B;AAAA,IACrC;AACA,SAAK,0BAA0B,QAAQ,UAAU;AACjD,QAAI,yBAAyB;AAC7B,QAAI,qBAAqB;AAGrB,YAAM,qBAAqB,CAAC;AAC5B,WAAK,+BAA+B,QAAQ,CAAC,cAAc;AACvD,2BAAmB,KAAK;AAAA,UACpB,YAAY;AAAA,UACZ,MAAM,UAAU;AAAA,UAChB;AAAA,UACA,cAAc,mBAAmB,UAAU,iBAAiB;AAAA,QAChE,CAAC;AAAA,MACL,CAAC;AACD,yBAAmB,KAAK,CAAC,IAAI,OAAO,KAAK,4BAA4B,IAAI,GAAG,IAAI,IAAI,KAAK,4BAA4B,IAAI,GAAG,IAAI,CAAC;AACjI,+BAAyB,KAAK,iCAAiC,kBAAkB;AAAA,IACrF;AACA,WAAO,KAAK,4BAA4B,QAAQ,wBAAwB,iBAAiB,KAAK,6BAA6B,IAAI,MAAM,GAAG,gBAAgB,KAAK,2BAA2B,CAAC;AAAA,EAC7L;AAAA,EACA,uBAAuB,QAAQ;AAC3B,WAAO,KAAK,wBAAwB,QAAQ,CAAC,CAAC;AAAA,EAClD;AAAA,EACA,2BAA2B,QAAQ,MAAM,kBAAkB;AACvD,UAAM,eAAe;AACrB,qBAAiB,YAAY;AAE7B,SAAK,4BAA4B,eAAe,IAAI;AACpD,UAAM,gBAAgB,KAAK,4BAA4B,6BAA6B,CAAC,IAAI,CAAC;AAC1F,UAAM,OAAO,cAAc,KAAK,IAAI;AACpC,UAAM,iBAAiB,KAAK,8BAA8B,IAAI,MAAM;AACpE,QAAI,CAAC,oBAAoB,mBAAmB,UAAa,KAAK,4BAA4B,IAAI,IAAI,IAAI,KAAK,4BAA4B,IAAI,cAAc,GAAG;AAExJ,YAAM,IAAI,MAAM,wCAAwC,cAAc,cAAc,IAAI,EAAE;AAAA,IAC9F;AACA,QAAI,kBAAkB,KAAK,+BAA+B,IAAI,KAAK,4BAA4B,IAAI,IAAI,CAAC;AACxG,QAAI,oBAAoB,oBAAoB,QAAW;AACnD,YAAM,IAAI,MAAM,qEAAqE;AAAA,IACzF;AAGA,UAAM,mBAAmB,oBAAoB;AAC7C,QAAI,oBAAoB,QAAW;AAE/B,wBAAkB,yBAAyB,IAAI;AAC/C,WAAK,+BAA+B,IAAI,KAAK,4BAA4B,IAAI,IAAI,GAAG,eAAe;AAAA,IACvG;AACA,UAAM,gBAAgB,wBAAwB,OAAO,qBAAqB,CAAC;AAC3E,UAAM,gBAAgB,OAAO,wCAAwC;AACrE,UAAM,0BAA0B,OAAO,sCAAsC;AAC7E,UAAM,UAAU,cAAc,MAAM,gBAAgB,iBAAiB,MAAM,aAAa,wBAAwB,eAAe,uBAAuB;AACtJ,oBAAgB,kBAAkB,IAAI,QAAQ,OAAO;AACrD,QAAI,kBAAkB;AAClB,WAAK,oCAAoC,QAAQ,SAAS,gBAAgB,eAAe;AAAA,IAC7F,OACK;AACD,WAAK,8BAA8B,QAAQ,OAAO;AAAA,IACtD;AACA,UAAM,OAAO;AAAA,MACT,kDAAkD,gBAAgB,OAAO;AAAA,MACzE,4BAA4B;AAAA,IAChC;AAEA,QAAI,CAAC,kBAAkB;AACnB,aAAO,KAAK,4BAA4B,QAAQ,IAAI,IAAI;AAAA,IAC5D;AACA,UAAM,WAAW;AAAA,MACb,YAAY;AAAA,MACZ,MAAM,gBAAgB;AAAA,MACtB,WAAW;AAAA,MACX,cAAc,mBAAmB,gBAAgB,iBAAiB;AAAA,IACtE;AACA,UAAM,cAAc,WAAW,KAAK,4BAA4B,KAAK,4BAA4B,IAAI,SAAS,IAAI,GAAG,CAAC,GAAG,MAAM,KAAK,4BAA4B,IAAI,EAAE,IAAI,IAAI,CAAC;AAI/K,SAAK,2BAA2B,OAAO,aAAa,GAAG,QAAQ;AAC/D,aAAS,QAAQ,aAAa,QAAQ,KAAK,2BAA2B,QAAQ,EAAE,OAAO;AACnF,6BAAuB,KAAK,2BAA2B,KAAK,EAAE,WAAW,KAAK;AAAA,IAClF;AACA,SAAK,4BAA4B,qBAAqB,KAAK,4BAA4B,WAAW;AAClG,WAAO,KAAK,4BAA4B,QAAQ,aAAa,IAAI;AAAA,EACrE;AAAA,EACA,8BAA8B,QAAQ,SAAS;AAC3C,QAAI,aAAa,KAAK,6BAA6B,IAAI,MAAM;AAC7D,QAAI,eAAe,QAAW;AAC1B,mBAAa,CAAC;AACd,WAAK,6BAA6B,IAAI,QAAQ,UAAU;AAAA,IAC5D;AACA,UAAM,gBAAgB,WAAW,WAAW,IAAI,WAAW,WAAW,SAAS,CAAC,IAAI;AACpF,QAAI,kBAAkB,QAAQ,KAAK,4BAA4B,IAAI,QAAQ,cAAc,IAAI,KAAK,4BAA4B,IAAI,cAAc,cAAc,GAAG;AAC7J,UAAI,gBAAgB,OAAO,GAAG;AAC1B,mBAAW,KAAK,OAAO;AAAA,MAC3B;AAAA,IACJ,OACK;AACD,UAAI,gBAAgB,OAAO,GAAG;AAC1B,mBAAW,WAAW,SAAS,CAAC,IAAI;AAAA,MACxC,OACK;AACD,mBAAW,OAAO,IAAI,CAAC;AAAA,MAC3B;AAAA,IACJ;AACA,SAAK,8BAA8B,IAAI,QAAQ,QAAQ,cAAc;AAAA,EACzE;AAAA,EACA,oCAAoC,QAAQ,SAAS,gBAAgB;AACjE,UAAM,aAAa,KAAK,6BAA6B,IAAI,MAAM;AAC/D,QAAI,eAAe,QAAW;AAC1B;AAAA,IACJ;AAEA,UAAM,QAAQ,WAAW,YAAY,gBAAgB,CAAC,KAAK,iBAAiB,IAAI,kBAAkB,YAAY;AAC9G,QAAI,gBAAgB,OAAO,GAAG;AAC1B,iBAAW,KAAK,IAAI;AAAA,IACxB,OACK;AACD,iBAAW,OAAO,OAAO,CAAC;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,0BAA0B,QAAQ,YAAY;AAC1C,QAAI,WAAW,WAAW,GAAG;AACzB,WAAK,6BAA6B,IAAI,QAAQ,WAAW,OAAO,eAAe,CAAC;AAChF,WAAK,8BAA8B,IAAI,QAAQ,WAAW,WAAW,SAAS,CAAC,EAAE,cAAc;AAAA,IACnG,OACK;AACD,WAAK,6BAA6B,OAAO,MAAM;AAC/C,WAAK,8BAA8B,OAAO,MAAM;AAAA,IACpD;AAAA,EACJ;AAAA,EACA,8BAA8B;AAK1B,eAAW,SAAS,KAAK,4BAA4B;AACjD,UAAI,MAAM,UAAU,kBAAkB,SAAS,GAAG;AAC9C,aAAK,+BAA+B,OAAO,KAAK,4BAA4B,IAAI,MAAM,IAAI,CAAC;AAAA,MAC/F;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iCAAiC,eAAe;AAC5C,QAAI,yBAAyB;AAE7B,aAAS,QAAQ,GAAG,QAAQ,KAAK,2BAA2B,UAAU,QAAQ,cAAc,QAAQ,EAAE,OAAO;AACzG,YAAM,WAAW,KAAK,2BAA2B,KAAK;AACtD,YAAM,WAAW,cAAc,KAAK;AACpC,UAAI,KAAK,4BAA4B,IAAI,SAAS,IAAI,MAAM,KAAK,4BAA4B,IAAI,SAAS,IAAI,GAAG;AAC7G,iCAAyB;AACzB;AAAA,MACJ;AAEA,eAAS,aAAa,SAAS;AAC/B,6BAAuB,SAAS,WAAW,KAAK;AAAA,IACpD;AACA,QAAI,2BAA2B,MAAM,KAAK,2BAA2B,WAAW,cAAc,QAAQ;AAGlG,+BAAyB,KAAK,IAAI,KAAK,2BAA2B,QAAQ,cAAc,MAAM;AAAA,IAClG;AACA,QAAI,2BAA2B,IAAI;AAE/B,aAAO;AAAA,IACX;AAGA,aAAS,QAAQ,wBAAwB,QAAQ,cAAc,QAAQ,EAAE,OAAO;AAC5E,6BAAuB,cAAc,KAAK,EAAE,WAAW,KAAK;AAAA,IAChE;AAEA,SAAK,4BAA4B,qBAAqB,eAAe,sBAAsB;AAC3F,SAAK,6BAA6B;AAClC,WAAO;AAAA,EACX;AAAA,EACA,yBAAyB;AACrB,QAAI,KAAK,6BAA6B,SAAS,GAAG;AAE9C,aAAO;AAAA,IACX;AACA,QAAI,YAAY;AAChB,SAAK,6BAA6B,QAAQ,CAAC,SAAS;AAChD,UAAI,KAAK,WAAW,GAAG;AACnB,oBAAY,KAAK,IAAI,WAAW,KAAK,KAAK,SAAS,CAAC,EAAE,eAAe;AAAA,MACzE;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,4BAA4B,eAAe,wBAAwB,MAAM;AACrE,UAAM,qBAAqB;AAAA,MACvB,kBAAkB,oBAAI,IAAI;AAAA,MAC1B,qBAAqB;AAAA,QACjB,qBAAqB,KAAK,uBAAuB;AAAA,MACrD;AAAA,IACJ;AACA,QAAI,2BAA2B,IAAI;AAG/B,WAAK,6BAA6B,QAAQ,CAAC,MAAM,MAAM;AACnD,2BAAmB,iBAAiB,IAAI,GAAG;AAAA,UACvC,gBAAgB;AAAA,UAChB,gBAAgB,MAAM,gBAAgB,OAAO;AAAA,QACjD,CAAC;AAAA,MACL,CAAC;AAID,UAAI,CAAC,KAAK,6BAA6B,IAAI,aAAa,GAAG;AACvD,2BAAmB,iBAAiB,IAAI,eAAe,EAAE,gBAAgB,CAAC,GAAG,gBAAgB,KAAK,CAAC;AAAA,MACvG;AACA,yBAAmB,oBAAoB,mBAAmB,KAAK;AAC/D,yBAAmB,oBAAoB,mCAAmC;AAAA,IAC9E,OACK;AACD,YAAM,aAAa,KAAK,6BAA6B,IAAI,aAAa;AAEtE,yBAAmB,iBAAiB,IAAI,eAAe,EAAE,gBAAgB,cAAc,CAAC,GAAG,gBAAgB,KAAK,CAAC;AAAA,IACrH;AACA,WAAO;AAAA,EACX;AACJ;AACA,SAAS,uBAAuB,WAAW,OAAO;AAE9C,YAAU,kBAAkB;AAE5B,YAAU,kBAAkB,QAAQ,CAAC,cAAc;AAC/C,cAAU,kBAAkB;AAAA,EAChC,CAAC;AACL;AAEA,SAAS,uBAAuB,MAAM,MAAM;AACxC,SAAO,KAAK,iBAAiB;AACjC;AACA,SAAS,uBAAuB,MAAM,MAAM;AACxC,SAAO,OAAO,KAAK;AACvB;AACA,SAAS,mBAAmB,OAAO,OAAO,eAAe;AACrD,QAAM,WAAW,MAAM,eAAe;AACtC,QAAM,UAAU,MAAM,gBAAgB;AACtC,QAAM,OAAO,WAAW,OAAO,UAAU,sBAAsB;AAC/D,QAAM,KAAK,WAAW,OAAO,SAAS,sBAAsB;AAC5D,MAAI,CAAC,eAAe;AAChB,WAAO,EAAE,MAAM,GAAG;AAAA,EACtB;AACA,MAAI,eAAe;AACnB,MAAI,aAAa;AACjB,MAAI,OAAO,KAAK,OAAO,MAAM,UAAU,MAAM,IAAI,EAAE,kBAAkB,UAAU;AAC3E,mBAAe,OAAO;AAAA,EAC1B;AACA,MAAI,KAAK,KAAK,KAAK,MAAM,UAAU,MAAM,KAAK,CAAC,EAAE,kBAAkB,SAAS;AACxE,iBAAa,KAAK;AAAA,EACtB;AACA,SAAO,EAAE,MAAM,cAAc,IAAI,WAAW;AAChD;AAEA,IAAM,qBAAN,MAAyB;AAAA,EACrB,YAAY,QAAQ,OAAO,sBAAsB;AAC7C,SAAK,yBAAyB;AAC9B,SAAK,6BAA6B;AAClC,SAAK,gCAAgC;AACrC,SAAK,mBAAmB,CAAC;AACzB,SAAK,+BAA+B;AACpC,SAAK,oBAAoB;AACzB,SAAK,mBAAmB;AACxB,SAAK,iCAAiC;AAAA,EAC1C;AAAA,EACA,iBAAiB,YAAY;AACzB,SAAK,yBAAyB;AAC9B,QAAI,eAAe,QAAQ;AACvB,WAAK,6BAA6B;AAAA,IACtC;AACA,QAAI,eAAe,WAAW;AAC1B,WAAK,gCAAgC;AAAA,IACzC;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,QAAI,CAAC,KAAK,kBAAkB,kBAAkB,GAAG;AAC7C,aAAO;AAAA,IACX;AACA,SAAK,oBAAoB;AACzB,WAAO,KAAK,iCAAiC,OAAO,OAAO,KAAK;AAAA,EACpE;AAAA,EACA,2BAA2B;AACvB,SAAK,mBAAmB,KAAK,iBAAiB,IAAI,CAAC,UAAU;AAAA,MACzD,GAAG;AAAA,MACH,GAAG,KAAK,kBAAkB,qBAAqB,EAAE,mBAAmB,KAAK,cAAc;AAAA,IAC3F,EAAE;AAAA,EACN;AAAA,EACA,+BAA+B;AAC3B,SAAK,+BAA+B;AAAA,EACxC;AAAA,EACA,sBAAsB;AAClB,QAAI,KAAK,4BAA4B;AACjC,WAAK,yBAAyB;AAC9B,WAAK,6BAA6B;AAAA,IACtC;AACA,QAAI,KAAK,+BAA+B;AACpC,WAAK,yBAAyB;AAC9B,WAAK,gCAAgC;AAAA,IACzC;AACA,QAAI,KAAK,wBAAwB;AAC7B,WAAK,wBAAwB;AAC7B,WAAK,yBAAyB;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,UAAM,aAAa,KAAK,kBAAkB,qBAAqB;AAC/D,UAAM,YAAY,KAAK,iBAAiB,oBAAoB;AAC5D,SAAK,6BAA6B;AAClC,QAAI,UAAU,kBAAkB,KAAK,WAAW,kBAAkB,GAAG;AACjE;AAAA,IACJ;AACA,UAAM,cAAc,UAAU,6BAA6B;AAC3D,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AACA,QAAI,KAAK,kBAAkB,eAAe,EAAE,eAAe,MAAM,GAAG;AAChE;AAAA,IACJ;AACA,UAAM,aAAa,KAAK,kBAAkB,qBAAqB;AAC/D,QAAI,eAAe,MAAM;AACrB;AAAA,IACJ;AACA,SAAK,+BAA+B,mBAAmB,KAAK,kBAAkB,aAAa,KAAK,8BAA8B;AAC9H,SAAK,gCAAgC,YAAY,WAAW,WAAW,eAAe;AACtF,SAAK,+BAA+B;AAAA,EACxC;AACJ;AAEA,IAAM,kCAAN,MAAsC;AAAA,EAClC,YAAY,gBAAgB,YAAY;AACpC,SAAK,2BAA2B;AAChC,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,eAAe,QAAQ,WAAW,aAAa;AAC3C,SAAK,yBAAyB,KAAK,QAAQ,KAAK,sBAAsB,WAAW,WAAW;AAAA,EAChG;AACJ;AACA,IAAM,uBAAN,cAAmC,mBAAmB;AAAA,EAClD,YAAY,QAAQ,OAAO,UAAU;AACjC,UAAM,QAAQ,OAAO,KAAK;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB,IAAI,gCAAgC,KAAK,mBAAmB,SAAS,GAAG,CAAC,UAAU;AAC1G,YAAM,aAAa,OAAO,qBAAqB;AAC/C,UAAI,eAAe,MAAM;AACrB,eAAO;AAAA,MACX;AACA,aAAO,OAAO,qBAAqB,EAAE,4BAA4B,OAAO,WAAW,eAAe;AAAA,IACtG,CAAC;AAAA,EACL;AAAA,EACA,4BAA4B,SAAS;AACjC,WAAO,KAAK,mBAAmB,kBAAkB,OAAO;AAAA,EAC5D;AAAA,EACA,uBAAuB,MAAM;AACzB,WAAO,KAAK,mBAAmB,aAAa,IAAI;AAAA,EACpD;AAAA,EACA,2BAA2B;AACvB,UAAM,UAAU,KAAK,kBAAkB,qBAAqB;AAC5D,SAAK,mBAAmB,KAAK,kBAAkB,eAAe,EAAE,eAAe,EAC1E,IAAI,CAAC,QAAQ;AACd,aAAO;AAAA,QACH,gBAAgB,IAAI;AAAA,QACpB,aAAa;AAAA,QACb,GAAG,QAAQ,mBAAmB,IAAI,eAAe;AAAA,QACjD,wBAAwB,IAAI;AAAA,MAChC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,gCAAgC,YAAY,WAAW;AACnD,cAAU,+BAA+B,KAAK,kBAAkB,gBAAgB,KAAK,4BAA4B,CAAC;AAAA,EACtH;AAAA,EACA,iCAAiC;AAC7B,SAAK,mBAAmB,OAAO;AAAA,MAC3B,MAAM,KAAK,iBAAiB,IAAI,cAAc;AAAA,MAC9C,YAAY,KAAK,iBAAiB,oBAAoB,EAAE,qBAAqB;AAAA,MAC7E,cAAc,KAAK;AAAA,IACvB,GAAG,KAAK,kBAAkB,kBAAkB,CAAC;AAAA,EACjD;AACJ;AACA,SAAS,eAAe,MAAM;AAC1B,SAAO;AAAA,IACH,GAAG,KAAK;AAAA,IACR,MAAM,KAAK;AAAA,IACX,cAAc,KAAK;AAAA,IACnB,UAAU,KAAK;AAAA,EACnB;AACJ;AAEA,IAAM,sBAAsB;AAAA,EACxB,OAAO;AACX;AACA,IAAM,mBAAmB,CAAC,QAAQ,OAAO,mBAAmB;AACxD,QAAM,WAAW,OAAO,cAAc;AACtC,SAAO,IAAI,qBAAqB,QAAQ,OAAO,QAAQ;AAC3D;AACA,IAAM,+BAA+B,CAAC,aAAa;AAC/C,QAAM,aAAa;AAAA,IACf,MAAM;AAAA,IACN,WAAW;AAAA,IACX,gBAAgB,EAAE,GAAG,qBAAqB,GAAG,SAAS,eAAe,EAAE;AAAA;AAAA;AAAA;AAAA,IAIvE,0BAA0B;AAAA,IAC1B,0BAA0B;AAAA,EAC9B;AACA,SAAO;AACX;AAEA,IAAM,qBAAqB,CAAC,UAAU;AAClC,SAAO,MAAM,6BAA6B;AAC9C;AAEA,SAAS,gBAAgB,SAAS;AAC9B,QAAM,OAAO;AAAA,IACT,OAAO,QAAQ;AAAA,MAAgB;AAAA;AAAA,IAA+B;AAAA,IAC9D,MAAM,QAAQ;AAAA,EAClB;AACA,MAAI,QAAQ,2BAA2B,QAAW;AAC9C,SAAK,eAAe,QAAQ;AAAA,EAChC;AACA,SAAO;AACX;AACA,SAAS,SAAS,SAAS;AACvB,QAAM,SAAS,gBAAgB,OAAO;AACtC,MAAI,QAAQ,oBAAoB,QAAW;AACvC,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AACA,SAAO;AACX;AACA,SAAS,SAAS,SAAS;AACvB,QAAM,SAAS,gBAAgB,OAAO;AACtC,MAAI,QAAQ,wBAAwB,QAAW;AAC3C,WAAO,YAAY,QAAQ;AAAA,EAC/B;AACA,MAAI,QAAQ,uBAAuB,QAAW;AAC1C,WAAO,WAAW,QAAQ;AAAA,EAC9B;AACA,MAAI,QAAQ,0BAA0B,QAAW;AAC7C,WAAO,cAAc,QAAQ;AAAA,EACjC;AACA,SAAO;AACX;AACA,SAAS,aAAa,SAAS;AAC3B,QAAM,SAAS,gBAAgB,OAAO;AACtC,MAAI,QAAQ,2BAA2B,QAAW;AAC9C,WAAO,eAAe,QAAQ;AAAA,EAClC;AACA,MAAI,QAAQ,8BAA8B,QAAW;AACjD,WAAO,kBAAkB,QAAQ;AAAA,EACrC;AACA,MAAI,QAAQ,4BAA4B,QAAW;AAC/C,WAAO,gBAAgB,QAAQ;AAAA,EACnC;AACA,MAAI,QAAQ,4BAA4B,QAAW;AAC/C,WAAO,gBAAgB,QAAQ;AAAA,EACnC;AACA,MAAI,QAAQ,+BAA+B,QAAW;AAClD,WAAO,mBAAmB,QAAQ;AAAA,EACtC;AACA,MAAI,QAAQ,+BAA+B,QAAW;AAClD,WAAO,mBAAmB,QAAQ;AAAA,EACtC;AACA,SAAO;AACX;AACA,SAAS,SAAS,SAAS;AACvB,QAAM,OAAO;AAAA,IACT,MAAM,QAAQ;AAAA,MAAgB;AAAA;AAAA,IAA8B;AAAA,IAC5D,MAAM,QAAQ;AAAA,MAAgB;AAAA;AAAA,IAA8B;AAAA,IAC5D,KAAK,QAAQ;AAAA,MAAgB;AAAA;AAAA,IAA6B;AAAA,IAC1D,OAAO,QAAQ;AAAA,MAAgB;AAAA;AAAA,IAA+B;AAAA,IAC9D,MAAM,QAAQ;AAAA,EAClB;AACA,MAAI,QAAQ,2BAA2B,QAAW;AAC9C,SAAK,eAAe,QAAQ;AAAA,EAChC;AACA,SAAO;AACX;AACA,SAAS,QAAQ,SAAS;AACtB,QAAM,SAAS,SAAS,OAAO;AAC/B,MAAI,QAAQ,oBAAoB,QAAW;AACvC,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AACA,SAAO;AACX;AACA,SAAS,gBAAgB,SAAS;AAC9B,QAAM,SAAS,SAAS,OAAO;AAC/B,QAAM,EAAE,iBAAiB,OAAO,uBAAuB,aAAa,qBAAqB,UAAU,IAAI;AACvG,MAAI,UAAU,QAAW;AACrB,WAAO,QAAQ;AAAA,EACnB;AACA,MAAI,gBAAgB,QAAW;AAC3B,WAAO,cAAc;AAAA,EACzB;AACA,MAAI,cAAc,QAAW;AACzB,WAAO,YAAY;AAAA,EACvB;AACA,SAAO;AACX;AACA,SAAS,qBAAqB,YAAY;AACtC,QAAM,yBAAyB;AAAA,IAC3B,MAAO;AAAA,IACP,MAAO;AAAA,IACP,UAAW;AAAA,IACX,WAAY;AAAA,IACZ,KAAM;AAAA,IACN,aAAc;AAAA,IACd,QAAS;AAAA,EACb;AACA,SAAO,uBAAuB,UAAU;AAC5C;AACA,SAAS,WAAW,SAAS;AACzB,QAAM,OAAO,QAAQ;AACrB,SAAO;AAAA,IACH,GAAG,QAAQ;AAAA,IACX;AAAA,EACJ;AACJ;AAEA,IAAM,2BAA2B;AAAA,EAC7B,UAAU;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,SAAS;AAAA,IACT,cAAc;AAAA,IACd,sBAAsB;AAAA,EAC1B;AAAA,EACA,UAAU;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,SAAS;AAAA,IACT,cAAc;AAAA,IACd,sBAAsB;AAAA,EAC1B;AAAA,EACA,MAAM;AACV;AAEA,IAAM,sBAAsB;AAAA,EACxB,WAAW;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,SAAS;AAAA,EACb;AAAA,EACA,WAAW;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,SAAS;AAAA,EACb;AACJ;AAEA,IAAM,wBAAwB;AAAA,EAC1B,YAAY;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,EACX;AAAA,EACA,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,OAAO;AAAA,IACH,cAAc;AAAA,IACd,gBAAgB;AAAA,IAChB,qBAAqB;AAAA,EACzB;AAAA,EACA,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,cAAc,CAAC;AACnB;AAEA,IAAM,4BAA4B;AAAA,EAC9B,WAAW;AAAA,EACX,MAAM;AAAA,EACN,aAAa;AAAA,EACb,aAAa;AAAA,EACb,eAAe;AAAA,EACf,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,SAAS;AAAA,EACT,cAAc;AAAA,EACd,cAAc;AAAA,IACV,QAAQ;AAAA,IACR,KAAK;AAAA,EACT;AAAA,EACA,cAAc;AAAA,EACd,4BAA4B;AAChC;AAEA,IAAM,2BAA2B;AAAA,EAC7B,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,eAAe;AAAA,EACf,aAAa;AAAA,EACb,cAAc;AAAA,EACd,8BAA8B;AAAA,EAC9B,uBAAuB;AAAA,EACvB,eAAe;AAAA,EACf,aAAa;AAAA,EACb,SAAS;AAAA,EACT,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,2BAA2B;AAAA,EAC3B,+CAA+C;AAAA,EAC/C,cAAc;AAAA,EACd,qBAAqB;AAAA,EACrB,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,yBAAyB;AAC7B;AAEA,SAAS,uBAAuB;AAC5B,SAAO;AAAA,IACH,gBAAgB;AAAA,IAChB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,MAAM;AAAA,IACN,oBAAoB;AAAA,MAChB,GAAG;AAAA,IACP;AAAA,IACA,gBAAgB;AAAA,MACZ,GAAG;AAAA,MACH,SAAS;AAAA,IACb;AAAA,IACA,iBAAiB;AAAA,MACb,GAAG;AAAA,MACH,SAAS;AAAA,IACb;AAAA,IACA,WAAW;AAAA,IACX,cAAc;AAAA,MACV,QAAQ,wBAAwB,UAAU,WAAW;AAAA,MACrD,YAAY;AAAA,IAChB;AAAA,IACA,cAAc;AAAA,MACV,YAAY;AAAA,MACZ,kBAAkB;AAAA,MAClB,eAAe;AAAA,MACf,eAAe;AAAA,IACnB;AAAA,IACA,aAAa;AAAA,MACT,sBAAsB;AAAA,QAClB,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,sBAAsB;AAAA,QAClB,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,YAAY;AAAA,MACZ,OAAO;AAAA,IACX;AAAA,IACA,eAAe;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AAAA,IACA,cAAc;AAAA,MACV,UAAU;AAAA,IACd;AAAA,EACJ;AACJ;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAChB,YAAY,aAAa,cAAc,WAAW;AAC9C,SAAK,wBAAwB;AAC7B,SAAK,yBAAyB;AAC9B,SAAK,sBAAsB,aAAa;AAAA,EAC5C;AAAA,EACA,aAAa,SAAS;AAClB,SAAK,sBAAsB,gBAAgB,EAAE,iCAAiC,KAAK,wBAAwB,SAAS,KAAK,mBAAmB;AAAA,EAChJ;AAAA,EACA,UAAU;AACN,WAAO,KAAK,qBAAqB,EAAE,kBAAkB;AAAA,EACzD;AAAA,EACA,QAAQ;AACJ,QAAI,CAAC,oBAAoB,KAAK,sBAAsB,GAAG;AACnD,aAAO;AAAA,IACX;AACA,WAAO,KAAK,sBAAsB,4BAA4B,KAAK,sBAAsB;AAAA,EAC7F;AAAA,EACA,gBAAgB,OAAO;AACnB,SAAK,aAAa,KAAK;AACvB,SAAK,qBAAqB,EAAE,8BAA8B,IAAI,eAAe,MAAM,MAAM,MAAM,EAAE,CAAC;AAAA,EACtG;AAAA,EACA,kBAAkB;AACd,UAAM,QAAQ,KAAK,qBAAqB,EAAE,qBAAqB;AAC/D,WAAO,UAAU,OAAO,OAAO;AAAA,MAC3B,MAAM,MAAM,mBAAmB;AAAA,MAC/B,IAAI,MAAM,mBAAmB;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,aAAa,IAAI;AACb,SAAK,aAAa,EAAE,WAAW,GAAG,CAAC;AAAA,EACvC;AAAA,EACA,uBAAuB;AACnB,WAAO,cAAc,KAAK,sBAAsB,gBAAgB,EAAE,yBAAyB,KAAK,wBAAwB,KAAK,mBAAmB,CAAC,EAAE;AAAA,EACvJ;AACJ;AAEA,IAAM,UAAN,MAAc;AAAA,EACV,YAAY,aAAa,iBAAiB,MAAM,UAAU;AACtD,SAAK,wBAAwB;AAC7B,SAAK,iBAAiB;AACtB,SAAK,4BAA4B;AACjC,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,YAAY;AACR,WAAO,KAAK,eAAe,iBAAiB;AAAA,EAChD;AAAA,EACA,UAAU,QAAQ;AACd,UAAM,aAAa,KAAK,sBAAsB,gBAAgB;AAC9D,UAAM,YAAY,WAAW,uBAAuB,KAAK,cAAc;AACvE,eAAW,4BAA4B,WAAW,MAAM;AAAA,EAC5D;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK,eAAe,wBAAwB;AAAA,EACvD;AAAA,EACA,iBAAiB,eAAe;AAC5B,SAAK,eAAe,2BAA2B,aAAa;AAC5D,SAAK,sBAAsB,gBAAgB,EAAE,qBAAqB;AAAA,EACtE;AAAA,EACA,YAAY;AACR,WAAO,KAAK,sBAAsB,gBAAgB,EAAE,uBAAuB,KAAK,cAAc;AAAA,EAClG;AAAA,EACA,OAAO,WAAW;AACd,UAAM,eAAe,KAAK,UAAU;AACpC,QAAI,iBAAiB,WAAW;AAC5B;AAAA,IACJ;AACA,WAAO,aAAa,KAAK,YAAY,KAAK,sBAAsB,sBAAsB,EAAE,QAAQ,oBAAoB;AACpH,SAAK,sBAAsB,gBAAgB,EAAE,mBAAmB,cAAc,SAAS;AAAA,EAC3F;AAAA,EACA,YAAY;AACR,WAAO,KAAK,eAAe,iBAAiB,EAAE,IAAI,CAAC,WAAW,KAAK,0BAA0B,MAAM,CAAC,KAAK,CAAC;AAAA,EAC9G;AAAA,EACA,iBAAiB;AACb,UAAM,UAAU,KAAK,sBAAsB,sBAAsB;AACjE,QAAI,CAAC,WAAW,QAAQ,WAAW,KAAK,CAAC,QAAQ,KAAK,UAAU,CAAC,GAAG;AAChE,aAAO;AAAA,IACX;AACA,WAAO,QAAQ,KAAK,UAAU,CAAC,EAAE,qBAAqB;AAAA,EAC1D;AAAA,EACA,gBAAgB,WAAW;AACvB,SAAK,eAAe,0BAA0B,SAAS;AACvD,QAAI,UAAU,UAAU;AACpB,gBAAU,SAAS;AAAA,QACf,OAAO,KAAK;AAAA,QACZ,eAAe,MAAM,KAAK,eAAe,gBAAgB,EAAE,qBAAqB;AAAA,MACpF,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,gBAAgB,WAAW;AACvB,SAAK,eAAe,0BAA0B,SAAS;AAAA,EAC3D;AAAA,EACA,WAAW,cAAc;AACrB,UAAM,aAAa,KAAK,eAAe,yBAAyB,YAAY;AAC5E,QAAI,eAAe,MAAM;AACrB,YAAM,IAAI,MAAM,oCAAoC,YAAY,EAAE;AAAA,IACtE;AACA,WAAO,IAAI,cAAc,KAAK,uBAAuB,cAAc,KAAK,UAAU,CAAC;AAAA,EACvF;AAAA,EACA,qBAAqB,UAAU;AAC3B,SAAK,eAAe,+BAA+B,QAAQ;AAAA,EAC/D;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK,eAAe,4BAA4B;AAAA,EAC3D;AAAA,EACA,gBAAgB,gBAAgB,UAAU,CAAC,GAAG,YAAY,GAAG;AACzD,WAAO,KAAK,oBAAoB,gBAAgB,gBAAgB,SAAS,SAAS;AAAA,EACtF;AAAA,EACA,UAAU,YAAY,UAAU,CAAC,GAAG;AAChC,WAAO,KAAK,oBAAoB,UAAU,YAAY,SAAS,KAAK,UAAU,CAAC;AAAA,EACnF;AACJ;AAGA,SAAS,sBAAsB,SAAS;AACpC,SAAO,OAAO,QAAQ,UAAU,UAAU,oEAAoE,OAAO,QAAQ,KAAK,GAAG;AACzI;AACA,SAAS,qBAAqB,MAAM,IAAI,kBAAkB,OAAO;AAC7D,MAAI,KAAK,WAAW,GAAG;AACnB;AAAA,EACJ;AACA,MAAI,WAAW,GAAG,IAAI,KAAK,CAAC,EAAE,IAAI;AAClC,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAClC,UAAM,cAAc,GAAG,IAAI,KAAK,CAAC,EAAE,IAAI;AACvC,UAAM,cAAc,kBAAkB,YAAY,cAAc,WAAW;AAC3E,WAAO,aAAa,2CAA2C,CAAC,UAAU,WAAW,eAAe,QAAQ,EAAE;AAC9G,eAAW;AAAA,EACf;AACJ;AACA,SAAS,sBAAsB,MAAM,MAAM;AACvC,OAAK,QAAQ,WAAW,IAAI,CAAC;AACjC;AACA,SAAS,WAAW,MAAM;AACtB,UAAQ,MAAM;AAAA,IACV,KAAK;AAAA,IACL,KAAK;AACD,aAAO,aAAa,KAAK,MAAM,IAAI;AAAA,IACvC,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO,cAAc,KAAK,MAAM,IAAI;AAAA,IACxC,KAAK;AACD,aAAO,gBAAgB,KAAK,IAAI;AAAA,EACxC;AACJ;AACA,SAAS,aAAa,MAAM,SAAS;AACjC,MAAI,CAAC,gBAAgB,OAAO,GAAG;AAC3B;AAAA,EACJ;AACA,GAAC,QAAQ,QAAQ,OAAO,OAAO,EAAE,QAAQ,CAAC,QAAQ;AAC9C,WAAO,OAAO,QAAQ,GAAG,MAAM,UAAU,GAAG,IAAI,8BAA8B,GAAG,0BAA0B,OAAO,QAAQ,GAAG,CAAC,WAAW,QAAQ,GAAG,CAAC,EAAE;AACvJ,WAAO,YAAY,QAAQ,GAAG,CAAC,GAAG,GAAG,IAAI,8BAA8B,GAAG,oBAAoB,eAAe,YAAY,EAAE,CAAC,QAAQ,eAAe,YAAY,EAAE,CAAC,SAAS,OAAO,QAAQ,GAAG,CAAC,WAAW,QAAQ,GAAG,CAAC,EAAE;AAAA,EAC3N,CAAC;AACL;AACA,SAAS,cAAc,MAAM,UAAU;AACnC,MAAI,CAAC,gBAAgB,QAAQ,GAAG;AAC5B;AAAA,EACJ;AACA,SAAO,OAAO,SAAS,UAAU,UAAU,GAAG,IAAI,iDAAiD,OAAO,SAAS,KAAK,WAAW,SAAS,KAAK,EAAE;AACnJ,SAAO,YAAY,SAAS,KAAK,GAAG,GAAG,IAAI,2CAA2C,eAAe,YAAY,EAAE,CAAC,QAAQ,eAAe,YAAY,EAAE,CAAC,SAAS,OAAO,SAAS,KAAK,WAAW,SAAS,KAAK,EAAE;AACvN;AACA,SAAS,kBAGP;AAEE;AACJ;AACA,IAAM,iBAAiB,OAAO,mBAAmB;AACjD,IAAM,iBAAiB,OAAO,mBAAmB;AACjD,SAAS,YAAY,OAAO;AACxB,SAAO,SAAS,kBAAkB,SAAS;AAC/C;AAEA,IAAM,2BAA2B;AAAA,EAC7B,OAAO;AAAA,EACP,OAAO;AAAA,EACP,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,OAAO;AAAA,EACP,gBAAgB;AAAA,EAChB,oBAAoB;AACxB;AAEA,IAAM,YAAN,MAAgB;AAAA,EACZ,YAAY,WAAW;AACnB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,aAAa,SAAS;AAClB,SAAK,oBAAoB,uBAAuB,OAAO;AAAA,EAC3D;AAAA,EACA,UAAU;AACN,WAAO,KAAK,oBAAoB,kBAAkB;AAAA,EACtD;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,YAAN,MAAgB;AAAA,EACZ,YAAY,QAAQ,qBAAqB,uBAAuB,UAAU,mBAAmB,eAAe;AACxG,SAAK,gCAAgC,IAAI,SAAS;AAClD,SAAK,oBAAoB;AACzB,SAAK,iCAAiC;AACtC,SAAK,kCAAkC;AACvC,SAAK,8BAA8B;AACnC,SAAK,sBAAsB;AAC3B,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,oBAAoB;AAChB,SAAK,8BAA8B,kBAAkB;AAAA,EACzD;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,kBAAkB,oBAAoB;AAAA,EACtD;AAAA,EACA,kBAAkB,OAAO;AACrB,UAAM,aAAa,KAAK,kBAAkB,qBAAqB;AAC/D,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,kBAAkB,qBAAqB,EAAE,4BAA4B,OAAO,WAAW,eAAe;AAAA,EACtH;AAAA,EACA,kBAAkB,YAAY;AAC1B,UAAM,aAAa,KAAK,kBAAkB,qBAAqB;AAC/D,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,kBAAkB,qBAAqB,EAAE,4BAA4B,YAAY,WAAW,eAAe;AAAA,EAC3H;AAAA,EACA,mBAAmB,OAAO;AACtB,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,IACX;AAEA,UAAM,iBAAiB,IAAI,sBAAsB,IAAI,UAAU,MAAM,MAAM,MAAM,EAAE,CAAC,EAAE,sBAAsB;AAC5G,UAAM,OAAO,KAAK,kBAAkB,eAAe;AACnD,QAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,UAAM,sBAAsB,KAAK;AAAA,MAAiB,eAAe,eAAe;AAAA,MAAG;AAAA;AAAA,IAAsC;AACzH,UAAM,qBAAqB,KAAK;AAAA,MAAiB,eAAe,gBAAgB;AAAA,MAAG;AAAA;AAAA,IAAsC;AACzH,UAAM,iBAAiB,cAAc,KAAK,qBAAqB,CAAC;AAChE,UAAM,gBAAgB,cAAc,KAAK,oBAAoB,CAAC;AAK9D,QAAI,wBAAwB,QAAQ,uBAAuB,QAAQ,oBAAoB,kBAAkB,mBAAmB,iBAAiB;AACzI,aAAO;AAAA,QACH,YAAY,MAAM,OAAO;AAAA,QACzB,WAAW,gBAAgB,MAAM;AAAA,MACrC;AAAA,IACJ;AACA,UAAM,aAAc,wBAAwB,QAAQ,oBAAoB,oBAAoB,iBACtF,MAAM,OAAO,iBACb,oBAAoB,kBAAkB;AAC5C,UAAM,YAAa,uBAAuB,QAAQ,mBAAmB,oBAAoB,gBACnF,gBAAgB,MAAM,KACtB,gBAAgB,mBAAmB;AACzC,UAAM,SAAS,EAAE,YAAY,UAAU;AAEvC,QAAI,wBAAwB,QAAQ,uBAAuB,MAAM;AAC7D,aAAO,OAAO,oBAAoB;AAClC,aAAO,KAAK,mBAAmB;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,QAAQ,MAAM;AACV,yBAAqB,MAAM,KAAK,2BAA2B;AAC3D,0BAAsB,KAAK,kBAAkB,qBAAqB,GAAG,IAAI;AACzE,SAAK,+BAA+B,uBAAuB,KAAK,mBAAmB,IAAI;AACvF,SAAK,wBAAwB,MAAM;AAAA,EACvC;AAAA,EACA,OAAO,KAAK,mBAAmB,OAAO;AAClC,0BAAsB,KAAK,kBAAkB,qBAAqB,GAAG,CAAC,GAAG,CAAC;AAC1E,SAAK,+BAA+B,qBAAqB,KAAK,mBAAmB,KAAK,gBAAgB;AACtG,SAAK,wBAAwB,QAAQ;AAAA,EACzC;AAAA,EACA,YAAY,cAAc,mBAAmB;AACzC,UAAM,OAAO,KAAK,kBAAkB,eAAe,EAAE,iBAAiB,cAAc,iBAAiB;AACrG,QAAI,SAAS,MAAM;AAEf,aAAO;AAAA,IACX;AACA,UAAM,UAAU,qBAAqB,KAAK,WAAW,CAAC;AACtD,WAAO,QAAQ,IAAI;AAAA,EACvB;AAAA,EACA,OAAO;AACH,UAAM,gBAAgB,qBAAqB,KAAK,WAAW,CAAC;AAC5D,UAAM,OAAO,KAAK,kBAAkB,eAAe,EAAE,eAAe;AACpE,WAAO,KAAK,IAAI,CAAC,QAAQ,cAAc,GAAG,CAAC;AAAA,EAC/C;AAAA,EACA,qBAAqB,SAAS;AAC1B,SAAK,8BAA8B,oBAAoB,OAAO;AAAA,EAClE;AAAA,EACA,uBAAuB,SAAS;AAC5B,SAAK,8BAA8B,sBAAsB,OAAO;AAAA,EACpE;AAAA,EACA,aAAa,SAAS;AAClB,SAAK,kBAAkB,uBAAuB,OAAO;AAAA,EACzD;AAAA,EACA,UAAU;AACN,WAAO,MAAM,KAAK,kBAAkB,kBAAkB,CAAC;AAAA,EAC3D;AAAA,EACA,aAAa;AACT,WAAO,KAAK,gCAAgC,WAAW,KAAK,kBAAkB,qBAAqB,EAAE,aAAa,GAAG,KAAK,QAAQ,EAAE,UAAU,CAAC;AAAA,EACnJ;AAAA,EACA,gBAAgB,SAAS;AACrB,0BAAsB,OAAO;AAC7B,UAAM,gBAAgB,MAAM,MAAM,wBAAwB,GAAG,OAAO;AACpE,UAAM,YAAY,KAAK,kBAAkB,0BAA0B,aAAa;AAChF,WAAO,IAAI,UAAU,SAAS;AAAA,EAClC;AAAA,EACA,gBAAgB,MAAM;AAClB,SAAK,kBAAkB,0BAA0B,KAAK,oBAAoB,CAAC;AAAA,EAC/E;AAAA,EACA,aAAa;AACT,WAAO,KAAK,kBAAkB,qBAAqB,EAAE,IAAI,CAAC,cAAc,IAAI,UAAU,SAAS,CAAC;AAAA,EACpG;AAAA,EACA,aAAa;AACT,WAAO,KAAK,kBAAkB,qBAAqB;AAAA,EACvD;AAAA,EACA,gBAAgB,WAAW;AAGvB,SAAK,kBAAkB,0BAA0B,SAAS;AAC1D,QAAI,UAAU,UAAU;AACpB,gBAAU,SAAS;AAAA,QACf,OAAO,KAAK;AAAA,QACZ,QAAQ;AAAA,QACR,eAAe,MAAM,KAAK,kBAAkB,gBAAgB,EAAE,qBAAqB;AAAA,QACnF,mBAAmB,KAAK;AAAA,MAC5B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,gBAAgB,WAAW;AACvB,SAAK,kBAAkB,0BAA0B,SAAS;AAC1D,QAAI,UAAU,UAAU;AACpB,gBAAU,SAAS;AAAA,IACvB;AACA,SAAK,kBAAkB,gBAAgB,EAAE,qBAAqB;AAAA,EAClE;AAAA,EACA,UAAU;AACN,UAAM,SAAS,KAAK;AACpB,UAAM,OAAO,cAAc,KAAK,kBAAkB,gBAAgB,EAAE,wBAAwB,MAAM,CAAC;AACnG,WAAO,KAAK,wBAAwB,IAAI;AAAA,EAC5C;AAAA,EACA,WAAW,WAAW;AAClB,SAAK,kBAAkB,gBAAgB,EAAE,2BAA2B,KAAK,mBAAmB,SAAS;AAAA,EACzG;AAAA,EACA,cAAc;AACV,UAAM,OAAO,KAAK,kBAAkB,gBAAgB,EAAE,wBAAwB,KAAK,iBAAiB;AACpG,QAAI,SAAS,MAAM;AACf,aAAO;AAAA,IACX;AACA,WAAO,KAAK,iBAAiB,EAAE,QAAQ,KAAK,iBAAiB;AAAA,EACjE;AAAA,EACA,eAAe,OAAO;AAClB,UAAM,OAAO,KAAK,kBAAkB,gBAAgB,EAAE,wBAAwB,KAAK,iBAAiB;AACpG,QAAI,SAAS,MAAM;AACf;AAAA,IACJ;AACA,SAAK,yBAAyB,KAAK,mBAAmB,KAAK;AAAA,EAC/D;AAAA,EACA,wBAAwB,OAAO;AAC3B,QAAI,KAAK,8BAA8B,uBAAuB,GAAG;AAC7D,WAAK,8BAA8B,eAAe,KAAK;AAAA,IAC3D;AAAA,EACJ;AACJ;AAEA,IAAM,eAAN,MAAmB;AAAA,EACf,YAAY,OAAO,gBAAgB,mBAAmB;AAClD,SAAK,6BAA6B,IAAI,SAAS;AAC/C,SAAK,gCAAgC,IAAI,SAAS;AAClD,SAAK,wBAAwB,IAAI,SAAS;AAC1C,SAAK,kBAAkB;AACvB,SAAK,sBAAsB,MAAM,oBAAoB;AACrD,SAAK,2BAA2B;AAChC,SAAK,oBAAoB,6BAA6B,EAAE,oBAAoB,KAAK,+BAA+B,KAAK,IAAI,CAAC;AAC1H,SAAK,oBAAoB,8BAA8B,EAAE,oBAAoB,KAAK,uCAAuC,KAAK,IAAI,CAAC;AACnI,SAAK,yBAAyB,sBAAsB,EAAE,oBAAoB,KAAK,wBAAwB,KAAK,IAAI,CAAC;AACjH,SAAK,8BAA8B;AAAA,EACvC;AAAA,EACA,oBAAoB;AAChB,SAAK,oBAAoB,6BAA6B,EAAE,yBAAyB,IAAI;AACrF,SAAK,oBAAoB,8BAA8B,EAAE,yBAAyB,IAAI;AACtF,SAAK,yBAAyB,sBAAsB,EAAE,yBAAyB,IAAI;AACnF,SAAK,2BAA2B,kBAAkB;AAClD,SAAK,8BAA8B,kBAAkB;AACrD,SAAK,sBAAsB,kBAAkB;AAAA,EACjD;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,oBAAoB,sBAAsB;AAAA,EAC1D;AAAA,EACA,iBAAiB,UAAU,UAAU;AACjC,QAAI,CAAC,UAAU;AACX,WAAK,gBAAgB,yBAAyB,QAAQ;AACtD;AAAA,IACJ;AACA,SAAK,oBAAoB;AAAA,MAAiC;AAAA,MAAU;AAAA;AAAA,IAAwC;AAAA,EAChH;AAAA,EACA,mBAAmB;AACf,SAAK,oBAAoB,2BAA2B;AAAA,EACxD;AAAA,EACA,kBAAkB;AACd,UAAM,YAAY,KAAK,oBAAoB,2BAA2B;AACtE,QAAI,cAAc,MAAM;AACpB,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,MAAM,UAAU,KAAK;AAAA,MACrB,IAAI,UAAU,GAAG;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,gBAAgB,OAAO;AACnB,UAAM,iBAAiB;AAAA,MACnB,MAAM,KAAK,4BAA4B,0BAA0B,MAAM,IAAI;AAAA,MAC3E,IAAI,KAAK,4BAA4B,0BAA0B,MAAM,EAAE;AAAA,IAC3E;AACA,UAAM,eAAe,KAAK,oBAAoB,mCAAmC,cAAc;AAC/F,SAAK,gBAAgB,gCAAgC,YAAY;AAAA,EACrE;AAAA,EACA,yBAAyB;AACrB,UAAM,eAAe,KAAK,oBAAoB,8BAA8B;AAC5E,QAAI,iBAAiB,MAAM;AACvB,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,MAAM,aAAa,eAAe;AAAA,MAClC,IAAI,aAAa,gBAAgB;AAAA,IACrC;AAAA,EACJ;AAAA,EACA,uBAAuB,OAAO;AAC1B,WAAO,MAAM,QAAQ,MAAM,IAAI,8CAA8C;AAC7E,SAAK,gBAAgB,gCAAgC,KAAK;AAAA,EAC9D;AAAA,EACA,iBAAiB;AACb,SAAK,gBAAgB,yBAAyB;AAAA,EAClD;AAAA,EACA,aAAa;AACT,SAAK,gBAAgB,qBAAqB;AAAA,EAC9C;AAAA,EACA,oBAAoB,SAAS;AACzB,UAAM,YAAY,KAAK,gBAAgB,oBAAoB;AAC3D,QAAI,UAAU,kBAAkB,GAAG;AAC/B,aAAO;AAAA,IACX,OACK;AACD,aAAO,UAAU,4BAA4B,OAAO;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,oBAAoB,GAAG;AACnB,QAAI,KAAK,oBAAoB,kBAAkB,GAAG;AAC9C,aAAO;AAAA,IACX,OACK;AACD,aAAO,KAAK,oBAAoB,4BAA4B,CAAC;AAAA,IACjE;AAAA,EACJ;AAAA,EACA,YAAY,MAAM,aAAa;AAC3B,UAAM,YAAY,KAAK,4BAA4B,0BAA0B,IAAI;AACjF,WAAO,KAAK,oBAAoB,sBAAsB,WAAW,WAAW;AAAA,EAChF;AAAA,EACA,iBAAiB,MAAM;AACnB,UAAM,iBAAiB,KAAK,YAAY,MAAM,KAAK;AACnD,QAAI,mBAAmB,MAAM;AACzB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,oBAAoB,4BAA4B,cAAc;AAAA,EAC9E;AAAA,EACA,iBAAiB,GAAG;AAChB,UAAM,YAAY,KAAK,gBAAgB,oBAAoB;AAC3D,UAAM,iBAAiB,UAAU,4BAA4B,CAAC;AAC9D,UAAM,YAAY,UAAU,gCAAgC,cAAc;AAC1E,QAAI,cAAc,MAAM;AACpB,aAAO;AAAA,IACX;AACA,WAAO,UAAU;AAAA,EACrB;AAAA,EACA,QAAQ;AACJ,WAAO,KAAK,yBAAyB,kBAAkB,EAAE;AAAA,EAC7D;AAAA,EACA,SAAS;AACL,WAAO,KAAK,yBAAyB,kBAAkB,EAAE;AAAA,EAC7D;AAAA,EACA,gCAAgC,SAAS;AACrC,SAAK,2BAA2B,oBAAoB,OAAO;AAAA,EAC/D;AAAA,EACA,kCAAkC,SAAS;AACvC,SAAK,2BAA2B,sBAAsB,OAAO;AAAA,EACjE;AAAA,EACA,mCAAmC,SAAS;AACxC,SAAK,8BAA8B,oBAAoB,OAAO;AAAA,EAClE;AAAA,EACA,qCAAqC,SAAS;AAC1C,SAAK,8BAA8B,sBAAsB,OAAO;AAAA,EACpE;AAAA,EACA,oBAAoB,SAAS;AACzB,SAAK,sBAAsB,oBAAoB,OAAO;AAAA,EAC1D;AAAA,EACA,sBAAsB,SAAS;AAC3B,SAAK,sBAAsB,sBAAsB,OAAO;AAAA,EAC5D;AAAA,EACA,aAAa,SAAS;AAClB,SAAK,oBAAoB,uBAAuB,OAAO;AAAA,EAC3D;AAAA,EACA,UAAU;AACN,WAAO;AAAA,MACH,GAAG,MAAM,KAAK,oBAAoB,kBAAkB,CAAC;AAAA,MACrD,YAAY,KAAK,oBAAoB,qBAAqB;AAAA,IAC9D;AAAA,EACJ;AAAA,EACA,iCAAiC;AAC7B,QAAI,KAAK,2BAA2B,uBAAuB,GAAG;AAC1D,WAAK,2BAA2B,eAAe,KAAK,gBAAgB,CAAC;AAAA,IACzE;AAAA,EACJ;AAAA,EACA,yCAAyC;AACrC,QAAI,KAAK,8BAA8B,uBAAuB,GAAG;AAC7D,WAAK,8BAA8B,eAAe,KAAK,uBAAuB,CAAC;AAAA,IACnF;AAAA,EACJ;AAAA,EACA,wBAAwBL,OAAM;AAC1B,SAAK,sBAAsB,eAAeA,MAAK,OAAOA,MAAK,MAAM;AAAA,EACrE;AACJ;AAGA,SAAS,iBAAiB,aAAa;AACnC,MAAI,gBAAgB,UAAa,YAAY,SAAS,UAAU;AAC5D;AAAA,EACJ;AACA,QAAM,qBAAqB;AAC3B,MAAI,mBAAmB,YAAY,UAAa,mBAAmB,cAAc,QAAW;AACxF,uBAAmB,YAAY,mBAAmB,mBAAmB,OAAO;AAAA,EAChF;AACJ;AACA,SAAS,gCAAgC,SAAS;AAC9C,MAAI,UAAU,QAAQ,aAAa,CAAC,GAAG;AACnC,UAAM,cAAc,QAAQ,aAAa;AACzC,YAAQ,aAAa,IAAI;AAAA,MACrB,sBAAsB;AAAA,QAClB,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,sBAAsB;AAAA,QAClB,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,YAAY;AAAA,MACZ,OAAO;AAAA,IACX;AAAA,EACJ,WACS,QAAQ,aAAa,MAAM,QAAW;AAC3C,UAAM,EAAE,sBAAsB,qBAAqB,IAAI,QAAQ,aAAa;AAC5E,QAAI,UAAU,oBAAoB,GAAG;AACjC,cAAQ,aAAa,EAAE,uBAAuB;AAAA,QAC1C,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,UAAU,oBAAoB,GAAG;AACjC,cAAQ,aAAa,EAAE,uBAAuB;AAAA,QAC1C,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACA,QAAM,eAAe,QAAQ,cAAc;AAC3C,MAAI,UAAU,YAAY,GAAG;AACzB,YAAQ,cAAc,IAAI;AAAA,MACtB,eAAe;AAAA,MACf,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,kBAAkB;AAAA,IACtB;AAAA,EACJ;AACJ;AACA,SAAS,kBAAkB,SAAS;AAChC,kCAAgC,OAAO;AACvC,SAAO;AACX;AACA,IAAM,WAAN,MAAe;AAAA,EACX,YAAY,WAAW,mBAAmB,SAAS;AAC/C,SAAK,sBAAsB,oBAAI,IAAI;AACnC,SAAK,8BAA8B,oBAAI,IAAI;AAC3C,SAAK,4BAA4B,IAAI,SAAS;AAC9C,SAAK,+BAA+B,IAAI,SAAS;AACjD,SAAK,mCAAmC,IAAI,SAAS;AACrD,SAAK,kBAAkB,oBAAI,QAAQ;AACnC,SAAK,sBAAsB,IAAI,UAAU,iBAAiB;AAC1D,UAAM,kBAAmB,YAAY,SACjC,MAAM,qBAAqB,CAAC,IAC5B,MAAM,MAAM,qBAAqB,CAAC,GAAG,kBAAkB,OAAO,CAAC;AACnE,SAAK,+BAA+B;AACpC,SAAK,wBAAwB,IAAI,YAAY,WAAW,iBAAiB,iBAAiB;AAC1F,SAAK,sBAAsB,kBAAkB,EAAE,oBAAoB,CAAC,kBAAkB;AAClF,UAAI,KAAK,0BAA0B,uBAAuB,GAAG;AACzD,aAAK,0BAA0B,eAAe,KAAK,6BAA6B,cAAc,CAAC,CAAC;AAAA,MACpG;AAAA,IACJ,GAAG,IAAI;AACP,SAAK,sBAAsB,qBAAqB,EAAE,oBAAoB,CAAC,kBAAkB;AACrF,UAAI,KAAK,6BAA6B,uBAAuB,GAAG;AAC5D,aAAK,6BAA6B,eAAe,KAAK,6BAA6B,cAAc,CAAC,CAAC;AAAA,MACvG;AAAA,IACJ,GAAG,IAAI;AACP,SAAK,sBAAsB,yBAAyB,EAAE,oBAAoB,CAAC,kBAAkB;AACzF,UAAI,KAAK,iCAAiC,uBAAuB,GAAG;AAChE,aAAK,iCAAiC,eAAe,KAAK,6BAA6B,cAAc,CAAC,CAAC;AAAA,MAC3G;AAAA,IACJ,GAAG,IAAI;AACP,UAAM,QAAQ,KAAK,sBAAsB,gBAAgB;AACzD,SAAK,yBAAyB,IAAI,aAAa,OAAO,KAAK,sBAAsB,yBAAyB,GAAG,KAAK,4BAA4B;AAAA,EAClJ;AAAA,EACA,SAAS;AACL,SAAK,sBAAsB,kBAAkB,EAAE,yBAAyB,IAAI;AAC5E,SAAK,sBAAsB,qBAAqB,EAAE,yBAAyB,IAAI;AAC/E,SAAK,sBAAsB,yBAAyB,EAAE,yBAAyB,IAAI;AACnF,SAAK,uBAAuB,kBAAkB;AAC9C,SAAK,sBAAsB,kBAAkB;AAC7C,SAAK,oBAAoB,MAAM;AAC/B,SAAK,4BAA4B,MAAM;AACvC,SAAK,0BAA0B,kBAAkB;AACjD,SAAK,6BAA6B,kBAAkB;AACpD,SAAK,iCAAiC,kBAAkB;AACxD,SAAK,oBAAoB,kBAAkB;AAAA,EAC/C;AAAA,EACA,OAAO,OAAO,QAAQ,cAAc;AAChC,QAAI,KAAK,eAAe,GAAG;AAGvB,WAAK,uEAAuE;AAC5E;AAAA,IACJ;AACA,SAAK,sBAAsB,iBAAiB,OAAO,QAAQ,YAAY;AAAA,EAC3E;AAAA,EACA,gBAAgB,gBAAgB,UAAU,CAAC,GAAG,YAAY,GAAG;AACzD,UAAM,WAAW,OAAO,cAAc;AACtC,UAAM,aAAa,6BAA6B,QAAQ;AACxD,WAAO,KAAK,wBAAwB,YAAY,SAAS,SAAS;AAAA,EACtE;AAAA,EACA,UAAU,YAAY,UAAU,CAAC,GAAG,YAAY,GAAG;AAC/C,WAAO,KAAK,wBAAwB,YAAY,SAAS,SAAS;AAAA,EACtE;AAAA,EACA,aAAa,WAAW;AACpB,UAAM,SAAS,cAAc,KAAK,oBAAoB,IAAI,SAAS,CAAC;AACpE,UAAM,SAAS,KAAK,oBAAoB,uBAAuB,MAAM;AACrE,UAAM,QAAQ,KAAK,sBAAsB,gBAAgB;AACzD,UAAM,uBAAuB,MAAM;AACnC,SAAK,4BAA4B,MAAM;AACvC,SAAK,oBAAoB,OAAO,SAAS;AACzC,SAAK,4BAA4B,OAAO,MAAM;AAAA,EAClD;AAAA,EACA,uBAAuB,QAAQ,MAAM;AACjC,SAAK,4BAA4B,KAAK,oBAAoB,wBAAwB,QAAQ,IAAI,CAAC;AAAA,EACnG;AAAA,EACA,qBAAqB,QAAQ,MAAM,kBAAkB;AACjD,SAAK,4BAA4B,KAAK,oBAAoB,2BAA2B,QAAQ,MAAM,gBAAgB,CAAC;AAAA,EACxH;AAAA,EACA,eAAe,SAAS;AACpB,SAAK,0BAA0B,oBAAoB,OAAO;AAAA,EAC9D;AAAA,EACA,iBAAiB,SAAS;AACtB,SAAK,0BAA0B,sBAAsB,OAAO;AAAA,EAChE;AAAA,EACA,uBAAuB,SAAS;AAC5B,SAAK,iCAAiC,oBAAoB,OAAO;AAAA,EACrE;AAAA,EACA,yBAAyB,SAAS;AAC9B,SAAK,iCAAiC,sBAAsB,OAAO;AAAA,EACvE;AAAA,EACA,kBAAkB,SAAS;AACvB,SAAK,6BAA6B,oBAAoB,OAAO;AAAA,EACjE;AAAA,EACA,oBAAoB,SAAS;AACzB,SAAK,6BAA6B,sBAAsB,OAAO;AAAA,EACnE;AAAA,EACA,WAAW,cAAc,YAAY,GAAG;AACpC,WAAO,IAAI,cAAc,KAAK,uBAAuB,cAAc,SAAS;AAAA,EAChF;AAAA,EACA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,aAAa,SAAS;AAClB;AACI,YAAM,aAAa,QAAQ,QAAQ;AACnC,UAAI,eAAe,UAAa,eAAe,KAAK,QAAQ,EAAE,OAAO,YAAY;AAC7E,cAAM,IAAI,MAAM,0EAA0E;AAAA,MAC9F;AACA,YAAM,eAAe,QAAQ,QAAQ;AACrC,UAAI,iBAAiB,UAAa,iBAAiB,KAAK,QAAQ,EAAE,OAAO,cAAc;AACnF,cAAM,IAAI,MAAM,4EAA4E;AAAA,MAChG;AAAA,IACJ;AACA,SAAK,sBAAsB,uBAAuB,kBAAkB,OAAO,CAAC;AAAA,EAChF;AAAA,EACA,UAAU;AACN,WAAO,KAAK,sBAAsB,kBAAkB;AAAA,EACxD;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,sBAAsB,yBAAyB;AAAA,EAC/D;AAAA,EACA,QAAQ,oBAAoB,OAAO;AAC/B,UAAM,OAAO,KAAK,sBAAsB,gBAAgB,EAAE,kBAAkB;AAC5E,SAAK,+BAA+B,iBAAiB;AACrD,WAAO,KAAK,qBAAqB,IAAI;AAAA,EACzC;AAAA,EACA,WAAW,OAAO;AACd,SAAK,sBAAsB,gBAAgB,EAAE,qBAAqB,KAAK;AAAA,EAC3E;AAAA,EACA,UAAU,OAAO,QAAQ;AACrB,SAAK,sBAAsB,gBAAgB,EAAE,oBAAoB,OAAO,MAAM;AAAA,EAClF;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,sBAAsB,yBAAyB;AAAA,EAC/D;AAAA,EACA,eAAe;AACX,WAAO,KAAK,sBAAsB,kBAAkB;AAAA,EACxD;AAAA,EACA,QAAQ;AACJ,WAAO,KAAK,sBAAsB,gBAAgB,EAAE,gBAAgB,EAAE,IAAI,CAAC,SAAS,KAAK,qBAAqB,IAAI,CAAC;AAAA,EACvH;AAAA,EACA,SAAS,YAAY,GAAG;AACpB,UAAMA,QAAO,KAAK,sBAAsB,mBAAmB,SAAS;AACpE,WAAO;AAAA,MACH,QAAQA,MAAK;AAAA,MACb,OAAOA,MAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,qBAAqB,OAAO,oBAAoB,WAAW;AACvD,UAAM,SAAS,KAAK,oBAAoB,IAAI,SAAS;AACrD,QAAI,WAAW,QAAW;AACtB;AAAA,IACJ;AACA,UAAM,OAAO,KAAK,sBAAsB,gBAAgB,EAAE,wBAAwB,MAAM;AACxF,QAAI,SAAS,MAAM;AACf;AAAA,IACJ;AACA,SAAK,sBAAsB,gBAAgB,EAAE,sCAAsC,OAAO,oBAAoB,IAAI;AAAA,EACtH;AAAA,EACA,yBAAyB;AACrB,SAAK,sBAAsB,gBAAgB,EAAE,+BAA+B,IAAI;AAAA,EACpF;AAAA,EACA,gBAAgB;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,wBAAwB,YAAY,UAAU,CAAC,GAAG,YAAY,GAAG;AAC7D,WAAO,mBAAmB,UAAU,CAAC;AACrC,qBAAiB,QAAQ,WAAW;AACpC,QAAI,WAAW,SAAS,eAAe;AACnC,mCAA6B,OAAO;AAAA,IACxC;AACA,UAAM,gBAAgB,MAAM,MAAM,qBAAqB,GAAG,MAAM,WAAW,cAAc,GAAG,OAAO;AACnG,UAAMM,kBAAiB,WAAW;AAClC,UAAM,SAAS,IAAI,OAAO,KAAK,sBAAsB,gBAAgB,GAAG,WAAW,MAAM,eAAeA,iBAAgB,WAAW,wBAAwB;AAC3J,SAAK,sBAAsB,gBAAgB,EAAE,0BAA0B,QAAQ,SAAS;AACxF,UAAM,MAAM,IAAI,UAAU,QAAQ,MAAM,MAAM,MAAM,KAAK,8BAA8B,CAAC,SAAS,KAAK,qBAAqB,IAAI,CAAC;AAChI,SAAK,oBAAoB,IAAI,KAAK,MAAM;AACxC,SAAK,4BAA4B,IAAI,QAAQ,GAAG;AAChD,WAAO;AAAA,EACX;AAAA,EACA,4BAA4B,QAAQ;AAChC,UAAM,QAAQ,KAAK,sBAAsB,gBAAgB;AACzD,UAAM,0BAA0B,OAAO,oBAAoB,qBAAqB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,gCAAgC;AACxL,WAAO,iBAAiB,QAAQ,CAAC,OAAO,WAAW,OAAO,kBAAkB,MAAM,gBAAgB,MAAM,cAAc,CAAC;AACvH,UAAM,oBAAoB,EAAE,qCAAqC;AACjE,UAAM,8BAA8B;AAAA,EACxC;AAAA,EACA,yBAAyB,QAAQ;AAC7B,WAAO,cAAc,KAAK,4BAA4B,IAAI,MAAM,CAAC;AAAA,EACrE;AAAA,EACA,6BAA6B,OAAO;AAChC,UAAM,aAAa,oBAAI,IAAI;AAC3B,UAAM,qBAAqB,QAAQ,CAAC,SAAS,WAAW;AACpD,YAAM,aAAa,OAAO,qBAAqB;AAC/C,YAAM,OAAO,qBAAqB,UAAU,EAAE,OAAO;AACrD,UAAI,eAAe,UAAU;AACzB,eAAO,gBAAgB,IAAI,CAAC;AAAA,MAChC,OACK;AACD,cAAM,0BAA0B,OAAO,sCAAsC;AAC7E,eAAO,CAAC,2BAA2B,wBAAwB,IAAI,MAAM,KAAK;AAAA,MAC9E;AACA,iBAAW,IAAI,KAAK,yBAAyB,MAAM,GAAG,IAAI;AAAA,IAC9D,CAAC;AACD,UAAM,gBAAgB,MAAM,4BAA4B,UACpD,CAAC,KAAK,4BAA4B,IAAI,MAAM,uBAAuB,IACjE,SACA,KAAK,yBAAyB,MAAM,uBAAuB;AACjE,WAAO;AAAA,MACH,MAAM,MAAM;AAAA,MACZ,SAAS,MAAM;AAAA,MACf,OAAO,MAAM;AAAA,MACb,WAAW,MAAM;AAAA,MACjB;AAAA,MACA,iBAAiB,MAAM;AAAA,MACvB;AAAA,MACA,aAAa,MAAM;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,qBAAqB,MAAM;AACvB,QAAI,SAAS,KAAK,gBAAgB,IAAI,IAAI;AAC1C,QAAI,CAAC,QAAQ;AACT,eAAS,IAAI,QAAQ,KAAK,uBAAuB,CAAC,WAAW,KAAK,yBAAyB,MAAM,GAAG,MAAM,IAAI;AAC9G,WAAK,gBAAgB,IAAI,MAAM,MAAM;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,iBAAiB,WAAW;AACjC,MAAI,SAAS,SAAS,GAAG;AACrB,UAAM,UAAU,SAAS,eAAe,SAAS;AACjD,WAAO,YAAY,MAAM,sCAAsC,SAAS,EAAE;AAC1E,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAaA,SAAS,cAAc,WAAW,mBAAmB,SAAS;AAC1D,QAAM,cAAc,iBAAiB,SAAS;AAC9C,QAAM,MAAM,IAAI,SAAS,aAAa,mBAAmB,OAAO;AAChE,oBAAkB,WAAW,IAAI,QAAQ,CAAC;AAC1C,SAAO;AACX;AAQA,SAAS,YAAY,WAAW,SAAS;AACrC,SAAO,cAAc,WAAW,IAAI,sBAAsB,GAAG,sBAAsB,wBAAwB,OAAO,CAAC;AACvH;AASA,SAAS,2BAA2B;AAChC,SAAO;AACX;AAEA,IAAM,mBAAN,cAA+B,mBAAmB;AAAA,EAC9C,YAAY,QAAQ,OAAO;AACvB,UAAM,QAAQ,OAAO,IAAI;AAAA,EAC7B;AAAA,EACA,gCAAgC,YAAY,WAAW,YAAY;AAC/D,cAAU,+BAA+B,KAAK,kBAAkB,gBAAgB,KAAK,4BAA4B,CAAC;AAClH,eAAW,mCAAmC,KAAK,kBAAkB,YAAY,gBAAgB,KAAK,4BAA4B,CAAC;AAAA,EACvI;AAAA,EACA,6BAA6B,MAAM,OAAO;AACtC,WAAO;AAAA,MACH,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,aAAa;AAAA,MACb,aAAa;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,2BAA2B;AACvB,UAAM,UAAU,KAAK,kBAAkB,qBAAqB;AAC5D,SAAK,mBAAmB,KAAK,kBAAkB,eAAe,EAAE,eAAe,EAAE,IAAI,CAAC,QAAQ;AAC1F,YAAM,QAAQ,IAAI;AAAA,QAAgB;AAAA;AAAA,MAA+B;AACjE,aAAO,KAAK,yBAAyB,IAAI,iBAAiB,OAAO,OAAO;AAAA,IAC5E,CAAC;AAAA,EACL;AACJ;AAEA,SAAS,uBAAuB,gBAAgB,OAAO,oBAAoB,cAG3E,aAAa;AACT,MAAI,aAAa,KAAK,aAAa,QAAQ,GAAG;AAC1C;AAAA,EACJ;AACA,QAAM,EAAE,sBAAsB,oBAAoB,QAAQ,IAAI;AAC9D,MAAI,YAAY;AAChB,QAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,oBAAoB,CAAC;AAC9D,QAAM,aAAc,YAAY,IAAK;AACrC,QAAML,UAAS,qBAAqB,qBAAqB;AACzD,WAAS,IAAI,aAAa,KAAK,GAAG,KAAK,aAAa,MAAM,EAAE,GAAG;AAC3D,UAAM,QAAQ,MAAM,CAAC;AACrB,QAAI,OAAO;AACP,YAAM,QAAQ,YAAY,gBAAgB,KAAK;AAC/C,UAAI,UAAU,WAAW;AACrB,gBAAQ,UAAU;AAClB,YAAI,cAAc,MAAM;AACpB,kBAAQ,KAAK;AAAA,QACjB;AACA,gBAAQ,YAAY;AACpB,oBAAY;AAAA,MAChB;AACA,YAAM,UAAU,KAAK,MAAM,MAAM,cAAc,oBAAoB,IAAI;AACvE,YAAM,UAAU,MAAM,cAAc;AACpC,cAAQ,OAAO,SAAS,OAAO;AAC/B,cAAQ,IAAI,SAAS,SAASA,SAAQ,GAAG,KAAK,KAAK,CAAC;AAAA,IACxD;AAAA,EACJ;AACA,UAAQ,KAAK;AACjB;AAGA,SAAS,SAAS,gBAAgB,OAAO,UAAU,cAAc,UAGjE,aAAaa,mBAAkB;AAC3B,MAAI,MAAM,WAAW,KAAK,aAAa,QAAQ,MAAM,UAAU,aAAa,MAAM,GAAG;AACjF;AAAA,EACJ;AACA,QAAM,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,IAAI;AACnE,QAAM,YAAY,MAAM,aAAa,IAAI;AACzC,MAAI,eAAe,YAAY,gBAAgB,SAAS;AACxD,MAAI,wBAAwB;AAC5B,MAAI,aAAa,KAAK,aAAa,OAAO,GAAG;AACzC,UAAM,eAAe,WAAW;AAChC,QAAI,UAAU;AACd,UAAM,QAAQ,EAAE,aAAa,UAAU,cAAc,cAAc,aAAa,UAAU,YAAY;AACtG,UAAM,QAAQ,EAAE,aAAa,UAAU,cAAc,cAAc,aAAa,UAAU,YAAY;AACtG,QAAI,OAAO,MAAM,cAAc,sBAAsB,MAAM,cAAc,kBAAkB;AAC3F,QAAI,OAAO,MAAM,cAAc,sBAAsB,MAAM,cAAc,kBAAkB;AAC3F,IAAAA,kBAAiB,gBAAgB,cAAc,OAAO,KAAK;AAAA,EAC/D,OACK;AACD,UAAM,cAAc,CAAC,UAAUC,iBAAgB;AAC3C,MAAAD,kBAAiB,gBAAgB,cAAc,uBAAuBC,YAAW;AACjF,UAAI,UAAU;AACd,qBAAe;AACf,8BAAwBA;AAAA,IAC5B;AACA,QAAI,cAAc;AAClB,QAAI,UAAU;AACd,QAAI,OAAO,UAAU,cAAc,sBAAsB,UAAU,cAAc,kBAAkB;AACnG,aAAS,IAAI,aAAa,OAAO,GAAG,IAAI,aAAa,IAAI,EAAE,GAAG;AAC1D,oBAAc,MAAM,CAAC;AACrB,YAAM,YAAY,YAAY,gBAAgB,WAAW;AACzD,cAAQ,UAAU;AAAA,QACd,KAAK;AACD,cAAI,OAAO,YAAY,cAAc,sBAAsB,YAAY,cAAc,kBAAkB;AACvG;AAAA,QACJ,KAAK;AACD,cAAI,OAAO,YAAY,cAAc,sBAAsB,MAAM,IAAI,CAAC,EAAE,cAAc,kBAAkB;AACxG,cAAI,cAAc,cAAc;AAC5B,wBAAY,WAAW,WAAW;AAClC,gBAAI,OAAO,YAAY,cAAc,sBAAsB,MAAM,IAAI,CAAC,EAAE,cAAc,kBAAkB;AAAA,UAC5G;AACA,cAAI,OAAO,YAAY,cAAc,sBAAsB,YAAY,cAAc,kBAAkB;AACvG;AAAA,QACJ,KAAK,GAAyB;AAC1B,gBAAM,CAAC,KAAK,GAAG,IAAI,iBAAiB,OAAO,IAAI,GAAG,CAAC;AACnD,cAAI,cAAc,IAAI,cAAc,sBAAsB,IAAI,cAAc,oBAAoB,IAAI,cAAc,sBAAsB,IAAI,cAAc,oBAAoB,YAAY,cAAc,sBAAsB,YAAY,cAAc,kBAAkB;AAC1Q;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,aAAa,KAA8B,cAAc,cAAc;AACvE,oBAAY,WAAW,WAAW;AAClC,YAAI,OAAO,YAAY,cAAc,sBAAsB,YAAY,cAAc,kBAAkB;AAAA,MAC3G;AAAA,IACJ;AACA,QAAI,0BAA0B,eAAe,0BAA0B,eAAe,aAAa,GAA4B;AAC3H,MAAAD,kBAAiB,gBAAgB,cAAc,uBAAuB,WAAW;AAAA,IACrF;AAAA,EACJ;AACJ;AACA,IAAM,eAAe;AACrB,SAAS,SAAS,IAAI,IAAI;AACtB,SAAO,EAAE,aAAa,GAAG,cAAc,GAAG,aAAa,aAAa,GAAG,cAAc,GAAG,YAAY;AACxG;AACA,SAAS,IAAI,IAAI,IAAI;AACjB,SAAO,EAAE,aAAa,GAAG,cAAc,GAAG,aAAa,aAAa,GAAG,cAAc,GAAG,YAAY;AACxG;AACA,SAAS,OAAO,IAAI,GAAG;AACnB,SAAO,EAAE,aAAa,GAAG,cAAc,GAAG,aAAa,GAAG,cAAc,EAAE;AAC9E;AAIA,SAAS,iBAAiB,QAAQ,gBAAgB,cAAc;AAC5D,QAAM,uBAAuB,KAAK,IAAI,GAAG,iBAAiB,CAAC;AAC3D,QAAM,oBAAoB,KAAK,IAAI,OAAO,SAAS,GAAG,eAAe,CAAC;AACtE,QAAM,MAAM,IAAI,OAAO,cAAc,GAAG,OAAO,SAAS,OAAO,YAAY,GAAG,OAAO,oBAAoB,CAAC,GAAG,YAAY,CAAC;AAC1H,QAAM,MAAM,SAAS,OAAO,YAAY,GAAG,OAAO,SAAS,OAAO,iBAAiB,GAAG,OAAO,cAAc,CAAC,GAAG,YAAY,CAAC;AAC5H,SAAO,CAAC,KAAK,GAAG;AACpB;AAEA,SAAS,mBAAmB,OAAO,OAAO;AACtC,QAAM,MAAM,MAAM;AAClB,MAAI,cAAc;AAClB,MAAI,OAAO;AACf;AACA,IAAM,uBAAN,cAAmC,8BAA8B;AAAA,EAC7D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,oBAAoB,gBAAgB;AAChC,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,UAAM,EAAE,iBAAiB,OAAO,wBAAwB,cAAc,oBAAoB,UAAU,oBAAoB,UAAU,qBAAqB,WAAW,qBAAqB,WAAW,8BAA8B,mBAAmB,IAAI,KAAK;AAC5P,QAAI,iBAAiB,MAAM;AACvB;AAAA,IACJ;AACA,UAAM,MAAM,eAAe;AAC3B,QAAI,UAAU;AACd,QAAI,YAAY,YAAY,eAAe;AAC3C,iBAAa,KAAK,SAAS;AAC3B,QAAI,WAAW;AACf,UAAM,cAAc,KAAK,uBAAuB,KAAK,IAAI;AACzD,QAAI,aAAa,QAAW;AACxB,eAAS,gBAAgB,OAAO,UAAU,cAAc,UAAU,aAAa,kBAAkB;AAAA,IACrG;AACA,QAAI,oBAAoB;AACpB,6BAAuB,gBAAgB,OAAO,oBAAoB,cAAc,WAAW;AAAA,IAC/F;AAAA,EACJ;AACJ;AAEA,IAAM,mBAAN,cAA+B,qBAAqB;AAAA,EAChD,uBAAuB,gBAAgB,MAAM;AACzC,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,qBAAN,cAAiC,iBAAiB;AAAA,EAC9C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,sBAAsB,IAAI,iBAAiB;AAAA,EACpD;AAAA,EACA,yBAAyB,MAAM,OAAO,SAAS;AAC3C,WAAO;AAAA,MACH,GAAG,KAAK,6BAA6B,MAAM,KAAK;AAAA,MAChD,GAAG,QAAQ,mBAAmB,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,iCAAiC;AAC7B,UAAM,UAAU,KAAK,kBAAkB,kBAAkB;AACzD,UAAM,OAAO;AAAA,MACT,iBAAiB,KAAK;AAAA,MACtB,qBAAqB,QAAQ;AAAA,MAC7B,oBAAoB,QAAQ,cAAc,QAAQ,WAAW;AAAA,MAC7D,qBAAqB,QAAQ;AAAA,MAC7B,8BAA8B,QAAQ,sBAAuB,QAAQ,sBAAsB,QAAQ,YAAY,IAAI,IAAK;AAAA,MACxH,wBAAwB,KAAK;AAAA,MAC7B,oBAAoB,KAAK,iBAAiB,oBAAoB,EAAE,qBAAqB;AAAA,IACzF;AACA,SAAK,oBAAoB,kBAAkB,IAAI;AAAA,EACnD;AACJ;AAEA,IAAM,oBAAoB;AAAA,EACtB,OAAO;AAAA,EACP,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,wBAAwB;AAAA,EACxB,uBAAuB;AAAA,EACvB,4BAA4B;AAAA,EAC5B,4BAA4B;AAAA,EAC5B,gCAAgC;AAAA,EAChC,oBAAoB;AAAA,EACpB,qBAAqB;AACzB;AACA,IAAM,mBAAmB,CAAC,QAAQ,UAAU,IAAI,mBAAmB,QAAQ,KAAK;AAChF,IAAM,mBAAmB,MAAM;AAC3B,QAAM,aAAa;AAAA,IACf,MAAM;AAAA,IACN,WAAW;AAAA,IACX,gBAAgB;AAAA;AAAA;AAAA;AAAA,IAIhB,0BAA0B;AAAA,EAC9B;AACA,SAAO;AACX;AACA,IAAM,aAAa,iBAAiB;AAEpC,SAAS,gCAAgC,UAAU;AAC/C,MAAI,YAAY;AAChB,SAAO,YAAa,MAAM;AACtB,QAAI,CAAC,WAAW;AACZ,kBAAY;AACZ,qBAAe,MAAM;AACjB,iBAAS,GAAG,IAAI;AAChB,oBAAY;AAAA,MAChB,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AACA,SAAS,wBAAwB,GAAG,GAAG;AACnC,SAAO,EAAE,SAAS,EAAE,SAAS,IAAI;AACrC;AACA,SAAS,wBAAwB,MAAM;AACnC,SAAO;AACX;AACA,SAAS,0BAA0B,MAAM;AACrC,SAAO;AACX;AACA,IAAM,8BAAN,MAAkC;AAAA,EAC9B,cAAc;AACV,SAAK,kCAAkC,IAAI,SAAS;AACpD,SAAK,iCAAiC,gCAAgC,MAAM,KAAK,gCAAgC,eAAe,KAAK,sBAAsB,CAAC;AAC5J,SAAK,yBAAyB;AAAA,EAClC;AAAA;AAAA,EAEA,kCAAkC;AAC9B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,SAAK,gCAAgC,kBAAkB;AAAA,EAC3D;AAAA,EACA,UAAU;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,WAAW,SAAS;AAChB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,eAAe,MAAM;AAAA,EAErB;AAAA,EACA,gBAAgB,SAAS;AACrB,QAAI,CAAC,KAAK,mBAAmB;AACzB;AAAA,IACJ;AACA,SAAK,kBAAkB,eAAe;AAAA,EAC1C;AAAA,EACA,6BAA6B,MAAM;AAC/B,SAAK,+BAA+B;AACpC,WAAO,CAAC,SAAS;AACb,UAAI,OAAO,KAAK,wBAAwB;AACpC,aAAK,yBAAyB;AAAA,MAClC;AACA,aAAO,wBAAwB,IAAI;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,IAAI,cAAc;AACd,WAAO;AAAA,EACX;AAAA,EACA,SAAS,cAAc;AACnB,WAAO,0BAA0B,YAAY;AAAA,EACjD;AAAA,EACA,0BAA0B,MAAM;AAC5B,WAAO,wBAAwB,IAAI;AAAA,EACvC;AAAA,EACA,eAAe,MAAM;AACjB,WAAO,KAAK,qBAAqB,IAAI;AAAA,EACzC;AAAA,EACA,eAAe,MAAM;AACjB,WAAO,KAAK,qBAAqB,KAAK,IAAI;AAAA,EAC9C;AAAA,EACA,kBAAkB,OAAO;AACrB,WAAO,MAAM,OAAO,yBAAyB,MAAM,CAAC,CAAC,EAAE;AAAA,EAC3D;AAAA,EACA,qBAAqB,kBAAkB,YAAY;AAC/C,UAAM,aAAa,CAAC,SAAS;AACzB,UAAI,OAAO,QAAQ,GAAG;AAClB,eAAO;AAAA,MACX;AACA,UAAI,OAAO,OAAO,GAAG;AACjB,eAAO;AAAA,MACX;AACA,UAAI,OAAO,OAAO,GAAG;AACjB,eAAO;AAAA,MACX;AACA,UAAI,OAAO,OAAO,GAAG;AACjB,eAAO;AAAA,MACX;AACA,UAAI,OAAO,MAAM,GAAG;AAChB,eAAO;AAAA,MACX;AACA,UAAI,OAAO,MAAM,GAAG;AAChB,eAAO;AAAA,MACX;AACA,UAAI,OAAO,MAAM,GAAG;AAChB,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX;AACA,aAAS,QAAQ,YAAY,QAAQ,iBAAiB,QAAQ,EAAE,OAAO;AACnE,uBAAiB,KAAK,EAAE,aAAa,WAAW,0BAA0B,iBAAiB,KAAK,EAAE,IAAI,CAAC;AAAA,IAC3G;AACA,SAAK,yBAAyB,0BAA0B,iBAAiB,iBAAiB,SAAS,CAAC,EAAE,IAAI;AAC1G,SAAK,+BAA+B;AAAA,EACxC;AAAA,EACA,qBAAqB,QAAQ;AACzB,QAAI,KAAK,kBAAkB,cAAc,eAAe;AACpD,aAAO,KAAK,kBAAkB,aAAa,cAAc,MAAM;AAAA,IACnE;AACA,QAAI,SAAS,IAAI;AACb,aAAO,GAAG,MAAM;AAAA,IACpB;AACA,UAAM,QAAQ,KAAK,MAAM,SAAS,EAAE;AACpC,UAAM,kBAAkB,SAAS;AACjC,QAAI,oBAAoB,GAAG;AACvB,aAAO,GAAG,KAAK;AAAA,IACnB;AACA,WAAO,GAAG,KAAK,IAAI,eAAe;AAAA,EACtC;AACJ;AAEA,IAAM,4BAA4B;AAAA,EAC9B,gBAAgB;AAAA,EAChB,kBAAkB;AAAA,EAClB,gBAAgB;AACpB;AAEA,SAAS,uBAAuB,EAAE,iBAAiB,OAAO,eAAe,KAAK,sBAAsB,WAAY,GAAG;AAC/G,SAAO,MAAM;AAAA,IAAK,EAAE,QAAQ,KAAK,OAAO,MAAM,SAAS,UAAU,IAAI,EAAE;AAAA;AAAA,IAEvE,CAAC,MAAM,OAAO,EAAE,QAAQ,QAAQ,IAAI,WAAW;AAAA,EAAE;AACrD;AACA,SAAS,qBAAqB,SAAS,WAAW;AAC9C,SAAO;AAAA,IACH,iBAAiB,KAAK,IAAI,GAAG,QAAQ,cAAc;AAAA,IACnD,eAAe,KAAK,IAAI,GAAG,QAAQ,kBAAkB,aAAa,CAAC;AAAA,IACnE,sBAAsB,KAAK,IAAI,GAAG,QAAQ,cAAc;AAAA,EAC5D;AACJ;AACA,IAAM,yBAAyB,CAAC,EAAE,iBAAiB,OAAO,eAAe,KAAK,sBAAsB,WAAY,MAAM,GAAG,KAAK,IAAI,GAAG,IAAI,UAAU;AACnJ,IAAM,iBAAiB;AAAA,EACnB,YAAY;AAAA;AAAA;AAAA,EAGZ,WAAW;AAAA,IACP,yBAAyB;AAAA,EAC7B;AAAA,EACA,gBAAgB;AAAA,IACZ,SAAS;AAAA,EACb;AAAA,EACA,iBAAiB;AAAA,IACb,SAAS;AAAA,EACb;AAAA,EACA,cAAc;AAAA,IACV,gBAAgB,CAAC,UAAU;AACvB,aAAO,MAAM,QAAQ,CAAC,IAAI;AAAA,IAC9B;AAAA,EACJ;AACJ;AACA,IAAM,kCAAkC;AAAA,EACpC,kBAAkB;AAAA,EAClB,kBAAkB;AACtB;AACA,IAAM,gBAAN,cAA4B,SAAS;AAAA,EACjC,YAAY,WAAW,SAAS;AAC5B,UAAM,cAAc,MAAM,gBAAgB,WAAW,CAAC,CAAC;AACvD,UAAM,gBAAgB,IAAI,4BAA4B;AACtD,UAAM,WAAW,eAAe,WAAW;AAC3C,kBAAc,WAAW,KAAK,QAAQ,CAAC;AACvC,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,UAAU,YAAY,UAAU,CAAC,GAAG,YAAY,GAAG;AAC/C,QAAI,WAAW,aAAa,CAAC,QAAQ,MAAM,EAAE,SAAS,WAAW,IAAI,MAAM,OAAO;AAC9E,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACnE;AACA,UAAM,kBAAkB;AAAA,MACpB,GAAG;AAAA,MACH,GAAG;AAAA,IACP;AACA,WAAO,MAAM,UAAU,YAAY,iBAAiB,SAAS;AAAA,EACjE;AAAA,EACA,wBAAwB;AACpB,UAAM,gBAAgB,KAAK,cAAc;AACzC,UAAM,mBAAmB,KAAK,UAAU,UAAU;AAClD,QAAI;AACJ,aAAS,iBAAiB,WAAW;AACjC,YAAM,qBAAqB,qBAAqB,cAAc,QAAQ,EAAE,YAAY,SAAS;AAC7F,YAAM,oBAAoB,uBAAuB,kBAAkB;AACnE,UAAI,sBAAsB,uBAAuB;AAC7C,gCAAwB;AACxB,yBAAiB,QAAQ,uBAAuB,kBAAkB,CAAC;AAAA,MACvE;AAAA,IACJ;AACA,qBAAiB,CAAC;AAClB,kBAAc,gCAAgC,EAAE,oBAAoB,gBAAgB;AAAA,EACxF;AACJ;AAeA,SAAS,sBAAsB,WAAW,SAAS;AAC/C,QAAM,cAAc,iBAAiB,SAAS;AAC9C,QAAM,WAAW,IAAI,cAAc,aAAa,OAAO;AACvD,SAAO;AACX;AAEA,SAAS,sBAAsB,GAAG,GAAG;AACjC,SAAO,EAAE,SAAS,EAAE,SAAS,IAAI;AACrC;AACA,IAAM,yBAAN,MAA6B;AAAA,EACzB,UAAU;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,WAAW,SAAS;AAChB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,eAAe,MAAM;AAAA,EAAE;AAAA,EACvB,gBAAgB,SAAS;AACrB,QAAI,CAAC,KAAK,mBAAmB;AACzB;AAAA,IACJ;AACA,SAAK,kBAAkB,eAAe;AAAA,EAC1C;AAAA,EACA,6BAA6B,MAAM;AAC/B,WAAO,CAAC,UAAU;AAAA,EACtB;AAAA,EACA,IAAI,cAAc;AACd,WAAO;AAAA,EACX;AAAA,EACA,SAAS,cAAc;AACnB,WAAO;AAAA,EACX;AAAA,EACA,0BAA0B,MAAM;AAC5B,WAAO;AAAA,EACX;AAAA,EACA,eAAe,MAAM;AACjB,WAAO,KAAK,QAAQ,KAAK,oBAAoB,CAAC;AAAA,EAClD;AAAA,EACA,eAAe,MAAM,qBAAqB;AACtC,WAAO,KAAK,KAAK,QAAQ,KAAK,oBAAoB,CAAC;AAAA,EACvD;AAAA,EACA,kBAAkB,OAAO;AACrB,WAAO,MAAM,OAAO,uBAAuB,MAAM,CAAC,CAAC,EAAE;AAAA,EACzD;AAAA,EACA,qBAAqB,kBAAkB,YAAY;AAC/C,UAAM,cAAc,CAAC,UAAU;AAC3B,UAAI,UAAU,KAAK,KAAK,QAAQ,GAAG,IAAI,KAAK;AACxC,eAAO;AAAA,MACX;AACA,UAAI,UAAU,KAAK,KAAK,QAAQ,EAAE,IAAI,IAAI;AACtC,eAAO;AAAA,MACX;AACA,UAAI,UAAU,KAAK,KAAK,QAAQ,EAAE,IAAI,IAAI;AACtC,eAAO;AAAA,MACX;AACA,UAAI,UAAU,KAAK,KAAK,QAAQ,EAAE,IAAI,IAAI;AACtC,eAAO;AAAA,MACX;AACA,UAAI,UAAU,KAAK,KAAK,QAAQ,CAAC,IAAI,GAAG;AACpC,eAAO;AAAA,MACX;AACA,UAAI,UAAU,KAAK,KAAK,KAAK,GAAG;AAC5B,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,MAAM,KAAK,KAAK,QAAQ,CAAC,GAAG;AACpC,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX;AACA,aAAS,QAAQ,YAAY,QAAQ,iBAAiB,QAAQ,EAAE,OAAO;AACnE,uBAAiB,KAAK,EAAE,aAAa,YAAY,iBAAiB,KAAK,EAAE,IAAI;AAAA,IACjF;AAAA,EACJ;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,kBAAkB,aACzB;AAAA,EACT;AACJ;AAaA,SAAS,mBAAmB,WAAW,SAAS;AAC5C,SAAO,cAAc,WAAW,IAAI,uBAAuB,GAAG,OAAO;AACzE;AAEA,SAAS,iBAAiB,qBAAqB,OAAO,OAAO,eAAe,kBAAkB;AAC1F,QAAM,EAAE,SAAS,sBAAsB,mBAAmB,IAAI;AAC9D,UAAQ,OAAO,iBAAiB,cAAc,sBAAsB,sBAAsB,kBAAkB;AAC5G,UAAQ,OAAO,cAAc,cAAc,sBAAsB,sBAAsB,kBAAkB;AACzG,UAAQ,UAAU;AAClB,UAAQ,YAAY;AACpB,UAAQ,KAAK;AACjB;AACA,IAAM,uBAAN,cAAmC,8BAA8B;AAAA,EAC7D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,oBAAoB,gBAAgB;AAChC,QAAI,KAAK,oBAAoB,MAAM;AAC/B;AAAA,IACJ;AACA,UAAM,EAAE,iBAAiB,OAAO,wBAAwB,cAAc,oBAAoB,UAAU,qBAAqB,WAAW,qBAAqB,WAAW,oBAAoB,SAAS,IAAI,KAAK;AAC1M,UAAM,sBAAsB,KAAK,gBAAgB,kCAC5C,KAAK,gBAAgB,6BAA6B,IAAI,eAAe,UAAU;AACpF,QAAI,iBAAiB,MAAM;AACvB;AAAA,IACJ;AACA,UAAM,MAAM,eAAe;AAC3B,QAAI,UAAU;AACd,QAAI,WAAW;AACf,QAAI,YAAY;AAChB,iBAAa,KAAK,SAAS;AAE3B,QAAI,YAAY;AAChB,aAAS,gBAAgB,OAAO,UAAU,cAAc,UAAU,KAAK,qBAAqB,KAAK,IAAI,GAAG,iBAAiB,KAAK,MAAM,mBAAmB,CAAC;AAAA,EAC5J;AACJ;AAEA,IAAM,qBAAN,MAAyB;AAAA;AAAA,EAErB,cAAc,OAAO,QAAQ;AACzB,UAAM,eAAe,KAAK;AAC1B,UAAM,EAAE,qBAAqB,WAAW,qBAAqB,WAAW,wBAAwB,cAAc,wBAAwB,cAAc,+BAA+B,qBAAqB,yBAAyB,eAAe,4BAA4B,iBAAkB,IAAI;AAClS,QAAI,KAAK,0BAA0B,UAC/B,iBAAiB,UACjB,aAAa,wBAAwB,aACrC,aAAa,wBAAwB,aACrC,aAAa,2BAA2B,gBACxC,aAAa,2BAA2B,gBACxC,aAAa,kCAAkC,uBAC/C,aAAa,4BAA4B,iBACzC,aAAa,+BAA+B,kBAAkB;AAC9D,YAAM,EAAE,mBAAmB,IAAI;AAC/B,YAAM,aAAa,uBAAuB,gBAAgB,IAAI,qBAAqB;AACnF,YAAM,MAAM,gBAAgB;AAC5B,YAAM,SAAS,qBAAqB,MAAM,WAAW,SAAS,mBAAmB,mBAAmB;AACpG,YAAM,YAAY,uBAAuB,KAAK;AAC9C,YAAM,WAAW,MAAM,QAAQ,qBAAqB,GAAG,KAAK,GAAG,MAAM;AACrE,eAAS,aAAa,GAAG,SAAS;AAClC,UAAI,wBAAwB,QAAQ,wBAAwB,QAAW;AACnE,cAAM,QAAQ,SAAS;AACvB,cAAM,gBAAgB,OAAQ,WAAW,OAAO,OAAQ,GAAG,CAAC;AAC5D,iBAAS,aAAa,eAAe,SAAS;AAC9C,iBAAS,aAAa,eAAe,YAAY;AAAA,MACrD;AACA,eAAS,aAAa,GAAG,YAAY;AACrC,WAAK,wBAAwB;AAC7B,WAAK,mBAAmB;AAAA,IAC5B;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IAAM,2BAAN,cAAuC,qBAAqB;AAAA,EACxD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,sBAAsB,IAAI,mBAAmB;AAAA,EACtD;AAAA,EACA,qBAAqB,gBAAgB,MAAM;AAEvC,UAAM,OAAO,KAAK;AAClB,WAAO,KAAK,oBAAoB,cAAc,gBAAgB;AAAA,MAC1D,qBAAqB,KAAK;AAAA,MAC1B,qBAAqB,KAAK;AAAA,MAC1B,wBAAwB,KAAK;AAAA,MAC7B,wBAAwB,KAAK;AAAA,MAC7B,+BAA+B,KAAK;AAAA,MACpC,yBAAyB,KAAK,2BAA2B;AAAA,MACzD,4BAA4B,KAAK,8BAA8B,eAAe,WAAW;AAAA,IAC7F,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,2BAAN,cAAuC,qBAAqB;AAAA,EACxD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,wBAAwB,IAAI,mBAAmB;AAAA,EACxD;AAAA,EACA,uBAAuB,gBAAgB,MAAM;AAEzC,UAAM,OAAO,KAAK;AAClB,WAAO,KAAK,sBAAsB,cAAc,gBAAgB;AAAA,MAC5D,qBAAqB,KAAK;AAAA,MAC1B,qBAAqB,KAAK;AAAA,MAC1B,wBAAwB,KAAK;AAAA,MAC7B,wBAAwB,KAAK;AAAA,MAC7B,+BAA+B,KAAK;AAAA,MACpC,yBAAyB,KAAK,2BAA2B;AAAA,MACzD,4BAA4B,KAAK,8BAA8B,eAAe,WAAW;AAAA,IAC7F,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,yBAAN,cAAqC,iBAAiB;AAAA,EAClD,YAAY,QAAQ,OAAO;AACvB,UAAM,QAAQ,KAAK;AACnB,SAAK,sBAAsB,IAAI,kBAAkB;AACjD,SAAK,iCAAiC,IAAI,yBAAyB;AACnE,SAAK,iCAAiC,IAAI,yBAAyB;AACnE,SAAK,oBAAoB,uBAAuB,CAAC,KAAK,gCAAgC,KAAK,8BAA8B,CAAC;AAAA,EAC9H;AAAA,EACA,yBAAyB,MAAM,OAAO,SAAS;AAC3C,WAAO;AAAA,MACH,GAAG,KAAK,6BAA6B,MAAM,KAAK;AAAA,MAChD,GAAG,QAAQ,mBAAmB,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,iCAAiC;AAC7B,UAAM,aAAa,KAAK,kBAAkB,qBAAqB;AAC/D,QAAI,eAAe,MAAM;AACrB;AAAA,IACJ;AACA,UAAM,UAAU,KAAK,kBAAkB,kBAAkB;AACzD,UAAM,sBAAsB,KAAK,kBAAkB,qBAAqB,EAAE,4BAA4B,QAAQ,UAAU,OAAO,WAAW,eAAe;AACzJ,UAAM,WAAW,KAAK,iBAAiB,oBAAoB,EAAE,qBAAqB;AAClF,QAAI,KAAK,iCAAiC,QAAQ,KAAK,iBAAiB,WAAW,GAAG;AAClF;AAAA,IACJ;AACA,QAAI;AACJ,QAAI;AACJ,QAAI,QAAQ,kBAAkB;AAC1B,sBAAgB,KAAK,iBAAiB,KAAK,6BAA6B,IAAI,EAAE;AAC9E,yBAAmB,KAAK,iBAAiB,KAAK,6BAA6B,IAAI,EAAE;AACjF,eAAS,IAAI,KAAK,6BAA6B,MAAM,IAAI,KAAK,6BAA6B,IAAI,KAAK;AAChG,cAAM,OAAO,KAAK,iBAAiB,CAAC;AACpC,YAAI,KAAK,cAAc,eAAe;AAClC,0BAAgB,KAAK;AAAA,QACzB;AACA,YAAI,KAAK,cAAc,kBAAkB;AACrC,6BAAmB,KAAK;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,+BAA+B,kBAAkB;AAAA,MAClD,iBAAiB,KAAK;AAAA,MACtB,qBAAqB,QAAQ;AAAA,MAC7B,qBAAqB,QAAQ;AAAA,MAC7B,oBAAoB,QAAQ;AAAA,MAC5B,+BAA+B;AAAA,MAC/B,yBAAyB;AAAA,MACzB,4BAA4B;AAAA,MAC5B,4BAA4B;AAAA,MAC5B,wBAAwB,KAAK;AAAA,MAC7B,oBAAoB;AAAA,IACxB,CAAC;AACD,SAAK,+BAA+B,kBAAkB;AAAA,MAClD,iBAAiB,KAAK;AAAA,MACtB,qBAAqB,QAAQ;AAAA,MAC7B,qBAAqB,QAAQ;AAAA,MAC7B,oBAAoB,QAAQ,cAAc,QAAQ,WAAW;AAAA,MAC7D,8BAA8B,QAAQ,sBAAuB,QAAQ,sBAAsB,QAAQ,YAAY,IAAI,IAAK;AAAA,MACxH,+BAA+B;AAAA,MAC/B,yBAAyB;AAAA,MACzB,4BAA4B;AAAA,MAC5B,wBAAwB,KAAK;AAAA,MAC7B,oBAAoB;AAAA,IACxB,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,wBAAwB;AAAA,EAC1B,WAAW;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,EACX;AAAA,EACA,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,eAAe;AAAA,EACf,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,wBAAwB;AAAA,EACxB,uBAAuB;AAAA,EACvB,4BAA4B;AAAA,EAC5B,4BAA4B;AAAA,EAC5B,gCAAgC;AAAA,EAChC,oBAAoB;AAAA,EACpB,qBAAqB;AACzB;AACA,IAAM,mBAAmB,CAAC,QAAQ,UAAU,IAAI,uBAAuB,QAAQ,KAAK;AACpF,IAAM,iBAAiB,MAAM;AACzB,QAAM,aAAa;AAAA,IACf,MAAM;AAAA,IACN,WAAW;AAAA,IACX,gBAAgB;AAAA;AAAA;AAAA;AAAA,IAIhB,0BAA0B;AAAA,EAC9B;AACA,SAAO;AACX;AACA,IAAM,iBAAiB,eAAe;AAEtC,IAAM,mBAAN,cAA+B,qBAAqB;AAAA,EAChD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,sBAAsB,IAAI,mBAAmB;AAAA,EACtD;AAAA,EACA,qBAAqB,gBAAgB,MAAM;AACvC,WAAO,KAAK,oBAAoB,cAAc,gBAAgB;AAAA,MAC1D,qBAAqB,KAAK;AAAA,MAC1B,qBAAqB;AAAA,MACrB,wBAAwB;AAAA,MACxB,wBAAwB,KAAK;AAAA,MAC7B,yBAAyB,KAAK,iBAAiB,2BAA2B;AAAA,MAC1E,4BAA4B,eAAe,WAAW;AAAA,IAC1D,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,qBAAN,cAAiC,iBAAiB;AAAA,EAC9C,YAAY,QAAQ,OAAO;AACvB,UAAM,QAAQ,KAAK;AACnB,SAAK,sBAAsB,IAAI,kBAAkB;AACjD,SAAK,yBAAyB,IAAI,iBAAiB;AACnD,SAAK,yBAAyB,IAAI,iBAAiB;AACnD,SAAK,oBAAoB,uBAAuB,CAAC,KAAK,wBAAwB,KAAK,sBAAsB,CAAC;AAAA,EAC9G;AAAA,EACA,yBAAyB,MAAM,OAAO,SAAS;AAC3C,WAAO;AAAA,MACH,GAAG,KAAK,6BAA6B,MAAM,KAAK;AAAA,MAChD,GAAG,QAAQ,mBAAmB,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,iCAAiC;AAC7B,UAAM,UAAU,KAAK,kBAAkB,kBAAkB;AACzD,QAAI,KAAK,iCAAiC,QAAQ,KAAK,iBAAiB,WAAW,GAAG;AAClF;AAAA,IACJ;AACA,QAAI;AACJ,QAAI,QAAQ,kBAAkB;AAC1B,sBAAgB,KAAK,iBAAiB,KAAK,6BAA6B,IAAI,EAAE;AAC9E,eAAS,IAAI,KAAK,6BAA6B,MAAM,IAAI,KAAK,6BAA6B,IAAI,KAAK;AAChG,cAAM,OAAO,KAAK,iBAAiB,CAAC;AACpC,YAAI,KAAK,cAAc,eAAe;AAClC,0BAAgB,KAAK;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,uBAAuB,kBAAkB;AAAA,MAC1C,oBAAoB,QAAQ;AAAA,MAC5B,iBAAiB,KAAK;AAAA,MACtB,qBAAqB,QAAQ;AAAA,MAC7B,qBAAqB,QAAQ;AAAA,MAC7B,+BAA+B;AAAA,MAC/B,yBAAyB;AAAA,MACzB,4BAA4B,QAAQ;AAAA,MACpC,wBAAwB,KAAK;AAAA,MAC7B,oBAAoB,KAAK,iBAAiB,oBAAoB,EAAE,qBAAqB;AAAA,IACzF,CAAC;AACD,SAAK,uBAAuB,kBAAkB;AAAA,MAC1C,oBAAoB,QAAQ,cAAc,QAAQ,WAAW;AAAA,MAC7D,iBAAiB,KAAK;AAAA,MACtB,qBAAqB,QAAQ;AAAA,MAC7B,qBAAqB,QAAQ;AAAA,MAC7B,wBAAwB,KAAK;AAAA,MAC7B,oBAAoB,KAAK,iBAAiB,oBAAoB,EAAE,qBAAqB;AAAA,MACrF,8BAA8B,QAAQ,sBAAuB,QAAQ,sBAAsB,QAAQ,YAAY,IAAI,IAAK;AAAA,IAC5H,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,oBAAoB;AAAA,EACtB,UAAU;AAAA,EACV,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,wBAAwB;AAAA,EACxB,uBAAuB;AAAA,EACvB,4BAA4B;AAAA,EAC5B,4BAA4B;AAAA,EAC5B,gCAAgC;AAAA,EAChC,oBAAoB;AAAA,EACpB,qBAAqB;AACzB;AACA,IAAM,mBAAmB,CAAC,QAAQ,UAAU,IAAI,mBAAmB,QAAQ,KAAK;AAChF,IAAM,iBAAiB,MAAM;AACzB,QAAM,aAAa;AAAA,IACf,MAAM;AAAA,IACN,WAAW;AAAA,IACX,gBAAgB;AAAA;AAAA;AAAA;AAAA,IAIhB,0BAA0B;AAAA,EAC9B;AACA,SAAO;AACX;AACA,IAAM,aAAa,eAAe;AAElC,SAAS,gBAAgB,YAAY,YAAY;AAC7C,SAAO,KAAK,MAAM,aAAa,MAAM,UAAU;AACnD;AACA,SAAS,wBAAwB,YAAY,YAAY;AACrD,QAAM,4BAA4B;AAClC,QAAM,0BAA0B;AAChC,QAAM,6BAA6B;AACnC,MAAI,cAAc,6BAA6B,cAAc,yBAAyB;AAClF,WAAO,KAAK,MAAM,6BAA6B,UAAU;AAAA,EAC7D;AAEA,QAAM,0BAA0B;AAChC,QAAM,QAAQ,IAAI,0BAA0B,KAAK,KAAK,KAAK,IAAI,yBAAyB,UAAU,IAAI,uBAAuB,KAAK,KAAK,KAAK;AAC5I,QAAM,MAAM,KAAK,MAAM,aAAa,QAAQ,UAAU;AACtD,QAAM,mBAAmB,KAAK,MAAM,aAAa,UAAU;AAC3D,QAAM,UAAU,KAAK,IAAI,KAAK,gBAAgB;AAC9C,SAAO,KAAK,IAAI,KAAK,MAAM,UAAU,GAAG,OAAO;AACnD;AAEA,IAAM,mBAAN,cAA+B,8BAA8B;AAAA,EACzD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB;AACtB,SAAK,qBAAqB;AAC1B,SAAK,yBAAyB;AAAA,EAClC;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,iBAAiB;AAAA,EAC1B;AAAA;AAAA,EAEA,oBAAoB,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,GAAG;AAC5E,QAAI,KAAK,mBAAmB,QAAQ,KAAK,eAAe,eAAe,WAAW,KAAK,KAAK,eAAe,2BAA2B,MAAM;AACxI;AAAA,IACJ;AACA,SAAK,qBAAqB,KAAK,uBAAuB,oBAAoB;AAK1E,QAAI,KAAK,sBAAsB,GAAG;AAC9B,YAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,oBAAoB,CAAC;AAC9D,UAAK,YAAY,MAAQ,KAAK,qBAAqB,GAAI;AACnD,aAAK;AAAA,MACT;AAAA,IACJ;AAEA,SAAK,yBAAyB,KAAK,eAAe,qBAAqB,KAAK,IAAI,KAAK,oBAAoB,KAAK,MAAM,oBAAoB,CAAC,IAAI,KAAK;AAClJ,QAAI,YAAY;AAChB,UAAM,gBAAgB,KAAK,0BAA0B,KAAK,sBAAsB,KAAK,eAAe,wBAAwB,KAAK,MAAM,MAAM,oBAAoB;AACjK,aAAS,IAAI,KAAK,eAAe,uBAAuB,MAAM,IAAI,KAAK,eAAe,uBAAuB,IAAI,EAAE,GAAG;AAClH,YAAM,MAAM,KAAK,eAAe,eAAe,CAAC;AAChD,UAAI,cAAc,IAAI,oBAAoB;AACtC,YAAI,YAAY,IAAI;AACpB,oBAAY,IAAI;AAAA,MACpB;AACA,YAAM,gBAAgB,KAAK,MAAM,KAAK,yBAAyB,GAAG;AAClE,YAAM,aAAa,KAAK,MAAM,IAAI,cAAc,oBAAoB;AACpE,YAAM,WAAW,aAAa;AAC9B,YAAM,YAAY,KAAK;AACvB,YAAM,YAAY,WAAW,YAAY;AACzC,YAAM,OAAO,KAAK,IAAI,IAAI,iBAAiB,IAAI,cAAc;AAC7D,YAAM,MAAM,KAAK,IAAI,IAAI,iBAAiB,IAAI,cAAc;AAC5D,YAAM,UAAU,KAAK,MAAM,OAAO,kBAAkB,IAAI;AACxD,YAAM,aAAa,KAAK,MAAM,MAAM,kBAAkB,IAAI;AAC1D,YAAM,aAAa,KAAK,IAAK,aAAa,SAAU,KAAK,sBAAsB;AAC/E,UAAI,SAAS,UAAU,SAAS,WAAW,UAAU;AACrD,YAAM,YAAY,KAAK,KAAK,KAAK,qBAAqB,GAAG;AACzD,UAAI,eAAe;AACf,YAAI,KAAK,eAAe,uBAAuB;AAC3C,gBAAM,WAAW,aAAa;AAC9B,cAAI,UAAU,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,kBAAkB,kBAAkB,IAAI,aAAa;AACpG,cAAI,aAAa,UAAU,YAAY;AACvC,cAAI,aAAa,UAAU,aAAa,GAAG;AACvC,yBAAa,UAAU,aAAa;AACpC,sBAAU,aAAa,YAAY;AAAA,UACvC;AACA,cAAI,SAAS,UAAU,SAAS,WAAW,UAAU,aAAa,UAAU,CAAC;AAAA,QACjF;AACA,cAAM,aAAa,aAAa;AAChC,YAAI,WAAW,KAAK,IAAI,SAAS,KAAK,MAAM,IAAI,mBAAmB,kBAAkB,IAAI,aAAa;AACtG,YAAI,cAAc,WAAW,YAAY;AACzC,YAAI,cAAc,UAAU,aAAa,GAAG;AACxC,wBAAc,UAAU,aAAa;AACrC,qBAAW,cAAc,YAAY;AAAA,QACzC;AACA,YAAI,SAAS,YAAY,GAAG,UAAU,aAAa,WAAW,cAAc,WAAW,CAAC;AAAA,MAC5F;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,uBAAuB,YAAY;AAC/B,UAAM,QAAQ,KAAK,MAAM,UAAU;AACnC,WAAO,KAAK,IAAI,OAAO,KAAK,MAAM,gBAAgB,cAAc,KAAK,cAAc,EAAE,sBAAsB,UAAU,CAAC,CAAC;AAAA,EAC3H;AACJ;AAEA,IAAM,mBAAN,cAA+B,mBAAmB;AAAA,EAC9C,YAAY,QAAQ,OAAO;AACvB,UAAM,QAAQ,OAAO,KAAK;AAAA,EAC9B;AAAA,EACA,gCAAgC,YAAY,WAAW,YAAY;AAC/D,cAAU,+BAA+B,KAAK,kBAAkB,gBAAgB,KAAK,4BAA4B,CAAC;AAClH,eAAW,iCAAiC,KAAK,kBAAkB,YAAY,gBAAgB,KAAK,4BAA4B,CAAC;AAAA,EACrI;AAAA,EACA,6BAA6B,MAAM,KAAK,SAAS;AAC7C,WAAO;AAAA,MACH,gBAAgB;AAAA,MAChB,gBAAgB,IAAI;AAAA,QAAgB;AAAA;AAAA,MAA8B;AAAA,MAClE,gBAAgB,IAAI;AAAA,QAAgB;AAAA;AAAA,MAA8B;AAAA,MAClE,eAAe,IAAI;AAAA,QAAgB;AAAA;AAAA,MAA6B;AAAA,MAChE,iBAAiB,IAAI;AAAA,QAAgB;AAAA;AAAA,MAA+B;AAAA,MACpE,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,kBAAkB;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,2BAA2B;AACvB,UAAM,UAAU,KAAK,kBAAkB,qBAAqB;AAC5D,SAAK,mBAAmB,KAAK,kBAAkB,eAAe,EAAE,eAAe,EAAE,IAAI,CAAC,QAAQ,KAAK,yBAAyB,IAAI,iBAAiB,KAAK,OAAO,CAAC;AAAA,EAClK;AACJ;AAEA,IAAM,qBAAN,cAAiC,iBAAiB;AAAA,EAC9C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,sBAAsB,IAAI,iBAAiB;AAAA,EACpD;AAAA,EACA,yBAAyB,MAAM,KAAK,SAAS;AACzC,WAAO;AAAA,MACH,GAAG,KAAK,6BAA6B,MAAM,KAAK,OAAO;AAAA,MACvD,GAAG,QAAQ,mBAAmB,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,iCAAiC;AAC7B,UAAM,gBAAgB,KAAK,kBAAkB,kBAAkB;AAC/D,SAAK,oBAAoB,kBAAkB;AAAA,MACvC,gBAAgB,KAAK;AAAA,MACrB,sBAAsB,KAAK,iBAAiB,oBAAoB,EAAE,qBAAqB;AAAA,MACvF,uBAAuB,cAAc;AAAA,MACrC,oBAAoB,cAAc;AAAA,MAClC,wBAAwB,KAAK;AAAA,IACjC,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,mBAAmB;AAAA,EACrB,SAAS;AAAA,EACT,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AACd;AACA,IAAM,mBAAmB,CAAC,QAAQ,UAAU,IAAI,mBAAmB,QAAQ,KAAK;AAChF,IAAM,iBAAiB,MAAM;AACzB,QAAM,aAAa;AAAA,IACf,MAAM;AAAA,IACN,WAAW;AAAA,IACX,gBAAgB;AAAA;AAAA;AAAA;AAAA,IAIhB,0BAA0B;AAAA,EAC9B;AACA,SAAO;AACX;AACA,IAAM,YAAY,eAAe;AAEjC,IAAM,2BAAN,cAAuC,8BAA8B;AAAA,EACjE,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB;AAEtB,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,oBAAoB,gBAAgB;AAChC,QAAI,KAAK,mBAAmB,QAAQ,KAAK,eAAe,eAAe,WAAW,KAAK,KAAK,eAAe,2BAA2B,MAAM;AACxI;AAAA,IACJ;AACA,UAAM,EAAE,qBAAqB,IAAI;AAEjC,SAAK,qBAAqB,wBAAwB,KAAK,eAAe,sBAAsB,oBAAoB;AAKhH,QAAI,KAAK,sBAAsB,GAAG;AAC9B,YAAM,YAAY,KAAK,MAAM,oBAAoB;AACjD,UAAK,YAAY,MAAQ,KAAK,qBAAqB,GAAI;AACnD,aAAK;AAAA,MACT;AAAA,IACJ;AACA,UAAM,OAAO,KAAK,eAAe;AACjC,QAAI,KAAK,eAAe,uBAAuB;AAC3C,WAAK,oBAAoB,gBAAgB,MAAM,KAAK,eAAe,sBAAsB;AAAA,IAC7F;AACA,QAAI,KAAK,eAAe,yBAAyB;AAC7C,WAAK,qBAAqB,gBAAgB,MAAM,KAAK,eAAe,sBAAsB;AAAA,IAC9F;AACA,UAAM,cAAc,KAAK,+BAA+B,oBAAoB;AAC5E,QAAI,CAAC,KAAK,eAAe,2BAA2B,KAAK,qBAAqB,cAAc,GAAG;AAC3F,WAAK,sBAAsB,gBAAgB,MAAM,KAAK,eAAe,sBAAsB;AAAA,IAC/F;AAAA,EACJ;AAAA,EACA,oBAAoB,gBAAgB,MAAM,cAAc;AACpD,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AACA,UAAM,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,IAAI;AACnE,QAAI,gBAAgB;AACpB,QAAI,YAAY,KAAK,IAAI,KAAK,MAAM,oBAAoB,GAAG,KAAK,MAAM,KAAK,eAAe,uBAAuB,oBAAoB,CAAC;AACtI,gBAAY,KAAK,IAAI,KAAK,MAAM,oBAAoB,GAAG,KAAK,IAAI,WAAW,KAAK,kBAAkB,CAAC;AACnG,UAAM,aAAa,KAAK,MAAM,YAAY,GAAG;AAC7C,QAAI,WAAW;AACf,aAAS,IAAI,aAAa,MAAM,IAAI,aAAa,IAAI,KAAK;AACtD,YAAM,MAAM,KAAK,CAAC;AAClB,UAAI,IAAI,2BAA2B,eAAe;AAC9C,YAAI,YAAY,IAAI;AACpB,wBAAgB,IAAI;AAAA,MACxB;AACA,YAAM,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,iBAAiB,IAAI,gBAAgB,IAAI,kBAAkB;AAC/F,YAAM,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,iBAAiB,IAAI,gBAAgB,IAAI,kBAAkB;AAClG,YAAM,OAAO,KAAK,MAAM,IAAI,kBAAkB,kBAAkB;AAChE,YAAM,MAAM,KAAK,MAAM,IAAI,iBAAiB,kBAAkB;AAC9D,YAAM,UAAU,KAAK,MAAM,uBAAuB,IAAI,WAAW;AACjE,UAAI,OAAO,UAAU;AACrB,YAAM,QAAQ,OAAO,YAAY;AACjC,UAAI,aAAa,MAAM;AACnB,eAAO,KAAK,IAAI,WAAW,GAAG,IAAI;AAClC,eAAO,KAAK,IAAI,MAAM,KAAK;AAAA,MAC/B;AACA,YAAM,QAAQ,QAAQ,OAAO;AAC7B,UAAI,SAAS,MAAM,MAAM,OAAO,MAAM,IAAI;AAC1C,UAAI,SAAS,MAAM,SAAS,GAAG,OAAO,MAAM,MAAM;AAClD,iBAAW;AAAA,IACf;AAAA,EACJ;AAAA,EACA,+BAA+B,YAAY;AACvC,QAAI,cAAc,KAAK,MAAM,IAAmC,UAAU;AAC1E,QAAI,KAAK,sBAAsB,IAAI,aAAa;AAC5C,oBAAc,KAAK,OAAO,KAAK,qBAAqB,KAAK,GAAG;AAAA,IAChE;AACA,UAAM,MAAM,KAAK,IAAI,KAAK,MAAM,UAAU,GAAG,WAAW;AACxD,QAAI,KAAK,sBAAsB,MAAM,GAAG;AAEpC,aAAO,KAAK,IAAI,KAAK,MAAM,UAAU,GAAG,KAAK,MAAM,IAAmC,UAAU,CAAC;AAAA,IACrG;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,gBAAgB,MAAM,cAAc;AACrD,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AACA,UAAM,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,IAAI;AACnE,QAAI,kBAAkB;AACtB,UAAM,cAAc,KAAK,+BAA+B,oBAAoB;AAC5E,QAAI,WAAW;AACf,aAAS,IAAI,aAAa,MAAM,IAAI,aAAa,IAAI,KAAK;AACtD,YAAM,MAAM,KAAK,CAAC;AAClB,UAAI,IAAI,6BAA6B,iBAAiB;AAClD,YAAI,YAAY,IAAI;AACpB,0BAAkB,IAAI;AAAA,MAC1B;AACA,UAAI,OAAO,KAAK,MAAM,IAAI,cAAc,oBAAoB,IAAI,KAAK,MAAM,KAAK,qBAAqB,GAAG;AAExG,YAAM,QAAQ,OAAO,KAAK,qBAAqB;AAC/C,YAAM,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,iBAAiB,IAAI,gBAAgB,IAAI,kBAAkB;AAC/F,YAAM,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,iBAAiB,IAAI,gBAAgB,IAAI,kBAAkB;AAClG,UAAI,aAAa,MAAM;AACnB,eAAO,KAAK,IAAI,WAAW,GAAG,IAAI;AAClC,eAAO,KAAK,IAAI,MAAM,KAAK;AAAA,MAC/B;AACA,UAAI,KAAK,eAAe,uBAAuB,uBAAuB,IAAI,aAAa;AACnF,4BAAoB,KAAK,MAAM,KAAK,QAAQ,OAAO,GAAG,SAAS,MAAM,GAAG,WAAW;AAAA,MACvF,OACK;AACD,cAAM,QAAQ,QAAQ,OAAO;AAC7B,YAAI,SAAS,MAAM,KAAK,OAAO,SAAS,MAAM,CAAC;AAAA,MACnD;AACA,iBAAW;AAAA,IACf;AAAA,EACJ;AAAA,EACA,sBAAsB,gBAAgB,MAAM,cAAc;AACtD,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AACA,UAAM,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,IAAI;AACnE,QAAI,eAAe;AACnB,UAAM,cAAc,KAAK,+BAA+B,oBAAoB;AAC5E,aAAS,IAAI,aAAa,MAAM,IAAI,aAAa,IAAI,KAAK;AACtD,YAAM,MAAM,KAAK,CAAC;AAClB,UAAI,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,iBAAiB,IAAI,gBAAgB,IAAI,kBAAkB;AAC7F,UAAI,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI,iBAAiB,IAAI,gBAAgB,IAAI,kBAAkB;AAChG,UAAI,OAAO,KAAK,MAAM,IAAI,cAAc,oBAAoB,IAAI,KAAK,MAAM,KAAK,qBAAqB,GAAG;AACxG,UAAI,QAAQ,OAAO,KAAK,qBAAqB;AAC7C,UAAI,IAAI,uBAAuB,cAAc;AACzC,cAAM,WAAW,IAAI;AACrB,YAAI,YAAY;AAChB,uBAAe;AAAA,MACnB;AACA,UAAI,KAAK,eAAe,yBAAyB;AAC7C,gBAAQ;AACR,eAAO;AACP,iBAAS;AACT,kBAAU;AAAA,MACd;AACA,UAAI,MAAM,QAAQ;AACd;AAAA,MACJ;AACA,UAAI,SAAS,MAAM,KAAK,QAAQ,OAAO,GAAG,SAAS,MAAM,CAAC;AAAA,IAC9D;AAAA,EACJ;AACJ;AAEA,IAAM,6BAAN,cAAyC,iBAAiB;AAAA,EACtD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,sBAAsB,IAAI,yBAAyB;AAAA,EAC5D;AAAA,EACA,yBAAyB,MAAM,KAAK,SAAS;AACzC,WAAO;AAAA,MACH,GAAG,KAAK,6BAA6B,MAAM,KAAK,OAAO;AAAA,MACvD,GAAG,QAAQ,mBAAmB,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,iCAAiC;AAC7B,UAAM,wBAAwB,KAAK,kBAAkB,kBAAkB;AACvE,SAAK,oBAAoB,kBAAkB;AAAA,MACvC,gBAAgB,KAAK;AAAA,MACrB,sBAAsB,KAAK,iBAAiB,oBAAoB,EAAE,qBAAqB;AAAA,MACvF,uBAAuB,sBAAsB;AAAA,MAC7C,yBAAyB,sBAAsB;AAAA,MAC/C,wBAAwB,KAAK;AAAA,IACjC,CAAC;AAAA,EACL;AACJ;AAEA,IAAM,2BAA2B;AAAA,EAC7B,SAAS;AAAA,EACT,WAAW;AAAA,EACX,aAAa;AAAA,EACb,eAAe;AAAA,EACf,aAAa;AAAA,EACb,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,aAAa;AAAA,EACb,eAAe;AACnB;AACA,IAAM,mBAAmB,CAAC,QAAQ,UAAU,IAAI,2BAA2B,QAAQ,KAAK;AACxF,IAAM,iBAAiB,MAAM;AACzB,QAAM,aAAa;AAAA,IACf,MAAM;AAAA,IACN,WAAW;AAAA,IACX,gBAAgB;AAAA;AAAA;AAAA;AAAA,IAIhB,0BAA0B;AAAA,EAC9B;AACA,SAAO;AACX;AACA,IAAM,oBAAoB,eAAe;AAEzC,IAAM,6BAA6B;AACnC,IAAM,2BAA2B;AACjC,IAAM,wBAAN,cAAoC,8BAA8B;AAAA,EAC9D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB;AACtB,SAAK,+BAA+B,CAAC;AAAA,EACzC;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,iBAAiB;AACtB,SAAK,+BAA+B,CAAC;AAAA,EACzC;AAAA,EACA,oBAAoB,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,GAAG;AAC5E,QAAI,KAAK,mBAAmB,QAAQ,KAAK,eAAe,gBAAgB,WAAW,KAAK,KAAK,eAAe,2BAA2B,MAAM;AACzI;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,6BAA6B,QAAQ;AAC3C,WAAK,iCAAiC,oBAAoB;AAAA,IAC9D;AACA,UAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,kBAAkB,CAAC;AAC5D,UAAM,gBAAgB,KAAK,MAAO,KAAK,eAAe,0BAA2B,kBAAkB;AACnG,UAAM,mBAAmB,gBAAgB,KAAK,MAAM,YAAY,CAAC;AACjE,UAAM,sBAAsB,mBAAmB;AAC/C,aAAS,IAAI,KAAK,eAAe,uBAAuB,MAAM,IAAI,KAAK,eAAe,uBAAuB,IAAI,KAAK;AAClH,YAAM,OAAO,KAAK,eAAe,gBAAgB,CAAC;AAClD,YAAM,UAAU,KAAK,6BAA6B,IAAI,KAAK,eAAe,uBAAuB,IAAI;AACrG,YAAM,IAAI,KAAK,MAAM,KAAK,cAAc,kBAAkB;AAC1D,UAAI,YAAY,KAAK;AACrB,UAAI;AACJ,UAAI;AACJ,UAAI,KAAK,kBAAkB;AACvB,cAAM;AACN,iBAAS;AAAA,MACb,OACK;AACD,cAAM;AACN,iBAAS,IAAI,KAAK,MAAM,YAAY,CAAC,IAAI;AAAA,MAC7C;AACA,UAAI,SAAS,QAAQ,gBAAgB,KAAK,QAAQ,kBAAkB,QAAQ,iBAAiB,GAAG,SAAS,GAAG;AAAA,IAChH;AAAA,EACJ;AAAA;AAAA,EAEA,iCAAiC,YAAY;AACzC,QAAI,KAAK,mBAAmB,QAAQ,KAAK,eAAe,gBAAgB,WAAW,KAAK,KAAK,eAAe,2BAA2B,MAAM;AACzI,WAAK,+BAA+B,CAAC;AACrC;AAAA,IACJ;AACA,UAAM,UAAU,KAAK,KAAK,KAAK,eAAe,uBAAuB,UAAU,KAAK,6BAA6B,IAAI,KAAK,IAAI,GAAG,KAAK,MAAM,UAAU,CAAC;AACvJ,UAAM,cAAc,KAAK,MAAM,KAAK,eAAe,uBAAuB,UAAU,IAAI;AACxF,SAAK,+BAA+B,IAAI,MAAM,KAAK,eAAe,uBAAuB,KAAK,KAAK,eAAe,uBAAuB,IAAI;AAC7I,aAAS,IAAI,KAAK,eAAe,uBAAuB,MAAM,IAAI,KAAK,eAAe,uBAAuB,IAAI,KAAK;AAClH,YAAM,OAAO,KAAK,eAAe,gBAAgB,CAAC;AAElD,YAAM,IAAI,KAAK,MAAM,KAAK,cAAc,UAAU;AAClD,UAAI;AACJ,UAAI;AACJ,UAAI,cAAc,GAAG;AACjB,cAAM,aAAa,cAAc,KAAK;AACtC,eAAO,IAAI;AACX,gBAAQ,IAAI;AAAA,MAChB,OACK;AAED,cAAM,YAAY,cAAc;AAChC,eAAO,IAAI;AACX,gBAAQ,IAAI,YAAY;AAAA,MAC5B;AACA,WAAK,6BAA6B,IAAI,KAAK,eAAe,uBAAuB,IAAI,IAAI;AAAA,QACrF,gBAAgB;AAAA,QAChB,iBAAiB;AAAA,QACjB,yBAAyB;AAAA,QACzB,kBAAmB,KAAK,cAAc;AAAA,QACtC,gBAAgB,KAAK;AAAA,MACzB;AAAA,IACJ;AAEA,aAAS,IAAI,KAAK,eAAe,uBAAuB,OAAO,GAAG,IAAI,KAAK,eAAe,uBAAuB,IAAI,KAAK;AACtH,YAAM,UAAU,KAAK,6BAA6B,IAAI,KAAK,eAAe,uBAAuB,IAAI;AACrG,YAAM,OAAO,KAAK,6BAA6B,IAAI,KAAK,eAAe,uBAAuB,OAAO,CAAC;AACtG,UAAI,QAAQ,mBAAmB,KAAK,iBAAiB,GAAG;AACpD;AAAA,MACJ;AACA,UAAI,QAAQ,iBAAiB,KAAK,oBAAqB,UAAU,GAAI;AAEjE,YAAI,KAAK,0BAA0B,KAAK,kBAAkB;AAEtD,eAAK,kBAAkB,QAAQ,iBAAiB,UAAU;AAAA,QAC9D,OACK;AAED,kBAAQ,iBAAiB,KAAK,kBAAkB,UAAU;AAAA,QAC9D;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,WAAW,KAAK,KAAK,KAAK,eAAe,uBAAuB,UAAU;AAC9E,aAAS,IAAI,KAAK,eAAe,uBAAuB,MAAM,IAAI,KAAK,eAAe,uBAAuB,IAAI,KAAK;AAClH,YAAM,UAAU,KAAK,6BAA6B,IAAI,KAAK,eAAe,uBAAuB,IAAI;AAErG,UAAI,QAAQ,kBAAkB,QAAQ,gBAAgB;AAClD,gBAAQ,kBAAkB,QAAQ;AAAA,MACtC;AACA,YAAM,QAAQ,QAAQ,kBAAkB,QAAQ,iBAAiB;AACjE,iBAAW,KAAK,IAAI,OAAO,QAAQ;AAAA,IACvC;AACA,QAAI,UAAU,KAAK,WAAW,0BAA0B;AACpD,eAAS,IAAI,KAAK,eAAe,uBAAuB,MAAM,IAAI,KAAK,eAAe,uBAAuB,IAAI,KAAK;AAClH,cAAM,UAAU,KAAK,6BAA6B,IAAI,KAAK,eAAe,uBAAuB,IAAI;AACrG,cAAM,QAAQ,QAAQ,kBAAkB,QAAQ,iBAAiB;AACjE,YAAI,QAAQ,UAAU;AAClB,cAAI,QAAQ,0BAA0B,QAAQ,kBAAkB;AAC5D,oBAAQ,mBAAmB;AAAA,UAC/B,OACK;AACD,oBAAQ,kBAAkB;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,IAAM,0BAAN,cAAsC,iBAAiB;AAAA,EACnD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,sBAAsB,IAAI,sBAAsB;AAAA,EACzD;AAAA,EACA,yBAAyB,MAAM,OAAO,SAAS;AAC3C,WAAO;AAAA,MACH,GAAG,KAAK,6BAA6B,MAAM,KAAK;AAAA,MAChD,GAAG,QAAQ,mBAAmB,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,iCAAiC;AAC7B,UAAM,OAAO;AAAA,MACT,iBAAiB,KAAK;AAAA,MACtB,sBAAsB,KAAK,iBAAiB,oBAAoB,EAAE,qBAAqB;AAAA,MACvF,wBAAwB,KAAK;AAAA,MAC7B,yBAAyB,KAAK,kBAAkB,qBAAqB,EAAE,4BAA4B,KAAK,kBAAkB,kBAAkB,EAAE,MAAM,cAAc,KAAK,kBAAkB,qBAAqB,CAAC,EAAE,eAAe;AAAA,IACpO;AACA,SAAK,oBAAoB,kBAAkB,IAAI;AAAA,EACnD;AACJ;AAEA,IAAM,yBAAyB;AAAA,EAC3B,OAAO;AAAA,EACP,MAAM;AACV;AACA,IAAM,iBAAiB,CAAC,QAAQ,UAAU,IAAI,wBAAwB,QAAQ,KAAK;AACnF,IAAM,eAAe,MAAM;AACvB,QAAM,aAAa;AAAA,IACf,MAAM;AAAA,IACN,WAAW;AAAA,IACX,gBAAgB;AAAA;AAAA;AAAA;AAAA,IAIhB,0BAA0B;AAAA,EAC9B;AACA,SAAO;AACX;AACA,IAAM,kBAAkB,aAAa;AAErC,IAAME,wBAAN,MAA2B;AAAA,EACvB,YAAY,MAAM,WAAW;AACzB,SAAK,iBAAiB;AACtB,SAAK,sBAAsB;AAC3B,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,SAAS;AACL,SAAK,eAAe,gBAAgB,KAAK,mBAAmB;AAAA,EAChE;AAAA,EACA,UAAU;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,aAAa,SAAS;AAClB,SAAK,oBAAoB,yBAAyB,OAAO;AAAA,EAC7D;AAAA,EACA,mBAAmB;AACf,SAAK,eAAe,gBAAgB,KAAK,mBAAmB;AAAA,EAChE;AACJ;AAEA,IAAM,+BAA+B;AAAA,EACjC,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,OAAO,CAAC;AACZ;AACA,IAAM,mCAAmC;AAAA,EACrC,OAAO;AAAA,EACP,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,MAAM;AACV;AAEA,IAAM,wBAAN,MAA4B;AAAA,EACxB,YAAY,SAAS;AACjB,SAAK,yBAAyB,oBAAI,IAAI;AACtC,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,KAAK,QAAQ;AACT,WAAO,wBAAwB,CAAC,UAAU;AACtC,UAAI,CAAC,KAAK,eAAe,SAAS;AAC9B;AAAA,MACJ;AACA,YAAM,EAAE,SAAS,KAAK,UAAU,IAAI;AACpC,UAAI,aAAa;AACjB,iBAAW,QAAQ,KAAK,eAAe,OAAO;AAC1C,YAAI,KAAK,KAAK,WAAW,GAAG;AACxB;AAAA,QACJ;AACA,YAAI,OAAO,KAAK;AAChB,cAAM,YAAY,KAAK,kBAAkB,KAAK,KAAK,IAAI;AACvD,YAAI,YAAY,UAAU,OAAO;AAC7B,eAAK,iBAAiB,UAAU,QAAQ;AAAA,QAC5C,OACK;AACD,eAAK,iBAAiB;AAAA,QAC1B;AACA,sBAAc,KAAK,aAAa,KAAK;AAAA,MACzC;AACA,UAAI,aAAa;AACjB,cAAQ,KAAK,eAAe,WAAW;AAAA,QACnC,KAAK;AACD,uBAAa;AACb;AAAA,QACJ,KAAK;AACD,uBAAa,KAAK,KAAK,UAAU,SAAS,cAAc,GAAG,CAAC;AAC5D;AAAA,QACJ,KAAK;AACD,uBAAa,KAAK,IAAI,UAAU,SAAS,YAAY,CAAC;AACtD;AAAA,MACR;AACA,iBAAW,QAAQ,KAAK,eAAe,OAAO;AAC1C,YAAI,KAAK;AACT,YAAI,YAAY,KAAK;AACrB,YAAI,aAAa;AACjB,gBAAQ,KAAK,eAAe,WAAW;AAAA,UACnC,KAAK;AACD,gBAAI,YAAY;AAChB,yBAAa,KAAK,aAAa;AAC/B;AAAA,UACJ,KAAK;AACD,gBAAI,YAAY;AAChB,yBAAa,UAAU,QAAQ;AAC/B;AAAA,UACJ,KAAK;AACD,gBAAI,YAAY;AAChB,yBAAa,UAAU,QAAQ,IAAI,KAAK,aAAa;AACrD;AAAA,QACR;AACA,YAAI,UAAU,YAAY,UAAU;AACpC,YAAI,eAAe;AACnB,YAAI,OAAO,KAAK;AAChB,YAAI,MAAM,KAAK,gBAAgB,KAAK,cAAc;AAClD,YAAI,SAAS,KAAK,MAAM,GAAG,KAAK,oBAAoB;AACpD,YAAI,QAAQ;AACZ,sBAAc,KAAK,aAAa,KAAK;AAAA,MACzC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,kBAAkB,KAAK,MAAM;AACzB,UAAM,YAAY,KAAK,oBAAoB,IAAI,IAAI;AACnD,QAAI,SAAS,UAAU,IAAI,IAAI;AAC/B,QAAI,WAAW,QAAW;AACtB,eAAS,IAAI,YAAY,IAAI,EAAE;AAC/B,gBAAU,IAAI,MAAM,MAAM;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,MAAM;AACtB,QAAI,YAAY,KAAK,uBAAuB,IAAI,IAAI;AACpD,QAAI,cAAc,QAAW;AACzB,kBAAY,oBAAI,IAAI;AACpB,WAAK,uBAAuB,IAAI,MAAM,SAAS;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,wBAAN,MAA4B;AAAA,EACxB,YAAY,SAAS;AACjB,SAAK,oBAAoB,uBAAuB,OAAO;AAAA,EAC3D;AAAA,EACA,iBAAiB,SAAS;AACtB,SAAK,oBAAoB,uBAAuB,OAAO;AAAA,EAC3D;AAAA,EACA,WAAW;AACP,WAAO,IAAI,sBAAsB,KAAK,iBAAiB;AAAA,EAC3D;AACJ;AACA,SAAS,yBAAyB,YAAY;AAC1C,SAAO;AAAA,IACH,GAAG;AAAA,IACH,gBAAgB,SAAS,WAAW,UAAU,WAAW,YAAY,WAAW,SAAS;AAAA,IACzF,YAAY,WAAW,cAAc,WAAW,WAAW;AAAA,IAC3D,sBAAsB;AAAA,IACtB,gBAAgB;AAAA,EACpB;AACJ;AACA,SAAS,uBAAuB,SAAS;AACrC,SAAO;AAAA,IACH,GAAG;AAAA,IACH,OAAO,QAAQ,MAAM,IAAI,wBAAwB;AAAA,EACrD;AACJ;AAEA,SAAS,6BAA6B,SAAS;AAC3C,SAAO;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,EACP;AACJ;AACA,SAAS,2BAA2B,SAAS;AACzC,SAAO;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,OAAO,QAAQ,OAAO,IAAI,4BAA4B,KAAK,CAAC;AAAA,EAChE;AACJ;AACA,IAAM,gBAAN,MAAoB;AAAA,EAChB,YAAY,SAAS;AACjB,SAAK,oBAAoB,2BAA2B,OAAO;AAC3D,SAAK,sBAAsB,CAAC,IAAI,sBAAsB,KAAK,iBAAiB,CAAC;AAAA,EACjF;AAAA,EACA,iBAAiB;AACb,SAAK,oBAAoB,QAAQ,CAAC,OAAO,GAAG,iBAAiB,KAAK,iBAAiB,CAAC;AAAA,EACxF;AAAA,EACA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,SAAS,EAAE,cAAc,GAAG;AACxB,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,WAAW;AACP,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,uBAAuB,SAAS;AAC5B,SAAK,oBAAoB,2BAA2B,EAAE,GAAG,KAAK,mBAAmB,GAAG,QAAQ,CAAC;AAC7F,QAAI,KAAK,yBAAyB;AAC9B,WAAK,wBAAwB;AAAA,IACjC;AAAA,EACJ;AACJ;AAuCA,SAAS,oBAAoB,MAAM,SAAS;AACxC,SAAO,IAAIA,sBAAqB,MAAM,IAAI,cAAc,OAAO,CAAC;AACpE;AAEA,IAAM,gCAAgC;AAAA,EAClC,OAAO;AAAA,EACP,SAAS;AACb;AAEA,IAAM,yBAAN,MAA6B;AAAA,EACzB,YAAY,MAAM;AACd,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,KAAK,QAAQ;AACT,WAAO,wBAAwB,CAAC,UAAU;AACtC,YAAM,MAAM,MAAM;AAClB,YAAM,MAAM,KAAK,6BAA6B,KAAK,gBAAgB,MAAM,SAAS;AAClF,UAAI,CAAC,OAAO,CAAC,KAAK,eAAe,sBAAsB;AACnD;AAAA,MACJ;AACA,UAAI,cAAc,KAAK,eAAe,SAAS;AAC/C,UAAI,UAAU,KAAK,eAAe,sBAAsB,IAAI,aAAa,IAAI,aAAa,IAAI,iBAAiB,IAAI,gBAAgB;AAAA,IACvI,CAAC;AAAA,EACL;AAAA,EACA,6BAA6B,MAAM,UAAU;AACzC,UAAM,EAAE,WAAW,UAAU,qBAAqB,WAAW,oBAAoB,UAAU,QAAQ,IAAI;AACvG,UAAM,cAAc,KAAK,MAAM,SAAS,QAAQ,CAAC;AACjD,UAAM,cAAc,KAAK,MAAM,SAAS,SAAS,CAAC;AAClD,UAAM,cAAc,WAAW;AAC/B,QAAI,iBAAiB,SAAS,QAAQ,IAAI;AAC1C,QAAI,kBAAkB,SAAS,SAAS,IAAI;AAC5C,QAAI,WAAW;AACX,wBAAkB,KAAK,IAAI,iBAAiB,SAAS;AAAA,IACzD;AACA,QAAI,UAAU;AACV,uBAAiB,KAAK,IAAI,gBAAgB,QAAQ;AAAA,IACtD;AACA,UAAM,SAAS,iBAAiB;AAChC,UAAM,SAAS,kBAAkB;AACjC,UAAM,aAAa,KAAK,IAAI,QAAQ,MAAM;AAC1C,UAAM,YAAY,WAAW;AAC7B,UAAM,aAAa,YAAY;AAC/B,UAAM,IAAI,cAAc,MAAM;AAC9B,UAAM,IAAI,cAAc,MAAM;AAC9B,WAAO;AAAA,MACH,aAAa;AAAA,MACb,aAAa;AAAA,MACb,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,IACrB;AAAA,EACJ;AACJ;AAEA,IAAM,yBAAN,MAA6B;AAAA,EACzB,YAAY,SAAS;AACjB,SAAK,kBAAkB;AACvB,SAAK,uBAAuB;AAC5B,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB;AACzB,SAAK,4BAA4B,qBAAqB,KAAK,mBAAmB,KAAK,iBAAiB,KAAK,sBAAsB,KAAK,qBAAqB;AAAA,EAC7J;AAAA,EACA,sBAAsB,OAAO;AACzB,QAAI,MAAM,yBAAyB,QAAW;AAC1C,WAAK,uBAAuB,MAAM;AAAA,IACtC;AACA,QAAI,MAAM,0BAA0B,QAAW;AAC3C,WAAK,wBAAwB,MAAM;AAAA,IACvC;AACA,QAAI,MAAM,oBAAoB,QAAW;AACrC,WAAK,kBAAkB,MAAM;AAAA,IACjC;AACA,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,wBAAwB,SAAS;AAC7B,SAAK,oBAAoB;AACzB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,SAAS;AACL,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB;AACf,SAAK,4BAA4B,qBAAqB,KAAK,mBAAmB,KAAK,iBAAiB,KAAK,sBAAsB,KAAK,qBAAqB;AAAA,EAC7J;AAAA,EACA,WAAW;AACP,WAAO,IAAI,uBAAuB,KAAK,yBAAyB;AAAA,EACpE;AACJ;AACA,SAAS,qBAAqB,SAAS,YAAY,UAAU,WAAW;AACpE,SAAO;AAAA,IACH,GAAG;AAAA,IACH,sBAAsB;AAAA,IACtB,oBAAoB;AAAA,IACpB,qBAAqB;AAAA,EACzB;AACJ;AAEA,SAAS,2BAA2B,SAAS;AACzC,SAAO;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,EACP;AACJ;AACA,IAAM,iBAAN,MAAqB;AAAA,EACjB,YAAY,UAAU,SAAS;AAC3B,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,oBAAoB,2BAA2B,OAAO;AAC3D,SAAK,sBAAsB,CAAC,IAAI,uBAAuB,KAAK,iBAAiB,CAAC;AAAA,EAClF;AAAA,EACA,iBAAiB;AACb,SAAK,oBAAoB,QAAQ,CAAC,OAAO,GAAG,iBAAiB,CAAC;AAAA,EAClE;AAAA,EACA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,SAAS,gBAAgB;AACrB,UAAM,EAAE,cAAc,IAAI;AAC1B,SAAK,0BAA0B;AAC/B,SAAK,uBAAuB,IAAI,MAAM;AACtC,SAAK,qBAAqB,SAAS,MAAM;AACrC,YAAM,cAAc,KAAK,sBAAsB,iBAAiB;AAChE,YAAM,aAAa,KAAK,sBAAsB,gBAAgB;AAC9D,WAAK,oBAAoB,QAAQ,CAAC,OAAO,GAAG,sBAAsB;AAAA,QAC9D,uBAAuB;AAAA,QACvB,sBAAsB;AAAA,QACtB,iBAAiB,KAAK;AAAA,MAC1B,CAAC,CAAC;AACF,UAAI,KAAK,yBAAyB;AAC9B,aAAK,wBAAwB;AAAA,MACjC;AAAA,IACJ;AACA,SAAK,qBAAqB,MAAM,KAAK;AAAA,EACzC;AAAA,EACA,WAAW;AACP,SAAK,0BAA0B;AAC/B,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,uBAAuB,SAAS;AAC5B,SAAK,oBAAoB,2BAA2B,EAAE,GAAG,KAAK,mBAAmB,GAAG,QAAQ,CAAC;AAC7F,SAAK,wBAAwB;AAC7B,QAAI,KAAK,yBAAyB;AAC9B,WAAK,wBAAwB;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,QAAI,KAAK,yBAAyB;AAC9B,WAAK,wBAAwB;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,0BAA0B;AACtB,SAAK,oBAAoB,QAAQ,CAAC,OAAO,GAAG,wBAAwB,KAAK,iBAAiB,CAAC;AAAA,EAC/F;AACJ;AAyBA,SAAS,qBAAqB,MAAM,UAAU,SAAS;AACnD,SAAO,IAAIA,sBAAqB,MAAM,IAAI,eAAe,UAAU,OAAO,CAAC;AAC/E;AAEA,IAAM,yBAAN,MAA6B;AAAA,EACzB,YAAY,QAAQ,WAAW;AAC3B,SAAK,oBAAoB;AACzB,SAAK,uBAAuB;AAC5B,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,SAAS;AACL,SAAK,kBAAkB,gBAAgB,KAAK,oBAAoB;AAAA,EACpE;AAAA,EACA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,aAAa,SAAS;AAClB,QAAI,KAAK,wBAAwB,KAAK,qBAAqB,wBAAwB;AAC/E,WAAK,qBAAqB,uBAAuB,OAAO;AAAA,IAC5D;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,SAAK,kBAAkB,gBAAgB,KAAK,oBAAoB;AAAA,EACpE;AACJ;AAEA,IAAM,8BAA8B;AAAA,EAChC,QAAQ;AACZ;AAEA,SAAShB,MAAK,YAAY,OAAO;AAC7B,QAAM,SAAS,KAAK;AAAA,IAAI,KAAK;AAAA,MAAI;AAAA,MAAY;AAAA;AAAA,IAA+B;AAAA,IAAG;AAAA;AAAA,EAA+B,IAAI;AAClH,SAAO,UAAU,MAAM;AAC3B;AACA,SAAS,UAAU,OAAO,cAAc;AACpC,UAAQ,OAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AACD,aAAOA,MAAK,cAAc,CAAC;AAAA,IAC/B,KAAK;AACD,aAAOA,MAAK,cAAc,GAAG;AAAA,IACjC,KAAK;AACD,aAAOA,MAAK,cAAc,GAAG;AAAA,EACrC;AACJ;AACA,SAAS,qBAAqB,YAAY;AACtC,SAAO,WAAWA,MAAK,YAAY,CAAC,CAAC;AACzC;AACA,SAAS,YAAY,YAAY;AAC7B,SAAO,KAAK;AAAA,IAAIA,MAAK,YAAY,GAAG;AAAA,IAAG;AAAA;AAAA,EAAgC;AAC3E;AACA,SAAS,wBAAwB,QAAQ,SAAS,UAAU;AACxD,MAAI,SAAS;AACT,WAAO;AAAA,EACX,WACS,UAAU;AACf,WAAO,KAAK,KAAK,SAAS,CAAC;AAAA,EAC/B;AACA,SAAO;AACX;AAEA,SAAS,UAAU,IAAI,KAAK,QAAQA,OAAM;AACtC,QAAM,YAAY,UAAU,WAAWA,KAAI;AAC3C,QAAM,iBAAkB,YAAY,KAAK,IAAK,OAAO;AACrD,QAAM,WAAW,UAAUA,QAAO,CAAC;AACnC,QAAM,gBAAiB,WAAW,KAAK,IAAK,OAAO;AACnD,MAAI,UAAU;AACd,MAAI,IAAI;AACJ,QAAI,OAAO,OAAO,cAAc,eAAe,OAAO,WAAW;AACjE,QAAI,OAAO,OAAO,aAAa,OAAO,cAAc,aAAa;AACjE,QAAI,OAAO,OAAO,cAAc,eAAe,OAAO,WAAW;AACjE,QAAI,OAAO,OAAO,cAAc,cAAc,OAAO,WAAW;AAChE,QAAI,OAAO,OAAO,cAAc,cAAc,OAAO,cAAc,aAAa;AAChF,QAAI,OAAO,OAAO,cAAc,cAAc,OAAO,cAAc,aAAa;AAChF,QAAI,OAAO,OAAO,cAAc,cAAc,OAAO,WAAW;AAAA,EACpE,OACK;AACD,QAAI,OAAO,OAAO,cAAc,eAAe,OAAO,WAAW;AACjE,QAAI,OAAO,OAAO,aAAa,OAAO,cAAc,aAAa;AACjE,QAAI,OAAO,OAAO,cAAc,eAAe,OAAO,WAAW;AACjE,QAAI,OAAO,OAAO,cAAc,cAAc,OAAO,WAAW;AAChE,QAAI,OAAO,OAAO,cAAc,cAAc,OAAO,cAAc,aAAa;AAChF,QAAI,OAAO,OAAO,cAAc,cAAc,OAAO,cAAc,aAAa;AAChF,QAAI,OAAO,OAAO,cAAc,cAAc,OAAO,WAAW;AAAA,EACpE;AACA,MAAI,KAAK;AACb;AACA,SAAS,aAAa,IAAI,SAAS,SAASA,OAAM,GAAG,GAAG;AACpD,QAAM,YAAY,UAAU,WAAWA,KAAI;AAC3C,QAAM,iBAAiB,YAAY,KAAK;AACxC,QAAM,WAAW,UAAUA,QAAO,CAAC;AACnC,QAAM,gBAAgB,WAAW,KAAK;AACtC,QAAM,oBAAoB;AAC1B,QAAM,gBAAgB;AACtB,QAAM,WAAW,UAAU,eAAe;AAC1C,QAAM,YAAY,UAAU,eAAe;AAC3C,QAAM,UAAU,KAAK,UAAU,UAAU;AACzC,QAAM,aAAa,KAAK,UAAU,gBAAgB;AAClD,MAAI,KAAK,YAAY,KAAK,aACtB,KAAK,UAAU,iBAAiB,KAAK,aAAa,eAAe;AACjE,WAAO;AAAA,EACX;AACA,QAAM,qBAAqB,MAAM;AAC7B,UAAM,WAAW,UAAU,gBAAgB;AAC3C,UAAM,YAAY,UAAU,gBAAgB;AAC5C,UAAM,UAAU,KAAK,UAAU,gBAAgB,oBAAoB;AACnE,UAAM,aAAa,KAAK,UAAU,UAAU,gBAAgB;AAC5D,QAAI,IAAI,YAAY,IAAI,aACpB,IAAI,WAAW,IAAI,YAAY;AAC/B,aAAO;AAAA,IACX;AACA,UAAM,KAAK,KAAK,IAAI,IAAI,OAAO;AAC/B,UAAM,KAAK,KACL,KAAK,IAAI,IAAI,OAAO,IACpB,KAAK,IAAI,IAAI,OAAO;AAC1B,WAAO,KAAK,qBAAqB,KAAK;AAAA,EAC1C;AACA,SAAO,mBAAmB;AAC9B;AAEA,SAAS,WAAW,KAAK,QAAQA,OAAM;AACnC,QAAM,aAAa,UAAU,UAAUA,KAAI;AAC3C,QAAM,YAAY,aAAa,KAAK;AACpC,MAAI,UAAU;AACd,MAAI,IAAI,OAAO,aAAa,OAAO,aAAa,WAAW,OAAO,sBAAsB,GAAG,IAAI,KAAK,IAAI,KAAK;AAC7G,MAAI,KAAK;AACb;AACA,SAAS,cAAc,SAAS,SAASA,OAAM,GAAG,GAAG;AACjD,QAAM,aAAa,UAAU,UAAUA,KAAI;AAC3C,QAAM,YAAY,IAAI,aAAa;AACnC,QAAM,UAAU,UAAU;AAC1B,QAAM,UAAU,UAAU;AAC1B,QAAM,OAAO,KAAK,KAAK,UAAU,UAAU,UAAU,OAAO;AAC5D,SAAO,QAAQ;AACnB;AAEA,SAAS,WAAW,KAAK,QAAQA,OAAM;AACnC,QAAM,aAAa,UAAU,UAAUA,KAAI;AAC3C,QAAM,YAAa,aAAa,KAAK,OAAO,uBAAwB;AACpE,QAAM,OAAO,OAAO,cAAc;AAClC,QAAM,MAAM,OAAO,cAAc;AACjC,MAAI,SAAS,MAAM,KAAK,aAAa,OAAO,sBAAsB,aAAa,OAAO,oBAAoB;AAC9G;AACA,SAAS,cAAc,SAAS,SAASA,OAAM,GAAG,GAAG;AACjD,QAAM,aAAa,UAAU,UAAUA,KAAI;AAC3C,QAAM,YAAY,aAAa,KAAK;AACpC,QAAM,OAAO,UAAU;AACvB,QAAM,MAAM,UAAU;AACtB,SAAO,KAAK,QAAQ,KAAK,OAAO,cAC5B,KAAK,OAAO,KAAK,MAAM;AAC/B;AAEA,SAAS,SAAS,KAAK,MAAM,GAAG,GAAG,sBAAsB,oBAAoB;AACzE,MAAI,KAAK;AACT,MAAI,MAAM,sBAAsB,kBAAkB;AAClD,MAAI,SAAS,MAAM,GAAG,CAAC;AACvB,MAAI,QAAQ;AAChB;AACA,SAAS,YAAY,OAAO,OAAO,WAAW,YAAY,GAAG,GAAG;AAC5D,QAAM,aAAa,aAAa;AAChC,SAAO,KAAK,SAAS,KAAK,QAAQ,aAC9B,KAAK,QAAQ,cAAc,KAAK,QAAQ;AAChD;AAEA,IAAM,wBAAN,MAA4B;AAAA,EACxB,cAAc;AACV,SAAK,iBAAiB;AACtB,SAAK,2BAA2B,IAAI,eAAe;AACnD,SAAK,qBAAqB;AAC1B,SAAK,uBAAuB;AAC5B,SAAK,iBAAiB;AACtB,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,kBAAkB,MAAM;AACpB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,oBAAoB,UAAU,YAAY,QAAQ;AAC9C,QAAI,KAAK,uBAAuB,YAAY,KAAK,yBAAyB,YAAY;AAClF,WAAK,qBAAqB;AAC1B,WAAK,uBAAuB;AAC5B,WAAK,iBAAiB,SAAS,UAAU,UAAU;AACnD,WAAK,yBAAyB,gBAAgB;AAAA,IAClD;AACA,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,kBAAkB,GAAG,GAAG;AACpB,QAAI,KAAK,mBAAmB,QAAQ,KAAK,eAAe,2BAA2B,MAAM;AACrF,aAAO;AAAA,IACX;AACA,aAAS,IAAI,KAAK,eAAe,uBAAuB,MAAM,IAAI,KAAK,eAAe,uBAAuB,IAAI,KAAK;AAClH,YAAM,OAAO,KAAK,eAAe,gBAAgB,CAAC;AAClD,UAAI,QAAQ,YAAY,MAAM,GAAG,CAAC,GAAG;AACjC,eAAO;AAAA,UACH,QAAQ;AAAA,UACR,YAAY,KAAK,wBAAwB;AAAA,QAC7C;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,KAAK,QAAQ;AACT,QAAI,KAAK,qBAAqB,eAAe;AACzC;AAAA,IACJ;AACA,WAAO,yBAAyB,CAAC,UAAU;AACvC,WAAK,oBAAoB,KAAK;AAAA,IAClC,CAAC;AAAA,EACL;AAAA,EACA,eAAe,QAAQ;AACnB,QAAI,KAAK,qBAAqB,eAAe;AACzC;AAAA,IACJ;AACA,WAAO,yBAAyB,CAAC,UAAU;AACvC,WAAK,oBAAoB,KAAK;AAAA,IAClC,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB,EAAE,SAAS,KAAK,sBAAsB,mBAAmB,GAAG;AAC5E,QAAI,KAAK,mBAAmB,QAAQ,KAAK,eAAe,2BAA2B,MAAM;AACrF;AAAA,IACJ;AACA,QAAI,eAAe;AACnB,QAAI,OAAO,KAAK;AAChB,aAAS,QAAQ,KAAK,eAAe,uBAAuB,MAAM,QAAQ,KAAK,eAAe,uBAAuB,IAAI,SAAS;AAC9H,YAAM,OAAO,KAAK,eAAe,gBAAgB,KAAK;AACtD,UAAI,KAAK,mBAAmB,QAAW;AACnC,aAAK,eAAe,kBAAkB,KAAK,yBAAyB,sBAAsB,KAAK,KAAK,eAAe,iBAAiB;AACpI,aAAK,eAAe,mBAAmB,KAAK;AAC5C,aAAK,eAAe,cAAc,KAAK,cAAc,KAAK,eAAe,kBAAkB;AAAA,MAC/F;AACA,eAAS,MAAM,KAAK,sBAAsB,kBAAkB;AAAA,IAChE;AAAA,EACJ;AACJ;AACA,SAAS,2BAA2B,MAAM,sBAAsB,oBAAoB;AAChF,QAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,oBAAoB,CAAC;AAC9D,QAAM,aAAc,YAAY,IAAK;AACrC,SAAO;AAAA,IACH,aAAa,KAAK,MAAM,KAAK,cAAc,oBAAoB,IAAI;AAAA,IACnE,aAAa,KAAK,cAAc;AAAA,IAChC,sBAAsB;AAAA,EAC1B;AACJ;AACA,SAAS,SAAS,MAAM,KAAK,sBAAsB,oBAAoB;AACnE,MAAI,YAAY,KAAK;AACrB,MAAI,KAAK,mBAAmB,QAAW;AACnC,aAAS,KAAK,KAAK,eAAe,mBAAmB,KAAK,eAAe,aAAa,KAAK,eAAe,aAAa,sBAAsB,kBAAkB;AAAA,EACnK;AACA,YAAU,MAAM,KAAK,2BAA2B,MAAM,sBAAsB,kBAAkB,CAAC;AACnG;AACA,SAAS,UAAU,MAAM,KAAK,aAAa;AACvC,MAAI,KAAK,mBAAmB,GAAG;AAC3B;AAAA,EACJ;AACA,UAAQ,KAAK,iBAAiB;AAAA,IAC1B,KAAK;AACD,gBAAU,OAAO,KAAK,aAAa,KAAK,cAAc;AACtD;AAAA,IACJ,KAAK;AACD,gBAAU,MAAM,KAAK,aAAa,KAAK,cAAc;AACrD;AAAA,IACJ,KAAK;AACD,iBAAW,KAAK,aAAa,KAAK,cAAc;AAChD;AAAA,IACJ,KAAK;AACD,iBAAW,KAAK,aAAa,KAAK,cAAc;AAChD;AAAA,EACR;AACA,cAAY,KAAK,eAAe;AACpC;AACA,SAAS,YAAY,MAAM,GAAG,GAAG;AAC7B,MAAI,KAAK,mBAAmB,UAAa,YAAY,KAAK,eAAe,aAAa,KAAK,eAAe,aAAa,KAAK,eAAe,iBAAiB,KAAK,eAAe,kBAAkB,GAAG,CAAC,GAAG;AACrM,WAAO;AAAA,EACX;AACA,SAAO,aAAa,MAAM,GAAG,CAAC;AAClC;AACA,SAAS,aAAa,MAAM,GAAG,GAAG;AAC9B,MAAI,KAAK,mBAAmB,GAAG;AAC3B,WAAO;AAAA,EACX;AACA,UAAQ,KAAK,iBAAiB;AAAA,IAC1B,KAAK;AACD,aAAO,aAAa,MAAM,KAAK,aAAa,KAAK,aAAa,KAAK,gBAAgB,GAAG,CAAC;AAAA,IAC3F,KAAK;AACD,aAAO,aAAa,OAAO,KAAK,aAAa,KAAK,aAAa,KAAK,gBAAgB,GAAG,CAAC;AAAA,IAC5F,KAAK;AACD,aAAO,cAAc,KAAK,aAAa,KAAK,aAAa,KAAK,gBAAgB,GAAG,CAAC;AAAA,IACtF,KAAK;AACD,aAAO,cAAc,KAAK,aAAa,KAAK,aAAa,KAAK,gBAAgB,GAAG,CAAC;AAAA,EAC1F;AACJ;AAEA,SAAS,cAAc,UAAU;AAC7B,SAAO,aAAa,gBAAgB,aAAa,mBAAmB,aAAa;AACrF;AACA,SAAS,SAAS,YAAY,QAAQ;AAClC,MAAI,cAAc,OAAO,QAAQ,KAAK,OAAO,UAAU,QAAW;AAC9D,WAAO,OAAO;AAAA,EAClB;AACA,MAAI,YAAY,UAAU,GAAG;AACzB,WAAO,WAAW;AAAA,EACtB;AACA,MAAI,WAAW,UAAU,GAAG;AACxB,QAAI,OAAO,aAAa,SAAS;AAC7B,aAAO,WAAW;AAAA,IACtB;AACA,QAAI,OAAO,aAAa,YAAY;AAChC,aAAO,WAAW;AAAA,IACtB;AACA,QAAI,OAAO,aAAa,YAAY;AAChC,aAAO,WAAW;AAAA,IACtB;AAAA,EACJ;AACA;AACJ;AAEA,SAAS,aAAa,cAAc,QAAQ,YAAY,SAAS,YAAYiB,cAAa,QAAQ,OAAO;AACrG,QAAM,QAAQ,SAAS,YAAY,MAAM;AACzC,MAAI,UAAU,QAAW;AACrB;AAAA,EACJ;AACA,QAAM,eAAe,cAAc,OAAO,QAAQ;AAClD,QAAM,YAAY,MAAM,UAAU;AAClC,QAAM,iBAAiB,SAAS,OAAO,IAAI,IAAI,KAAK,IAAI,OAAO,MAAM,CAAC,IAAI;AAC1E,QAAMC,aAAY,qBAAqB,UAAU,QAAQ,EAAE,UAAU,IAAI;AACzE,QAAM,WAAWA,aAAY;AAC7B,eAAa,iBAAiBA;AAC9B,QAAM,WAAW,OAAO;AACxB,UAAQ,UAAU;AAAA,IACd,KAAK;AAAA,IACL,KAAK,iBAAiB;AAClB,mBAAa,cAAc,cAAc,OAAO,kBAAkB,KAAK,CAAC;AACxE,UAAI,aAAa,mBAAmB,QAAW;AAC3C,qBAAa,eAAe,cAAc,aAAa,cAAc,WAAWD,eAAc,cAAc,MAAM;AAAA,MACtH;AACA;AAAA,IACJ;AAAA,IACA,KAAK;AAAA,IACL,KAAK,cAAc;AACf,YAAM,SAAS,eAAe,IAAI,QAAQ;AAC1C,mBAAa,cAAe,cAAc,OAAO,kBAAkB,KAAK,CAAC,IAAI,WAAW;AACxF,UAAI,aAAa,mBAAmB,QAAW;AAC3C,qBAAa,eAAe,cAAc,aAAa,cAAc,WAAW,cAAc,MAAM;AACpG,gBAAQ,sBAAsB,cAAc,IAAI,IAAI;AAAA,MACxD;AACA,UAAI,CAAC,cAAc;AACf,gBAAQ,sBAAsBC,aAAYD;AAAA,MAC9C;AACA;AAAA,IACJ;AAAA,IACA,KAAK;AAAA,IACL,KAAK,iBAAiB;AAClB,YAAM,SAAS,eAAe,IAAI,QAAQ;AAC1C,mBAAa,cAAe,cAAc,OAAO,kBAAkB,KAAK,CAAC,IAAI,WAAW;AACxF,UAAI,aAAa,mBAAmB,QAAW;AAC3C,qBAAa,eAAe,cAAe,aAAa,cAAc,WAAWA,eAAc,cAAc,MAAM;AACnH,gBAAQ,sBAAsB,cAAc,IAAI,IAAI;AAAA,MACxD;AACA,UAAI,CAAC,cAAc;AACf,gBAAQ,sBAAsBC,aAAYD;AAAA,MAC9C;AACA;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,SAAS,YAAY,MAAM;AAEvB,SAAO,WAAW,QAAQ,OAAO,KAAK,UAAU;AACpD;AACA,SAAS,WAAW,MAAM;AAEtB,SAAO,UAAU,QAAQ,UAAU,QAAQ,SAAS,QAAQ,WAAW;AAC3E;AACA,IAAM,wBAAN,MAA4B;AAAA,EACxB,YAAY,QAAQ,OAAO,SAAS;AAChC,SAAK,oBAAoB,CAAC;AAC1B,SAAK,wBAAwB;AAC7B,SAAK,4BAA4B;AACjC,SAAK,qBAAqB,IAAI,sBAAsB;AACpD,SAAK,mBAAmB;AACxB,SAAK,kBAAkB;AACvB,SAAK,iBAAiB;AAAA,MAClB,iBAAiB,CAAC;AAAA,MAClB,wBAAwB;AAAA,IAC5B;AACA,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,WAAW;AACP,QAAI,CAAC,KAAK,iBAAiB,QAAQ,EAAE,SAAS;AAC1C,aAAO;AAAA,IACX;AACA,QAAI,KAAK,uBAAuB;AAC5B,WAAK,qBAAqB;AAAA,IAC9B;AACA,UAAM,SAAS,KAAK,gBAAgB,QAAQ,EAAE,QAAQ;AACtD,SAAK,mBAAmB,oBAAoB,OAAO,UAAU,OAAO,YAAY,KAAK,kBAAkB,MAAM;AAC7G,SAAK,mBAAmB,kBAAkB,KAAK,cAAc;AAC7D,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,qBAAqB,SAAS;AAC1B,SAAK,oBAAoB;AACzB,SAAK,iBAAiB,MAAM;AAAA,EAChC;AAAA,EACA,iBAAiB,YAAY;AACzB,SAAK,wBAAwB;AAC7B,QAAI,eAAe,QAAQ;AACvB,WAAK,4BAA4B;AAAA,IACrC;AAAA,EACJ;AAAA,EACA,wBAAwB,SAAS;AAC7B,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,SAAS;AACL,WAAO,KAAK,kBAAkB,WAAW,gBAAgB,QAAQ,KAAK,kBAAkB;AAAA,EAC5F;AAAA,EACA,uBAAuB;AACnB,UAAM,YAAY,KAAK,gBAAgB,UAAU;AACjD,UAAM,gBAAgB,KAAK;AAC3B,QAAI,KAAK,2BAA2B;AAChC,WAAK,eAAe,kBAAkB,cAAc,IAAI,CAAC,YAAY;AAAA,QACjE,gBAAgB,OAAO;AAAA,QACvB,aAAa;AAAA,QACb,aAAa;AAAA,QACb,gBAAgB;AAAA,QAChB,iBAAiB,OAAO;AAAA,QACxB,iBAAiB,OAAO;AAAA,QACxB,sBAAsB,OAAO;AAAA,QAC7B,sBAAsB,OAAO;AAAA,QAC7B,gBAAgB;AAAA,MACpB,EAAE;AACF,WAAK,4BAA4B;AAAA,IACrC;AACA,UAAM,gBAAgB,KAAK,gBAAgB,QAAQ,EAAE,QAAQ;AAC7D,SAAK,eAAe,yBAAyB;AAC7C,UAAM,cAAc,UAAU,uBAAuB;AACrD,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AACA,UAAM,mBAAmB,IAAI,UAAU,KAAK,MAAM,YAAY,IAAI,GAAG,KAAK,KAAK,YAAY,EAAE,CAAC;AAC9F,UAAM,aAAa,KAAK,iBAAiB,KAAK,EAAE,CAAC;AACjD,QAAI,eAAe,MAAM;AACrB;AAAA,IACJ;AACA,QAAI,KAAK,eAAe,gBAAgB,WAAW,GAAG;AAClD;AAAA,IACJ;AACA,QAAI,gBAAgB;AACpB,UAAM,gBAAgB,YAAY,UAAU,QAAQ,EAAE,UAAU;AAChE,UAAM,UAAU;AAAA,MACZ,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,IACxB;AACA,SAAK,eAAe,yBAAyB,mBAAmB,KAAK,eAAe,iBAAiB,kBAAkB,IAAI;AAC3H,aAAS,QAAQ,KAAK,eAAe,uBAAuB,MAAM,QAAQ,KAAK,eAAe,uBAAuB,IAAI,SAAS;AAC9H,YAAM,SAAS,cAAc,KAAK;AAClC,UAAI,OAAO,SAAS,eAAe;AAE/B,gBAAQ,qBAAqB;AAC7B,gBAAQ,qBAAqB;AAC7B,wBAAgB,OAAO;AAAA,MAC3B;AACA,YAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAC9D,mBAAa,cAAc,cAAc,UAAU,oBAAoB,OAAO,IAAI,CAAC;AACnF,UAAI,OAAO,SAAS,UAAa,OAAO,KAAK,SAAS,GAAG;AACrD,qBAAa,iBAAiB;AAAA,UAC1B,mBAAmB,OAAO;AAAA,UAC1B,aAAa;AAAA,UACb,aAAa;AAAA,UACb,iBAAiB;AAAA,UACjB,kBAAkB;AAAA,QACtB;AAAA,MACJ;AACA,YAAM,SAAS,KAAK,iBAAiB;AAAA,QAAY,OAAO;AAAA,QAAM;AAAA;AAAA,MAA8B;AAC5F,UAAI,WAAW,MAAM;AACjB;AAAA,MACJ;AACA,mBAAa,cAAc,QAAQ,QAAQ,SAAS,cAAc,UAAU,eAAe,KAAK,kBAAkB,KAAK,eAAe;AAAA,IAC1I;AACA,SAAK,wBAAwB;AAAA,EACjC;AACJ;AAEA,SAAS,yBAAyB,SAAS;AACvC,SAAO;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,EACP;AACJ;AACA,IAAM,yBAAN,MAA6B;AAAA,EACzB,YAAY,SAAS;AACjB,SAAK,qBAAqB;AAC1B,SAAK,oBAAoB,CAAC;AAC1B,SAAK,2BAA2B,CAAC;AACjC,SAAK,+BAA+B;AACpC,SAAK,mBAAmB;AACxB,SAAK,kBAAkB;AACvB,SAAK,wCAAwC;AAC7C,SAAK,6BAA6B;AAClC,SAAK,6BAA6B;AAClC,SAAK,6BAA6B;AAClC,SAAK,kCAAkC;AACvC,SAAK,oBAAoB,yBAAyB,OAAO;AAAA,EAC7D;AAAA,EACA,SAAS,OAAO;AACZ,SAAK,6BAA6B;AAClC,SAAK,kBAAkB,MAAM;AAC7B,SAAK,mBAAmB,MAAM;AAC9B,SAAK,qBAAqB,IAAI,sBAAsB,KAAK,kBAAkB,cAAc,KAAK,eAAe,GAAG,KAAK,iBAAiB;AACtI,SAAK,0BAA0B,MAAM;AACrC,SAAK,iBAAiB,qBAAqB,CAAC,UAAU,KAAK,wBAAwB,KAAK,CAAC;AACzF,SAAK,kCAAkC;AACvC,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,0BAA0B;AACtB,QAAI,KAAK,yBAAyB;AAC9B,WAAK,wBAAwB;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,WAAW;AACP,QAAI,KAAK,oBAAoB,KAAK,8BAA8B;AAC5D,WAAK,iBAAiB,uBAAuB,KAAK,4BAA4B;AAAA,IAClF;AACA,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,SAAK,qBAAqB;AAC1B,SAAK,+BAA+B;AAAA,EACxC;AAAA,EACA,qBAAqB,SAAS;AAC1B,SAAK,kCAAkC;AACvC,SAAK,oBAAoB;AACzB,SAAK,6BAA6B;AAClC,SAAK,wCAAwC;AAC7C,SAAK,6BAA6B;AAClC,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,YAAY;AACR,WAAO,KAAK,qBAAqB,CAAC,KAAK,kBAAkB,IAAI,CAAC;AAAA,EAClE;AAAA,EACA,iBAAiB;AACb,SAAK,yBAAyB;AAAA,EAClC;AAAA,EACA,QAAQ,GAAG,GAAG;AACV,QAAI,KAAK,oBAAoB;AACzB,aAAO,KAAK,mBAAmB,SAAS,GAAG,kBAAkB,GAAG,CAAC,KAAK;AAAA,IAC1E;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,gBAAgB,cAAc;AACxC,QAAI,KAAK,oBAAoB;AACzB,YAAM,UAAU,KAAK,8BAA8B;AACnD,UAAI,SAAS;AACT,eAAO;AAAA,UACH,YAAY;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,uBAAuB,SAAS;AAC5B,SAAK,oBAAoB,yBAAyB,EAAE,GAAG,KAAK,mBAAmB,GAAG,QAAQ,CAAC;AAC3F,QAAI,KAAK,yBAAyB;AAC9B,WAAK,wBAAwB;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,gCAAgC;AAC5B,UAAM,QAAQ,cAAc,KAAK,eAAe;AAChD,UAAM,aAAa,MAAM,UAAU,EAAE,QAAQ,EAAE;AAC/C,QAAI,KAAK,yCAAyC,eAAe,KAAK,4BAA4B;AAC9F,WAAK,6BAA6B;AAClC,UAAI,KAAK,kBAAkB,SAAS,GAAG;AACnC,cAAM,gBAAgB,YAAY,UAAU;AAC5C,cAAM,cAAc,qBAAqB,UAAU,IAAI,MAAM,gBAAgB;AAC7E,cAAM,YAAY,KAAK,6BAA6B;AACpD,aAAK,6BAA6B;AAAA,UAC9B,OAAO,wBAAwB,aAAa,UAAU,UAAU,UAAU,KAAK;AAAA,UAC/E,OAAO,wBAAwB,aAAa,UAAU,UAAU,UAAU,KAAK;AAAA,QACnF;AAAA,MACJ,OACK;AACD,aAAK,6BAA6B;AAAA,MACtC;AACA,WAAK,wCAAwC;AAAA,IACjD;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,+BAA+B;AAC3B,QAAI,KAAK,+BAA+B,MAAM;AAC1C,WAAK,6BAA6B,KAAK,kBAAkB,OAAO,CAAC,KAAK,WAAW;AAC7E,YAAI,CAAC,IAAI,OAAO,QAAQ,GAAG;AACvB,cAAI,OAAO,QAAQ,IAAI;AAAA,QAC3B;AACA,eAAO;AAAA,MACX,GAAG;AAAA,QACC,OAAO;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,eAAe;AAAA,MACnB,CAAC;AAAA,IACL;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,+BAA+B;AAC3B,QAAI,CAAC,KAAK,mCAAmC,CAAC,KAAK,mBAAmB,CAAC,KAAK,kBAAkB;AAC1F;AAAA,IACJ;AACA,UAAM,YAAY,KAAK,gBAAgB,UAAU;AACjD,UAAM,aAAa,KAAK,kBAAkB,KAAK;AAC/C,QAAI,UAAU,uBAAuB,KAAK,QAAQ,CAAC,KAAK,oBAAoB,WAAW,WAAW,GAAG;AACjG,WAAK,2BAA2B,CAAC;AACjC;AAAA,IACJ;AACA,UAAM,iBAAiB,UAAU,YAAY,cAAc,WAAW,CAAC,EAAE,IAAI,GAAG,IAAI;AACpF,SAAK,2BAA2B,KAAK,kBAAkB,IAAI,CAAC,QAAQ,UAAU;AAC1E,YAAM,iBAAiB,UAAU,YAAY,OAAO,MAAM,IAAI;AAC9D,YAAM,aAAa,iBAAiB,iBAAiB,IAAyC;AAC9F,YAAM,oBAAoB,cAAc,KAAK,gBAAgB,EAAE,YAAY,gBAAgB,UAAU;AACrG,YAAM,aAAa,UAAU,YAAY,cAAc,iBAAiB,EAAE,MAAM,KAAK;AAErF,YAAM,aAAa;AAAA,QACf,MAAM;AAAA,QACN,UAAU,OAAO;AAAA,QACjB,OAAO,OAAO;AAAA,QACd,OAAO,OAAO;AAAA,QACd,IAAI,OAAO;AAAA,QACX,sBAAsB;AAAA,QACtB,MAAM,OAAO;AAAA,QACb,MAAM,OAAO;AAAA,QACb,OAAO,OAAO;AAAA,QACd,wBAAwB,OAAO;AAAA,MACnC;AACA,UAAI,OAAO,aAAa,gBACpB,OAAO,aAAa,mBACpB,OAAO,aAAa,iBAAiB;AACrC,YAAI,OAAO,UAAU,QAAW;AAC5B,gBAAM,IAAI,MAAM,kCAAkC,OAAO,QAAQ,EAAE;AAAA,QACvE;AACA,eAAO;AAAA,UACH,GAAG;AAAA,UACH,UAAU,OAAO;AAAA;AAAA,UACjB,OAAO,OAAO;AAAA,QAClB;AAAA,MACJ,OACK;AACD,eAAO;AAAA,UACH,GAAG;AAAA,UACH,UAAU,OAAO;AAAA;AAAA,UACjB,OAAO,OAAO;AAAA;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,SAAK,kCAAkC;AAAA,EAC3C;AAAA,EACA,yBAAyB,YAAY;AACjC,QAAI,KAAK,oBAAoB;AACzB,WAAK,6BAA6B;AAClC,WAAK,mBAAmB,qBAAqB,KAAK,wBAAwB;AAC1E,WAAK,mBAAmB,wBAAwB,KAAK,iBAAiB;AACtE,WAAK,mBAAmB,iBAAiB,UAAU;AAAA,IACvD;AAAA,EACJ;AAAA,EACA,wBAAwB,OAAO;AAC3B,SAAK,kCAAkC;AACvC,SAAK,wBAAwB;AAAA,EACjC;AACJ;AAEA,IAAM,gCAAN,cAA4C,uBAAuB;AAAA,EAC/D,YAAY,QAAQ,WAAW,SAAS;AACpC,UAAM,QAAQ,SAAS;AACvB,QAAI,SAAS;AACT,WAAK,WAAW,OAAO;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,WAAW,SAAS;AAChB,SAAK,qBAAqB,qBAAqB,OAAO;AAAA,EAC1D;AAAA,EACA,UAAU;AACN,WAAO,KAAK,qBAAqB,kBAAkB;AAAA,EACvD;AACJ;AAgCA,SAAS,oBAAoB,QAAQ,SAAS,SAAS;AACnD,QAAM,UAAU,IAAI,8BAA8B,QAAQ,IAAI,uBAAuB,WAAW,CAAC,CAAC,CAAC;AACnG,MAAI,SAAS;AACT,YAAQ,WAAW,OAAO;AAAA,EAC9B;AACA,SAAO;AACX;AAEA,IAAM,wBAAN,MAA4B;AAAA,EACxB,YAAY,gBAAgB;AACxB,SAAK,oBAAoB,oBAAI,IAAI;AACjC,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,oBAAoB,QAAQ,KAAK,SAAS;AACtC,SAAK,sBAAsB,GAAG;AAC9B,QAAI,YAAY,QAAW;AACvB,YAAM,YAAY,OAAO,WAAW,MAAM;AACtC,aAAK,kBAAkB,OAAO,GAAG;AACjC,aAAK,wBAAwB;AAAA,MACjC,GAAG,OAAO;AACV,YAAM,oBAAoB;AAAA,QACtB,GAAG;AAAA,QACH,qBAAqB;AAAA,QACrB,qBAAqB,KAAK,IAAI,IAAI;AAAA,MACtC;AACA,WAAK,kBAAkB,IAAI,KAAK,iBAAiB;AAAA,IACrD,OACK;AAED,WAAK,kBAAkB,IAAI,KAAK;AAAA,QAC5B,GAAG;AAAA,QACH,qBAAqB;AAAA,QACrB,qBAAqB;AAAA,MACzB,CAAC;AAAA,IACL;AACA,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,sBAAsB,KAAK;AACvB,UAAM,SAAS,KAAK,kBAAkB,IAAI,GAAG;AAC7C,QAAI,UAAU,OAAO,wBAAwB,QAAW;AACpD,aAAO,aAAa,OAAO,mBAAmB;AAAA,IAClD;AACA,SAAK,kBAAkB,OAAO,GAAG;AACjC,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,4BAA4B;AACxB,eAAW,CAAC,KAAK,KAAK,KAAK,mBAAmB;AAC1C,WAAK,sBAAsB,KAAK;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,UAAM,MAAM,KAAK,IAAI;AACrB,UAAM,gBAAgB,CAAC;AACvB,eAAW,CAAC,MAAM,MAAM,KAAK,KAAK,mBAAmB;AACjD,UAAI,CAAC,OAAO,uBAAuB,OAAO,sBAAsB,KAAK;AACjE,sBAAc,KAAK,EAAE,MAAM,OAAO,MAAM,MAAM,OAAO,MAAM,OAAO,OAAO,MAAM,CAAC;AAAA,MACpF,OACK;AACD,aAAK,sBAAsB,IAAI;AAAA,MACnC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,4BAA4B,UAAU;AAClC,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,0BAA0B;AACtB,QAAI,KAAK,0BAA0B;AAC/B,WAAK,yBAAyB;AAAA,IAClC;AAAA,EACJ;AACJ;AAEA,IAAM,oCAAoC;AAAA,EACtC,eAAe;AAAA,EACf,eAAe;AAAA,EACf,0BAA0B;AAC9B;AAEA,IAAM,2BAAN,MAA+B;AAAA,EAC3B,YAAY,MAAM,cAAc,eAAe,eAAe;AAC1D,SAAK,iBAAiB;AACtB,SAAK,yBAAyB;AAC9B,SAAK,0BAA0B;AAC/B,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,KAAK,QAAQ;AACT,WAAO,yBAAyB,CAAC,UAAU;AACvC,YAAM,MAAM,MAAM;AAClB,YAAM,YAAY,KAAK,IAAI,GAAG,KAAK,MAAM,MAAM,oBAAoB,CAAC;AACpE,YAAM,aAAc,YAAY,IAAK;AACrC,YAAM,MAAM,IAA2B,MAAM,qBAAqB;AAClE,WAAK,eAAe,QAAQ,CAAC,SAAS;AAClC,cAAM,UAAU,KAAK,MAAM,KAAK,cAAc,MAAM,oBAAoB,IAAI;AAC5E,YAAI,UAAU;AACd,cAAM,QAAQ,KAAK,mBAAmB,KAAK,cAAc;AACzD,YAAI,YAAY;AAChB,YAAI,IAAI,SAAS,KAAK,cAAc,MAAM,oBAAoB,KAAK,GAAG,IAAI,KAAK,IAAI,KAAK;AACxF,YAAI,KAAK;AACT,YAAI,KAAK,gBAAgB;AACrB,cAAI,cAAc;AAClB,cAAI,YAAY,KAAK,MAAM,IAAmC,MAAM,oBAAoB;AACxF,cAAI,UAAU;AACd,cAAI,QAAQ,KAAK,cAAc,OAAiC,MAAM,uBAAuB,aAAa,KAAK,cAAc,IAAgC,KAAK,kBAC9J,MAAM,kBAAkB;AAC5B,cAAI,OAAO,KAAK,cAAc,MAAM,uBAAuB,aAAa,KAAK,cACzE,IAAgC,KAAK,iBACrC,IAAgC,KAAK,iBAAiB,OACtD,MAAM,kBAAkB;AAC5B,cAAI,QAAQ,KAAK,cAAc,OAAiC,MAAM,uBAAuB,aAAa,KAAK,cAAc,IAAgC,KAAK,kBAC9J,MAAM,kBAAkB;AAC5B,cAAI,OAAO;AAAA,QACf;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EACA,mBAAmB,MAAM;AACrB,QAAI,SAAS,GAAG;AACZ,aAAO,KAAK;AAAA,IAChB;AACA,WAAO,OAAO,IAAI,KAAK,0BAA0B,KAAK;AAAA,EAC1D;AACJ;AAEA,SAAS,mBAAmB,MAAM,YAAY;AAC1C,SAAO,eAAe;AAC1B;AACA,SAAS,gBAAgB,MAAM,YAAY;AACvC,MAAI,mBAAmB,MAAM,UAAU,GAAG;AACtC,WAAO,KAAK;AAAA,EAChB;AACA,SAAO,KAAK;AAChB;AACA,IAAM,2BAAN,MAA+B;AAAA,EAC3B,YAAY,QAAQ,WAAW,SAAS;AACpC,SAAK,iBAAiB,CAAC;AACvB,SAAK,mBAAmB;AACxB,SAAK,sBAAsB;AAC3B,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,iBAAiB,SAAS;AACtB,SAAK,iBAAiB,QAAQ,IAAI,CAAC,WAAW;AAC1C,YAAM,IAAI,KAAK,iBAAiB,kBAAkB,OAAO,KAAK;AAC9D,UAAI,MAAM,MAAM;AACZ,eAAO;AAAA,MACX;AACA,YAAM,IAAI,cAAc,KAAK,oBAAoB,iBAAiB,OAAO,IAAI,CAAC;AAC9E,aAAO;AAAA,QACH,aAAa;AAAA,QACb,aAAa;AAAA,QACb,gBAAgB,OAAO;AAAA,MAC3B;AAAA,IACJ,CAAC,EACI,OAAO,OAAO;AAAA,EACvB;AAAA,EACA,WAAW;AACP,UAAM,UAAU,KAAK,iBAAiB,QAAQ;AAC9C,UAAM,aAAa,KAAK,iBAAiB,WAAW;AACpD,UAAM,eAAe,gBAAgB,SAAS,UAAU;AACxD,WAAO,IAAI,yBAAyB,KAAK,gBAAgB,cAAc,KAAK,kBAAkB,eAAe,KAAK,kBAAkB,aAAa;AAAA,EACrJ;AACJ;AAEA,SAAS,WAAW,MAAM,MAAM;AAC5B,SAAO,SAAS,UAAU,SAAS;AACvC;AACA,IAAM,yBAAN,MAA6B;AAAA,EACzB,YAAY,SAAS;AACjB,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,SAAK,sBAAsB,CAAC;AAC5B,SAAK,8BAA8B;AACnC,SAAK,8BAA8B,oBAAI,IAAI;AAC3C,SAAK,2BAA2B,IAAI,sBAAsB,MAAM,KAAK,wBAAwB,CAAC;AAC9F,SAAK,oBAAoB;AAAA,MACrB,GAAG;AAAA,MACH,GAAG;AAAA,IACP;AAAA,EACJ;AAAA,EACA,uBAAuB,SAAS;AAC5B,SAAK,oBAAoB;AAAA,MACrB,GAAG,KAAK;AAAA,MACR,GAAG;AAAA,IACP;AACA,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,qBAAqB,SAAS;AAC1B,SAAK,yBAAyB,0BAA0B;AACxD,UAAM,gBAAgB,KAAK;AAC3B,QAAI,CAAC,eAAe;AAChB;AAAA,IACJ;AACA,YAAQ,QAAQ,CAAC,WAAW;AACxB,WAAK,yBAAyB,oBAAoB,QAAQ,cAAc,IAAI,OAAO,IAAI,CAAC;AAAA,IAC5F,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,WAAO,KAAK,yBAAyB,qBAAqB;AAAA,EAC9D;AAAA,EACA,0BAA0B;AACtB,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,SAAS,QAAQ;AACb,UAAM,EAAE,OAAO,QAAQ,eAAe,kBAAmB,IAAI;AAC7D,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,SAAK,8BAA8B;AACnC,UAAM,aAAa,KAAK,iBAAiB,WAAW;AACpD,QAAI,eAAe,UAAU,eAAe,QAAQ;AAChD,YAAM,IAAI,MAAM,yEAAyE;AAAA,IAC7F;AACA,SAAK,sBAAsB;AAAA,MACvB,IAAI,yBAAyB,KAAK,kBAAkB,KAAK,gBAAgB,UAAU,GAAG,KAAK,iBAAiB;AAAA,IAChH;AACA,SAAK,0BAA0B;AAC/B,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,WAAW;AACP,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,SAAK,0BAA0B;AAAA,EACnC;AAAA,EACA,kBAAkB;AACd,WAAO,cAAc,KAAK,eAAe;AAAA,EAC7C;AAAA,EACA,mBAAmB;AACf,WAAO,cAAc,KAAK,gBAAgB;AAAA,EAC9C;AAAA,EACA,iBAAiB;AACb,SAAK,oBAAoB,QAAQ,CAAC,OAAO,GAAG,iBAAiB,KAAK,kBAAkB,CAAC,CAAC;AAAA,EAC1F;AAAA,EACA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB,MAAM;AACpB,QAAI,CAAC,KAAK,kBAAkB;AACxB,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACtD;AACA,UAAM,aAAa,KAAK,iBAAiB,WAAW;AACpD,SAAK,4BAA4B,MAAM;AACvC,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACf,WAAK,QAAQ,CAAC,MAAM;AAChB,YAAI,gBAAgB,CAAC,KAAK,WAAW,GAAG,UAAU,GAAG;AACjD,eAAK,4BAA4B,IAAI,cAAc,IAAI,EAAE,IAAI,GAAG,EAAE,KAAK;AAAA,QAC3E;AAAA,MACJ,CAAC;AAAA,IACL;AACA,kBAAc,KAAK,gBAAgB,EAAE,QAAQ,IAAI;AAAA,EACrD;AAAA,EACA,iBAAiB,MAAM,kBAAkB;AACrC,QAAI,CAAC,KAAK,oBAAoB,CAAC,KAAK,6BAA6B;AAC7D,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACtD;AACA,UAAM,aAAa,KAAK,iBAAiB,WAAW;AACpD,UAAM,UAAU,KAAK,4BAA4B,IAAI,KAAK,IAAI;AAC9D,QAAI,iBAAiB,IAAI,GAAG;AACxB,WAAK,4BAA4B,OAAO,OAAO;AAAA,IACnD;AACA,QAAI,gBAAgB,IAAI,KAAK,WAAW,MAAM,UAAU,GAAG;AACvD,YAAM,gBAAgB,KAAK,4BAA4B,IAAI,OAAO;AAClE,UAAI,eAAe;AACf,aAAK,yBAAyB,oBAAoB;AAAA,UAC9C,MAAM,KAAK;AAAA,UACX,OAAO,KAAK;AAAA,UACZ,MAAM,QAAQ,KAAK,OAAO,aAAa;AAAA,QAC3C,GAAG,SAAS,KAAK,kBAAkB,wBAAwB;AAAA,MAC/D;AAAA,IACJ;AACA,kBAAc,KAAK,gBAAgB,EAAE,OAAO,MAAM,gBAAgB;AAAA,EACtE;AAAA,EACA,yBAAyB;AACrB,SAAK,yBAAyB,0BAA0B;AAAA,EAC5D;AACJ;AACA,SAAS,QAAQ,UAAU,UAAU;AACjC,MAAI,aAAa,UAAU;AACvB,WAAO;AAAA,EACX;AACA,SAAO,WAAW,WAAW,IAAI,IAAI;AACzC;AAEA,IAAM,qCAAN,cAAiD,uBAAuB;AAAA,EACpE,QAAQ,MAAM;AACV,WAAO,KAAK,qBAAqB,kBAAkB,IAAI;AAAA,EAC3D;AAAA,EACA,OAAO,MAAM,kBAAkB;AAC3B,WAAO,KAAK,qBAAqB,iBAAiB,MAAM,gBAAgB;AAAA,EAC5E;AAAA,EACA,UAAU;AACN,WAAO,KAAK,qBAAqB,kBAAkB;AAAA,EACvD;AAAA,EACA,WAAW,SAAS;AAChB,WAAO,KAAK,qBAAqB,qBAAqB,OAAO;AAAA,EACjE;AAAA,EACA,eAAe;AACX,WAAO,KAAK,qBAAqB,uBAAuB;AAAA,EAC5D;AACJ;AAiCA,SAAS,oBAAoB,QAAQ,UAAU,CAAC,GAAG;AAC/C,QAAM,UAAU,IAAI,mCAAmC,QAAQ,IAAI,uBAAuB,OAAO,CAAC;AAClG,SAAO;AACX;AAGA,IAAM,6BAA6B;AAAA,EAC/B,GAAG;AAAA,EACH,GAAG;AACP;AAIA,SAAS,UAAU;AACf,SAAO;AACX;",
  "names": ["Observable", "DevicePixelContentBoxBinding", "size", "entry", "CanvasRenderingTarget2D", "LineType", "LineStyle", "size", "radius", "CrosshairMode", "optimizationReplacementRe", "MismatchDirection", "min", "createPaneView", "PriceScaleMode", "TrackingModeExitMode", "LastPriceAnimationMode", "PriceLineSource", "ColorType", "TickMarkType", "add", "finishStyledArea", "currentItem", "PanePrimitiveWrapper", "shapeMargin", "shapeSize"]
}
